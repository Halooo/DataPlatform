/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		1:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"0":"DataPlatform"}[chunkId]||chunkId) + ".min.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(9);
	__webpack_require__(2);
	__webpack_require__(306);
	__webpack_require__(307);
	__webpack_require__(308);
	__webpack_require__(310);
	__webpack_require__(311);
	__webpack_require__(4);
	__webpack_require__(109);
	__webpack_require__(210);
	__webpack_require__(240);
	__webpack_require__(250);
	__webpack_require__(199);
	module.exports = __webpack_require__(206);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * Vue.js v1.0.17
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Vue=e()}(this,function(){"use strict";function t(e,n,r){if(i(e,n))return void(e[n]=r);if(e._isVue)return void t(e._data,n,r);var s=e.__ob__;if(!s)return void(e[n]=r);if(s.convert(n,r),s.dep.notify(),s.vms)for(var o=s.vms.length;o--;){var a=s.vms[o];a._proxy(n),a._digest()}return r}function e(t,e){if(i(t,e)){delete t[e];var n=t.__ob__;if(n&&(n.dep.notify(),n.vms))for(var r=n.vms.length;r--;){var s=n.vms[r];s._unproxy(e),s._digest()}}}function i(t,e){return yi.call(t,e)}function n(t){return Ci.test(t)}function r(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function s(t){return null==t?"":t.toString()}function o(t){if("string"!=typeof t)return t;var e=Number(t);return isNaN(e)?t:e}function a(t){return"true"===t?!0:"false"===t?!1:t}function h(t){var e=t.charCodeAt(0),i=t.charCodeAt(t.length-1);return e!==i||34!==e&&39!==e?t:t.slice(1,-1)}function l(t){return t.replace(wi,c)}function c(t,e){return e?e.toUpperCase():""}function u(t){return t.replace($i,"$1-$2").toLowerCase()}function f(t){return t.replace(ki,c)}function p(t,e){return function(i){var n=arguments.length;return n?n>1?t.apply(e,arguments):t.call(e,i):t.call(e)}}function d(t,e){e=e||0;for(var i=t.length-e,n=new Array(i);i--;)n[i]=t[i+e];return n}function v(t,e){for(var i=Object.keys(e),n=i.length;n--;)t[i[n]]=e[i[n]];return t}function m(t){return null!==t&&"object"==typeof t}function g(t){return xi.call(t)===Ai}function _(t,e,i,n){Object.defineProperty(t,e,{value:i,enumerable:!!n,writable:!0,configurable:!0})}function b(t,e){var i,n,r,s,o,a=function h(){var a=Date.now()-s;e>a&&a>=0?i=setTimeout(h,e-a):(i=null,o=t.apply(r,n),i||(r=n=null))};return function(){return r=this,n=arguments,s=Date.now(),i||(i=setTimeout(a,e)),o}}function y(t,e){for(var i=t.length;i--;)if(t[i]===e)return i;return-1}function C(t){var e=function i(){return i.cancelled?void 0:t.apply(this,arguments)};return e.cancel=function(){e.cancelled=!0},e}function w(t,e){return t==e||(m(t)&&m(e)?JSON.stringify(t)===JSON.stringify(e):!1)}function $(t){this.size=0,this.limit=t,this.head=this.tail=void 0,this._keymap=Object.create(null)}function k(){var t,e=Vi.slice(Qi,qi).trim();if(e){t={};var i=e.match(en);t.name=i[0],i.length>1&&(t.args=i.slice(1).map(x))}t&&(zi.filters=zi.filters||[]).push(t),Qi=qi+1}function x(t){if(nn.test(t))return{value:o(t),dynamic:!1};var e=h(t),i=e===t;return{value:i?t:e,dynamic:i}}function A(t){var e=tn.get(t);if(e)return e;for(Vi=t,Gi=Ki=!1,Zi=Xi=Yi=0,Qi=0,zi={},qi=0,Ji=Vi.length;Ji>qi;qi++)if(Ui=Ii,Ii=Vi.charCodeAt(qi),Gi)39===Ii&&92!==Ui&&(Gi=!Gi);else if(Ki)34===Ii&&92!==Ui&&(Ki=!Ki);else if(124===Ii&&124!==Vi.charCodeAt(qi+1)&&124!==Vi.charCodeAt(qi-1))null==zi.expression?(Qi=qi+1,zi.expression=Vi.slice(0,qi).trim()):k();else switch(Ii){case 34:Ki=!0;break;case 39:Gi=!0;break;case 40:Yi++;break;case 41:Yi--;break;case 91:Xi++;break;case 93:Xi--;break;case 123:Zi++;break;case 125:Zi--}return null==zi.expression?zi.expression=Vi.slice(0,qi).trim():0!==Qi&&k(),tn.put(t,zi),zi}function O(t){return t.replace(sn,"\\$&")}function T(){var t=O(pn.delimiters[0]),e=O(pn.delimiters[1]),i=O(pn.unsafeDelimiters[0]),n=O(pn.unsafeDelimiters[1]);an=new RegExp(i+"(.+?)"+n+"|"+t+"(.+?)"+e,"g"),hn=new RegExp("^"+i+".*"+n+"$"),on=new $(1e3)}function N(t){on||T();var e=on.get(t);if(e)return e;if(t=t.replace(/\n/g,""),!an.test(t))return null;for(var i,n,r,s,o,a,h=[],l=an.lastIndex=0;i=an.exec(t);)n=i.index,n>l&&h.push({value:t.slice(l,n)}),r=hn.test(i[0]),s=r?i[1]:i[2],o=s.charCodeAt(0),a=42===o,s=a?s.slice(1):s,h.push({tag:!0,value:s.trim(),html:r,oneTime:a}),l=n+i[0].length;return l<t.length&&h.push({value:t.slice(l)}),on.put(t,h),h}function j(t,e){return t.length>1?t.map(function(t){return E(t,e)}).join("+"):E(t[0],e,!0)}function E(t,e,i){return t.tag?t.oneTime&&e?'"'+e.$eval(t.value)+'"':S(t.value,i):'"'+t.value+'"'}function S(t,e){if(ln.test(t)){var i=A(t);return i.filters?"this._applyFilters("+i.expression+",null,"+JSON.stringify(i.filters)+",false)":"("+t+")"}return e?t:"("+t+")"}function F(t,e,i,n){R(t,1,function(){e.appendChild(t)},i,n)}function P(t,e,i,n){R(t,1,function(){V(t,e)},i,n)}function D(t,e,i){R(t,-1,function(){I(t)},e,i)}function R(t,e,i,n,r){var s=t.__v_trans;if(!s||!s.hooks&&!Di||!n._isCompiled||n.$parent&&!n.$parent._isCompiled)return i(),void(r&&r());var o=e>0?"enter":"leave";s[o](i,r)}function H(t){if("string"==typeof t){t=document.querySelector(t)}return t}function L(t){var e=document.documentElement,i=t&&t.parentNode;return e===t||e===i||!(!i||1!==i.nodeType||!e.contains(i))}function M(t,e){var i=t.getAttribute(e);return null!==i&&t.removeAttribute(e),i}function W(t,e){var i=M(t,":"+e);return null===i&&(i=M(t,"v-bind:"+e)),i}function B(t,e){return t.hasAttribute(e)||t.hasAttribute(":"+e)||t.hasAttribute("v-bind:"+e)}function V(t,e){e.parentNode.insertBefore(t,e)}function z(t,e){e.nextSibling?V(t,e.nextSibling):e.parentNode.appendChild(t)}function I(t){t.parentNode.removeChild(t)}function U(t,e){e.firstChild?V(t,e.firstChild):e.appendChild(t)}function q(t,e){var i=t.parentNode;i&&i.replaceChild(e,t)}function J(t,e,i,n){t.addEventListener(e,i,n)}function Q(t,e,i){t.removeEventListener(e,i)}function G(t,e){Si&&!/svg$/.test(t.namespaceURI)?t.className=e:t.setAttribute("class",e)}function K(t,e){if(t.classList)t.classList.add(e);else{var i=" "+(t.getAttribute("class")||"")+" ";i.indexOf(" "+e+" ")<0&&G(t,(i+e).trim())}}function Z(t,e){if(t.classList)t.classList.remove(e);else{for(var i=" "+(t.getAttribute("class")||"")+" ",n=" "+e+" ";i.indexOf(n)>=0;)i=i.replace(n," ");G(t,i.trim())}t.className||t.removeAttribute("class")}function X(t,e){var i,n;if(et(t)&&ot(t.content)&&(t=t.content),t.hasChildNodes())for(Y(t),n=e?document.createDocumentFragment():document.createElement("div");i=t.firstChild;)n.appendChild(i);return n}function Y(t){for(var e;e=t.firstChild,tt(e);)t.removeChild(e);for(;e=t.lastChild,tt(e);)t.removeChild(e)}function tt(t){return t&&(3===t.nodeType&&!t.data.trim()||8===t.nodeType)}function et(t){return t.tagName&&"template"===t.tagName.toLowerCase()}function it(t,e){var i=pn.debug?document.createComment(t):document.createTextNode(e?" ":"");return i.__v_anchor=!0,i}function nt(t){if(t.hasAttributes())for(var e=t.attributes,i=0,n=e.length;n>i;i++){var r=e[i].name;if(mn.test(r))return l(r.replace(mn,""))}}function rt(t,e,i){for(var n;t!==e;)n=t.nextSibling,i(t),t=n;i(e)}function st(t,e,i,n,r){function s(){if(a++,o&&a>=h.length){for(var t=0;t<h.length;t++)n.appendChild(h[t]);r&&r()}}var o=!1,a=0,h=[];rt(t,e,function(t){t===e&&(o=!0),h.push(t),D(t,i,s)})}function ot(t){return t&&11===t.nodeType}function at(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}function ht(t,e){var i=t.tagName.toLowerCase(),n=t.hasAttributes();if(gn.test(i)||_n.test(i)){if(n)return lt(t)}else{if(bt(e,"components",i))return{id:i};var r=n&&lt(t);if(r)return r}}function lt(t){var e=M(t,"is");return null!=e?{id:e}:(e=W(t,"is"),null!=e?{id:e,dynamic:!0}:void 0)}function ct(t,e,i){var n=e.path;i=ft(e,i),t[n]=t._data[n]=ut(e,i)?i:void 0}function ut(t,e){if(!t.options.required&&(null===t.raw||null==e))return!0;var i,n=t.options,r=n.type,s=!0;if(r&&(r===String?(i="string",s=typeof e===i):r===Number?(i="number",s="number"==typeof e):r===Boolean?(i="boolean",s="boolean"==typeof e):r===Function?(i="function",s="function"==typeof e):r===Object?(i="object",s=g(e)):r===Array?(i="array",s=Oi(e)):s=e instanceof r),!s)return!1;var o=n.validator;return!o||o(e)}function ft(t,e){var i=t.options.coerce;return i?i(e):e}function pt(e,n){var r,s,o;for(r in n)s=e[r],o=n[r],i(e,r)?m(s)&&m(o)&&pt(s,o):t(e,r,o);return e}function dt(t,e){var i=Object.create(t);return e?v(i,gt(e)):i}function vt(t){if(t.components)for(var e,i=t.components=gt(t.components),n=Object.keys(i),r=0,s=n.length;s>r;r++){var o=n[r];gn.test(o)||_n.test(o)||(e=i[o],g(e)&&(i[o]=di.extend(e)))}}function mt(t){var e,i,n=t.props;if(Oi(n))for(t.props={},e=n.length;e--;)i=n[e],"string"==typeof i?t.props[i]=null:i.name&&(t.props[i.name]=i);else if(g(n)){var r=Object.keys(n);for(e=r.length;e--;)i=n[r[e]],"function"==typeof i&&(n[r[e]]={type:i})}}function gt(t){if(Oi(t)){for(var e,i={},n=t.length;n--;){e=t[n];var r="function"==typeof e?e.options&&e.options.name||e.id:e.name||e.id;r&&(i[r]=e)}return i}return t}function _t(t,e,n){function r(i){var r=bn[i]||yn;o[i]=r(t[i],e[i],n,i)}vt(e),mt(e);var s,o={};if(e.mixins)for(var a=0,h=e.mixins.length;h>a;a++)t=_t(t,e.mixins[a],n);for(s in t)r(s);for(s in e)i(t,s)||r(s);return o}function bt(t,e,i){if("string"==typeof i){var n,r=t[e];return r[i]||r[n=l(i)]||r[n.charAt(0).toUpperCase()+n.slice(1)]}}function yt(t,e,i){}function Ct(){this.id=Cn++,this.subs=[]}function wt(t){if(this.value=t,this.dep=new Ct,_(t,"__ob__",this),Oi(t)){var e=Ti?$t:kt;e(t,$n,kn),this.observeArray(t)}else this.walk(t)}function $t(t,e){t.__proto__=e}function kt(t,e,i){for(var n=0,r=i.length;r>n;n++){var s=i[n];_(t,s,e[s])}}function xt(t,e){if(t&&"object"==typeof t){var n;return i(t,"__ob__")&&t.__ob__ instanceof wt?n=t.__ob__:(Oi(t)||g(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new wt(t)),n&&e&&n.addVm(e),n}}function At(t,e,i){var n=new Ct,r=Object.getOwnPropertyDescriptor(t,e);if(!r||r.configurable!==!1){var s=r&&r.get,o=r&&r.set,a=xt(i);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):i;if(Ct.target&&(n.depend(),a&&a.dep.depend(),Oi(e)))for(var r,o=0,h=e.length;h>o;o++)r=e[o],r&&r.__ob__&&r.__ob__.dep.depend();return e},set:function(e){var r=s?s.call(t):i;e!==r&&(o?o.call(t,e):i=e,a=xt(e),n.notify())}})}}function Ot(t){t.prototype._init=function(t){t=t||{},this.$el=null,this.$parent=t.parent,this.$root=this.$parent?this.$parent.$root:this,this.$children=[],this.$refs={},this.$els={},this._watchers=[],this._directives=[],this._uid=An++,this._isVue=!0,this._events={},this._eventsCount={},this._isFragment=!1,this._fragment=this._fragmentStart=this._fragmentEnd=null,this._isCompiled=this._isDestroyed=this._isReady=this._isAttached=this._isBeingDestroyed=this._vForRemoving=!1,this._unlinkFn=null,this._context=t._context||this.$parent,this._scope=t._scope,this._frag=t._frag,this._frag&&this._frag.children.push(this),this.$parent&&this.$parent.$children.push(this),t=this.$options=_t(this.constructor.options,t,this),this._updateRef(),this._data={},this._callHook("init"),this._initState(),this._initEvents(),this._callHook("created"),t.el&&this.$mount(t.el)}}function Tt(t){if(void 0===t)return"eof";var e=t.charCodeAt(0);switch(e){case 91:case 93:case 46:case 34:case 39:case 48:return t;case 95:case 36:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return e>=97&&122>=e||e>=65&&90>=e?"ident":e>=49&&57>=e?"number":"else"}function Nt(t){var e=t.trim();return"0"===t.charAt(0)&&isNaN(t)?!1:n(e)?h(e):"*"+e}function jt(t){function e(){var e=t[c+1];return u===Hn&&"'"===e||u===Ln&&'"'===e?(c++,n="\\"+e,p[Tn](),!0):void 0}var i,n,r,s,o,a,h,l=[],c=-1,u=Sn,f=0,p=[];for(p[Nn]=function(){void 0!==r&&(l.push(r),r=void 0)},p[Tn]=function(){void 0===r?r=n:r+=n},p[jn]=function(){p[Tn](),f++},p[En]=function(){if(f>0)f--,u=Rn,p[Tn]();else{if(f=0,r=Nt(r),r===!1)return!1;p[Nn]()}};null!=u;)if(c++,i=t[c],"\\"!==i||!e()){if(s=Tt(i),h=Bn[u],o=h[s]||h["else"]||Wn,o===Wn)return;if(u=o[0],a=p[o[1]],a&&(n=o[2],n=void 0===n?i:n,a()===!1))return;if(u===Mn)return l.raw=t,l}}function Et(t){var e=On.get(t);return e||(e=jt(t),e&&On.put(t,e)),e}function St(t,e){return Wt(e).get(t)}function Ft(e,i,n){var r=e;if("string"==typeof i&&(i=jt(i)),!i||!m(e))return!1;for(var s,o,a=0,h=i.length;h>a;a++)s=e,o=i[a],"*"===o.charAt(0)&&(o=Wt(o.slice(1)).get.call(r,r)),h-1>a?(e=e[o],m(e)||(e={},t(s,o,e))):Oi(e)?e.$set(o,n):o in e?e[o]=n:t(e,o,n);return!0}function Pt(t,e){var i=er.length;return er[i]=e?t.replace(Gn,"\\n"):t,'"'+i+'"'}function Dt(t){var e=t.charAt(0),i=t.slice(1);return Un.test(i)?t:(i=i.indexOf('"')>-1?i.replace(Zn,Rt):i,e+"scope."+i)}function Rt(t,e){return er[e]}function Ht(t){Jn.test(t),er.length=0;var e=t.replace(Kn,Pt).replace(Qn,"");return e=(" "+e).replace(Yn,Dt).replace(Zn,Rt),Lt(e)}function Lt(t){try{return new Function("scope","return "+t+";")}catch(e){}}function Mt(t){var e=Et(t);return e?function(t,i){Ft(t,e,i)}:void 0}function Wt(t,e){t=t.trim();var i=zn.get(t);if(i)return e&&!i.set&&(i.set=Mt(i.exp)),i;var n={exp:t};return n.get=Bt(t)&&t.indexOf("[")<0?Lt("scope."+t):Ht(t),e&&(n.set=Mt(t)),zn.put(t,n),n}function Bt(t){return Xn.test(t)&&!tr.test(t)&&"Math."!==t.slice(0,5)}function Vt(){nr=[],rr=[],sr={},or={},ar=hr=!1}function zt(){It(nr),hr=!0,It(rr),ji&&ji.emit("flush"),Vt()}function It(t){for(var e=0;e<t.length;e++){var i=t[e],n=i.id;sr[n]=null,i.run()}}function Ut(t){var e=t.id;if(null==sr[e]){if(hr&&!t.user)return void t.run();var i=t.user?rr:nr;sr[e]=i.length,i.push(t),ar||(ar=!0,Wi(zt))}}function qt(t,e,i,n){n&&v(this,n);var r="function"==typeof e;if(this.vm=t,t._watchers.push(this),this.expression=r?e.toString():e,this.cb=i,this.id=++lr,this.active=!0,this.dirty=this.lazy,this.deps=Object.create(null),this.newDeps=null,this.prevError=null,r)this.getter=e,this.setter=void 0;else{var s=Wt(e,this.twoWay);this.getter=s.get,this.setter=s.set}this.value=this.lazy?void 0:this.get(),this.queued=this.shallow=!1}function Jt(t){var e,i;if(Oi(t))for(e=t.length;e--;)Jt(t[e]);else if(m(t))for(i=Object.keys(t),e=i.length;e--;)Jt(t[i[e]])}function Qt(t){return et(t)&&ot(t.content)}function Gt(t,e){var i=e?t:t.trim(),n=ur.get(i);if(n)return n;var r=document.createDocumentFragment(),s=t.match(dr),o=vr.test(t);if(s||o){var a=s&&s[1],h=pr[a]||pr.efault,l=h[0],c=h[1],u=h[2],f=document.createElement("div");for(f.innerHTML=c+t+u;l--;)f=f.lastChild;for(var p;p=f.firstChild;)r.appendChild(p)}else r.appendChild(document.createTextNode(t));return e||Y(r),ur.put(i,r),r}function Kt(t){if(Qt(t))return Y(t.content),t.content;if("SCRIPT"===t.tagName)return Gt(t.textContent);for(var e,i=Zt(t),n=document.createDocumentFragment();e=i.firstChild;)n.appendChild(e);return Y(n),n}function Zt(t){if(!t.querySelectorAll)return t.cloneNode();var e,i,n,r=t.cloneNode(!0);if(mr){var s=r;if(Qt(t)&&(t=t.content,s=r.content),i=t.querySelectorAll("template"),i.length)for(n=s.querySelectorAll("template"),e=n.length;e--;)n[e].parentNode.replaceChild(Zt(i[e]),n[e])}if(gr)if("TEXTAREA"===t.tagName)r.value=t.value;else if(i=t.querySelectorAll("textarea"),i.length)for(n=r.querySelectorAll("textarea"),e=n.length;e--;)n[e].value=i[e].value;return r}function Xt(t,e,i){var n,r;return ot(t)?(Y(t),e?Zt(t):t):("string"==typeof t?i||"#"!==t.charAt(0)?r=Gt(t,i):(r=fr.get(t),r||(n=document.getElementById(t.slice(1)),n&&(r=Kt(n),fr.put(t,r)))):t.nodeType&&(r=Kt(t)),r&&e?Zt(r):r)}function Yt(t,e,i,n,r,s){this.children=[],this.childFrags=[],this.vm=e,this.scope=r,this.inserted=!1,this.parentFrag=s,s&&s.childFrags.push(this),this.unlink=t(e,i,n,r,this);var o=this.single=1===i.childNodes.length&&!i.childNodes[0].__v_anchor;o?(this.node=i.childNodes[0],this.before=te,this.remove=ee):(this.node=it("fragment-start"),this.end=it("fragment-end"),this.frag=i,U(this.node,i),i.appendChild(this.end),this.before=ie,this.remove=ne),this.node.__v_frag=this}function te(t,e){this.inserted=!0;var i=e!==!1?P:V;i(this.node,t,this.vm),L(this.node)&&this.callHook(re)}function ee(){this.inserted=!1;var t=L(this.node),e=this;this.beforeRemove(),D(this.node,this.vm,function(){t&&e.callHook(se),e.destroy()})}function ie(t,e){this.inserted=!0;var i=this.vm,n=e!==!1?P:V;rt(this.node,this.end,function(e){n(e,t,i)}),L(this.node)&&this.callHook(re)}function ne(){this.inserted=!1;var t=this,e=L(this.node);this.beforeRemove(),st(this.node,this.end,this.vm,this.frag,function(){e&&t.callHook(se),t.destroy()})}function re(t){t._isAttached||t._callHook("attached")}function se(t){t._isAttached&&t._callHook("detached")}function oe(t,e){this.vm=t;var i,n="string"==typeof e;n||et(e)?i=Xt(e,!0):(i=document.createDocumentFragment(),i.appendChild(e)),this.template=i;var r,s=t.constructor.cid;if(s>0){var o=s+(n?e:at(e));r=yr.get(o),r||(r=Te(i,t.$options,!0),yr.put(o,r))}else r=Te(i,t.$options,!0);this.linker=r}function ae(t,e,i){var n=t.node.previousSibling;if(n){for(t=n.__v_frag;!(t&&t.forId===i&&t.inserted||n===e);){if(n=n.previousSibling,!n)return;t=n.__v_frag}return t}}function he(t){var e=t.node;if(t.end)for(;!e.__vue__&&e!==t.end&&e.nextSibling;)e=e.nextSibling;return e.__vue__}function le(t){for(var e=-1,i=new Array(Math.floor(t));++e<t;)i[e]=e;return i}function ce(t,e,i){for(var n,r,s,o=e?[]:null,a=0,h=t.options.length;h>a;a++)if(n=t.options[a],s=i?n.hasAttribute("selected"):n.selected){if(r=n.hasOwnProperty("_value")?n._value:n.value,!e)return r;o.push(r)}return o}function ue(t,e){for(var i=t.length;i--;)if(w(t[i],e))return i;return-1}function fe(t,e){var i=e.map(function(t){var e=t.charCodeAt(0);return e>47&&58>e?parseInt(t,10):1===t.length&&(e=t.toUpperCase().charCodeAt(0),e>64&&91>e)?e:Br[t]});return i=[].concat.apply([],i),function(e){return i.indexOf(e.keyCode)>-1?t.call(this,e):void 0}}function pe(t){return function(e){return e.stopPropagation(),t.call(this,e)}}function de(t){return function(e){return e.preventDefault(),t.call(this,e)}}function ve(t){return function(e){return e.target===e.currentTarget?t.call(this,e):void 0}}function me(t){if(qr[t])return qr[t];var e=ge(t);return qr[t]=qr[e]=e,e}function ge(t){t=u(t);var e=l(t),i=e.charAt(0).toUpperCase()+e.slice(1);Jr||(Jr=document.createElement("div"));for(var n,r=zr.length;r--;)if(n=Ir[r]+i,n in Jr.style)return zr[r]+t;return e in Jr.style?t:void 0}function _e(t){for(var e={},i=t.trim().split(/\s+/),n=i.length;n--;)e[i[n]]=!0;return e}function be(t,e){return Oi(t)?t.indexOf(e)>-1:i(t,e)}function ye(t,e,i){function n(){++s>=r?i():t[s].call(e,n)}var r=t.length,s=0;t[0].call(e,n)}function Ce(t){cs.push(t),us||(us=!0,Wi(we))}function we(){for(var t=document.documentElement.offsetHeight,e=0;e<cs.length;e++)cs[e]();return cs=[],us=!1,t}function $e(t,e,i,n){this.id=e,this.el=t,this.enterClass=i&&i.enterClass||e+"-enter",this.leaveClass=i&&i.leaveClass||e+"-leave",this.hooks=i,this.vm=n,this.pendingCssEvent=this.pendingCssCb=this.cancel=this.pendingJsCb=this.op=this.cb=null,this.justEntered=!1,this.entered=this.left=!1,this.typeCache={},this.type=i&&i.type;var r=this;["enterNextTick","enterDone","leaveNextTick","leaveDone"].forEach(function(t){r[t]=p(r[t],r)})}function ke(t){if(/svg$/.test(t.namespaceURI)){var e=t.getBoundingClientRect();return!(e.width||e.height)}return!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)}function xe(t,e){for(var i,r,s,o,a,h,c,f=[],p=Object.keys(e),d=p.length;d--;)r=p[d],i=e[r]||ys,a=l(r),Cs.test(a)&&(c={name:r,path:a,options:i,mode:bs.ONE_WAY,raw:null},s=u(r),null===(o=W(t,s))&&(null!==(o=W(t,s+".sync"))?c.mode=bs.TWO_WAY:null!==(o=W(t,s+".once"))&&(c.mode=bs.ONE_TIME)),null!==o?(c.raw=o,h=A(o),o=h.expression,c.filters=h.filters,n(o)&&!h.filters?c.optimizedLiteral=!0:c.dynamic=!0,c.parentPath=o):null!==(o=M(t,s))&&(c.raw=o),f.push(c));return Ae(f)}function Ae(t){return function(e,i){e._props={};for(var n,r,s,l,c,u=t.length;u--;)if(n=t[u],c=n.raw,r=n.path,s=n.options,e._props[r]=n,null===c)ct(e,n,Oe(e,s));else if(n.dynamic)n.mode===bs.ONE_TIME?(l=(i||e._context||e).$get(n.parentPath),ct(e,n,l)):e._context?e._bindDir({name:"prop",def:ls,prop:n},null,null,i):ct(e,n,e.$get(n.parentPath));else if(n.optimizedLiteral){var f=h(c);l=f===c?a(o(c)):f,ct(e,n,l)}else l=s.type===Boolean&&""===c?!0:c,ct(e,n,l)}}function Oe(t,e){if(!i(e,"default"))return e.type===Boolean?!1:void 0;var n=e["default"];return m(n),"function"==typeof n&&e.type!==Function?n.call(t):n}function Te(t,e,i){var n=i||!e._asComponent?De(t,e):null,r=n&&n.terminal||"SCRIPT"===t.tagName||!t.hasChildNodes()?null:Be(t.childNodes,e);return function(t,e,i,s,o){var a=d(e.childNodes),h=Ne(function(){n&&n(t,e,i,s,o),r&&r(t,a,i,s,o)},t);return Ee(t,h)}}function Ne(t,e){e._directives=[];var i=e._directives.length;t();var n=e._directives.slice(i);n.sort(je);for(var r=0,s=n.length;s>r;r++)n[r]._bind();return n}function je(t,e){return t=t.descriptor.def.priority||Ts,e=e.descriptor.def.priority||Ts,t>e?-1:t===e?0:1}function Ee(t,e,i,n){function r(r){Se(t,e,r),i&&n&&Se(i,n)}return r.dirs=e,r}function Se(t,e,i){for(var n=e.length;n--;)e[n]._teardown()}function Fe(t,e,i,n){var r=xe(e,i),s=Ne(function(){r(t,n)},t);return Ee(t,s)}function Pe(t,e,i){var n,r,s=e._containerAttrs,o=e._replacerAttrs;return 11!==t.nodeType&&(e._asComponent?(s&&i&&(n=Qe(s,i)),o&&(r=Qe(o,e))):r=Qe(t.attributes,e)),e._containerAttrs=e._replacerAttrs=null,function(t,e,i){var s,o=t._context;o&&n&&(s=Ne(function(){n(o,e,null,i)},o));var a=Ne(function(){r&&r(t,e)},t);return Ee(t,a,o,s)}}function De(t,e){var i=t.nodeType;return 1===i&&"SCRIPT"!==t.tagName?Re(t,e):3===i&&t.data.trim()?He(t,e):null}function Re(t,e){if("TEXTAREA"===t.tagName){var i=N(t.value);i&&(t.setAttribute(":value",j(i)),t.value="")}var n,r=t.hasAttributes();return r&&(n=Ue(t,e)),n||(n=ze(t,e)),n||(n=Ie(t,e)),!n&&r&&(n=Qe(t.attributes,e)),n}function He(t,e){if(t._skip)return Le;var i=N(t.wholeText);if(!i)return null;for(var n=t.nextSibling;n&&3===n.nodeType;)n._skip=!0,n=n.nextSibling;for(var r,s,o=document.createDocumentFragment(),a=0,h=i.length;h>a;a++)s=i[a],r=s.tag?Me(s,e):document.createTextNode(s.value),o.appendChild(r);return We(i,o,e)}function Le(t,e){I(e)}function Me(t,e){function i(e){if(!t.descriptor){var i=A(t.value);t.descriptor={name:e,def:ss[e],expression:i.expression,filters:i.filters}}}var n;return t.oneTime?n=document.createTextNode(t.value):t.html?(n=document.createComment("v-html"),i("html")):(n=document.createTextNode(" "),i("text")),n}function We(t,e){return function(i,n,r,s){for(var o,a,h,l=e.cloneNode(!0),c=d(l.childNodes),u=0,f=t.length;f>u;u++)o=t[u],a=o.value,o.tag&&(h=c[u],o.oneTime?(a=(s||i).$eval(a),o.html?q(h,Xt(a,!0)):h.data=a):i._bindDir(o.descriptor,h,r,s));q(n,l)}}function Be(t,e){for(var i,n,r,s=[],o=0,a=t.length;a>o;o++)r=t[o],i=De(r,e),n=i&&i.terminal||"SCRIPT"===r.tagName||!r.hasChildNodes()?null:Be(r.childNodes,e),s.push(i,n);return s.length?Ve(s):null}function Ve(t){return function(e,i,n,r,s){for(var o,a,h,l=0,c=0,u=t.length;u>l;c++){o=i[c],a=t[l++],h=t[l++];var f=d(o.childNodes);a&&a(e,o,n,r,s),h&&h(e,f,n,r,s)}}}function ze(t,e){var i=t.tagName.toLowerCase();if(!gn.test(i)){var n=bt(e,"elementDirectives",i);return n?Je(t,i,"",e,n):void 0}}function Ie(t,e){var i=ht(t,e);if(i){var n=nt(t),r={name:"component",ref:n,expression:i.id,def:_s.component,modifiers:{literal:!i.dynamic}},s=function(t,e,i,s,o){n&&At((s||t).$refs,n,null),t._bindDir(r,e,i,s,o)};return s.terminal=!0,s}}function Ue(t,e){if(null!==M(t,"v-pre"))return qe;if(t.hasAttribute("v-else")){var i=t.previousElementSibling;if(i&&i.hasAttribute("v-if"))return qe}for(var n,r,s=0,o=Os.length;o>s;s++)if(r=Os[s],n=t.getAttribute("v-"+r),null!=n)return Je(t,r,n,e)}function qe(){}function Je(t,e,i,n,r){var s=A(i),o={name:e,expression:s.expression,filters:s.filters,raw:i,def:r||bt(n,"directives",e)};"for"!==e&&"router-view"!==e||(o.ref=nt(t));var a=function(t,e,i,n,r){o.ref&&At((n||t).$refs,o.ref,null),t._bindDir(o,e,i,n,r)};return a.terminal=!0,a}function Qe(t,e){function i(t,e,i){var n=i&&Ze(i),r=!n&&A(s);v.push({name:t,attr:o,raw:a,def:e,arg:l,modifiers:c,expression:r&&r.expression,filters:r&&r.filters,interp:i,hasOneTime:n})}for(var n,r,s,o,a,h,l,c,u,f,p,d=t.length,v=[];d--;)if(n=t[d],r=o=n.name,s=a=n.value,f=N(s),l=null,c=Ge(r),r=r.replace(xs,""),f)s=j(f),l=r,i("bind",ss.bind,f);else if(As.test(r))c.literal=!ws.test(r),i("transition",_s.transition);else if($s.test(r))l=r.replace($s,""),i("on",ss.on);else if(ws.test(r))h=r.replace(ws,""),"style"===h||"class"===h?i(h,_s[h]):(l=h,i("bind",ss.bind));else if(p=r.match(ks)){if(h=p[1],l=p[2],"else"===h)continue;u=bt(e,"directives",h),u&&i(h,u)}return v.length?Ke(v):void 0}function Ge(t){var e=Object.create(null),i=t.match(xs);if(i)for(var n=i.length;n--;)e[i[n].slice(1)]=!0;return e}function Ke(t){return function(e,i,n,r,s){for(var o=t.length;o--;)e._bindDir(t[o],i,n,r,s)}}function Ze(t){for(var e=t.length;e--;)if(t[e].oneTime)return!0}function Xe(t,e){return e&&(e._containerAttrs=ti(t)),et(t)&&(t=Xt(t)),e&&(e._asComponent&&!e.template&&(e.template="<slot></slot>"),e.template&&(e._content=X(t),t=Ye(t,e))),ot(t)&&(U(it("v-start",!0),t),t.appendChild(it("v-end",!0))),t}function Ye(t,e){var i=e.template,n=Xt(i,!0);if(n){var r=n.firstChild,s=r.tagName&&r.tagName.toLowerCase();return e.replace?(t===document.body,n.childNodes.length>1||1!==r.nodeType||"component"===s||bt(e,"components",s)||B(r,"is")||bt(e,"elementDirectives",s)||r.hasAttribute("v-for")||r.hasAttribute("v-if")?n:(e._replacerAttrs=ti(r),ei(t,r),r)):(t.appendChild(n),t)}}function ti(t){return 1===t.nodeType&&t.hasAttributes()?d(t.attributes):void 0}function ei(t,e){for(var i,n,r=t.attributes,s=r.length;s--;)i=r[s].name,n=r[s].value,e.hasAttribute(i)||Ns.test(i)?"class"!==i||N(n)||n.split(/\s+/).forEach(function(t){K(e,t)}):e.setAttribute(i,n)}function ii(t,e,i){function n(t,i){var n='[slot="'+i+'"]',s=e.querySelectorAll(n);s.length&&(r[i]=ni(s,e))}if(e){var r=i._slotContents={},s=t.querySelectorAll("slot");if(s.length){for(var o,a,h,l=0,c=s.length;c>l;l++)a=s[l],(h=a.getAttribute("name"))?n(a,h):o=!0;o&&(r["default"]=ni(e.childNodes,e))}}}function ni(t,e){var i=document.createDocumentFragment();t=d(t);for(var n=0,r=t.length;r>n;n++){var s=t[n];s.parentNode===e&&(!et(s)||s.hasAttribute("v-if")||s.hasAttribute("v-for")||(e.removeChild(s),s=Xt(s)),i.appendChild(s))}return i}function ri(e){function n(){}function s(t,e){var i=new qt(e,t,null,{lazy:!0});return function(){return i.dirty&&i.evaluate(),Ct.target&&i.depend(),i.value}}Object.defineProperty(e.prototype,"$data",{get:function(){return this._data},set:function(t){t!==this._data&&this._setData(t)}}),e.prototype._initState=function(){this._initProps(),this._initMeta(),this._initMethods(),this._initData(),this._initComputed()},e.prototype._initProps=function(){var t=this.$options,e=t.el,i=t.props;e=t.el=H(e),this._propsUnlinkFn=e&&1===e.nodeType&&i?Fe(this,e,i,this._scope):null},e.prototype._initData=function(){var e=this._data,n=this.$options.data,r=n&&n();if(r){this._data=r;for(var s in e)null===this._props[s].raw&&i(r,s)||t(r,s,e[s])}var o,a,h=this._data,l=Object.keys(h);for(o=l.length;o--;)a=l[o],this._proxy(a);xt(h,this)},e.prototype._setData=function(t){t=t||{};var e=this._data;this._data=t;var n,r,s;for(n=Object.keys(e),s=n.length;s--;)r=n[s],r in t||this._unproxy(r);for(n=Object.keys(t),s=n.length;s--;)r=n[s],i(this,r)||this._proxy(r);e.__ob__.removeVm(this),xt(t,this),this._digest()},e.prototype._proxy=function(t){if(!r(t)){var e=this;Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return e._data[t]},set:function(i){e._data[t]=i}})}},e.prototype._unproxy=function(t){r(t)||delete this[t]},e.prototype._digest=function(){for(var t=0,e=this._watchers.length;e>t;t++)this._watchers[t].update(!0)},e.prototype._initComputed=function(){var t=this.$options.computed;if(t)for(var e in t){var i=t[e],r={enumerable:!0,configurable:!0};"function"==typeof i?(r.get=s(i,this),r.set=n):(r.get=i.get?i.cache!==!1?s(i.get,this):p(i.get,this):n,r.set=i.set?p(i.set,this):n),Object.defineProperty(this,e,r)}},e.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=p(t[e],this)},e.prototype._initMeta=function(){var t=this.$options._meta;if(t)for(var e in t)At(this,e,t[e])}}function si(t){function e(t,e){for(var i,n,r=e.attributes,s=0,o=r.length;o>s;s++)i=r[s].name,Es.test(i)&&(i=i.replace(Es,""),n=(t._scope||t._context).$eval(r[s].value,!0),"function"==typeof n&&(n._fromParent=!0,t.$on(i.replace(Es),n)))}function i(t,e,i){if(i){var r,s,o,a;for(s in i)if(r=i[s],Oi(r))for(o=0,a=r.length;a>o;o++)n(t,e,s,r[o]);else n(t,e,s,r)}}function n(t,e,i,r,s){var o=typeof r;if("function"===o)t[e](i,r,s);else if("string"===o){var a=t.$options.methods,h=a&&a[r];h&&t[e](i,h,s)}else r&&"object"===o&&n(t,e,i,r.handler,r)}function r(){this._isAttached||(this._isAttached=!0,this.$children.forEach(s))}function s(t){!t._isAttached&&L(t.$el)&&t._callHook("attached")}function o(){this._isAttached&&(this._isAttached=!1,this.$children.forEach(a))}function a(t){t._isAttached&&!L(t.$el)&&t._callHook("detached")}t.prototype._initEvents=function(){var t=this.$options;t._asComponent&&e(this,t.el),i(this,"$on",t.events),i(this,"$watch",t.watch)},t.prototype._initDOMHooks=function(){this.$on("hook:attached",r),this.$on("hook:detached",o)},t.prototype._callHook=function(t){this.$emit("pre-hook:"+t);var e=this.$options[t];if(e)for(var i=0,n=e.length;n>i;i++)e[i].call(this);this.$emit("hook:"+t)}}function oi(){}function ai(t,e,i,n,r,s){this.vm=e,this.el=i,this.descriptor=t,this.name=t.name,this.expression=t.expression,this.arg=t.arg,this.modifiers=t.modifiers,this.filters=t.filters,this.literal=this.modifiers&&this.modifiers.literal,this._locked=!1,this._bound=!1,this._listeners=null,this._host=n,this._scope=r,this._frag=s}function hi(t){t.prototype._updateRef=function(t){var e=this.$options._ref;if(e){var i=(this._scope||this._context).$refs;t?i[e]===this&&(i[e]=null):i[e]=this}},t.prototype._compile=function(t){var e=this.$options,i=t;if(t=Xe(t,e),this._initElement(t),1!==t.nodeType||null===M(t,"v-pre")){var n=this._context&&this._context.$options,r=Pe(t,e,n);ii(t,e._content,this);var s,o=this.constructor;e._linkerCachable&&(s=o.linker,s||(s=o.linker=Te(t,e)));var a=r(this,t,this._scope),h=s?s(this,t):Te(t,e)(this,t);this._unlinkFn=function(){a(),h(!0)},e.replace&&q(i,t),this._isCompiled=!0,this._callHook("compiled")}},t.prototype._initElement=function(t){ot(t)?(this._isFragment=!0,this.$el=this._fragmentStart=t.firstChild,this._fragmentEnd=t.lastChild,3===this._fragmentStart.nodeType&&(this._fragmentStart.data=this._fragmentEnd.data=""),this._fragment=t):this.$el=t,this.$el.__vue__=this,this._callHook("beforeCompile")},t.prototype._bindDir=function(t,e,i,n,r){this._directives.push(new ai(t,this,e,i,n,r))},t.prototype._destroy=function(t,e){if(this._isBeingDestroyed)return void(e||this._cleanup());var i,n,r=this,s=function(){!i||n||e||r._cleanup()};t&&this.$el&&(n=!0,this.$remove(function(){n=!1,s()})),this._callHook("beforeDestroy"),this._isBeingDestroyed=!0;var o,a=this.$parent;for(a&&!a._isBeingDestroyed&&(a.$children.$remove(this),this._updateRef(!0)),o=this.$children.length;o--;)this.$children[o].$destroy();for(this._propsUnlinkFn&&this._propsUnlinkFn(),this._unlinkFn&&this._unlinkFn(),o=this._watchers.length;o--;)this._watchers[o].teardown();this.$el&&(this.$el.__vue__=null),i=!0,s()},t.prototype._cleanup=function(){this._isDestroyed||(this._frag&&this._frag.children.$remove(this),this._data.__ob__&&this._data.__ob__.removeVm(this),this.$el=this.$parent=this.$root=this.$children=this._watchers=this._context=this._scope=this._directives=null,this._isDestroyed=!0,this._callHook("destroyed"),this.$off())}}function li(t){t.prototype._applyFilters=function(t,e,i,n){var r,s,o,a,h,l,c,u,f;for(l=0,c=i.length;c>l;l++)if(r=i[l],s=bt(this.$options,"filters",r.name),s&&(s=n?s.write:s.read||s,"function"==typeof s)){if(o=n?[t,e]:[t],h=n?2:1,r.args)for(u=0,f=r.args.length;f>u;u++)a=r.args[u],o[u+h]=a.dynamic?this.$get(a.value):a.value;t=s.apply(this,o)}return t},t.prototype._resolveComponent=function(e,i){var n=bt(this.$options,"components",e);if(n)if(n.options)i(n);else if(n.resolved)i(n.resolved);else if(n.requested)n.pendingCallbacks.push(i);else{n.requested=!0;var r=n.pendingCallbacks=[i];n.call(this,function(e){g(e)&&(e=t.extend(e)),n.resolved=e;for(var i=0,s=r.length;s>i;i++)r[i](e)},function(t){})}}}function ci(t){function i(t){return JSON.parse(JSON.stringify(t))}t.prototype.$get=function(t,e){var i=Wt(t);if(i){if(e&&!Bt(t)){var n=this;return function(){n.$arguments=d(arguments);var t=i.get.call(n,n);return n.$arguments=null,
	t}}try{return i.get.call(this,this)}catch(r){}}},t.prototype.$set=function(t,e){var i=Wt(t,!0);i&&i.set&&i.set.call(this,this,e)},t.prototype.$delete=function(t){e(this._data,t)},t.prototype.$watch=function(t,e,i){var n,r=this;"string"==typeof t&&(n=A(t),t=n.expression);var s=new qt(r,t,e,{deep:i&&i.deep,sync:i&&i.sync,filters:n&&n.filters,user:!i||i.user!==!1});return i&&i.immediate&&e.call(r,s.value),function(){s.teardown()}},t.prototype.$eval=function(t,e){if(Ss.test(t)){var i=A(t),n=this.$get(i.expression,e);return i.filters?this._applyFilters(n,null,i.filters):n}return this.$get(t,e)},t.prototype.$interpolate=function(t){var e=N(t),i=this;return e?1===e.length?i.$eval(e[0].value)+"":e.map(function(t){return t.tag?i.$eval(t.value):t.value}).join(""):t},t.prototype.$log=function(t){var e=t?St(this._data,t):this._data;if(e&&(e=i(e)),!t)for(var n in this.$options.computed)e[n]=i(this[n]);console.log(e)}}function ui(t){function e(t,e,n,r,s,o){e=i(e);var a=!L(e),h=r===!1||a?s:o,l=!a&&!t._isAttached&&!L(t.$el);return t._isFragment?(rt(t._fragmentStart,t._fragmentEnd,function(i){h(i,e,t)}),n&&n()):h(t.$el,e,t,n),l&&t._callHook("attached"),t}function i(t){return"string"==typeof t?document.querySelector(t):t}function n(t,e,i,n){e.appendChild(t),n&&n()}function r(t,e,i,n){V(t,e),n&&n()}function s(t,e,i){I(t),i&&i()}t.prototype.$nextTick=function(t){Wi(t,this)},t.prototype.$appendTo=function(t,i,r){return e(this,t,i,r,n,F)},t.prototype.$prependTo=function(t,e,n){return t=i(t),t.hasChildNodes()?this.$before(t.firstChild,e,n):this.$appendTo(t,e,n),this},t.prototype.$before=function(t,i,n){return e(this,t,i,n,r,P)},t.prototype.$after=function(t,e,n){return t=i(t),t.nextSibling?this.$before(t.nextSibling,e,n):this.$appendTo(t.parentNode,e,n),this},t.prototype.$remove=function(t,e){if(!this.$el.parentNode)return t&&t();var i=this._isAttached&&L(this.$el);i||(e=!1);var n=this,r=function(){i&&n._callHook("detached"),t&&t()};if(this._isFragment)st(this._fragmentStart,this._fragmentEnd,this,this._fragment,r);else{var o=e===!1?s:D;o(this.$el,this,r)}return this}}function fi(t){function e(t,e,n){var r=t.$parent;if(r&&n&&!i.test(e))for(;r;)r._eventsCount[e]=(r._eventsCount[e]||0)+n,r=r.$parent}t.prototype.$on=function(t,i){return(this._events[t]||(this._events[t]=[])).push(i),e(this,t,1),this},t.prototype.$once=function(t,e){function i(){n.$off(t,i),e.apply(this,arguments)}var n=this;return i.fn=e,this.$on(t,i),this},t.prototype.$off=function(t,i){var n;if(!arguments.length){if(this.$parent)for(t in this._events)n=this._events[t],n&&e(this,t,-n.length);return this._events={},this}if(n=this._events[t],!n)return this;if(1===arguments.length)return e(this,t,-n.length),this._events[t]=null,this;for(var r,s=n.length;s--;)if(r=n[s],r===i||r.fn===i){e(this,t,-1),n.splice(s,1);break}return this},t.prototype.$emit=function(t){var e="string"==typeof t;t=e?t:t.name;var i=this._events[t],n=e||!i;if(i){i=i.length>1?d(i):i;var r=e&&i.some(function(t){return t._fromParent});r&&(n=!1);for(var s=d(arguments,1),o=0,a=i.length;a>o;o++){var h=i[o],l=h.apply(this,s);l!==!0||r&&!h._fromParent||(n=!0)}}return n},t.prototype.$broadcast=function(t){var e="string"==typeof t;if(t=e?t:t.name,this._eventsCount[t]){var i=this.$children,n=d(arguments);e&&(n[0]={name:t,source:this});for(var r=0,s=i.length;s>r;r++){var o=i[r],a=o.$emit.apply(o,n);a&&o.$broadcast.apply(o,n)}return this}},t.prototype.$dispatch=function(t){var e=this.$emit.apply(this,arguments);if(e){var i=this.$parent,n=d(arguments);for(n[0]={name:t,source:this};i;)e=i.$emit.apply(i,n),i=e?i.$parent:null;return this}};var i=/^hook:/}function pi(t){function e(){this._isAttached=!0,this._isReady=!0,this._callHook("ready")}t.prototype.$mount=function(t){return this._isCompiled?void 0:(t=H(t),t||(t=document.createElement("div")),this._compile(t),this._initDOMHooks(),L(this.$el)?(this._callHook("attached"),e.call(this)):this.$once("hook:attached",e),this)},t.prototype.$destroy=function(t,e){this._destroy(t,e)},t.prototype.$compile=function(t,e,i,n){return Te(t,this.$options,!0)(this,t,e,i,n)}}function di(t){this._init(t)}function vi(t,e,i){return i=i?parseInt(i,10):0,e=o(e),"number"==typeof e?t.slice(i,i+e):t}function mi(t,e,i){if(t=Rs(t),null==e)return t;if("function"==typeof e)return t.filter(e);e=(""+e).toLowerCase();for(var n,r,s,o,a="in"===i?3:2,h=d(arguments,a).reduce(function(t,e){return t.concat(e)},[]),l=[],c=0,u=t.length;u>c;c++)if(n=t[c],s=n&&n.$value||n,o=h.length){for(;o--;)if(r=h[o],"$key"===r&&_i(n.$key,e)||_i(St(s,r),e)){l.push(n);break}}else _i(n,e)&&l.push(n);return l}function gi(t,e,i){if(t=Rs(t),!e)return t;var n=i&&0>i?-1:1;return t.slice().sort(function(t,i){return"$key"!==e&&(m(t)&&"$value"in t&&(t=t.$value),m(i)&&"$value"in i&&(i=i.$value)),t=m(t)?St(t,e):t,i=m(i)?St(i,e):i,t===i?0:t>i?n:-n})}function _i(t,e){var i;if(g(t)){var n=Object.keys(t);for(i=n.length;i--;)if(_i(t[n[i]],e))return!0}else if(Oi(t)){for(i=t.length;i--;)if(_i(t[i],e))return!0}else if(null!=t)return t.toString().toLowerCase().indexOf(e)>-1}function bi(i){function n(t){return new Function("return function "+f(t)+" (options) { this._init(options) }")()}i.options={directives:ss,elementDirectives:Ds,filters:Ls,transitions:{},components:{},partials:{},replace:!0},i.util=xn,i.config=pn,i.set=t,i["delete"]=e,i.nextTick=Wi,i.compiler=js,i.FragmentFactory=oe,i.internalDirectives=_s,i.parsers={path:Vn,text:cn,template:_r,directive:rn,expression:ir},i.cid=0;var r=1;i.extend=function(t){t=t||{};var e=this,i=0===e.cid;if(i&&t._Ctor)return t._Ctor;var s=t.name||e.options.name,o=n(s||"VueComponent");return o.prototype=Object.create(e.prototype),o.prototype.constructor=o,o.cid=r++,o.options=_t(e.options,t),o["super"]=e,o.extend=e.extend,pn._assetTypes.forEach(function(t){o[t]=e[t]}),s&&(o.options.components[s]=o),i&&(t._Ctor=o),o},i.use=function(t){if(!t.installed){var e=d(arguments,1);return e.unshift(this),"function"==typeof t.install?t.install.apply(t,e):t.apply(null,e),t.installed=!0,this}},i.mixin=function(t){i.options=_t(i.options,t)},pn._assetTypes.forEach(function(t){i[t]=function(e,n){return n?("component"===t&&g(n)&&(n.name=e,n=i.extend(n)),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}),v(i.transition,vn)}var yi=Object.prototype.hasOwnProperty,Ci=/^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/,wi=/-(\w)/g,$i=/([a-z\d])([A-Z])/g,ki=/(?:^|[-_\/])(\w)/g,xi=Object.prototype.toString,Ai="[object Object]",Oi=Array.isArray,Ti="__proto__"in{},Ni="undefined"!=typeof window&&"[object Object]"!==Object.prototype.toString.call(window),ji=Ni&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Ei=Ni&&window.navigator.userAgent.toLowerCase(),Si=Ei&&Ei.indexOf("msie 9.0")>0,Fi=Ei&&Ei.indexOf("android")>0,Pi=void 0,Di=void 0,Ri=void 0,Hi=void 0;if(Ni&&!Si){var Li=void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend,Mi=void 0===window.onanimationend&&void 0!==window.onwebkitanimationend;Pi=Li?"WebkitTransition":"transition",Di=Li?"webkitTransitionEnd":"transitionend",Ri=Mi?"WebkitAnimation":"animation",Hi=Mi?"webkitAnimationEnd":"animationend"}var Wi=function(){function t(){n=!1;var t=i.slice(0);i=[];for(var e=0;e<t.length;e++)t[e]()}var e,i=[],n=!1;if("undefined"!=typeof MutationObserver){var r=1,s=new MutationObserver(t),o=document.createTextNode(r);s.observe(o,{characterData:!0}),e=function(){r=(r+1)%2,o.data=r}}else{var a=Ni?window:"undefined"!=typeof global?global:{};e=a.setImmediate||setTimeout}return function(r,s){var o=s?function(){r.call(s)}:r;i.push(o),n||(n=!0,e(t,0))}}(),Bi=$.prototype;Bi.put=function(t,e){var i;this.size===this.limit&&(i=this.shift());var n=this.get(t,!0);return n||(n={key:t},this._keymap[t]=n,this.tail?(this.tail.newer=n,n.older=this.tail):this.head=n,this.tail=n,this.size++),n.value=e,i},Bi.shift=function(){var t=this.head;return t&&(this.head=this.head.newer,this.head.older=void 0,t.newer=t.older=void 0,this._keymap[t.key]=void 0,this.size--),t},Bi.get=function(t,e){var i=this._keymap[t];if(void 0!==i)return i===this.tail?e?i:i.value:(i.newer&&(i===this.head&&(this.head=i.newer),i.newer.older=i.older),i.older&&(i.older.newer=i.newer),i.newer=void 0,i.older=this.tail,this.tail&&(this.tail.newer=i),this.tail=i,e?i:i.value)};var Vi,zi,Ii,Ui,qi,Ji,Qi,Gi,Ki,Zi,Xi,Yi,tn=new $(1e3),en=/[^\s'"]+|'[^']*'|"[^"]*"/g,nn=/^in$|^-?\d+/,rn=Object.freeze({parseDirective:A}),sn=/[-.*+?^${}()|[\]\/\\]/g,on=void 0,an=void 0,hn=void 0,ln=/[^|]\|[^|]/,cn=Object.freeze({compileRegex:T,parseText:N,tokensToExp:j}),un=["{{","}}"],fn=["{{{","}}}"],pn=Object.defineProperties({debug:!1,silent:!1,async:!0,warnExpressionErrors:!0,_delimitersChanged:!0,_assetTypes:["component","directive","elementDirective","filter","transition","partial"],_propBindingModes:{ONE_WAY:0,TWO_WAY:1,ONE_TIME:2},_maxUpdateCount:100},{delimiters:{get:function(){return un},set:function(t){un=t,T()},configurable:!0,enumerable:!0},unsafeDelimiters:{get:function(){return fn},set:function(t){fn=t,T()},configurable:!0,enumerable:!0}}),dn=void 0,vn=Object.freeze({appendWithTransition:F,beforeWithTransition:P,removeWithTransition:D,applyTransition:R}),mn=/^v-ref:/,gn=/^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/,_n=/^(slot|partial|component)$/,bn=pn.optionMergeStrategies=Object.create(null);bn.data=function(t,e,i){return i?t||e?function(){var n="function"==typeof e?e.call(i):e,r="function"==typeof t?t.call(i):void 0;return n?pt(n,r):r}:void 0:e?"function"!=typeof e?t:t?function(){return pt(e.call(this),t.call(this))}:e:t},bn.el=function(t,e,i){if(i||!e||"function"==typeof e){var n=e||t;return i&&"function"==typeof n?n.call(i):n}},bn.init=bn.created=bn.ready=bn.attached=bn.detached=bn.beforeCompile=bn.compiled=bn.beforeDestroy=bn.destroyed=bn.activate=function(t,e){return e?t?t.concat(e):Oi(e)?e:[e]:t},bn.paramAttributes=function(){},pn._assetTypes.forEach(function(t){bn[t+"s"]=dt}),bn.watch=bn.events=function(t,e){if(!e)return t;if(!t)return e;var i={};v(i,t);for(var n in e){var r=i[n],s=e[n];r&&!Oi(r)&&(r=[r]),i[n]=r?r.concat(s):[s]}return i},bn.props=bn.methods=bn.computed=function(t,e){if(!e)return t;if(!t)return e;var i=Object.create(null);return v(i,t),v(i,e),i};var yn=function(t,e){return void 0===e?t:e},Cn=0;Ct.target=null,Ct.prototype.addSub=function(t){this.subs.push(t)},Ct.prototype.removeSub=function(t){this.subs.$remove(t)},Ct.prototype.depend=function(){Ct.target.addDep(this)},Ct.prototype.notify=function(){for(var t=d(this.subs),e=0,i=t.length;i>e;e++)t[e].update()};var wn=Array.prototype,$n=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=wn[t];_($n,t,function(){for(var i=arguments.length,n=new Array(i);i--;)n[i]=arguments[i];var r,s=e.apply(this,n),o=this.__ob__;switch(t){case"push":r=n;break;case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&o.observeArray(r),o.dep.notify(),s})}),_(wn,"$set",function(t,e){return t>=this.length&&(this.length=Number(t)+1),this.splice(t,1,e)[0]}),_(wn,"$remove",function(t){if(this.length){var e=y(this,t);return e>-1?this.splice(e,1):void 0}});var kn=Object.getOwnPropertyNames($n);wt.prototype.walk=function(t){for(var e=Object.keys(t),i=0,n=e.length;n>i;i++)this.convert(e[i],t[e[i]])},wt.prototype.observeArray=function(t){for(var e=0,i=t.length;i>e;e++)xt(t[e])},wt.prototype.convert=function(t,e){At(this.value,t,e)},wt.prototype.addVm=function(t){(this.vms||(this.vms=[])).push(t)},wt.prototype.removeVm=function(t){this.vms.$remove(t)};var xn=Object.freeze({defineReactive:At,set:t,del:e,hasOwn:i,isLiteral:n,isReserved:r,_toString:s,toNumber:o,toBoolean:a,stripQuotes:h,camelize:l,hyphenate:u,classify:f,bind:p,toArray:d,extend:v,isObject:m,isPlainObject:g,def:_,debounce:b,indexOf:y,cancellable:C,looseEqual:w,isArray:Oi,hasProto:Ti,inBrowser:Ni,devtools:ji,isIE9:Si,isAndroid:Fi,get transitionProp(){return Pi},get transitionEndEvent(){return Di},get animationProp(){return Ri},get animationEndEvent(){return Hi},nextTick:Wi,query:H,inDoc:L,getAttr:M,getBindAttr:W,hasBindAttr:B,before:V,after:z,remove:I,prepend:U,replace:q,on:J,off:Q,setClass:G,addClass:K,removeClass:Z,extractContent:X,trimNode:Y,isTemplate:et,createAnchor:it,findRef:nt,mapNodeRange:rt,removeNodeRange:st,isFragment:ot,getOuterHTML:at,mergeOptions:_t,resolveAsset:bt,assertAsset:yt,checkComponentAttr:ht,initProp:ct,assertProp:ut,coerceProp:ft,commonTagRE:gn,reservedTagRE:_n,warn:dn}),An=0,On=new $(1e3),Tn=0,Nn=1,jn=2,En=3,Sn=0,Fn=1,Pn=2,Dn=3,Rn=4,Hn=5,Ln=6,Mn=7,Wn=8,Bn=[];Bn[Sn]={ws:[Sn],ident:[Dn,Tn],"[":[Rn],eof:[Mn]},Bn[Fn]={ws:[Fn],".":[Pn],"[":[Rn],eof:[Mn]},Bn[Pn]={ws:[Pn],ident:[Dn,Tn]},Bn[Dn]={ident:[Dn,Tn],0:[Dn,Tn],number:[Dn,Tn],ws:[Fn,Nn],".":[Pn,Nn],"[":[Rn,Nn],eof:[Mn,Nn]},Bn[Rn]={"'":[Hn,Tn],'"':[Ln,Tn],"[":[Rn,jn],"]":[Fn,En],eof:Wn,"else":[Rn,Tn]},Bn[Hn]={"'":[Rn,Tn],eof:Wn,"else":[Hn,Tn]},Bn[Ln]={'"':[Rn,Tn],eof:Wn,"else":[Ln,Tn]};var Vn=Object.freeze({parsePath:Et,getPath:St,setPath:Ft}),zn=new $(1e3),In="Math,Date,this,true,false,null,undefined,Infinity,NaN,isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,parseInt,parseFloat",Un=new RegExp("^("+In.replace(/,/g,"\\b|")+"\\b)"),qn="break,case,class,catch,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,let,return,super,switch,throw,try,var,while,with,yield,enum,await,implements,package,proctected,static,interface,private,public",Jn=new RegExp("^("+qn.replace(/,/g,"\\b|")+"\\b)"),Qn=/\s/g,Gn=/\n/g,Kn=/[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g,Zn=/"(\d+)"/g,Xn=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/,Yn=/[^\w$\.](?:[A-Za-z_$][\w$]*)/g,tr=/^(?:true|false)$/,er=[],ir=Object.freeze({parseExpression:Wt,isSimplePath:Bt}),nr=[],rr=[],sr={},or={},ar=!1,hr=!1,lr=0;qt.prototype.addDep=function(t){var e=t.id;this.newDeps[e]||(this.newDeps[e]=t,this.deps[e]||(this.deps[e]=t,t.addSub(this)))},qt.prototype.get=function(){this.beforeGet();var t,e=this.scope||this.vm;try{t=this.getter.call(e,e)}catch(i){}return this.deep&&Jt(t),this.preProcess&&(t=this.preProcess(t)),this.filters&&(t=e._applyFilters(t,null,this.filters,!1)),this.postProcess&&(t=this.postProcess(t)),this.afterGet(),t},qt.prototype.set=function(t){var e=this.scope||this.vm;this.filters&&(t=e._applyFilters(t,this.value,this.filters,!0));try{this.setter.call(e,e,t)}catch(i){}var n=e.$forContext;if(n&&n.alias===this.expression){if(n.filters)return;n._withLock(function(){e.$key?n.rawValue[e.$key]=t:n.rawValue.$set(e.$index,t)})}},qt.prototype.beforeGet=function(){Ct.target=this,this.newDeps=Object.create(null)},qt.prototype.afterGet=function(){Ct.target=null;for(var t=Object.keys(this.deps),e=t.length;e--;){var i=t[e];this.newDeps[i]||this.deps[i].removeSub(this)}this.deps=this.newDeps},qt.prototype.update=function(t){this.lazy?this.dirty=!0:this.sync||!pn.async?this.run():(this.shallow=this.queued?t?this.shallow:!1:!!t,this.queued=!0,Ut(this))},qt.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||(m(t)||this.deep)&&!this.shallow){var e=this.value;this.value=t;this.prevError;this.cb.call(this.vm,t,e)}this.queued=this.shallow=!1}},qt.prototype.evaluate=function(){var t=Ct.target;this.value=this.get(),this.dirty=!1,Ct.target=t},qt.prototype.depend=function(){for(var t=Object.keys(this.deps),e=t.length;e--;)this.deps[t[e]].depend()},qt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||this.vm._vForRemoving||this.vm._watchers.$remove(this);for(var t=Object.keys(this.deps),e=t.length;e--;)this.deps[t[e]].removeSub(this);this.active=!1,this.vm=this.cb=this.value=null}};var cr={bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(t){this.el[this.attr]=s(t)}},ur=new $(1e3),fr=new $(1e3),pr={efault:[0,"",""],legend:[1,"<fieldset>","</fieldset>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"]};pr.td=pr.th=[3,"<table><tbody><tr>","</tr></tbody></table>"],pr.option=pr.optgroup=[1,'<select multiple="multiple">',"</select>"],pr.thead=pr.tbody=pr.colgroup=pr.caption=pr.tfoot=[1,"<table>","</table>"],pr.g=pr.defs=pr.symbol=pr.use=pr.image=pr.text=pr.circle=pr.ellipse=pr.line=pr.path=pr.polygon=pr.polyline=pr.rect=[1,'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events"version="1.1">',"</svg>"];var dr=/<([\w:]+)/,vr=/&#?\w+?;/,mr=function(){if(Ni){var t=document.createElement("div");return t.innerHTML="<template>1</template>",!t.cloneNode(!0).firstChild.innerHTML}return!1}(),gr=function(){if(Ni){var t=document.createElement("textarea");return t.placeholder="t","t"===t.cloneNode(!0).value}return!1}(),_r=Object.freeze({cloneNode:Zt,parseTemplate:Xt}),br={bind:function(){8===this.el.nodeType&&(this.nodes=[],this.anchor=it("v-html"),q(this.el,this.anchor))},update:function(t){t=s(t),this.nodes?this.swap(t):this.el.innerHTML=t},swap:function(t){for(var e=this.nodes.length;e--;)I(this.nodes[e]);var i=Xt(t,!0,!0);this.nodes=d(i.childNodes),V(i,this.anchor)}};Yt.prototype.callHook=function(t){var e,i;for(e=0,i=this.childFrags.length;i>e;e++)this.childFrags[e].callHook(t);for(e=0,i=this.children.length;i>e;e++)t(this.children[e])},Yt.prototype.beforeRemove=function(){var t,e;for(t=0,e=this.childFrags.length;e>t;t++)this.childFrags[t].beforeRemove(!1);for(t=0,e=this.children.length;e>t;t++)this.children[t].$destroy(!1,!0);var i=this.unlink.dirs;for(t=0,e=i.length;e>t;t++)i[t]._watcher&&i[t]._watcher.teardown()},Yt.prototype.destroy=function(){this.parentFrag&&this.parentFrag.childFrags.$remove(this),this.node.__v_frag=null,this.unlink()};var yr=new $(5e3);oe.prototype.create=function(t,e,i){var n=Zt(this.template);return new Yt(this.linker,this.vm,n,t,e,i)};var Cr=700,wr=800,$r=850,kr=1100,xr=1500,Ar=1500,Or=1750,Tr=2e3,Nr=2e3,jr=2100,Er=0,Sr={priority:Tr,params:["track-by","stagger","enter-stagger","leave-stagger"],bind:function(){var t=this.expression.match(/(.*) (?:in|of) (.*)/);if(t){var e=t[1].match(/\((.*),(.*)\)/);e?(this.iterator=e[1].trim(),this.alias=e[2].trim()):this.alias=t[1].trim(),this.expression=t[2]}if(this.alias){this.id="__v-for__"+ ++Er;var i=this.el.tagName;this.isOption=("OPTION"===i||"OPTGROUP"===i)&&"SELECT"===this.el.parentNode.tagName,this.start=it("v-for-start"),this.end=it("v-for-end"),q(this.el,this.end),V(this.start,this.end),this.cache=Object.create(null),this.factory=new oe(this.vm,this.el)}},update:function(t){this.diff(t),this.updateRef(),this.updateModel()},diff:function(t){var e,n,r,s,o,a,h=t[0],l=this.fromObject=m(h)&&i(h,"$key")&&i(h,"$value"),c=this.params.trackBy,u=this.frags,f=this.frags=new Array(t.length),p=this.alias,d=this.iterator,v=this.start,g=this.end,_=L(v),b=!u;for(e=0,n=t.length;n>e;e++)h=t[e],s=l?h.$key:null,o=l?h.$value:h,a=!m(o),r=!b&&this.getCachedFrag(o,e,s),r?(r.reused=!0,r.scope.$index=e,s&&(r.scope.$key=s),d&&(r.scope[d]=null!==s?s:e),(c||l||a)&&(r.scope[p]=o)):(r=this.create(o,p,e,s),r.fresh=!b),f[e]=r,b&&r.before(g);if(!b){var y=0,C=u.length-f.length;for(this.vm._vForRemoving=!0,e=0,n=u.length;n>e;e++)r=u[e],r.reused||(this.deleteCachedFrag(r),this.remove(r,y++,C,_));this.vm._vForRemoving=!1,y&&(this.vm._watchers=this.vm._watchers.filter(function(t){return t.active}));var w,$,k,x=0;for(e=0,n=f.length;n>e;e++)r=f[e],w=f[e-1],$=w?w.staggerCb?w.staggerAnchor:w.end||w.node:v,r.reused&&!r.staggerCb?(k=ae(r,v,this.id),k===w||k&&ae(k,v,this.id)===w||this.move(r,$)):this.insert(r,x++,$,_),r.reused=r.fresh=!1}},create:function(t,e,i,n){var r=this._host,s=this._scope||this.vm,o=Object.create(s);o.$refs=Object.create(s.$refs),o.$els=Object.create(s.$els),o.$parent=s,o.$forContext=this,At(o,e,t),At(o,"$index",i),n?At(o,"$key",n):o.$key&&_(o,"$key",null),this.iterator&&At(o,this.iterator,null!==n?n:i);var a=this.factory.create(r,o,this._frag);return a.forId=this.id,this.cacheFrag(t,a,i,n),a},updateRef:function(){var t=this.descriptor.ref;if(t){var e,i=(this._scope||this.vm).$refs;this.fromObject?(e={},this.frags.forEach(function(t){e[t.scope.$key]=he(t)})):e=this.frags.map(he),i[t]=e}},updateModel:function(){if(this.isOption){var t=this.start.parentNode,e=t&&t.__v_model;e&&e.forceUpdate()}},insert:function(t,e,i,n){t.staggerCb&&(t.staggerCb.cancel(),t.staggerCb=null);var r=this.getStagger(t,e,null,"enter");if(n&&r){var s=t.staggerAnchor;s||(s=t.staggerAnchor=it("stagger-anchor"),s.__v_frag=t),z(s,i);var o=t.staggerCb=C(function(){t.staggerCb=null,t.before(s),I(s)});setTimeout(o,r)}else t.before(i.nextSibling)},remove:function(t,e,i,n){if(t.staggerCb)return t.staggerCb.cancel(),void(t.staggerCb=null);var r=this.getStagger(t,e,i,"leave");if(n&&r){var s=t.staggerCb=C(function(){t.staggerCb=null,t.remove()});setTimeout(s,r)}else t.remove()},move:function(t,e){e.nextSibling||this.end.parentNode.appendChild(this.end),t.before(e.nextSibling,!1)},cacheFrag:function(t,e,n,r){var s,o=this.params.trackBy,a=this.cache,h=!m(t);r||o||h?(s=o?"$index"===o?n:t[o]:r||t,a[s]||(a[s]=e)):(s=this.id,i(t,s)?null===t[s]&&(t[s]=e):_(t,s,e)),e.raw=t},getCachedFrag:function(t,e,i){var n,r=this.params.trackBy,s=!m(t);if(i||r||s){var o=r?"$index"===r?e:t[r]:i||t;n=this.cache[o]}else n=t[this.id];return n&&(n.reused||n.fresh),n},deleteCachedFrag:function(t){var e=t.raw,n=this.params.trackBy,r=t.scope,s=r.$index,o=i(r,"$key")&&r.$key,a=!m(e);if(n||o||a){var h=n?"$index"===n?s:e[n]:o||e;this.cache[h]=null}else e[this.id]=null,t.raw=null},getStagger:function(t,e,i,n){n+="Stagger";var r=t.node.__v_trans,s=r&&r.hooks,o=s&&(s[n]||s.stagger);return o?o.call(t,e,i):e*parseInt(this.params[n]||this.params.stagger,10)},_preProcess:function(t){return this.rawValue=t,t},_postProcess:function(t){if(Oi(t))return t;if(g(t)){for(var e,i=Object.keys(t),n=i.length,r=new Array(n);n--;)e=i[n],r[n]={$key:e,$value:t[e]};return r}return"number"!=typeof t||isNaN(t)||(t=le(t)),t||[]},unbind:function(){if(this.descriptor.ref&&((this._scope||this.vm).$refs[this.descriptor.ref]=null),this.frags)for(var t,e=this.frags.length;e--;)t=this.frags[e],this.deleteCachedFrag(t),t.destroy()}},Fr={priority:Nr,bind:function(){var t=this.el;if(t.__vue__)this.invalid=!0;else{var e=t.nextElementSibling;e&&null!==M(e,"v-else")&&(I(e),this.elseFactory=new oe(e._context||this.vm,e)),this.anchor=it("v-if"),q(t,this.anchor),this.factory=new oe(this.vm,t)}},update:function(t){this.invalid||(t?this.frag||this.insert():this.remove())},insert:function(){this.elseFrag&&(this.elseFrag.remove(),this.elseFrag=null),this.frag=this.factory.create(this._host,this._scope,this._frag),this.frag.before(this.anchor)},remove:function(){this.frag&&(this.frag.remove(),this.frag=null),this.elseFactory&&!this.elseFrag&&(this.elseFrag=this.elseFactory.create(this._host,this._scope,this._frag),this.elseFrag.before(this.anchor))},unbind:function(){this.frag&&this.frag.destroy(),this.elseFrag&&this.elseFrag.destroy()}},Pr={bind:function(){var t=this.el.nextElementSibling;t&&null!==M(t,"v-else")&&(this.elseEl=t)},update:function(t){this.apply(this.el,t),this.elseEl&&this.apply(this.elseEl,!t)},apply:function(t,e){function i(){t.style.display=e?"":"none"}L(t)?R(t,e?1:-1,i,this.vm):i()}},Dr={bind:function(){var t=this,e=this.el,i="range"===e.type,n=this.params.lazy,r=this.params.number,s=this.params.debounce,a=!1;if(Fi||i||(this.on("compositionstart",function(){a=!0}),this.on("compositionend",function(){a=!1,n||t.listener()})),this.focused=!1,i||n||(this.on("focus",function(){t.focused=!0}),this.on("blur",function(){t.focused=!1})),this.listener=this.rawListener=function(){if(!a&&t._bound){var n=r||i?o(e.value):e.value;t.set(n),Wi(function(){t._bound&&!t.focused&&t.update(t._watcher.value)})}},s&&(this.listener=b(this.listener,s)),this.hasjQuery="function"==typeof jQuery,this.hasjQuery){var h=jQuery.fn.on?"on":"bind";jQuery(e)[h]("change",this.rawListener),n||jQuery(e)[h]("input",this.listener)}else this.on("change",this.rawListener),n||this.on("input",this.listener);!n&&Si&&(this.on("cut",function(){Wi(t.listener)}),this.on("keyup",function(e){46!==e.keyCode&&8!==e.keyCode||t.listener()})),(e.hasAttribute("value")||"TEXTAREA"===e.tagName&&e.value.trim())&&(this.afterBind=this.listener)},update:function(t){this.el.value=s(t)},unbind:function(){var t=this.el;if(this.hasjQuery){var e=jQuery.fn.off?"off":"unbind";jQuery(t)[e]("change",this.listener),jQuery(t)[e]("input",this.listener)}}},Rr={bind:function(){var t=this,e=this.el;this.getValue=function(){if(e.hasOwnProperty("_value"))return e._value;var i=e.value;return t.params.number&&(i=o(i)),i},this.listener=function(){t.set(t.getValue())},this.on("change",this.listener),e.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(t){this.el.checked=w(t,this.getValue())}},Hr={bind:function(){var t=this,e=this.el;this.forceUpdate=function(){t._watcher&&t.update(t._watcher.get())};var i=this.multiple=e.hasAttribute("multiple");this.listener=function(){var n=ce(e,i);n=t.params.number?Oi(n)?n.map(o):o(n):n,t.set(n)},this.on("change",this.listener);var n=ce(e,i,!0);(i&&n.length||!i&&null!==n)&&(this.afterBind=this.listener),this.vm.$on("hook:attached",this.forceUpdate)},update:function(t){var e=this.el;e.selectedIndex=-1;for(var i,n,r=this.multiple&&Oi(t),s=e.options,o=s.length;o--;)i=s[o],n=i.hasOwnProperty("_value")?i._value:i.value,i.selected=r?ue(t,n)>-1:w(t,n)},unbind:function(){this.vm.$off("hook:attached",this.forceUpdate)}},Lr={bind:function(){function t(){var t=i.checked;return t&&i.hasOwnProperty("_trueValue")?i._trueValue:!t&&i.hasOwnProperty("_falseValue")?i._falseValue:t}var e=this,i=this.el;this.getValue=function(){return i.hasOwnProperty("_value")?i._value:e.params.number?o(i.value):i.value},this.listener=function(){var n=e._watcher.value;if(Oi(n)){var r=e.getValue();i.checked?y(n,r)<0&&n.push(r):n.$remove(r)}else e.set(t())},this.on("change",this.listener),i.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(t){var e=this.el;Oi(t)?e.checked=y(t,this.getValue())>-1:e.hasOwnProperty("_trueValue")?e.checked=w(t,e._trueValue):e.checked=!!t}},Mr={text:Dr,radio:Rr,select:Hr,checkbox:Lr},Wr={priority:wr,twoWay:!0,handlers:Mr,params:["lazy","number","debounce"],bind:function(){this.checkFilters(),this.hasRead&&!this.hasWrite;var t,e=this.el,i=e.tagName;if("INPUT"===i)t=Mr[e.type]||Mr.text;else if("SELECT"===i)t=Mr.select;else{if("TEXTAREA"!==i)return;t=Mr.text}e.__v_model=this,t.bind.call(this),this.update=t.update,this._unbind=t.unbind},checkFilters:function(){var t=this.filters;if(t)for(var e=t.length;e--;){var i=bt(this.vm.$options,"filters",t[e].name);("function"==typeof i||i.read)&&(this.hasRead=!0),i.write&&(this.hasWrite=!0)}},unbind:function(){this.el.__v_model=null,this._unbind&&this._unbind()}},Br={esc:27,tab:9,enter:13,space:32,"delete":[8,46],up:38,left:37,right:39,down:40},Vr={priority:Cr,acceptStatement:!0,keyCodes:Br,bind:function(){if("IFRAME"===this.el.tagName&&"load"!==this.arg){var t=this;this.iframeBind=function(){J(t.el.contentWindow,t.arg,t.handler,t.modifiers.capture)},this.on("load",this.iframeBind)}},update:function(t){if(this.descriptor.raw||(t=function(){}),"function"==typeof t){this.modifiers.stop&&(t=pe(t)),this.modifiers.prevent&&(t=de(t)),this.modifiers.self&&(t=ve(t));var e=Object.keys(this.modifiers).filter(function(t){return"stop"!==t&&"prevent"!==t});e.length&&(t=fe(t,e)),this.reset(),this.handler=t,this.iframeBind?this.iframeBind():J(this.el,this.arg,this.handler,this.modifiers.capture)}},reset:function(){var t=this.iframeBind?this.el.contentWindow:this.el;this.handler&&Q(t,this.arg,this.handler)},unbind:function(){this.reset()}},zr=["-webkit-","-moz-","-ms-"],Ir=["Webkit","Moz","ms"],Ur=/!important;?$/,qr=Object.create(null),Jr=null,Qr={deep:!0,update:function(t){"string"==typeof t?this.el.style.cssText=t:Oi(t)?this.handleObject(t.reduce(v,{})):this.handleObject(t||{})},handleObject:function(t){var e,i,n=this.cache||(this.cache={});for(e in n)e in t||(this.handleSingle(e,null),delete n[e]);for(e in t)i=t[e],i!==n[e]&&(n[e]=i,this.handleSingle(e,i))},handleSingle:function(t,e){if(t=me(t))if(null!=e&&(e+=""),e){var i=Ur.test(e)?"important":"";i&&(e=e.replace(Ur,"").trim()),this.el.style.setProperty(t,e,i)}else this.el.style.removeProperty(t)}},Gr="http://www.w3.org/1999/xlink",Kr=/^xlink:/,Zr=/^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/,Xr=/^(?:value|checked|selected|muted)$/,Yr=/^(?:draggable|contenteditable|spellcheck)$/,ts={value:"_value","true-value":"_trueValue","false-value":"_falseValue"},es={priority:$r,bind:function(){var t=this.arg,e=this.el.tagName;t||(this.deep=!0);var i=this.descriptor,n=i.interp;n&&(i.hasOneTime&&(this.expression=j(n,this._scope||this.vm)),(Zr.test(t)||"name"===t&&("PARTIAL"===e||"SLOT"===e))&&(this.el.removeAttribute(t),this.invalid=!0))},update:function(t){if(!this.invalid){var e=this.arg;this.arg?this.handleSingle(e,t):this.handleObject(t||{})}},handleObject:Qr.handleObject,handleSingle:function(t,e){var i=this.el,n=this.descriptor.interp;this.modifiers.camel&&(t=l(t)),!n&&Xr.test(t)&&t in i&&(i[t]="value"===t&&null==e?"":e);var r=ts[t];if(!n&&r){i[r]=e;var s=i.__v_model;s&&s.listener()}return"value"===t&&"TEXTAREA"===i.tagName?void i.removeAttribute(t):void(Yr.test(t)?i.setAttribute(t,e?"true":"false"):null!=e&&e!==!1?"class"===t?(i.__v_trans&&(e+=" "+i.__v_trans.id+"-transition"),G(i,e)):Kr.test(t)?i.setAttributeNS(Gr,t,e===!0?"":e):i.setAttribute(t,e===!0?"":e):i.removeAttribute(t))}},is={priority:xr,bind:function(){if(this.arg){var t=this.id=l(this.arg),e=(this._scope||this.vm).$els;i(e,t)?e[t]=this.el:At(e,t,this.el)}},unbind:function(){var t=(this._scope||this.vm).$els;t[this.id]===this.el&&(t[this.id]=null)}},ns={bind:function(){}},rs={bind:function(){var t=this.el;this.vm.$once("pre-hook:compiled",function(){t.removeAttribute("v-cloak")})}},ss={text:cr,html:br,"for":Sr,"if":Fr,show:Pr,model:Wr,on:Vr,bind:es,el:is,ref:ns,cloak:rs},os={deep:!0,update:function(t){t&&"string"==typeof t?this.handleObject(_e(t)):g(t)?this.handleObject(t):Oi(t)?this.handleArray(t):this.cleanup()},handleObject:function(t){this.cleanup(t);for(var e=this.prevKeys=Object.keys(t),i=0,n=e.length;n>i;i++){var r=e[i];t[r]?K(this.el,r):Z(this.el,r)}},handleArray:function(t){this.cleanup(t);for(var e=0,i=t.length;i>e;e++)t[e]&&K(this.el,t[e]);this.prevKeys=t.slice()},cleanup:function(t){if(this.prevKeys)for(var e=this.prevKeys.length;e--;){var i=this.prevKeys[e];!i||t&&be(t,i)||Z(this.el,i)}}},as={priority:Ar,params:["keep-alive","transition-mode","inline-template"],bind:function(){this.el.__vue__||(this.keepAlive=this.params.keepAlive,this.keepAlive&&(this.cache={}),this.params.inlineTemplate&&(this.inlineTemplate=X(this.el,!0)),this.pendingComponentCb=this.Component=null,this.pendingRemovals=0,this.pendingRemovalCb=null,this.anchor=it("v-component"),q(this.el,this.anchor),this.el.removeAttribute("is"),this.descriptor.ref&&this.el.removeAttribute("v-ref:"+u(this.descriptor.ref)),this.literal&&this.setComponent(this.expression))},update:function(t){this.literal||this.setComponent(t)},setComponent:function(t,e){if(this.invalidatePending(),t){var i=this;this.resolveComponent(t,function(){i.mountComponent(e)})}else this.unbuild(!0),this.remove(this.childVM,e),this.childVM=null},resolveComponent:function(t,e){var i=this;this.pendingComponentCb=C(function(n){i.ComponentName=n.options.name||t,i.Component=n,e()}),this.vm._resolveComponent(t,this.pendingComponentCb)},mountComponent:function(t){this.unbuild(!0);var e=this,i=this.Component.options.activate,n=this.getCached(),r=this.build();i&&!n?(this.waitingFor=r,ye(i,r,function(){e.waitingFor===r&&(e.waitingFor=null,e.transition(r,t))})):(n&&r._updateRef(),this.transition(r,t))},invalidatePending:function(){this.pendingComponentCb&&(this.pendingComponentCb.cancel(),
	this.pendingComponentCb=null)},build:function(t){var e=this.getCached();if(e)return e;if(this.Component){var i={name:this.ComponentName,el:Zt(this.el),template:this.inlineTemplate,parent:this._host||this.vm,_linkerCachable:!this.inlineTemplate,_ref:this.descriptor.ref,_asComponent:!0,_isRouterView:this._isRouterView,_context:this.vm,_scope:this._scope,_frag:this._frag};t&&v(i,t);var n=new this.Component(i);return this.keepAlive&&(this.cache[this.Component.cid]=n),n}},getCached:function(){return this.keepAlive&&this.cache[this.Component.cid]},unbuild:function(t){this.waitingFor&&(this.waitingFor.$destroy(),this.waitingFor=null);var e=this.childVM;return!e||this.keepAlive?void(e&&e._updateRef(!0)):void e.$destroy(!1,t)},remove:function(t,e){var i=this.keepAlive;if(t){this.pendingRemovals++,this.pendingRemovalCb=e;var n=this;t.$remove(function(){n.pendingRemovals--,i||t._cleanup(),!n.pendingRemovals&&n.pendingRemovalCb&&(n.pendingRemovalCb(),n.pendingRemovalCb=null)})}else e&&e()},transition:function(t,e){var i=this,n=this.childVM;switch(this.childVM=t,i.params.transitionMode){case"in-out":t.$before(i.anchor,function(){i.remove(n,e)});break;case"out-in":i.remove(n,function(){t.$before(i.anchor,e)});break;default:i.remove(n),t.$before(i.anchor,e)}},unbind:function(){if(this.invalidatePending(),this.unbuild(),this.cache){for(var t in this.cache)this.cache[t].$destroy();this.cache=null}}},hs=pn._propBindingModes,ls={bind:function(){var t=this.vm,e=t._context,i=this.descriptor.prop,n=i.path,r=i.parentPath,s=i.mode===hs.TWO_WAY,o=this.parentWatcher=new qt(e,r,function(e){e=ft(i,e),ut(i,e)&&(t[n]=e)},{twoWay:s,filters:i.filters,scope:this._scope});if(ct(t,i,o.value),s){var a=this;t.$once("pre-hook:created",function(){a.childWatcher=new qt(t,n,function(t){o.set(t)},{sync:!0})})}},unbind:function(){this.parentWatcher.teardown(),this.childWatcher&&this.childWatcher.teardown()}},cs=[],us=!1,fs="transition",ps="animation",ds=Pi+"Duration",vs=Ri+"Duration",ms=$e.prototype;ms.enter=function(t,e){this.cancelPending(),this.callHook("beforeEnter"),this.cb=e,K(this.el,this.enterClass),t(),this.entered=!1,this.callHookWithCb("enter"),this.entered||(this.cancel=this.hooks&&this.hooks.enterCancelled,Ce(this.enterNextTick))},ms.enterNextTick=function(){this.justEntered=!0;var t=this;setTimeout(function(){t.justEntered=!1},17);var e=this.enterDone,i=this.getCssTransitionType(this.enterClass);this.pendingJsCb?i===fs&&Z(this.el,this.enterClass):i===fs?(Z(this.el,this.enterClass),this.setupCssCb(Di,e)):i===ps?this.setupCssCb(Hi,e):e()},ms.enterDone=function(){this.entered=!0,this.cancel=this.pendingJsCb=null,Z(this.el,this.enterClass),this.callHook("afterEnter"),this.cb&&this.cb()},ms.leave=function(t,e){this.cancelPending(),this.callHook("beforeLeave"),this.op=t,this.cb=e,K(this.el,this.leaveClass),this.left=!1,this.callHookWithCb("leave"),this.left||(this.cancel=this.hooks&&this.hooks.leaveCancelled,this.op&&!this.pendingJsCb&&(this.justEntered?this.leaveDone():Ce(this.leaveNextTick)))},ms.leaveNextTick=function(){var t=this.getCssTransitionType(this.leaveClass);if(t){var e=t===fs?Di:Hi;this.setupCssCb(e,this.leaveDone)}else this.leaveDone()},ms.leaveDone=function(){this.left=!0,this.cancel=this.pendingJsCb=null,this.op(),Z(this.el,this.leaveClass),this.callHook("afterLeave"),this.cb&&this.cb(),this.op=null},ms.cancelPending=function(){this.op=this.cb=null;var t=!1;this.pendingCssCb&&(t=!0,Q(this.el,this.pendingCssEvent,this.pendingCssCb),this.pendingCssEvent=this.pendingCssCb=null),this.pendingJsCb&&(t=!0,this.pendingJsCb.cancel(),this.pendingJsCb=null),t&&(Z(this.el,this.enterClass),Z(this.el,this.leaveClass)),this.cancel&&(this.cancel.call(this.vm,this.el),this.cancel=null)},ms.callHook=function(t){this.hooks&&this.hooks[t]&&this.hooks[t].call(this.vm,this.el)},ms.callHookWithCb=function(t){var e=this.hooks&&this.hooks[t];e&&(e.length>1&&(this.pendingJsCb=C(this[t+"Done"])),e.call(this.vm,this.el,this.pendingJsCb))},ms.getCssTransitionType=function(t){if(!(!Di||document.hidden||this.hooks&&this.hooks.css===!1||ke(this.el))){var e=this.type||this.typeCache[t];if(e)return e;var i=this.el.style,n=window.getComputedStyle(this.el),r=i[ds]||n[ds];if(r&&"0s"!==r)e=fs;else{var s=i[vs]||n[vs];s&&"0s"!==s&&(e=ps)}return e&&(this.typeCache[t]=e),e}},ms.setupCssCb=function(t,e){this.pendingCssEvent=t;var i=this,n=this.el,r=this.pendingCssCb=function(s){s.target===n&&(Q(n,t,r),i.pendingCssEvent=i.pendingCssCb=null,!i.pendingJsCb&&e&&e())};J(n,t,r)};var gs={priority:kr,update:function(t,e){var i=this.el,n=bt(this.vm.$options,"transitions",t);t=t||"v",i.__v_trans=new $e(i,t,n,this.vm),e&&Z(i,e+"-transition"),K(i,t+"-transition")}},_s={style:Qr,"class":os,component:as,prop:ls,transition:gs},bs=pn._propBindingModes,ys={},Cs=/^[$_a-zA-Z]+[\w$]*$/,ws=/^v-bind:|^:/,$s=/^v-on:|^@/,ks=/^v-([^:]+)(?:$|:(.*)$)/,xs=/\.[^\.]+/g,As=/^(v-bind:|:)?transition$/,Os=["for","if"],Ts=1e3;qe.terminal=!0;var Ns=/[^\w\-:\.]/,js=Object.freeze({compile:Te,compileAndLinkProps:Fe,compileRoot:Pe,terminalDirectives:Os,transclude:Xe,scanSlots:ii}),Es=/^v-on:|^@/;ai.prototype._bind=function(){var t=this.name,e=this.descriptor;if(("cloak"!==t||this.vm._isCompiled)&&this.el&&this.el.removeAttribute){var i=e.attr||"v-"+t;this.el.removeAttribute(i)}var n=e.def;if("function"==typeof n?this.update=n:v(this,n),this._setupParams(),this.bind&&this.bind(),this._bound=!0,this.literal)this.update&&this.update(e.raw);else if((this.expression||this.modifiers)&&(this.update||this.twoWay)&&!this._checkStatement()){var r=this;this.update?this._update=function(t,e){r._locked||r.update(t,e)}:this._update=oi;var s=this._preProcess?p(this._preProcess,this):null,o=this._postProcess?p(this._postProcess,this):null,a=this._watcher=new qt(this.vm,this.expression,this._update,{filters:this.filters,twoWay:this.twoWay,deep:this.deep,preProcess:s,postProcess:o,scope:this._scope});this.afterBind?this.afterBind():this.update&&this.update(a.value)}},ai.prototype._setupParams=function(){if(this.params){var t=this.params;this.params=Object.create(null);for(var e,i,n,r=t.length;r--;)e=t[r],n=l(e),i=W(this.el,e),null!=i?this._setupParamWatcher(n,i):(i=M(this.el,e),null!=i&&(this.params[n]=""===i?!0:i))}},ai.prototype._setupParamWatcher=function(t,e){var i=this,n=!1,r=(this._scope||this.vm).$watch(e,function(e,r){if(i.params[t]=e,n){var s=i.paramWatchers&&i.paramWatchers[t];s&&s.call(i,e,r)}else n=!0},{immediate:!0,user:!1});(this._paramUnwatchFns||(this._paramUnwatchFns=[])).push(r)},ai.prototype._checkStatement=function(){var t=this.expression;if(t&&this.acceptStatement&&!Bt(t)){var e=Wt(t).get,i=this._scope||this.vm,n=function(t){i.$event=t,e.call(i,i),i.$event=null};return this.filters&&(n=i._applyFilters(n,null,this.filters)),this.update(n),!0}},ai.prototype.set=function(t){this.twoWay&&this._withLock(function(){this._watcher.set(t)})},ai.prototype._withLock=function(t){var e=this;e._locked=!0,t.call(e),Wi(function(){e._locked=!1})},ai.prototype.on=function(t,e,i){J(this.el,t,e,i),(this._listeners||(this._listeners=[])).push([t,e])},ai.prototype._teardown=function(){if(this._bound){this._bound=!1,this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown();var t,e=this._listeners;if(e)for(t=e.length;t--;)Q(this.el,e[t][0],e[t][1]);var i=this._paramUnwatchFns;if(i)for(t=i.length;t--;)i[t]();this.vm=this.el=this._watcher=this._listeners=null}};var Ss=/[^|]\|[^|]/;Ot(di),ri(di),si(di),hi(di),li(di),ci(di),ui(di),fi(di),pi(di);var Fs={priority:jr,params:["name"],bind:function(){var t=this.params.name||"default",e=this.vm._slotContents&&this.vm._slotContents[t];e&&e.hasChildNodes()?this.compile(e.cloneNode(!0),this.vm._context,this.vm):this.fallback()},compile:function(t,e,i){if(t&&e){if(this.el.hasChildNodes()&&1===t.childNodes.length&&1===t.childNodes[0].nodeType&&t.childNodes[0].hasAttribute("v-if")){var n=document.createElement("template");n.setAttribute("v-else",""),n.innerHTML=this.el.innerHTML,n._context=this.vm,t.appendChild(n)}var r=i?i._scope:this._scope;this.unlink=e.$compile(t,i,r,this._frag)}t?q(this.el,t):I(this.el)},fallback:function(){this.compile(X(this.el,!0),this.vm)},unbind:function(){this.unlink&&this.unlink()}},Ps={priority:Or,params:["name"],paramWatchers:{name:function(t){Fr.remove.call(this),t&&this.insert(t)}},bind:function(){this.anchor=it("v-partial"),q(this.el,this.anchor),this.insert(this.params.name)},insert:function(t){var e=bt(this.vm.$options,"partials",t);e&&(this.factory=new oe(this.vm,e),Fr.insert.call(this))},unbind:function(){this.frag&&this.frag.destroy()}},Ds={slot:Fs,partial:Ps},Rs=Sr._postProcess,Hs=/(\d{3})(?=\d)/g,Ls={orderBy:gi,filterBy:mi,limitBy:vi,json:{read:function(t,e){return"string"==typeof t?t:JSON.stringify(t,null,Number(e)||2)},write:function(t){try{return JSON.parse(t)}catch(e){return t}}},capitalize:function(t){return t||0===t?(t=t.toString(),t.charAt(0).toUpperCase()+t.slice(1)):""},uppercase:function(t){return t||0===t?t.toString().toUpperCase():""},lowercase:function(t){return t||0===t?t.toString().toLowerCase():""},currency:function(t,e){if(t=parseFloat(t),!isFinite(t)||!t&&0!==t)return"";e=null!=e?e:"$";var i=Math.abs(t).toFixed(2),n=i.slice(0,-3),r=n.length%3,s=r>0?n.slice(0,r)+(n.length>3?",":""):"",o=i.slice(-3),a=0>t?"-":"";return a+e+s+n.slice(r).replace(Hs,"$1,")+o},pluralize:function(t){var e=d(arguments,1);return e.length>1?e[t%10-1]||e[e.length-1]:e[0]+(1===t?"":"s")},debounce:function(t,e){return t?(e||(e=300),b(t,e)):void 0}};return bi(di),di.version="1.0.17",ji&&ji.emit("init",di),di});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v2.2.1 | (c) jQuery Foundation | jquery.org/license */
	!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.1",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!k.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=R.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c}catch(e){}O.set(a,b,c);
	}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.rnamespace||a.rnamespace.test(g.namespace))&&(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ca(b),i="border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Fa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Ba.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Oa(b,c,e||(i?"border":"content"),f,h)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,
	e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(void 0===a||"boolean"===c)&&(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){return n.trim(a.value)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var hb=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!hb.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,hb.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var ib=a.location,jb=n.now(),kb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return(!c||c.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+b),c};var lb=/#.*$/,mb=/([?&])_=[^&]*/,nb=/^(.*?):[ \t]*([^\r\n]*)$/gm,ob=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,pb=/^(?:GET|HEAD)$/,qb=/^\/\//,rb={},sb={},tb="*/".concat("*"),ub=d.createElement("a");ub.href=ib.href;function vb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function wb(a,b,c,d){var e={},f=a===sb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function xb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function yb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function zb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ib.href,type:"GET",isLocal:ob.test(ib.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":tb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?xb(xb(a,n.ajaxSettings),b):xb(n.ajaxSettings,a)},ajaxPrefilter:vb(rb),ajaxTransport:vb(sb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=nb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||ib.href)+"").replace(lb,"").replace(qb,ib.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=ub.protocol+"//"+ub.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),wb(rb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!pb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(kb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=mb.test(f)?f.replace(mb,"$1_="+jb++):f+(kb.test(f)?"&":"?")+"_="+jb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+tb+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=wb(sb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=yb(m,x,d)),u=zb(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,(b||!y)&&(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Ab=/%20/g,Bb=/\[\]$/,Cb=/\r?\n/g,Db=/^(?:submit|button|image|reset|file)$/i,Eb=/^(?:input|select|textarea|keygen)/i;function Fb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Bb.test(a)?d(a,e):Fb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Fb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Fb(c,a[c],b,e);return d.join("&").replace(Ab,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Eb.test(this.nodeName)&&!Db.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Cb,"\r\n")}}):{name:b.name,value:c.replace(Cb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Gb={0:200,1223:204},Hb=n.ajaxSettings.xhr();l.cors=!!Hb&&"withCredentials"in Hb,l.ajax=Hb=!!Hb,n.ajaxTransport(function(b){var c,d;return l.cors||Hb&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Gb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Ib=[],Jb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Ib.pop()||n.expando+"_"+jb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Jb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Jb,"$1"+e):b.jsonp!==!1&&(b.url+=(kb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Ib.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),l.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||(l.createHTMLDocument?d.implementation.createHTMLDocument(""):d);var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Kb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Kb)return Kb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(g,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Lb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Lb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Lb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"=="function"&&__webpack_require__(3)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Mb=a.jQuery,Nb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Nb),b&&a.jQuery===n&&(a.jQuery=Mb),n},b||(a.jQuery=a.$=n),n});


/***/ },
/* 3 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * vue-router v0.7.13
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  global.VueRouter = factory();
	}(this, function () { 'use strict';

	  var babelHelpers = {};

	  babelHelpers.classCallCheck = function (instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  };
	  function Target(path, matcher, delegate) {
	    this.path = path;
	    this.matcher = matcher;
	    this.delegate = delegate;
	  }

	  Target.prototype = {
	    to: function to(target, callback) {
	      var delegate = this.delegate;

	      if (delegate && delegate.willAddRoute) {
	        target = delegate.willAddRoute(this.matcher.target, target);
	      }

	      this.matcher.add(this.path, target);

	      if (callback) {
	        if (callback.length === 0) {
	          throw new Error("You must have an argument in the function passed to `to`");
	        }
	        this.matcher.addChild(this.path, target, callback, this.delegate);
	      }
	      return this;
	    }
	  };

	  function Matcher(target) {
	    this.routes = {};
	    this.children = {};
	    this.target = target;
	  }

	  Matcher.prototype = {
	    add: function add(path, handler) {
	      this.routes[path] = handler;
	    },

	    addChild: function addChild(path, target, callback, delegate) {
	      var matcher = new Matcher(target);
	      this.children[path] = matcher;

	      var match = generateMatch(path, matcher, delegate);

	      if (delegate && delegate.contextEntered) {
	        delegate.contextEntered(target, match);
	      }

	      callback(match);
	    }
	  };

	  function generateMatch(startingPath, matcher, delegate) {
	    return function (path, nestedCallback) {
	      var fullPath = startingPath + path;

	      if (nestedCallback) {
	        nestedCallback(generateMatch(fullPath, matcher, delegate));
	      } else {
	        return new Target(startingPath + path, matcher, delegate);
	      }
	    };
	  }

	  function addRoute(routeArray, path, handler) {
	    var len = 0;
	    for (var i = 0, l = routeArray.length; i < l; i++) {
	      len += routeArray[i].path.length;
	    }

	    path = path.substr(len);
	    var route = { path: path, handler: handler };
	    routeArray.push(route);
	  }

	  function eachRoute(baseRoute, matcher, callback, binding) {
	    var routes = matcher.routes;

	    for (var path in routes) {
	      if (routes.hasOwnProperty(path)) {
	        var routeArray = baseRoute.slice();
	        addRoute(routeArray, path, routes[path]);

	        if (matcher.children[path]) {
	          eachRoute(routeArray, matcher.children[path], callback, binding);
	        } else {
	          callback.call(binding, routeArray);
	        }
	      }
	    }
	  }

	  function map (callback, addRouteCallback) {
	    var matcher = new Matcher();

	    callback(generateMatch("", matcher, this.delegate));

	    eachRoute([], matcher, function (route) {
	      if (addRouteCallback) {
	        addRouteCallback(this, route);
	      } else {
	        this.add(route);
	      }
	    }, this);
	  }

	  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];

	  var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

	  var noWarning = false;
	  function warn(msg) {
	    if (!noWarning && typeof console !== 'undefined') {
	      console.error('[vue-router] ' + msg);
	    }
	  }

	  function tryDecode(uri, asComponent) {
	    try {
	      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);
	    } catch (e) {
	      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);
	    }
	  }

	  function isArray(test) {
	    return Object.prototype.toString.call(test) === "[object Array]";
	  }

	  // A Segment represents a segment in the original route description.
	  // Each Segment type provides an `eachChar` and `regex` method.
	  //
	  // The `eachChar` method invokes the callback with one or more character
	  // specifications. A character specification consumes one or more input
	  // characters.
	  //
	  // The `regex` method returns a regex fragment for the segment. If the
	  // segment is a dynamic of star segment, the regex fragment also includes
	  // a capture.
	  //
	  // A character specification contains:
	  //
	  // * `validChars`: a String with a list of all valid characters, or
	  // * `invalidChars`: a String with a list of all invalid characters
	  // * `repeat`: true if the character specification can repeat

	  function StaticSegment(string) {
	    this.string = string;
	  }
	  StaticSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      var string = this.string,
	          ch;

	      for (var i = 0, l = string.length; i < l; i++) {
	        ch = string.charAt(i);
	        callback({ validChars: ch });
	      }
	    },

	    regex: function regex() {
	      return this.string.replace(escapeRegex, '\\$1');
	    },

	    generate: function generate() {
	      return this.string;
	    }
	  };

	  function DynamicSegment(name) {
	    this.name = name;
	  }
	  DynamicSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      callback({ invalidChars: "/", repeat: true });
	    },

	    regex: function regex() {
	      return "([^/]+)";
	    },

	    generate: function generate(params) {
	      var val = params[this.name];
	      return val == null ? ":" + this.name : val;
	    }
	  };

	  function StarSegment(name) {
	    this.name = name;
	  }
	  StarSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      callback({ invalidChars: "", repeat: true });
	    },

	    regex: function regex() {
	      return "(.+)";
	    },

	    generate: function generate(params) {
	      var val = params[this.name];
	      return val == null ? ":" + this.name : val;
	    }
	  };

	  function EpsilonSegment() {}
	  EpsilonSegment.prototype = {
	    eachChar: function eachChar() {},
	    regex: function regex() {
	      return "";
	    },
	    generate: function generate() {
	      return "";
	    }
	  };

	  function parse(route, names, specificity) {
	    // normalize route as not starting with a "/". Recognition will
	    // also normalize.
	    if (route.charAt(0) === "/") {
	      route = route.substr(1);
	    }

	    var segments = route.split("/"),
	        results = [];

	    // A routes has specificity determined by the order that its different segments
	    // appear in. This system mirrors how the magnitude of numbers written as strings
	    // works.
	    // Consider a number written as: "abc". An example would be "200". Any other number written
	    // "xyz" will be smaller than "abc" so long as `a > z`. For instance, "199" is smaller
	    // then "200", even though "y" and "z" (which are both 9) are larger than "0" (the value
	    // of (`b` and `c`). This is because the leading symbol, "2", is larger than the other
	    // leading symbol, "1".
	    // The rule is that symbols to the left carry more weight than symbols to the right
	    // when a number is written out as a string. In the above strings, the leading digit
	    // represents how many 100's are in the number, and it carries more weight than the middle
	    // number which represents how many 10's are in the number.
	    // This system of number magnitude works well for route specificity, too. A route written as
	    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than
	    // `x`, irrespective of the other parts.
	    // Because of this similarity, we assign each type of segment a number value written as a
	    // string. We can find the specificity of compound routes by concatenating these strings
	    // together, from left to right. After we have looped through all of the segments,
	    // we convert the string to a number.
	    specificity.val = '';

	    for (var i = 0, l = segments.length; i < l; i++) {
	      var segment = segments[i],
	          match;

	      if (match = segment.match(/^:([^\/]+)$/)) {
	        results.push(new DynamicSegment(match[1]));
	        names.push(match[1]);
	        specificity.val += '3';
	      } else if (match = segment.match(/^\*([^\/]+)$/)) {
	        results.push(new StarSegment(match[1]));
	        specificity.val += '2';
	        names.push(match[1]);
	      } else if (segment === "") {
	        results.push(new EpsilonSegment());
	        specificity.val += '1';
	      } else {
	        results.push(new StaticSegment(segment));
	        specificity.val += '4';
	      }
	    }

	    specificity.val = +specificity.val;

	    return results;
	  }

	  // A State has a character specification and (`charSpec`) and a list of possible
	  // subsequent states (`nextStates`).
	  //
	  // If a State is an accepting state, it will also have several additional
	  // properties:
	  //
	  // * `regex`: A regular expression that is used to extract parameters from paths
	  //   that reached this accepting state.
	  // * `handlers`: Information on how to convert the list of captures into calls
	  //   to registered handlers with the specified parameters
	  // * `types`: How many static, dynamic or star segments in this route. Used to
	  //   decide which route to use if multiple registered routes match a path.
	  //
	  // Currently, State is implemented naively by looping over `nextStates` and
	  // comparing a character specification against a character. A more efficient
	  // implementation would use a hash of keys pointing at one or more next states.

	  function State(charSpec) {
	    this.charSpec = charSpec;
	    this.nextStates = [];
	  }

	  State.prototype = {
	    get: function get(charSpec) {
	      var nextStates = this.nextStates;

	      for (var i = 0, l = nextStates.length; i < l; i++) {
	        var child = nextStates[i];

	        var isEqual = child.charSpec.validChars === charSpec.validChars;
	        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;

	        if (isEqual) {
	          return child;
	        }
	      }
	    },

	    put: function put(charSpec) {
	      var state;

	      // If the character specification already exists in a child of the current
	      // state, just return that state.
	      if (state = this.get(charSpec)) {
	        return state;
	      }

	      // Make a new state for the character spec
	      state = new State(charSpec);

	      // Insert the new state as a child of the current state
	      this.nextStates.push(state);

	      // If this character specification repeats, insert the new state as a child
	      // of itself. Note that this will not trigger an infinite loop because each
	      // transition during recognition consumes a character.
	      if (charSpec.repeat) {
	        state.nextStates.push(state);
	      }

	      // Return the new state
	      return state;
	    },

	    // Find a list of child states matching the next character
	    match: function match(ch) {
	      // DEBUG "Processing `" + ch + "`:"
	      var nextStates = this.nextStates,
	          child,
	          charSpec,
	          chars;

	      // DEBUG "  " + debugState(this)
	      var returned = [];

	      for (var i = 0, l = nextStates.length; i < l; i++) {
	        child = nextStates[i];

	        charSpec = child.charSpec;

	        if (typeof (chars = charSpec.validChars) !== 'undefined') {
	          if (chars.indexOf(ch) !== -1) {
	            returned.push(child);
	          }
	        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
	          if (chars.indexOf(ch) === -1) {
	            returned.push(child);
	          }
	        }
	      }

	      return returned;
	    }

	    /** IF DEBUG
	    , debug: function() {
	      var charSpec = this.charSpec,
	          debug = "[",
	          chars = charSpec.validChars || charSpec.invalidChars;
	       if (charSpec.invalidChars) { debug += "^"; }
	      debug += chars;
	      debug += "]";
	       if (charSpec.repeat) { debug += "+"; }
	       return debug;
	    }
	    END IF **/
	  };

	  /** IF DEBUG
	  function debug(log) {
	    console.log(log);
	  }

	  function debugState(state) {
	    return state.nextStates.map(function(n) {
	      if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
	      return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
	    }).join(", ")
	  }
	  END IF **/

	  // Sort the routes by specificity
	  function sortSolutions(states) {
	    return states.sort(function (a, b) {
	      return b.specificity.val - a.specificity.val;
	    });
	  }

	  function recognizeChar(states, ch) {
	    var nextStates = [];

	    for (var i = 0, l = states.length; i < l; i++) {
	      var state = states[i];

	      nextStates = nextStates.concat(state.match(ch));
	    }

	    return nextStates;
	  }

	  var oCreate = Object.create || function (proto) {
	    function F() {}
	    F.prototype = proto;
	    return new F();
	  };

	  function RecognizeResults(queryParams) {
	    this.queryParams = queryParams || {};
	  }
	  RecognizeResults.prototype = oCreate({
	    splice: Array.prototype.splice,
	    slice: Array.prototype.slice,
	    push: Array.prototype.push,
	    length: 0,
	    queryParams: null
	  });

	  function findHandler(state, path, queryParams) {
	    var handlers = state.handlers,
	        regex = state.regex;
	    var captures = path.match(regex),
	        currentCapture = 1;
	    var result = new RecognizeResults(queryParams);

	    for (var i = 0, l = handlers.length; i < l; i++) {
	      var handler = handlers[i],
	          names = handler.names,
	          params = {};

	      for (var j = 0, m = names.length; j < m; j++) {
	        params[names[j]] = captures[currentCapture++];
	      }

	      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
	    }

	    return result;
	  }

	  function addSegment(currentState, segment) {
	    segment.eachChar(function (ch) {
	      var state;

	      currentState = currentState.put(ch);
	    });

	    return currentState;
	  }

	  function decodeQueryParamPart(part) {
	    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
	    part = part.replace(/\+/gm, '%20');
	    return tryDecode(part, true);
	  }

	  // The main interface

	  var RouteRecognizer = function RouteRecognizer() {
	    this.rootState = new State();
	    this.names = {};
	  };

	  RouteRecognizer.prototype = {
	    add: function add(routes, options) {
	      var currentState = this.rootState,
	          regex = "^",
	          specificity = {},
	          handlers = [],
	          allSegments = [],
	          name;

	      var isEmpty = true;

	      for (var i = 0, l = routes.length; i < l; i++) {
	        var route = routes[i],
	            names = [];

	        var segments = parse(route.path, names, specificity);

	        allSegments = allSegments.concat(segments);

	        for (var j = 0, m = segments.length; j < m; j++) {
	          var segment = segments[j];

	          if (segment instanceof EpsilonSegment) {
	            continue;
	          }

	          isEmpty = false;

	          // Add a "/" for the new segment
	          currentState = currentState.put({ validChars: "/" });
	          regex += "/";

	          // Add a representation of the segment to the NFA and regex
	          currentState = addSegment(currentState, segment);
	          regex += segment.regex();
	        }

	        var handler = { handler: route.handler, names: names };
	        handlers.push(handler);
	      }

	      if (isEmpty) {
	        currentState = currentState.put({ validChars: "/" });
	        regex += "/";
	      }

	      currentState.handlers = handlers;
	      currentState.regex = new RegExp(regex + "$");
	      currentState.specificity = specificity;

	      if (name = options && options.as) {
	        this.names[name] = {
	          segments: allSegments,
	          handlers: handlers
	        };
	      }
	    },

	    handlersFor: function handlersFor(name) {
	      var route = this.names[name],
	          result = [];
	      if (!route) {
	        throw new Error("There is no route named " + name);
	      }

	      for (var i = 0, l = route.handlers.length; i < l; i++) {
	        result.push(route.handlers[i]);
	      }

	      return result;
	    },

	    hasRoute: function hasRoute(name) {
	      return !!this.names[name];
	    },

	    generate: function generate(name, params) {
	      var route = this.names[name],
	          output = "";
	      if (!route) {
	        throw new Error("There is no route named " + name);
	      }

	      var segments = route.segments;

	      for (var i = 0, l = segments.length; i < l; i++) {
	        var segment = segments[i];

	        if (segment instanceof EpsilonSegment) {
	          continue;
	        }

	        output += "/";
	        output += segment.generate(params);
	      }

	      if (output.charAt(0) !== '/') {
	        output = '/' + output;
	      }

	      if (params && params.queryParams) {
	        output += this.generateQueryString(params.queryParams);
	      }

	      return output;
	    },

	    generateQueryString: function generateQueryString(params) {
	      var pairs = [];
	      var keys = [];
	      for (var key in params) {
	        if (params.hasOwnProperty(key)) {
	          keys.push(key);
	        }
	      }
	      keys.sort();
	      for (var i = 0, len = keys.length; i < len; i++) {
	        key = keys[i];
	        var value = params[key];
	        if (value == null) {
	          continue;
	        }
	        var pair = encodeURIComponent(key);
	        if (isArray(value)) {
	          for (var j = 0, l = value.length; j < l; j++) {
	            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
	            pairs.push(arrayPair);
	          }
	        } else {
	          pair += "=" + encodeURIComponent(value);
	          pairs.push(pair);
	        }
	      }

	      if (pairs.length === 0) {
	        return '';
	      }

	      return "?" + pairs.join("&");
	    },

	    parseQueryString: function parseQueryString(queryString) {
	      var pairs = queryString.split("&"),
	          queryParams = {};
	      for (var i = 0; i < pairs.length; i++) {
	        var pair = pairs[i].split('='),
	            key = decodeQueryParamPart(pair[0]),
	            keyLength = key.length,
	            isArray = false,
	            value;
	        if (pair.length === 1) {
	          value = 'true';
	        } else {
	          //Handle arrays
	          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {
	            isArray = true;
	            key = key.slice(0, keyLength - 2);
	            if (!queryParams[key]) {
	              queryParams[key] = [];
	            }
	          }
	          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';
	        }
	        if (isArray) {
	          queryParams[key].push(value);
	        } else {
	          queryParams[key] = value;
	        }
	      }
	      return queryParams;
	    },

	    recognize: function recognize(path, silent) {
	      noWarning = silent;
	      var states = [this.rootState],
	          pathLen,
	          i,
	          l,
	          queryStart,
	          queryParams = {},
	          isSlashDropped = false;

	      queryStart = path.indexOf('?');
	      if (queryStart !== -1) {
	        var queryString = path.substr(queryStart + 1, path.length);
	        path = path.substr(0, queryStart);
	        if (queryString) {
	          queryParams = this.parseQueryString(queryString);
	        }
	      }

	      path = tryDecode(path);
	      if (!path) return;

	      // DEBUG GROUP path

	      if (path.charAt(0) !== "/") {
	        path = "/" + path;
	      }

	      pathLen = path.length;
	      if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
	        path = path.substr(0, pathLen - 1);
	        isSlashDropped = true;
	      }

	      for (i = 0, l = path.length; i < l; i++) {
	        states = recognizeChar(states, path.charAt(i));
	        if (!states.length) {
	          break;
	        }
	      }

	      // END DEBUG GROUP

	      var solutions = [];
	      for (i = 0, l = states.length; i < l; i++) {
	        if (states[i].handlers) {
	          solutions.push(states[i]);
	        }
	      }

	      states = sortSolutions(solutions);

	      var state = solutions[0];

	      if (state && state.handlers) {
	        // if a trailing slash was dropped and a star segment is the last segment
	        // specified, put the trailing slash back
	        if (isSlashDropped && state.regex.source.slice(-5) === "(.+)$") {
	          path = path + "/";
	        }
	        return findHandler(state, path, queryParams);
	      }
	    }
	  };

	  RouteRecognizer.prototype.map = map;

	  var genQuery = RouteRecognizer.prototype.generateQueryString;

	  // export default for holding the Vue reference
	  var exports$1 = {};
	  /**
	   * Warn stuff.
	   *
	   * @param {String} msg
	   */

	  function warn$1(msg) {
	    /* istanbul ignore next */
	    if (typeof console !== 'undefined') {
	      console.error('[vue-router] ' + msg);
	    }
	  }

	  /**
	   * Resolve a relative path.
	   *
	   * @param {String} base
	   * @param {String} relative
	   * @param {Boolean} append
	   * @return {String}
	   */

	  function resolvePath(base, relative, append) {
	    var query = base.match(/(\?.*)$/);
	    if (query) {
	      query = query[1];
	      base = base.slice(0, -query.length);
	    }
	    // a query!
	    if (relative.charAt(0) === '?') {
	      return base + relative;
	    }
	    var stack = base.split('/');
	    // remove trailing segment if:
	    // - not appending
	    // - appending to trailing slash (last segment is empty)
	    if (!append || !stack[stack.length - 1]) {
	      stack.pop();
	    }
	    // resolve relative path
	    var segments = relative.replace(/^\//, '').split('/');
	    for (var i = 0; i < segments.length; i++) {
	      var segment = segments[i];
	      if (segment === '.') {
	        continue;
	      } else if (segment === '..') {
	        stack.pop();
	      } else {
	        stack.push(segment);
	      }
	    }
	    // ensure leading slash
	    if (stack[0] !== '') {
	      stack.unshift('');
	    }
	    return stack.join('/');
	  }

	  /**
	   * Forgiving check for a promise
	   *
	   * @param {Object} p
	   * @return {Boolean}
	   */

	  function isPromise(p) {
	    return p && typeof p.then === 'function';
	  }

	  /**
	   * Retrive a route config field from a component instance
	   * OR a component contructor.
	   *
	   * @param {Function|Vue} component
	   * @param {String} name
	   * @return {*}
	   */

	  function getRouteConfig(component, name) {
	    var options = component && (component.$options || component.options);
	    return options && options.route && options.route[name];
	  }

	  /**
	   * Resolve an async component factory. Have to do a dirty
	   * mock here because of Vue core's internal API depends on
	   * an ID check.
	   *
	   * @param {Object} handler
	   * @param {Function} cb
	   */

	  var resolver = undefined;

	  function resolveAsyncComponent(handler, cb) {
	    if (!resolver) {
	      resolver = {
	        resolve: exports$1.Vue.prototype._resolveComponent,
	        $options: {
	          components: {
	            _: handler.component
	          }
	        }
	      };
	    } else {
	      resolver.$options.components._ = handler.component;
	    }
	    resolver.resolve('_', function (Component) {
	      handler.component = Component;
	      cb(Component);
	    });
	  }

	  /**
	   * Map the dynamic segments in a path to params.
	   *
	   * @param {String} path
	   * @param {Object} params
	   * @param {Object} query
	   */

	  function mapParams(path, params, query) {
	    if (params === undefined) params = {};

	    path = path.replace(/:([^\/]+)/g, function (_, key) {
	      var val = params[key];
	      /* istanbul ignore if */
	      if (!val) {
	        warn$1('param "' + key + '" not found when generating ' + 'path for "' + path + '" with params ' + JSON.stringify(params));
	      }
	      return val || '';
	    });
	    if (query) {
	      path += genQuery(query);
	    }
	    return path;
	  }

	  var hashRE = /#.*$/;

	  var HTML5History = (function () {
	    function HTML5History(_ref) {
	      var root = _ref.root;
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, HTML5History);

	      if (root && root !== '/') {
	        // make sure there's the starting slash
	        if (root.charAt(0) !== '/') {
	          root = '/' + root;
	        }
	        // remove trailing slash
	        this.root = root.replace(/\/$/, '');
	        this.rootRE = new RegExp('^\\' + this.root);
	      } else {
	        this.root = null;
	      }
	      this.onChange = onChange;
	      // check base tag
	      var baseEl = document.querySelector('base');
	      this.base = baseEl && baseEl.getAttribute('href');
	    }

	    HTML5History.prototype.start = function start() {
	      var _this = this;

	      this.listener = function (e) {
	        var url = location.pathname + location.search;
	        if (_this.root) {
	          url = url.replace(_this.rootRE, '');
	        }
	        _this.onChange(url, e && e.state, location.hash);
	      };
	      window.addEventListener('popstate', this.listener);
	      this.listener();
	    };

	    HTML5History.prototype.stop = function stop() {
	      window.removeEventListener('popstate', this.listener);
	    };

	    HTML5History.prototype.go = function go(path, replace, append) {
	      var url = this.formatPath(path, append);
	      if (replace) {
	        history.replaceState({}, '', url);
	      } else {
	        // record scroll position by replacing current state
	        history.replaceState({
	          pos: {
	            x: window.pageXOffset,
	            y: window.pageYOffset
	          }
	        }, '', location.href);
	        // then push new state
	        history.pushState({}, '', url);
	      }
	      var hashMatch = path.match(hashRE);
	      var hash = hashMatch && hashMatch[0];
	      path = url
	      // strip hash so it doesn't mess up params
	      .replace(hashRE, '')
	      // remove root before matching
	      .replace(this.rootRE, '');
	      this.onChange(path, null, hash);
	    };

	    HTML5History.prototype.formatPath = function formatPath(path, append) {
	      return path.charAt(0) === '/'
	      // absolute path
	      ? this.root ? this.root + '/' + path.replace(/^\//, '') : path : resolvePath(this.base || location.pathname, path, append);
	    };

	    return HTML5History;
	  })();

	  var HashHistory = (function () {
	    function HashHistory(_ref) {
	      var hashbang = _ref.hashbang;
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, HashHistory);

	      this.hashbang = hashbang;
	      this.onChange = onChange;
	    }

	    HashHistory.prototype.start = function start() {
	      var self = this;
	      this.listener = function () {
	        var path = location.hash;
	        var raw = path.replace(/^#!?/, '');
	        // always
	        if (raw.charAt(0) !== '/') {
	          raw = '/' + raw;
	        }
	        var formattedPath = self.formatPath(raw);
	        if (formattedPath !== path) {
	          location.replace(formattedPath);
	          return;
	        }
	        // determine query
	        // note it's possible to have queries in both the actual URL
	        // and the hash fragment itself.
	        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;
	        self.onChange(path.replace(/^#!?/, '') + query);
	      };
	      window.addEventListener('hashchange', this.listener);
	      this.listener();
	    };

	    HashHistory.prototype.stop = function stop() {
	      window.removeEventListener('hashchange', this.listener);
	    };

	    HashHistory.prototype.go = function go(path, replace, append) {
	      path = this.formatPath(path, append);
	      if (replace) {
	        location.replace(path);
	      } else {
	        location.hash = path;
	      }
	    };

	    HashHistory.prototype.formatPath = function formatPath(path, append) {
	      var isAbsoloute = path.charAt(0) === '/';
	      var prefix = '#' + (this.hashbang ? '!' : '');
	      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);
	    };

	    return HashHistory;
	  })();

	  var AbstractHistory = (function () {
	    function AbstractHistory(_ref) {
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, AbstractHistory);

	      this.onChange = onChange;
	      this.currentPath = '/';
	    }

	    AbstractHistory.prototype.start = function start() {
	      this.onChange('/');
	    };

	    AbstractHistory.prototype.stop = function stop() {
	      // noop
	    };

	    AbstractHistory.prototype.go = function go(path, replace, append) {
	      path = this.currentPath = this.formatPath(path, append);
	      this.onChange(path);
	    };

	    AbstractHistory.prototype.formatPath = function formatPath(path, append) {
	      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);
	    };

	    return AbstractHistory;
	  })();

	  /**
	   * Determine the reusability of an existing router view.
	   *
	   * @param {Directive} view
	   * @param {Object} handler
	   * @param {Transition} transition
	   */

	  function canReuse(view, handler, transition) {
	    var component = view.childVM;
	    if (!component || !handler) {
	      return false;
	    }
	    // important: check view.Component here because it may
	    // have been changed in activate hook
	    if (view.Component !== handler.component) {
	      return false;
	    }
	    var canReuseFn = getRouteConfig(component, 'canReuse');
	    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {
	      to: transition.to,
	      from: transition.from
	    }) : true; // defaults to true
	  }

	  /**
	   * Check if a component can deactivate.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Function} next
	   */

	  function canDeactivate(view, transition, next) {
	    var fromComponent = view.childVM;
	    var hook = getRouteConfig(fromComponent, 'canDeactivate');
	    if (!hook) {
	      next();
	    } else {
	      transition.callHook(hook, fromComponent, next, {
	        expectBoolean: true
	      });
	    }
	  }

	  /**
	   * Check if a component can activate.
	   *
	   * @param {Object} handler
	   * @param {Transition} transition
	   * @param {Function} next
	   */

	  function canActivate(handler, transition, next) {
	    resolveAsyncComponent(handler, function (Component) {
	      // have to check due to async-ness
	      if (transition.aborted) {
	        return;
	      }
	      // determine if this component can be activated
	      var hook = getRouteConfig(Component, 'canActivate');
	      if (!hook) {
	        next();
	      } else {
	        transition.callHook(hook, null, next, {
	          expectBoolean: true
	        });
	      }
	    });
	  }

	  /**
	   * Call deactivate hooks for existing router-views.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Function} next
	   */

	  function deactivate(view, transition, next) {
	    var component = view.childVM;
	    var hook = getRouteConfig(component, 'deactivate');
	    if (!hook) {
	      next();
	    } else {
	      transition.callHooks(hook, component, next);
	    }
	  }

	  /**
	   * Activate / switch component for a router-view.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Number} depth
	   * @param {Function} [cb]
	   */

	  function activate(view, transition, depth, cb, reuse) {
	    var handler = transition.activateQueue[depth];
	    if (!handler) {
	      saveChildView(view);
	      if (view._bound) {
	        view.setComponent(null);
	      }
	      cb && cb();
	      return;
	    }

	    var Component = view.Component = handler.component;
	    var activateHook = getRouteConfig(Component, 'activate');
	    var dataHook = getRouteConfig(Component, 'data');
	    var waitForData = getRouteConfig(Component, 'waitForData');

	    view.depth = depth;
	    view.activated = false;

	    var component = undefined;
	    var loading = !!(dataHook && !waitForData);

	    // "reuse" is a flag passed down when the parent view is
	    // either reused via keep-alive or as a child of a kept-alive view.
	    // of course we can only reuse if the current kept-alive instance
	    // is of the correct type.
	    reuse = reuse && view.childVM && view.childVM.constructor === Component;

	    if (reuse) {
	      // just reuse
	      component = view.childVM;
	      component.$loadingRouteData = loading;
	    } else {
	      saveChildView(view);

	      // unbuild current component. this step also destroys
	      // and removes all nested child views.
	      view.unbuild(true);

	      // build the new component. this will also create the
	      // direct child view of the current one. it will register
	      // itself as view.childView.
	      component = view.build({
	        _meta: {
	          $loadingRouteData: loading
	        },
	        created: function created() {
	          this._routerView = view;
	        }
	      });

	      // handle keep-alive.
	      // when a kept-alive child vm is restored, we need to
	      // add its cached child views into the router's view list,
	      // and also properly update current view's child view.
	      if (view.keepAlive) {
	        component.$loadingRouteData = loading;
	        var cachedChildView = component._keepAliveRouterView;
	        if (cachedChildView) {
	          view.childView = cachedChildView;
	          component._keepAliveRouterView = null;
	        }
	      }
	    }

	    // cleanup the component in case the transition is aborted
	    // before the component is ever inserted.
	    var cleanup = function cleanup() {
	      component.$destroy();
	    };

	    // actually insert the component and trigger transition
	    var insert = function insert() {
	      if (reuse) {
	        cb && cb();
	        return;
	      }
	      var router = transition.router;
	      if (router._rendered || router._transitionOnLoad) {
	        view.transition(component);
	      } else {
	        // no transition on first render, manual transition
	        /* istanbul ignore if */
	        if (view.setCurrent) {
	          // 0.12 compat
	          view.setCurrent(component);
	        } else {
	          // 1.0
	          view.childVM = component;
	        }
	        component.$before(view.anchor, null, false);
	      }
	      cb && cb();
	    };

	    var afterData = function afterData() {
	      // activate the child view
	      if (view.childView) {
	        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);
	      }
	      insert();
	    };

	    // called after activation hook is resolved
	    var afterActivate = function afterActivate() {
	      view.activated = true;
	      if (dataHook && waitForData) {
	        // wait until data loaded to insert
	        loadData(component, transition, dataHook, afterData, cleanup);
	      } else {
	        // load data and insert at the same time
	        if (dataHook) {
	          loadData(component, transition, dataHook);
	        }
	        afterData();
	      }
	    };

	    if (activateHook) {
	      transition.callHooks(activateHook, component, afterActivate, {
	        cleanup: cleanup,
	        postActivate: true
	      });
	    } else {
	      afterActivate();
	    }
	  }

	  /**
	   * Reuse a view, just reload data if necessary.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   */

	  function reuse(view, transition) {
	    var component = view.childVM;
	    var dataHook = getRouteConfig(component, 'data');
	    if (dataHook) {
	      loadData(component, transition, dataHook);
	    }
	  }

	  /**
	   * Asynchronously load and apply data to component.
	   *
	   * @param {Vue} component
	   * @param {Transition} transition
	   * @param {Function} hook
	   * @param {Function} cb
	   * @param {Function} cleanup
	   */

	  function loadData(component, transition, hook, cb, cleanup) {
	    component.$loadingRouteData = true;
	    transition.callHooks(hook, component, function () {
	      component.$loadingRouteData = false;
	      component.$emit('route-data-loaded', component);
	      cb && cb();
	    }, {
	      cleanup: cleanup,
	      postActivate: true,
	      processData: function processData(data) {
	        // handle promise sugar syntax
	        var promises = [];
	        if (isPlainObject(data)) {
	          Object.keys(data).forEach(function (key) {
	            var val = data[key];
	            if (isPromise(val)) {
	              promises.push(val.then(function (resolvedVal) {
	                component.$set(key, resolvedVal);
	              }));
	            } else {
	              component.$set(key, val);
	            }
	          });
	        }
	        if (promises.length) {
	          return promises[0].constructor.all(promises);
	        }
	      }
	    });
	  }

	  /**
	   * Save the child view for a kept-alive view so that
	   * we can restore it when it is switched back to.
	   *
	   * @param {Directive} view
	   */

	  function saveChildView(view) {
	    if (view.keepAlive && view.childVM && view.childView) {
	      view.childVM._keepAliveRouterView = view.childView;
	    }
	    view.childView = null;
	  }

	  /**
	   * Check plain object.
	   *
	   * @param {*} val
	   */

	  function isPlainObject(val) {
	    return Object.prototype.toString.call(val) === '[object Object]';
	  }

	  /**
	   * A RouteTransition object manages the pipeline of a
	   * router-view switching process. This is also the object
	   * passed into user route hooks.
	   *
	   * @param {Router} router
	   * @param {Route} to
	   * @param {Route} from
	   */

	  var RouteTransition = (function () {
	    function RouteTransition(router, to, from) {
	      babelHelpers.classCallCheck(this, RouteTransition);

	      this.router = router;
	      this.to = to;
	      this.from = from;
	      this.next = null;
	      this.aborted = false;
	      this.done = false;
	    }

	    /**
	     * Abort current transition and return to previous location.
	     */

	    RouteTransition.prototype.abort = function abort() {
	      if (!this.aborted) {
	        this.aborted = true;
	        // if the root path throws an error during validation
	        // on initial load, it gets caught in an infinite loop.
	        var abortingOnLoad = !this.from.path && this.to.path === '/';
	        if (!abortingOnLoad) {
	          this.router.replace(this.from.path || '/');
	        }
	      }
	    };

	    /**
	     * Abort current transition and redirect to a new location.
	     *
	     * @param {String} path
	     */

	    RouteTransition.prototype.redirect = function redirect(path) {
	      if (!this.aborted) {
	        this.aborted = true;
	        if (typeof path === 'string') {
	          path = mapParams(path, this.to.params, this.to.query);
	        } else {
	          path.params = path.params || this.to.params;
	          path.query = path.query || this.to.query;
	        }
	        this.router.replace(path);
	      }
	    };

	    /**
	     * A router view transition's pipeline can be described as
	     * follows, assuming we are transitioning from an existing
	     * <router-view> chain [Component A, Component B] to a new
	     * chain [Component A, Component C]:
	     *
	     *  A    A
	     *  | => |
	     *  B    C
	     *
	     * 1. Reusablity phase:
	     *   -> canReuse(A, A)
	     *   -> canReuse(B, C)
	     *   -> determine new queues:
	     *      - deactivation: [B]
	     *      - activation: [C]
	     *
	     * 2. Validation phase:
	     *   -> canDeactivate(B)
	     *   -> canActivate(C)
	     *
	     * 3. Activation phase:
	     *   -> deactivate(B)
	     *   -> activate(C)
	     *
	     * Each of these steps can be asynchronous, and any
	     * step can potentially abort the transition.
	     *
	     * @param {Function} cb
	     */

	    RouteTransition.prototype.start = function start(cb) {
	      var transition = this;

	      // determine the queue of views to deactivate
	      var deactivateQueue = [];
	      var view = this.router._rootView;
	      while (view) {
	        deactivateQueue.unshift(view);
	        view = view.childView;
	      }
	      var reverseDeactivateQueue = deactivateQueue.slice().reverse();

	      // determine the queue of route handlers to activate
	      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {
	        return match.handler;
	      });

	      // 1. Reusability phase
	      var i = undefined,
	          reuseQueue = undefined;
	      for (i = 0; i < reverseDeactivateQueue.length; i++) {
	        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {
	          break;
	        }
	      }
	      if (i > 0) {
	        reuseQueue = reverseDeactivateQueue.slice(0, i);
	        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();
	        activateQueue = activateQueue.slice(i);
	      }

	      // 2. Validation phase
	      transition.runQueue(deactivateQueue, canDeactivate, function () {
	        transition.runQueue(activateQueue, canActivate, function () {
	          transition.runQueue(deactivateQueue, deactivate, function () {
	            // 3. Activation phase

	            // Update router current route
	            transition.router._onTransitionValidated(transition);

	            // trigger reuse for all reused views
	            reuseQueue && reuseQueue.forEach(function (view) {
	              return reuse(view, transition);
	            });

	            // the root of the chain that needs to be replaced
	            // is the top-most non-reusable view.
	            if (deactivateQueue.length) {
	              var _view = deactivateQueue[deactivateQueue.length - 1];
	              var depth = reuseQueue ? reuseQueue.length : 0;
	              activate(_view, transition, depth, cb);
	            } else {
	              cb();
	            }
	          });
	        });
	      });
	    };

	    /**
	     * Asynchronously and sequentially apply a function to a
	     * queue.
	     *
	     * @param {Array} queue
	     * @param {Function} fn
	     * @param {Function} cb
	     */

	    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {
	      var transition = this;
	      step(0);
	      function step(index) {
	        if (index >= queue.length) {
	          cb();
	        } else {
	          fn(queue[index], transition, function () {
	            step(index + 1);
	          });
	        }
	      }
	    };

	    /**
	     * Call a user provided route transition hook and handle
	     * the response (e.g. if the user returns a promise).
	     *
	     * If the user neither expects an argument nor returns a
	     * promise, the hook is assumed to be synchronous.
	     *
	     * @param {Function} hook
	     * @param {*} [context]
	     * @param {Function} [cb]
	     * @param {Object} [options]
	     *                 - {Boolean} expectBoolean
	     *                 - {Boolean} postActive
	     *                 - {Function} processData
	     *                 - {Function} cleanup
	     */

	    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {
	      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	      var _ref$expectBoolean = _ref.expectBoolean;
	      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;
	      var _ref$postActivate = _ref.postActivate;
	      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;
	      var processData = _ref.processData;
	      var cleanup = _ref.cleanup;

	      var transition = this;
	      var nextCalled = false;

	      // abort the transition
	      var abort = function abort() {
	        cleanup && cleanup();
	        transition.abort();
	      };

	      // handle errors
	      var onError = function onError(err) {
	        postActivate ? next() : abort();
	        if (err && !transition.router._suppress) {
	          warn$1('Uncaught error during transition: ');
	          throw err instanceof Error ? err : new Error(err);
	        }
	      };

	      // since promise swallows errors, we have to
	      // throw it in the next tick...
	      var onPromiseError = function onPromiseError(err) {
	        try {
	          onError(err);
	        } catch (e) {
	          setTimeout(function () {
	            throw e;
	          }, 0);
	        }
	      };

	      // advance the transition to the next step
	      var next = function next() {
	        if (nextCalled) {
	          warn$1('transition.next() should be called only once.');
	          return;
	        }
	        nextCalled = true;
	        if (transition.aborted) {
	          cleanup && cleanup();
	          return;
	        }
	        cb && cb();
	      };

	      var nextWithBoolean = function nextWithBoolean(res) {
	        if (typeof res === 'boolean') {
	          res ? next() : abort();
	        } else if (isPromise(res)) {
	          res.then(function (ok) {
	            ok ? next() : abort();
	          }, onPromiseError);
	        } else if (!hook.length) {
	          next();
	        }
	      };

	      var nextWithData = function nextWithData(data) {
	        var res = undefined;
	        try {
	          res = processData(data);
	        } catch (err) {
	          return onError(err);
	        }
	        if (isPromise(res)) {
	          res.then(next, onPromiseError);
	        } else {
	          next();
	        }
	      };

	      // expose a clone of the transition object, so that each
	      // hook gets a clean copy and prevent the user from
	      // messing with the internals.
	      var exposed = {
	        to: transition.to,
	        from: transition.from,
	        abort: abort,
	        next: processData ? nextWithData : next,
	        redirect: function redirect() {
	          transition.redirect.apply(transition, arguments);
	        }
	      };

	      // actually call the hook
	      var res = undefined;
	      try {
	        res = hook.call(context, exposed);
	      } catch (err) {
	        return onError(err);
	      }

	      if (expectBoolean) {
	        // boolean hooks
	        nextWithBoolean(res);
	      } else if (isPromise(res)) {
	        // promise
	        if (processData) {
	          res.then(nextWithData, onPromiseError);
	        } else {
	          res.then(next, onPromiseError);
	        }
	      } else if (processData && isPlainOjbect(res)) {
	        // data promise sugar
	        nextWithData(res);
	      } else if (!hook.length) {
	        next();
	      }
	    };

	    /**
	     * Call a single hook or an array of async hooks in series.
	     *
	     * @param {Array} hooks
	     * @param {*} context
	     * @param {Function} cb
	     * @param {Object} [options]
	     */

	    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {
	      var _this = this;

	      if (Array.isArray(hooks)) {
	        this.runQueue(hooks, function (hook, _, next) {
	          if (!_this.aborted) {
	            _this.callHook(hook, context, next, options);
	          }
	        }, cb);
	      } else {
	        this.callHook(hooks, context, cb, options);
	      }
	    };

	    return RouteTransition;
	  })();

	  function isPlainOjbect(val) {
	    return Object.prototype.toString.call(val) === '[object Object]';
	  }

	  function toArray(val) {
	    return val ? Array.prototype.slice.call(val) : [];
	  }

	  var internalKeysRE = /^(component|subRoutes|fullPath)$/;

	  /**
	   * Route Context Object
	   *
	   * @param {String} path
	   * @param {Router} router
	   */

	  var Route = function Route(path, router) {
	    var _this = this;

	    babelHelpers.classCallCheck(this, Route);

	    var matched = router._recognizer.recognize(path);
	    if (matched) {
	      // copy all custom fields from route configs
	      [].forEach.call(matched, function (match) {
	        for (var key in match.handler) {
	          if (!internalKeysRE.test(key)) {
	            _this[key] = match.handler[key];
	          }
	        }
	      });
	      // set query and params
	      this.query = matched.queryParams;
	      this.params = [].reduce.call(matched, function (prev, cur) {
	        if (cur.params) {
	          for (var key in cur.params) {
	            prev[key] = cur.params[key];
	          }
	        }
	        return prev;
	      }, {});
	    }
	    // expose path and router
	    this.path = path;
	    // for internal use
	    this.matched = matched || router._notFoundHandler;
	    // internal reference to router
	    Object.defineProperty(this, 'router', {
	      enumerable: false,
	      value: router
	    });
	    // Important: freeze self to prevent observation
	    Object.freeze(this);
	  };

	  function applyOverride (Vue) {
	    var _Vue$util = Vue.util;
	    var extend = _Vue$util.extend;
	    var isArray = _Vue$util.isArray;
	    var defineReactive = _Vue$util.defineReactive;

	    // override Vue's init and destroy process to keep track of router instances
	    var init = Vue.prototype._init;
	    Vue.prototype._init = function (options) {
	      options = options || {};
	      var root = options._parent || options.parent || this;
	      var router = root.$router;
	      var route = root.$route;
	      if (router) {
	        // expose router
	        this.$router = router;
	        router._children.push(this);
	        /* istanbul ignore if */
	        if (this._defineMeta) {
	          // 0.12
	          this._defineMeta('$route', route);
	        } else {
	          // 1.0
	          defineReactive(this, '$route', route);
	        }
	      }
	      init.call(this, options);
	    };

	    var destroy = Vue.prototype._destroy;
	    Vue.prototype._destroy = function () {
	      if (!this._isBeingDestroyed && this.$router) {
	        this.$router._children.$remove(this);
	      }
	      destroy.apply(this, arguments);
	    };

	    // 1.0 only: enable route mixins
	    var strats = Vue.config.optionMergeStrategies;
	    var hooksToMergeRE = /^(data|activate|deactivate)$/;

	    if (strats) {
	      strats.route = function (parentVal, childVal) {
	        if (!childVal) return parentVal;
	        if (!parentVal) return childVal;
	        var ret = {};
	        extend(ret, parentVal);
	        for (var key in childVal) {
	          var a = ret[key];
	          var b = childVal[key];
	          // for data, activate and deactivate, we need to merge them into
	          // arrays similar to lifecycle hooks.
	          if (a && hooksToMergeRE.test(key)) {
	            ret[key] = (isArray(a) ? a : [a]).concat(b);
	          } else {
	            ret[key] = b;
	          }
	        }
	        return ret;
	      };
	    }
	  }

	  function View (Vue) {

	    var _ = Vue.util;
	    var componentDef =
	    // 0.12
	    Vue.directive('_component') ||
	    // 1.0
	    Vue.internalDirectives.component;
	    // <router-view> extends the internal component directive
	    var viewDef = _.extend({}, componentDef);

	    // with some overrides
	    _.extend(viewDef, {

	      _isRouterView: true,

	      bind: function bind() {
	        var route = this.vm.$route;
	        /* istanbul ignore if */
	        if (!route) {
	          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');
	          return;
	        }
	        // force dynamic directive so v-component doesn't
	        // attempt to build right now
	        this._isDynamicLiteral = true;
	        // finally, init by delegating to v-component
	        componentDef.bind.call(this);

	        // locate the parent view
	        var parentView = undefined;
	        var parent = this.vm;
	        while (parent) {
	          if (parent._routerView) {
	            parentView = parent._routerView;
	            break;
	          }
	          parent = parent.$parent;
	        }
	        if (parentView) {
	          // register self as a child of the parent view,
	          // instead of activating now. This is so that the
	          // child's activate hook is called after the
	          // parent's has resolved.
	          this.parentView = parentView;
	          parentView.childView = this;
	        } else {
	          // this is the root view!
	          var router = route.router;
	          router._rootView = this;
	        }

	        // handle late-rendered view
	        // two possibilities:
	        // 1. root view rendered after transition has been
	        //    validated;
	        // 2. child view rendered after parent view has been
	        //    activated.
	        var transition = route.router._currentTransition;
	        if (!parentView && transition.done || parentView && parentView.activated) {
	          var depth = parentView ? parentView.depth + 1 : 0;
	          activate(this, transition, depth);
	        }
	      },

	      unbind: function unbind() {
	        if (this.parentView) {
	          this.parentView.childView = null;
	        }
	        componentDef.unbind.call(this);
	      }
	    });

	    Vue.elementDirective('router-view', viewDef);
	  }

	  var trailingSlashRE = /\/$/;
	  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	  var queryStringRE = /\?.*$/;

	  // install v-link, which provides navigation support for
	  // HTML5 history mode
	  function Link (Vue) {
	    var _Vue$util = Vue.util;
	    var _bind = _Vue$util.bind;
	    var isObject = _Vue$util.isObject;
	    var addClass = _Vue$util.addClass;
	    var removeClass = _Vue$util.removeClass;

	    var onPriority = Vue.directive('on').priority;
	    var LINK_UPDATE = '__vue-router-link-update__';

	    var activeId = 0;

	    Vue.directive('link-active', {
	      priority: 9999,
	      bind: function bind() {
	        var _this = this;

	        var id = String(activeId++);
	        // collect v-links contained within this element.
	        // we need do this here before the parent-child relationship
	        // gets messed up by terminal directives (if, for, components)
	        var childLinks = this.el.querySelectorAll('[v-link]');
	        for (var i = 0, l = childLinks.length; i < l; i++) {
	          var link = childLinks[i];
	          var existingId = link.getAttribute(LINK_UPDATE);
	          var value = existingId ? existingId + ',' + id : id;
	          // leave a mark on the link element which can be persisted
	          // through fragment clones.
	          link.setAttribute(LINK_UPDATE, value);
	        }
	        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {
	          if (link.activeIds.indexOf(id) > -1) {
	            link.updateClasses(path, _this.el);
	          }
	        });
	      },
	      unbind: function unbind() {
	        this.vm.$off(LINK_UPDATE, this.cb);
	      }
	    });

	    Vue.directive('link', {
	      priority: onPriority - 2,

	      bind: function bind() {
	        var vm = this.vm;
	        /* istanbul ignore if */
	        if (!vm.$route) {
	          warn$1('v-link can only be used inside a router-enabled app.');
	          return;
	        }
	        this.router = vm.$route.router;
	        // update things when the route changes
	        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));
	        // check v-link-active ids
	        var activeIds = this.el.getAttribute(LINK_UPDATE);
	        if (activeIds) {
	          this.el.removeAttribute(LINK_UPDATE);
	          this.activeIds = activeIds.split(',');
	        }
	        // no need to handle click if link expects to be opened
	        // in a new window/tab.
	        /* istanbul ignore if */
	        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {
	          return;
	        }
	        // handle click
	        this.handler = _bind(this.onClick, this);
	        this.el.addEventListener('click', this.handler);
	      },

	      update: function update(target) {
	        this.target = target;
	        if (isObject(target)) {
	          this.append = target.append;
	          this.exact = target.exact;
	          this.prevActiveClass = this.activeClass;
	          this.activeClass = target.activeClass;
	        }
	        this.onRouteUpdate(this.vm.$route);
	      },

	      onClick: function onClick(e) {
	        // don't redirect with control keys
	        /* istanbul ignore if */
	        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
	        // don't redirect when preventDefault called
	        /* istanbul ignore if */
	        if (e.defaultPrevented) return;
	        // don't redirect on right click
	        /* istanbul ignore if */
	        if (e.button !== 0) return;

	        var target = this.target;
	        if (target) {
	          // v-link with expression, just go
	          e.preventDefault();
	          this.router.go(target);
	        } else {
	          // no expression, delegate for an <a> inside
	          var el = e.target;
	          while (el.tagName !== 'A' && el !== this.el) {
	            el = el.parentNode;
	          }
	          if (el.tagName === 'A' && sameOrigin(el)) {
	            e.preventDefault();
	            var path = el.pathname;
	            if (this.router.history.root) {
	              path = path.replace(this.router.history.rootRE, '');
	            }
	            this.router.go({
	              path: path,
	              replace: target && target.replace,
	              append: target && target.append
	            });
	          }
	        }
	      },

	      onRouteUpdate: function onRouteUpdate(route) {
	        // router.stringifyPath is dependent on current route
	        // and needs to be called again whenver route changes.
	        var newPath = this.router.stringifyPath(this.target);
	        if (this.path !== newPath) {
	          this.path = newPath;
	          this.updateActiveMatch();
	          this.updateHref();
	        }
	        if (this.activeIds) {
	          this.vm.$emit(LINK_UPDATE, this, route.path);
	        } else {
	          this.updateClasses(route.path, this.el);
	        }
	      },

	      updateActiveMatch: function updateActiveMatch() {
	        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\$&') + '(\\/|$)') : null;
	      },

	      updateHref: function updateHref() {
	        if (this.el.tagName !== 'A') {
	          return;
	        }
	        var path = this.path;
	        var router = this.router;
	        var isAbsolute = path.charAt(0) === '/';
	        // do not format non-hash relative paths
	        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;
	        if (href) {
	          this.el.href = href;
	        } else {
	          this.el.removeAttribute('href');
	        }
	      },

	      updateClasses: function updateClasses(path, el) {
	        var activeClass = this.activeClass || this.router._linkActiveClass;
	        // clear old class
	        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {
	          toggleClasses(el, this.prevActiveClass, removeClass);
	        }
	        // remove query string before matching
	        var dest = this.path.replace(queryStringRE, '');
	        path = path.replace(queryStringRE, '');
	        // add new class
	        if (this.exact) {
	          if (dest === path ||
	          // also allow additional trailing slash
	          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {
	            toggleClasses(el, activeClass, addClass);
	          } else {
	            toggleClasses(el, activeClass, removeClass);
	          }
	        } else {
	          if (this.activeRE && this.activeRE.test(path)) {
	            toggleClasses(el, activeClass, addClass);
	          } else {
	            toggleClasses(el, activeClass, removeClass);
	          }
	        }
	      },

	      unbind: function unbind() {
	        this.el.removeEventListener('click', this.handler);
	        this.unwatch && this.unwatch();
	      }
	    });

	    function sameOrigin(link) {
	      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;
	    }

	    // this function is copied from v-bind:class implementation until
	    // we properly expose it...
	    function toggleClasses(el, key, fn) {
	      key = key.trim();
	      if (key.indexOf(' ') === -1) {
	        fn(el, key);
	        return;
	      }
	      var keys = key.split(/\s+/);
	      for (var i = 0, l = keys.length; i < l; i++) {
	        fn(el, keys[i]);
	      }
	    }
	  }

	  var historyBackends = {
	    abstract: AbstractHistory,
	    hash: HashHistory,
	    html5: HTML5History
	  };

	  // late bind during install
	  var Vue = undefined;

	  /**
	   * Router constructor
	   *
	   * @param {Object} [options]
	   */

	  var Router = (function () {
	    function Router() {
	      var _this = this;

	      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var _ref$hashbang = _ref.hashbang;
	      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;
	      var _ref$abstract = _ref.abstract;
	      var abstract = _ref$abstract === undefined ? false : _ref$abstract;
	      var _ref$history = _ref.history;
	      var history = _ref$history === undefined ? false : _ref$history;
	      var _ref$saveScrollPosition = _ref.saveScrollPosition;
	      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;
	      var _ref$transitionOnLoad = _ref.transitionOnLoad;
	      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;
	      var _ref$suppressTransitionError = _ref.suppressTransitionError;
	      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;
	      var _ref$root = _ref.root;
	      var root = _ref$root === undefined ? null : _ref$root;
	      var _ref$linkActiveClass = _ref.linkActiveClass;
	      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;
	      babelHelpers.classCallCheck(this, Router);

	      /* istanbul ignore if */
	      if (!Router.installed) {
	        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');
	      }

	      // Vue instances
	      this.app = null;
	      this._children = [];

	      // route recognizer
	      this._recognizer = new RouteRecognizer();
	      this._guardRecognizer = new RouteRecognizer();

	      // state
	      this._started = false;
	      this._startCb = null;
	      this._currentRoute = {};
	      this._currentTransition = null;
	      this._previousTransition = null;
	      this._notFoundHandler = null;
	      this._notFoundRedirect = null;
	      this._beforeEachHooks = [];
	      this._afterEachHooks = [];

	      // trigger transition on initial render?
	      this._rendered = false;
	      this._transitionOnLoad = transitionOnLoad;

	      // history mode
	      this._root = root;
	      this._abstract = abstract;
	      this._hashbang = hashbang;

	      // check if HTML5 history is available
	      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;
	      this._history = history && hasPushState;
	      this._historyFallback = history && !hasPushState;

	      // create history object
	      var inBrowser = Vue.util.inBrowser;
	      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';

	      var History = historyBackends[this.mode];
	      this.history = new History({
	        root: root,
	        hashbang: this._hashbang,
	        onChange: function onChange(path, state, anchor) {
	          _this._match(path, state, anchor);
	        }
	      });

	      // other options
	      this._saveScrollPosition = saveScrollPosition;
	      this._linkActiveClass = linkActiveClass;
	      this._suppress = suppressTransitionError;
	    }

	    /**
	     * Allow directly passing components to a route
	     * definition.
	     *
	     * @param {String} path
	     * @param {Object} handler
	     */

	    // API ===================================================

	    /**
	    * Register a map of top-level paths.
	    *
	    * @param {Object} map
	    */

	    Router.prototype.map = function map(_map) {
	      for (var route in _map) {
	        this.on(route, _map[route]);
	      }
	      return this;
	    };

	    /**
	     * Register a single root-level path
	     *
	     * @param {String} rootPath
	     * @param {Object} handler
	     *                 - {String} component
	     *                 - {Object} [subRoutes]
	     *                 - {Boolean} [forceRefresh]
	     *                 - {Function} [before]
	     *                 - {Function} [after]
	     */

	    Router.prototype.on = function on(rootPath, handler) {
	      if (rootPath === '*') {
	        this._notFound(handler);
	      } else {
	        this._addRoute(rootPath, handler, []);
	      }
	      return this;
	    };

	    /**
	     * Set redirects.
	     *
	     * @param {Object} map
	     */

	    Router.prototype.redirect = function redirect(map) {
	      for (var path in map) {
	        this._addRedirect(path, map[path]);
	      }
	      return this;
	    };

	    /**
	     * Set aliases.
	     *
	     * @param {Object} map
	     */

	    Router.prototype.alias = function alias(map) {
	      for (var path in map) {
	        this._addAlias(path, map[path]);
	      }
	      return this;
	    };

	    /**
	     * Set global before hook.
	     *
	     * @param {Function} fn
	     */

	    Router.prototype.beforeEach = function beforeEach(fn) {
	      this._beforeEachHooks.push(fn);
	      return this;
	    };

	    /**
	     * Set global after hook.
	     *
	     * @param {Function} fn
	     */

	    Router.prototype.afterEach = function afterEach(fn) {
	      this._afterEachHooks.push(fn);
	      return this;
	    };

	    /**
	     * Navigate to a given path.
	     * The path can be an object describing a named path in
	     * the format of { name: '...', params: {}, query: {}}
	     * The path is assumed to be already decoded, and will
	     * be resolved against root (if provided)
	     *
	     * @param {String|Object} path
	     * @param {Boolean} [replace]
	     */

	    Router.prototype.go = function go(path) {
	      var replace = false;
	      var append = false;
	      if (Vue.util.isObject(path)) {
	        replace = path.replace;
	        append = path.append;
	      }
	      path = this.stringifyPath(path);
	      if (path) {
	        this.history.go(path, replace, append);
	      }
	    };

	    /**
	     * Short hand for replacing current path
	     *
	     * @param {String} path
	     */

	    Router.prototype.replace = function replace(path) {
	      if (typeof path === 'string') {
	        path = { path: path };
	      }
	      path.replace = true;
	      this.go(path);
	    };

	    /**
	     * Start the router.
	     *
	     * @param {VueConstructor} App
	     * @param {String|Element} container
	     * @param {Function} [cb]
	     */

	    Router.prototype.start = function start(App, container, cb) {
	      /* istanbul ignore if */
	      if (this._started) {
	        warn$1('already started.');
	        return;
	      }
	      this._started = true;
	      this._startCb = cb;
	      if (!this.app) {
	        /* istanbul ignore if */
	        if (!App || !container) {
	          throw new Error('Must start vue-router with a component and a ' + 'root container.');
	        }
	        /* istanbul ignore if */
	        if (App instanceof Vue) {
	          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');
	        }
	        this._appContainer = container;
	        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);
	        // give it a name for better debugging
	        Ctor.options.name = Ctor.options.name || 'RouterApp';
	      }

	      // handle history fallback in browsers that do not
	      // support HTML5 history API
	      if (this._historyFallback) {
	        var _location = window.location;
	        var _history = new HTML5History({ root: this._root });
	        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;
	        if (path && path !== '/') {
	          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);
	          return;
	        }
	      }

	      this.history.start();
	    };

	    /**
	     * Stop listening to route changes.
	     */

	    Router.prototype.stop = function stop() {
	      this.history.stop();
	      this._started = false;
	    };

	    /**
	     * Normalize named route object / string paths into
	     * a string.
	     *
	     * @param {Object|String|Number} path
	     * @return {String}
	     */

	    Router.prototype.stringifyPath = function stringifyPath(path) {
	      var generatedPath = '';
	      if (path && typeof path === 'object') {
	        if (path.name) {
	          var extend = Vue.util.extend;
	          var currentParams = this._currentTransition && this._currentTransition.to.params;
	          var targetParams = path.params || {};
	          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;
	          generatedPath = encodeURI(this._recognizer.generate(path.name, params));
	        } else if (path.path) {
	          generatedPath = encodeURI(path.path);
	        }
	        if (path.query) {
	          // note: the generated query string is pre-URL-encoded by the recognizer
	          var query = this._recognizer.generateQueryString(path.query);
	          if (generatedPath.indexOf('?') > -1) {
	            generatedPath += '&' + query.slice(1);
	          } else {
	            generatedPath += query;
	          }
	        }
	      } else {
	        generatedPath = encodeURI(path ? path + '' : '');
	      }
	      return generatedPath;
	    };

	    // Internal methods ======================================

	    /**
	    * Add a route containing a list of segments to the internal
	    * route recognizer. Will be called recursively to add all
	    * possible sub-routes.
	    *
	    * @param {String} path
	    * @param {Object} handler
	    * @param {Array} segments
	    */

	    Router.prototype._addRoute = function _addRoute(path, handler, segments) {
	      guardComponent(path, handler);
	      handler.path = path;
	      handler.fullPath = (segments.reduce(function (path, segment) {
	        return path + segment.path;
	      }, '') + path).replace('//', '/');
	      segments.push({
	        path: path,
	        handler: handler
	      });
	      this._recognizer.add(segments, {
	        as: handler.name
	      });
	      // add sub routes
	      if (handler.subRoutes) {
	        for (var subPath in handler.subRoutes) {
	          // recursively walk all sub routes
	          this._addRoute(subPath, handler.subRoutes[subPath],
	          // pass a copy in recursion to avoid mutating
	          // across branches
	          segments.slice());
	        }
	      }
	    };

	    /**
	     * Set the notFound route handler.
	     *
	     * @param {Object} handler
	     */

	    Router.prototype._notFound = function _notFound(handler) {
	      guardComponent('*', handler);
	      this._notFoundHandler = [{ handler: handler }];
	    };

	    /**
	     * Add a redirect record.
	     *
	     * @param {String} path
	     * @param {String} redirectPath
	     */

	    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {
	      if (path === '*') {
	        this._notFoundRedirect = redirectPath;
	      } else {
	        this._addGuard(path, redirectPath, this.replace);
	      }
	    };

	    /**
	     * Add an alias record.
	     *
	     * @param {String} path
	     * @param {String} aliasPath
	     */

	    Router.prototype._addAlias = function _addAlias(path, aliasPath) {
	      this._addGuard(path, aliasPath, this._match);
	    };

	    /**
	     * Add a path guard.
	     *
	     * @param {String} path
	     * @param {String} mappedPath
	     * @param {Function} handler
	     */

	    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {
	      var _this2 = this;

	      this._guardRecognizer.add([{
	        path: path,
	        handler: function handler(match, query) {
	          var realPath = mapParams(mappedPath, match.params, query);
	          _handler.call(_this2, realPath);
	        }
	      }]);
	    };

	    /**
	     * Check if a path matches any redirect records.
	     *
	     * @param {String} path
	     * @return {Boolean} - if true, will skip normal match.
	     */

	    Router.prototype._checkGuard = function _checkGuard(path) {
	      var matched = this._guardRecognizer.recognize(path, true);
	      if (matched) {
	        matched[0].handler(matched[0], matched.queryParams);
	        return true;
	      } else if (this._notFoundRedirect) {
	        matched = this._recognizer.recognize(path);
	        if (!matched) {
	          this.replace(this._notFoundRedirect);
	          return true;
	        }
	      }
	    };

	    /**
	     * Match a URL path and set the route context on vm,
	     * triggering view updates.
	     *
	     * @param {String} path
	     * @param {Object} [state]
	     * @param {String} [anchor]
	     */

	    Router.prototype._match = function _match(path, state, anchor) {
	      var _this3 = this;

	      if (this._checkGuard(path)) {
	        return;
	      }

	      var currentRoute = this._currentRoute;
	      var currentTransition = this._currentTransition;

	      if (currentTransition) {
	        if (currentTransition.to.path === path) {
	          // do nothing if we have an active transition going to the same path
	          return;
	        } else if (currentRoute.path === path) {
	          // We are going to the same path, but we also have an ongoing but
	          // not-yet-validated transition. Abort that transition and reset to
	          // prev transition.
	          currentTransition.aborted = true;
	          this._currentTransition = this._prevTransition;
	          return;
	        } else {
	          // going to a totally different path. abort ongoing transition.
	          currentTransition.aborted = true;
	        }
	      }

	      // construct new route and transition context
	      var route = new Route(path, this);
	      var transition = new RouteTransition(this, route, currentRoute);

	      // current transition is updated right now.
	      // however, current route will only be updated after the transition has
	      // been validated.
	      this._prevTransition = currentTransition;
	      this._currentTransition = transition;

	      if (!this.app) {
	        (function () {
	          // initial render
	          var router = _this3;
	          _this3.app = new _this3._appConstructor({
	            el: _this3._appContainer,
	            created: function created() {
	              this.$router = router;
	            },
	            _meta: {
	              $route: route
	            }
	          });
	        })();
	      }

	      // check global before hook
	      var beforeHooks = this._beforeEachHooks;
	      var startTransition = function startTransition() {
	        transition.start(function () {
	          _this3._postTransition(route, state, anchor);
	        });
	      };

	      if (beforeHooks.length) {
	        transition.runQueue(beforeHooks, function (hook, _, next) {
	          if (transition === _this3._currentTransition) {
	            transition.callHook(hook, null, next, {
	              expectBoolean: true
	            });
	          }
	        }, startTransition);
	      } else {
	        startTransition();
	      }

	      if (!this._rendered && this._startCb) {
	        this._startCb.call(null);
	      }

	      // HACK:
	      // set rendered to true after the transition start, so
	      // that components that are acitvated synchronously know
	      // whether it is the initial render.
	      this._rendered = true;
	    };

	    /**
	     * Set current to the new transition.
	     * This is called by the transition object when the
	     * validation of a route has succeeded.
	     *
	     * @param {Transition} transition
	     */

	    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {
	      // set current route
	      var route = this._currentRoute = transition.to;
	      // update route context for all children
	      if (this.app.$route !== route) {
	        this.app.$route = route;
	        this._children.forEach(function (child) {
	          child.$route = route;
	        });
	      }
	      // call global after hook
	      if (this._afterEachHooks.length) {
	        this._afterEachHooks.forEach(function (hook) {
	          return hook.call(null, {
	            to: transition.to,
	            from: transition.from
	          });
	        });
	      }
	      this._currentTransition.done = true;
	    };

	    /**
	     * Handle stuff after the transition.
	     *
	     * @param {Route} route
	     * @param {Object} [state]
	     * @param {String} [anchor]
	     */

	    Router.prototype._postTransition = function _postTransition(route, state, anchor) {
	      // handle scroll positions
	      // saved scroll positions take priority
	      // then we check if the path has an anchor
	      var pos = state && state.pos;
	      if (pos && this._saveScrollPosition) {
	        Vue.nextTick(function () {
	          window.scrollTo(pos.x, pos.y);
	        });
	      } else if (anchor) {
	        Vue.nextTick(function () {
	          var el = document.getElementById(anchor.slice(1));
	          if (el) {
	            window.scrollTo(window.scrollX, el.offsetTop);
	          }
	        });
	      }
	    };

	    return Router;
	  })();

	  function guardComponent(path, handler) {
	    var comp = handler.component;
	    if (Vue.util.isPlainObject(comp)) {
	      comp = handler.component = Vue.extend(comp);
	    }
	    /* istanbul ignore if */
	    if (typeof comp !== 'function') {
	      handler.component = null;
	      warn$1('invalid component for route "' + path + '".');
	    }
	  }

	  /* Installation */

	  Router.installed = false;

	  /**
	   * Installation interface.
	   * Install the necessary directives.
	   */

	  Router.install = function (externalVue) {
	    /* istanbul ignore if */
	    if (Router.installed) {
	      warn$1('already installed.');
	      return;
	    }
	    Vue = externalVue;
	    applyOverride(Vue);
	    View(Vue);
	    Link(Vue);
	    exports$1.Vue = Vue;
	    Router.installed = true;
	  };

	  // auto install
	  /* istanbul ignore if */
	  if (typeof window !== 'undefined' && window.Vue) {
	    window.Vue.use(Router);
	  }

	  return Router;

	}));

/***/ },
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Vuex v0.6.2
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Vuex=e()}(this,function(){"use strict";function t(t){return t.reduce(function(t,e){return Object.keys(e).forEach(function(n){var o=t[n];o?Array.isArray(o)?o.push(e[n]):t[n]=[t[n],e[n]]:t[n]=e[n]}),t},{})}function e(t){if(Array.isArray(t))return t.map(e);if(t&&"object"===("undefined"==typeof t?"undefined":s["typeof"](t))){for(var n={},o=Object.keys(t),r=0,i=o.length;i>r;r++){var a=o[r];n[a]=e(t[a])}return n}return t}function n(t){if(!u){var e=t.$watch("__vuex__",function(t){return t});u=t._watchers[0].constructor,e()}return u}function o(t){return c||(c=t._data.__ob__.dep.constructor),c}function r(t){function e(){var t=this.$options,e=t.store,n=t.vuex;if(e?this.$store=e:t.parent&&t.parent.$store&&(this.$store=t.parent.$store),n){this.$store||console.warn("[vuex] store not injected. make sure to provide the store option in your root component.");var o=n.state,r=n.getters,a=n.actions;if(o&&!r&&(console.warn("[vuex] vuex.state option will been deprecated in 1.0. Use vuex.getters instead."),r=o),r){t.computed=t.computed||{};for(var u in r)i(this,u,r[u])}if(a){t.methods=t.methods||{};for(var c in a)t.methods[c]=s(a[c],this.$store)}}}function r(){throw new Error("vuex getter properties are read-only.")}function i(t,e,n){Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:a(t.$store,n),set:r})}function a(t,e){var r=t._getterCacheId;if(e[r])return e[r];var i=t._vm,a=n(i),s=o(i),u=new a(i,function(t){return e(t)},null,{lazy:!0}),c=function(){return u.dirty&&u.evaluate(),s.target&&u.depend(),u.value};return e[r]=c,c}function s(t,e){return function(){for(var n=arguments.length,o=Array(n),r=0;n>r;r++)o[r]=arguments[r];return t.call.apply(t,[this,e].concat(o))}}var u=t.prototype._init;t.prototype._init=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];t.init=t.init?[e].concat(t.init):e,u.call(this,t)};var c=t.config.optionMergeStrategies.computed;t.config.optionMergeStrategies.vuex=function(t,e){return t?e?{getters:c(t.getters,e.getters),state:c(t.state,e.state),actions:c(t.actions,e.actions)}:t:e}}function i(t){d=t,r(d)}function a(){console.warn("[vuex] Vuex.createLogger has been deprecated.Use `import createLogger from 'vuex/logger' instead.")}var s={};s["typeof"]="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},s.classCallCheck=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},s.createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),s.toConsumableArray=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)};var u=void 0,c=void 0,f="undefined"!=typeof window&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,h={onInit:function(t,e){f&&(f.emit("vuex:init",e),f.on("vuex:travel-to-state",function(t){var n=e._vm._data;e._dispatching=!0,Object.keys(t).forEach(function(e){n[e]=t[e]}),e._dispatching=!1}))},onMutation:function(t,e){f&&f.emit("vuex:mutation",t,e)}},d=void 0,l=0,p=function(){function o(){var t=this,e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=e.state,r=void 0===n?{}:n,i=e.mutations,a=void 0===i?{}:i,u=e.modules,c=void 0===u?{}:u,f=e.middlewares,h=void 0===f?[]:f,p=e.strict,v=void 0===p?!1:p;s.classCallCheck(this,o),this._getterCacheId="vuex_store_"+l++,this._dispatching=!1,this._rootMutations=this._mutations=a,this._modules=c;var y=this.dispatch;if(this.dispatch=function(){for(var e=arguments.length,n=Array(e),o=0;e>o;o++)n[o]=arguments[o];y.apply(t,n)},!d)throw new Error("[vuex] must call Vue.use(Vuex) before creating a store instance.");var _=d.config.silent;d.config.silent=!0,this._vm=new d({data:r}),d.config.silent=_,this._setupModuleState(r,c),this._setupModuleMutations(c),this._setupMiddlewares(h,r),v&&this._setupMutationCheck()}return s.createClass(o,[{key:"dispatch",value:function(t){for(var n=this,o=arguments.length,r=Array(o>1?o-1:0),i=1;o>i;i++)r[i-1]=arguments[i];"object"===("undefined"==typeof t?"undefined":s["typeof"](t))&&t.type&&1===arguments.length&&(r=[t],t=t.type);var a=this._mutations[t],u=this._prevSnapshot,c=this.state,f=void 0,h=void 0;a?(this._dispatching=!0,Array.isArray(a)?a.forEach(function(t){return t.apply(void 0,[c].concat(s.toConsumableArray(r)))}):a.apply(void 0,[c].concat(s.toConsumableArray(r))),this._dispatching=!1,this._needSnapshots&&(f=this._prevSnapshot=e(c),h=e(r)),this._middlewares.forEach(function(e){e.onMutation&&(e.snapshot?e.onMutation({type:t,payload:h},f,u,n):e.onMutation({type:t,payload:r},c,n))})):console.warn("[vuex] Unknown mutation: "+t)}},{key:"watch",value:function(t,e,n){var o=this;return this._vm.$watch(function(){return"function"==typeof t?t(o.state):o._vm.$get(t)},e,n)}},{key:"hotUpdate",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.mutations,n=t.modules;this._rootMutations=this._mutations=e||this._rootMutations,this._setupModuleMutations(n||this._modules)}},{key:"_setupModuleState",value:function(t,e){var n=d.parsers.path.setPath;Object.keys(e).forEach(function(o){n(t,o,e[o].state||{})})}},{key:"_setupModuleMutations",value:function(e){var n=this._modules,o=d.parsers.path.getPath,r=[this._rootMutations];Object.keys(e).forEach(function(t){n[t]=e[t]}),Object.keys(n).forEach(function(t){var e=n[t];if(e&&e.mutations){var i={};Object.keys(e.mutations).forEach(function(n){var r=e.mutations[n];i[n]=function(e){for(var n=arguments.length,i=Array(n>1?n-1:0),a=1;n>a;a++)i[a-1]=arguments[a];r.apply(void 0,[o(e,t)].concat(i))}}),r.push(i)}}),this._mutations=t(r)}},{key:"_setupMutationCheck",value:function(){var t=this,e=n(this._vm);new e(this._vm,"$data",function(){if(!t._dispatching)throw new Error("[vuex] Do not mutate vuex store state outside mutation handlers.")},{deep:!0,sync:!0})}},{key:"_setupMiddlewares",value:function(t,n){var o=this;this._middlewares=[h].concat(t),this._needSnapshots=t.some(function(t){return t.snapshot}),this._needSnapshots&&console.log("[vuex] One or more of your middlewares are taking state snapshots for each mutation. Make sure to use them only during development.");var r=this._prevSnapshot=this._needSnapshots?e(n):null;this._middlewares.forEach(function(t){t.onInit&&t.onInit(t.snapshot?r:n,o)})}},{key:"state",get:function(){return this._vm._data},set:function(t){throw new Error("[vuex] Vuex root state is read only.")}}]),o}();"undefined"!=typeof window&&window.Vue&&i(window.Vue);var v={Store:p,install:i,createLogger:a};return v});

/***/ },
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */

	/**
	 * @module echarts
	 */


	    var GlobalModel = __webpack_require__(110);
	    var ExtensionAPI = __webpack_require__(132);
	    var CoordinateSystemManager = __webpack_require__(133);
	    var OptionManager = __webpack_require__(134);

	    var ComponentModel = __webpack_require__(127);
	    var SeriesModel = __webpack_require__(135);

	    var ComponentView = __webpack_require__(136);
	    var ChartView = __webpack_require__(149);
	    var graphic = __webpack_require__(150);

	    var zrender = __webpack_require__(185);
	    var zrUtil = __webpack_require__(111);
	    var colorTool = __webpack_require__(146);
	    var env = __webpack_require__(186);
	    var Eventful = __webpack_require__(140);

	    var each = zrUtil.each;

	    var VISUAL_CODING_STAGES = ['echarts', 'chart', 'component'];

	    // TODO Transform first or filter first
	    var PROCESSOR_STAGES = ['transform', 'filter', 'statistic'];

	    function createRegisterEventWithLowercaseName(method) {
	        return function (eventName, handler, context) {
	            // Event name is all lowercase
	            eventName = eventName && eventName.toLowerCase();
	            Eventful.prototype[method].call(this, eventName, handler, context);
	        };
	    }
	    /**
	     * @module echarts~MessageCenter
	     */
	    function MessageCenter() {
	        Eventful.call(this);
	    }
	    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	    zrUtil.mixin(MessageCenter, Eventful);
	    /**
	     * @module echarts~ECharts
	     */
	    function ECharts (dom, theme, opts) {
	        opts = opts || {};

	        // Get theme by name
	        if (typeof theme === 'string') {
	            theme = themeStorage[theme];
	        }

	        if (theme) {
	            each(optionPreprocessorFuncs, function (preProcess) {
	                preProcess(theme);
	            });
	        }
	        /**
	         * @type {string}
	         */
	        this.id;
	        /**
	         * Group id
	         * @type {string}
	         */
	        this.group;
	        /**
	         * @type {HTMLDomElement}
	         * @private
	         */
	        this._dom = dom;
	        /**
	         * @type {module:zrender/ZRender}
	         * @private
	         */
	        this._zr = zrender.init(dom, {
	            renderer: opts.renderer || 'canvas',
	            devicePixelRatio: opts.devicePixelRatio
	        });

	        /**
	         * @type {Object}
	         * @private
	         */
	        this._theme = zrUtil.clone(theme);

	        /**
	         * @type {Array.<module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsViews = [];

	        /**
	         * @type {Object.<string, module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsMap = {};

	        /**
	         * @type {Array.<module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsViews = [];

	        /**
	         * @type {Object.<string, module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsMap = {};

	        /**
	         * @type {module:echarts/ExtensionAPI}
	         * @private
	         */
	        this._api = new ExtensionAPI(this);

	        /**
	         * @type {module:echarts/CoordinateSystem}
	         * @private
	         */
	        this._coordSysMgr = new CoordinateSystemManager();

	        Eventful.call(this);

	        /**
	         * @type {module:echarts~MessageCenter}
	         * @private
	         */
	        this._messageCenter = new MessageCenter();

	        // Init mouse events
	        this._initEvents();

	        // In case some people write `window.onresize = chart.resize`
	        this.resize = zrUtil.bind(this.resize, this);
	    }

	    var echartsProto = ECharts.prototype;

	    /**
	     * @return {HTMLDomElement}
	     */
	    echartsProto.getDom = function () {
	        return this._dom;
	    };

	    /**
	     * @return {module:zrender~ZRender}
	     */
	    echartsProto.getZr = function () {
	        return this._zr;
	    };

	    /**
	     * @param {Object} option
	     * @param {boolean} notMerge
	     * @param {boolean} [notRefreshImmediately=false] Useful when setOption frequently.
	     */
	    echartsProto.setOption = function (option, notMerge, notRefreshImmediately) {
	        if (!this._model || notMerge) {
	            this._model = new GlobalModel(
	                null, null, this._theme, new OptionManager(this._api)
	            );
	        }

	        this._model.setOption(option, optionPreprocessorFuncs);

	        updateMethods.prepareAndUpdate.call(this);

	        !notRefreshImmediately && this._zr.refreshImmediately();
	    };

	    /**
	     * @DEPRECATED
	     */
	    echartsProto.setTheme = function () {
	        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	    };

	    /**
	     * @return {module:echarts/model/Global}
	     */
	    echartsProto.getModel = function () {
	        return this._model;
	    };

	    /**
	     * @return {Object}
	     */
	    echartsProto.getOption = function () {
	        return this._model.getOption();
	    };

	    /**
	     * @return {number}
	     */
	    echartsProto.getWidth = function () {
	        return this._zr.getWidth();
	    };

	    /**
	     * @return {number}
	     */
	    echartsProto.getHeight = function () {
	        return this._zr.getHeight();
	    };

	    /**
	     * Get canvas which has all thing rendered
	     * @param {Object} opts
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getRenderedCanvas = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        opts = opts || {};
	        opts.pixelRatio = opts.pixelRatio || 1;
	        opts.backgroundColor = opts.backgroundColor
	            || this._model.get('backgroundColor');
	        var zr = this._zr;
	        var list = zr.storage.getDisplayList();
	        // Stop animations
	        zrUtil.each(list, function (el) {
	            el.stopAnimation(true);
	        });
	        return zr.painter.getRenderedCanvas(opts);
	    };
	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getDataURL = function (opts) {
	        opts = opts || {};
	        var excludeComponents = opts.excludeComponents;
	        var ecModel = this._model;
	        var excludesComponentViews = [];
	        var self = this;

	        each(excludeComponents, function (componentType) {
	            ecModel.eachComponent({
	                mainType: componentType
	            }, function (component) {
	                var view = self._componentsMap[component.__viewId];
	                if (!view.group.ignore) {
	                    excludesComponentViews.push(view);
	                    view.group.ignore = true;
	                }
	            });
	        });

	        var url = this.getRenderedCanvas(opts).toDataURL(
	            'image/' + (opts && opts.type || 'png')
	        );

	        each(excludesComponentViews, function (view) {
	            view.group.ignore = false;
	        });
	        return url;
	    };


	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getConnectedDataURL = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        var groupId = this.group;
	        var mathMin = Math.min;
	        var mathMax = Math.max;
	        var MAX_NUMBER = Infinity;
	        if (connectedGroups[groupId]) {
	            var left = MAX_NUMBER;
	            var top = MAX_NUMBER;
	            var right = -MAX_NUMBER;
	            var bottom = -MAX_NUMBER;
	            var canvasList = [];
	            var dpr = (opts && opts.pixelRatio) || 1;
	            for (var id in instances) {
	                var chart = instances[id];
	                if (chart.group === groupId) {
	                    var canvas = chart.getRenderedCanvas(
	                        zrUtil.clone(opts)
	                    );
	                    var boundingRect = chart.getDom().getBoundingClientRect();
	                    left = mathMin(boundingRect.left, left);
	                    top = mathMin(boundingRect.top, top);
	                    right = mathMax(boundingRect.right, right);
	                    bottom = mathMax(boundingRect.bottom, bottom);
	                    canvasList.push({
	                        dom: canvas,
	                        left: boundingRect.left,
	                        top: boundingRect.top
	                    });
	                }
	            }

	            left *= dpr;
	            top *= dpr;
	            right *= dpr;
	            bottom *= dpr;
	            var width = right - left;
	            var height = bottom - top;
	            var targetCanvas = zrUtil.createCanvas();
	            targetCanvas.width = width;
	            targetCanvas.height = height;
	            var zr = zrender.init(targetCanvas);

	            each(canvasList, function (item) {
	                var img = new graphic.Image({
	                    style: {
	                        x: item.left * dpr - left,
	                        y: item.top * dpr - top,
	                        image: item.dom
	                    }
	                });
	                zr.add(img);
	            });
	            zr.refreshImmediately();

	            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	        }
	        else {
	            return this.getDataURL(opts);
	        }
	    };

	    var updateMethods = {

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        update: function (payload) {
	            // console.time && console.time('update');

	            var ecModel = this._model;
	            var api = this._api;
	            var coordSysMgr = this._coordSysMgr;
	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            ecModel.restoreData();

	            // TODO
	            // Save total ecModel here for undo/redo (after restoring data and before processing data).
	            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.

	            // Create new coordinate system each update
	            // In LineView may save the old coordinate system and use it to get the orignal point
	            coordSysMgr.create(this._model, this._api);

	            processData.call(this, ecModel, api);

	            stackSeriesData.call(this, ecModel);

	            coordSysMgr.update(ecModel, api);

	            doLayout.call(this, ecModel, payload);

	            doVisualCoding.call(this, ecModel, payload);

	            doRender.call(this, ecModel, payload);

	            // Set background
	            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';

	            var painter = this._zr.painter;
	            // TODO all use clearColor ?
	            if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	                this._zr.configLayer(0, {
	                    clearColor: backgroundColor
	                });
	            }
	            else {
	                // In IE8
	                if (!env.canvasSupported) {
	                    var colorArr = colorTool.parse(backgroundColor);
	                    backgroundColor = colorTool.stringify(colorArr, 'rgb');
	                    if (colorArr[3] === 0) {
	                        backgroundColor = 'transparent';
	                    }
	                }
	                backgroundColor = backgroundColor;
	                this._dom.style.backgroundColor = backgroundColor;
	            }

	            // console.time && console.timeEnd('update');
	        },

	        // PENDING
	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateView: function (payload) {
	            var ecModel = this._model;

	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            doLayout.call(this, ecModel, payload);

	            doVisualCoding.call(this, ecModel, payload);

	            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateVisual: function (payload) {
	            var ecModel = this._model;

	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            doVisualCoding.call(this, ecModel, payload);

	            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateLayout: function (payload) {
	            var ecModel = this._model;

	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            doLayout.call(this, ecModel, payload);

	            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        highlight: function (payload) {
	            toggleHighlight.call(this, 'highlight', payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        downplay: function (payload) {
	            toggleHighlight.call(this, 'downplay', payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        prepareAndUpdate: function (payload) {
	            var ecModel = this._model;

	            prepareView.call(this, 'component', ecModel);

	            prepareView.call(this, 'chart', ecModel);

	            updateMethods.update.call(this, payload);
	        }
	    };

	    /**
	     * @param {Object} payload
	     * @private
	     */
	    function toggleHighlight(method, payload) {
	        var ecModel = this._model;

	        // dispatchAction before setOption
	        if (!ecModel) {
	            return;
	        }

	        ecModel.eachComponent(
	            {mainType: 'series', query: payload},
	            function (seriesModel, index) {
	                var chartView = this._chartsMap[seriesModel.__viewId];
	                if (chartView && chartView.__alive) {
	                    chartView[method](
	                        seriesModel, ecModel, this._api, payload
	                    );
	                }
	            },
	            this
	        );
	    }

	    /**
	     * Resize the chart
	     */
	    echartsProto.resize = function () {
	        this._zr.resize();

	        var optionChanged = this._model && this._model.resetOption('media');
	        updateMethods[optionChanged ? 'prepareAndUpdate' : 'update'].call(this);

	        // Resize loading effect
	        this._loadingFX && this._loadingFX.resize();
	    };

	    var defaultLoadingEffect = __webpack_require__(195);
	    /**
	     * Show loading effect
	     * @param  {string} [name='default']
	     * @param  {Object} [cfg]
	     */
	    echartsProto.showLoading = function (name, cfg) {
	        if (zrUtil.isObject(name)) {
	            cfg = name;
	            name = 'default';
	        }
	        this.hideLoading();
	        var el = defaultLoadingEffect(this._api, cfg);
	        var zr = this._zr;
	        this._loadingFX = el;

	        zr.add(el);
	    };

	    /**
	     * Hide loading effect
	     */
	    echartsProto.hideLoading = function () {
	        this._loadingFX && this._zr.remove(this._loadingFX);
	        this._loadingFX = null;
	    };

	    /**
	     * @param {Object} eventObj
	     * @return {Object}
	     */
	    echartsProto.makeActionFromEvent = function (eventObj) {
	        var payload = zrUtil.extend({}, eventObj);
	        payload.type = eventActionMap[eventObj.type];
	        return payload;
	    };

	    /**
	     * @pubilc
	     * @param {Object} payload
	     * @param {string} [payload.type] Action type
	     * @param {boolean} [silent=false] Whether trigger event.
	     */
	    echartsProto.dispatchAction = function (payload, silent) {
	        var actionWrap = actions[payload.type];
	        if (actionWrap) {
	            var actionInfo = actionWrap.actionInfo;
	            var updateMethod = actionInfo.update || 'update';

	            var payloads = [payload];
	            var batched = false;
	            // Batch action
	            if (payload.batch) {
	                batched = true;
	                payloads = zrUtil.map(payload.batch, function (item) {
	                    item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	                    item.batch = null;
	                    return item;
	                });
	            }

	            var eventObjBatch = [];
	            var eventObj;
	            var isHighlightOrDownplay = payload.type === 'highlight' || payload.type === 'downplay';
	            for (var i = 0; i < payloads.length; i++) {
	                var batchItem = payloads[i];
	                // Action can specify the event by return it.
	                eventObj = actionWrap.action(batchItem, this._model);
	                // Emit event outside
	                eventObj = eventObj || zrUtil.extend({}, batchItem);
	                // Convert type to eventType
	                eventObj.type = actionInfo.event || eventObj.type;
	                eventObjBatch.push(eventObj);

	                // Highlight and downplay are special.
	                isHighlightOrDownplay && updateMethods[updateMethod].call(this, batchItem);
	            }

	            (updateMethod !== 'none' && !isHighlightOrDownplay)
	                && updateMethods[updateMethod].call(this, payload);

	            if (!silent) {
	                // Follow the rule of action batch
	                if (batched) {
	                    eventObj = {
	                        type: actionInfo.event || payload.type,
	                        batch: eventObjBatch
	                    };
	                }
	                else {
	                    eventObj = eventObjBatch[0];
	                }
	                this._messageCenter.trigger(eventObj.type, eventObj);
	            }
	        }
	    };

	    /**
	     * Register event
	     * @method
	     */
	    echartsProto.on = createRegisterEventWithLowercaseName('on');
	    echartsProto.off = createRegisterEventWithLowercaseName('off');
	    echartsProto.one = createRegisterEventWithLowercaseName('one');

	    /**
	     * @param {string} methodName
	     * @private
	     */
	    function invokeUpdateMethod(methodName, ecModel, payload) {
	        var api = this._api;

	        // Update all components
	        each(this._componentsViews, function (component) {
	            var componentModel = component.__model;
	            component[methodName](componentModel, ecModel, api, payload);

	            updateZ(componentModel, component);
	        }, this);

	        // Upate all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chart = this._chartsMap[seriesModel.__viewId];
	            chart[methodName](seriesModel, ecModel, api, payload);

	            updateZ(seriesModel, chart);
	        }, this);

	    }

	    /**
	     * Prepare view instances of charts and components
	     * @param  {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function prepareView(type, ecModel) {
	        var isComponent = type === 'component';
	        var viewList = isComponent ? this._componentsViews : this._chartsViews;
	        var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	        var zr = this._zr;

	        for (var i = 0; i < viewList.length; i++) {
	            viewList[i].__alive = false;
	        }

	        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	            if (isComponent) {
	                if (componentType === 'series') {
	                    return;
	                }
	            }
	            else {
	                model = componentType;
	            }

	            // Consider: id same and type changed.
	            var viewId = model.id + '_' + model.type;
	            var view = viewMap[viewId];
	            if (!view) {
	                var classType = ComponentModel.parseClassType(model.type);
	                var Clazz = isComponent
	                    ? ComponentView.getClass(classType.main, classType.sub)
	                    : ChartView.getClass(classType.sub);
	                if (Clazz) {
	                    view = new Clazz();
	                    view.init(ecModel, this._api);
	                    viewMap[viewId] = view;
	                    viewList.push(view);
	                    zr.add(view.group);
	                }
	                else {
	                    // Error
	                    return;
	                }
	            }

	            model.__viewId = viewId;
	            view.__alive = true;
	            view.__id = viewId;
	            view.__model = model;
	        }, this);

	        for (var i = 0; i < viewList.length;) {
	            var view = viewList[i];
	            if (!view.__alive) {
	                zr.remove(view.group);
	                view.dispose(ecModel, this._api);
	                viewList.splice(i, 1);
	                delete viewMap[view.__id];
	            }
	            else {
	                i++;
	            }
	        }
	    }

	    /**
	     * Processor data in each series
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function processData(ecModel, api) {
	        each(PROCESSOR_STAGES, function (stage) {
	            each(dataProcessorFuncs[stage] || [], function (process) {
	                process(ecModel, api);
	            });
	        });
	    }

	    /**
	     * @private
	     */
	    function stackSeriesData(ecModel) {
	        var stackedDataMap = {};
	        ecModel.eachSeries(function (series) {
	            var stack = series.get('stack');
	            var data = series.getData();
	            if (stack && data.type === 'list') {
	                var previousStack = stackedDataMap[stack];
	                if (previousStack) {
	                    data.stackedOn = previousStack;
	                }
	                stackedDataMap[stack] = data;
	            }
	        });
	    }

	    /**
	     * Layout before each chart render there series, after visual coding and data processing
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function doLayout(ecModel, payload) {
	        var api = this._api;
	        each(layoutFuncs, function (layout) {
	            layout(ecModel, api, payload);
	        });
	    }

	    /**
	     * Code visual infomation from data after data processing
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function doVisualCoding(ecModel, payload) {
	        each(VISUAL_CODING_STAGES, function (stage) {
	            each(visualCodingFuncs[stage] || [], function (visualCoding) {
	                visualCoding(ecModel, payload);
	            });
	        });
	    }

	    /**
	     * Render each chart and component
	     * @private
	     */
	    function doRender(ecModel, payload) {
	        var api = this._api;
	        // Render all components
	        each(this._componentsViews, function (componentView) {
	            var componentModel = componentView.__model;
	            componentView.render(componentModel, ecModel, api, payload);

	            updateZ(componentModel, componentView);
	        }, this);

	        each(this._chartsViews, function (chart) {
	            chart.__alive = false;
	        }, this);

	        // Render all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chartView = this._chartsMap[seriesModel.__viewId];
	            chartView.__alive = true;
	            chartView.render(seriesModel, ecModel, api, payload);

	            chartView.group.silent = !!seriesModel.get('silent');

	            updateZ(seriesModel, chartView);
	        }, this);

	        // Remove groups of unrendered charts
	        each(this._chartsViews, function (chart) {
	            if (!chart.__alive) {
	                chart.remove(ecModel, api);
	            }
	        }, this);
	    }

	    var MOUSE_EVENT_NAMES = [
	        'click', 'dblclick', 'mouseover', 'mouseout', 'mousedown', 'mouseup', 'globalout'
	    ];
	    /**
	     * @private
	     */
	    echartsProto._initEvents = function () {
	        var zr = this._zr;
	        each(MOUSE_EVENT_NAMES, function (eveName) {
	            zr.on(eveName, function (e) {
	                var ecModel = this.getModel();
	                var el = e.target;
	                if (el && el.dataIndex != null) {
	                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                    var params = dataModel && dataModel.getDataParams(el.dataIndex) || {};
	                    params.event = e;
	                    params.type = eveName;
	                    this.trigger(eveName, params);
	                }
	                // If element has custom eventData of components
	                else if (el && el.eventData) {
	                    this.trigger(eveName, el.eventData);
	                }
	            }, this);
	        }, this);

	        each(eventActionMap, function (actionType, eventType) {
	            this._messageCenter.on(eventType, function (event) {
	                this.trigger(eventType, event);
	            }, this);
	        }, this);
	    };

	    /**
	     * @return {boolean}
	     */
	    echartsProto.isDisposed = function () {
	        return this._disposed;
	    };

	    /**
	     * Clear
	     */
	    echartsProto.clear = function () {
	        this.setOption({}, true);
	    };
	    /**
	     * Dispose instance
	     */
	    echartsProto.dispose = function () {
	        this._disposed = true;
	        var api = this._api;
	        var ecModel = this._model;

	        each(this._componentsViews, function (component) {
	            component.dispose(ecModel, api);
	        });
	        each(this._chartsViews, function (chart) {
	            chart.dispose(ecModel, api);
	        });

	        this._zr.dispose();

	        delete instances[this.id];
	    };

	    zrUtil.mixin(ECharts, Eventful);

	    /**
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     * @return {string}
	     */
	    function updateZ(model, view) {
	        var z = model.get('z');
	        var zlevel = model.get('zlevel');
	        // Set z and zlevel
	        view.group.traverse(function (el) {
	            z != null && (el.z = z);
	            zlevel != null && (el.zlevel = zlevel);
	        });
	    }
	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var actions = [];

	    /**
	     * Map eventType to actionType
	     * @type {Object}
	     */
	    var eventActionMap = {};

	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var layoutFuncs = [];

	    /**
	     * Data processor functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var dataProcessorFuncs = {};

	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var optionPreprocessorFuncs = [];

	    /**
	     * Visual coding functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var visualCodingFuncs = {};
	    /**
	     * Theme storage
	     * @type {Object.<key, Object>}
	     */
	    var themeStorage = {};


	    var instances = {};
	    var connectedGroups = {};

	    var idBase = new Date() - 0;
	    var groupIdBase = new Date() - 0;
	    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	    /**
	     * @alias module:echarts
	     */
	    var echarts = {
	        /**
	         * @type {number}
	         */
	        version: '3.1.7',
	        dependencies: {
	            zrender: '3.0.8'
	        }
	    };

	    function enableConnect(chart) {

	        var STATUS_PENDING = 0;
	        var STATUS_UPDATING = 1;
	        var STATUS_UPDATED = 2;
	        var STATUS_KEY = '__connectUpdateStatus';
	        function updateConnectedChartsStatus(charts, status) {
	            for (var i = 0; i < charts.length; i++) {
	                var otherChart = charts[i];
	                otherChart[STATUS_KEY] = status;
	            }
	        }
	        zrUtil.each(eventActionMap, function (actionType, eventType) {
	            chart._messageCenter.on(eventType, function (event) {
	                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	                    var action = chart.makeActionFromEvent(event);
	                    var otherCharts = [];
	                    for (var id in instances) {
	                        var otherChart = instances[id];
	                        if (otherChart !== chart && otherChart.group === chart.group) {
	                            otherCharts.push(otherChart);
	                        }
	                    }
	                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	                    each(otherCharts, function (otherChart) {
	                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	                            otherChart.dispatchAction(action);
	                        }
	                    });
	                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	                }
	            });
	        });

	    }
	    /**
	     * @param {HTMLDomElement} dom
	     * @param {Object} [theme]
	     * @param {Object} opts
	     */
	    echarts.init = function (dom, theme, opts) {
	        // Check version
	        if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {
	            throw new Error(
	                'ZRender ' + zrender.version
	                + ' is too old for ECharts ' + echarts.version
	                + '. Current version need ZRender '
	                + echarts.dependencies.zrender + '+'
	            );
	        }
	        if (!dom) {
	            throw new Error('Initialize failed: invalid dom.');
	        }

	        var chart = new ECharts(dom, theme, opts);
	        chart.id = 'ec_' + idBase++;
	        instances[chart.id] = chart;

	        dom.setAttribute &&
	            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);

	        enableConnect(chart);

	        return chart;
	    };

	    /**
	     * @return {string|Array.<module:echarts~ECharts>} groupId
	     */
	    echarts.connect = function (groupId) {
	        // Is array of charts
	        if (zrUtil.isArray(groupId)) {
	            var charts = groupId;
	            groupId = null;
	            // If any chart has group
	            zrUtil.each(charts, function (chart) {
	                if (chart.group != null) {
	                    groupId = chart.group;
	                }
	            });
	            groupId = groupId || ('g_' + groupIdBase++);
	            zrUtil.each(charts, function (chart) {
	                chart.group = groupId;
	            });
	        }
	        connectedGroups[groupId] = true;
	        return groupId;
	    };

	    /**
	     * @return {string} groupId
	     */
	    echarts.disConnect = function (groupId) {
	        connectedGroups[groupId] = false;
	    };

	    /**
	     * Dispose a chart instance
	     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	     */
	    echarts.dispose = function (chart) {
	        if (zrUtil.isDom(chart)) {
	            chart = echarts.getInstanceByDom(chart);
	        }
	        else if (typeof chart === 'string') {
	            chart = instances[chart];
	        }
	        if ((chart instanceof ECharts) && !chart.isDisposed()) {
	            chart.dispose();
	        }
	    };

	    /**
	     * @param  {HTMLDomElement} dom
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceByDom = function (dom) {
	        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	        return instances[key];
	    };
	    /**
	     * @param {string} key
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceById = function (key) {
	        return instances[key];
	    };

	    /**
	     * Register theme
	     */
	    echarts.registerTheme = function (name, theme) {
	        themeStorage[name] = theme;
	    };

	    /**
	     * Register option preprocessor
	     * @param {Function} preprocessorFunc
	     */
	    echarts.registerPreprocessor = function (preprocessorFunc) {
	        optionPreprocessorFuncs.push(preprocessorFunc);
	    };

	    /**
	     * @param {string} stage
	     * @param {Function} processorFunc
	     */
	    echarts.registerProcessor = function (stage, processorFunc) {
	        if (zrUtil.indexOf(PROCESSOR_STAGES, stage) < 0) {
	            throw new Error('stage should be one of ' + PROCESSOR_STAGES);
	        }
	        var funcs = dataProcessorFuncs[stage] || (dataProcessorFuncs[stage] = []);
	        funcs.push(processorFunc);
	    };

	    /**
	     * Usage:
	     * registerAction('someAction', 'someEvent', function () { ... });
	     * registerAction('someAction', function () { ... });
	     * registerAction(
	     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	     *     function () { ... }
	     * );
	     *
	     * @param {(string|Object)} actionInfo
	     * @param {string} actionInfo.type
	     * @param {string} [actionInfo.event]
	     * @param {string} [actionInfo.update]
	     * @param {string} [eventName]
	     * @param {Function} action
	     */
	    echarts.registerAction = function (actionInfo, eventName, action) {
	        if (typeof eventName === 'function') {
	            action = eventName;
	            eventName = '';
	        }
	        var actionType = zrUtil.isObject(actionInfo)
	            ? actionInfo.type
	            : ([actionInfo, actionInfo = {
	                event: eventName
	            }][0]);

	        // Event name is all lowercase
	        actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	        eventName = actionInfo.event;

	        if (!actions[actionType]) {
	            actions[actionType] = {action: action, actionInfo: actionInfo};
	        }
	        eventActionMap[eventName] = actionType;
	    };

	    /**
	     * @param {string} type
	     * @param {*} CoordinateSystem
	     */
	    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
	        CoordinateSystemManager.register(type, CoordinateSystem);
	    };

	    /**
	     * @param {*} layout
	     */
	    echarts.registerLayout = function (layout) {
	        // PENDING All functions ?
	        if (zrUtil.indexOf(layoutFuncs, layout) < 0) {
	            layoutFuncs.push(layout);
	        }
	    };

	    /**
	     * @param {string} stage
	     * @param {Function} visualCodingFunc
	     */
	    echarts.registerVisualCoding = function (stage, visualCodingFunc) {
	        if (zrUtil.indexOf(VISUAL_CODING_STAGES, stage) < 0) {
	            throw new Error('stage should be one of ' + VISUAL_CODING_STAGES);
	        }
	        var funcs = visualCodingFuncs[stage] || (visualCodingFuncs[stage] = []);
	        funcs.push(visualCodingFunc);
	    };

	    /**
	     * @param {Object} opts
	     */
	    echarts.extendChartView = function (opts) {
	        return ChartView.extend(opts);
	    };

	    /**
	     * @param {Object} opts
	     */
	    echarts.extendComponentModel = function (opts) {
	        return ComponentModel.extend(opts);
	    };

	    /**
	     * @param {Object} opts
	     */
	    echarts.extendSeriesModel = function (opts) {
	        return SeriesModel.extend(opts);
	    };

	    /**
	     * @param {Object} opts
	     */
	    echarts.extendComponentView = function (opts) {
	        return ComponentView.extend(opts);
	    };

	    /**
	     * ZRender need a canvas context to do measureText.
	     * But in node environment canvas may be created by node-canvas.
	     * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	     *
	     * Be careful of using it in the browser.
	     *
	     * @param {Function} creator
	     * @example
	     *     var Canvas = require('canvas');
	     *     var echarts = require('echarts');
	     *     echarts.setCanvasCreator(function () {
	     *         // Small size is enough.
	     *         return new Canvas(32, 32);
	     *     });
	     */
	    echarts.setCanvasCreator = function (creator) {
	        zrUtil.createCanvas = creator;
	    };

	    echarts.registerVisualCoding('echarts', zrUtil.curry(
	        __webpack_require__(196), '', 'itemStyle'
	    ));
	    echarts.registerPreprocessor(__webpack_require__(197));

	    // Default action
	    echarts.registerAction({
	        type: 'highlight',
	        event: 'highlight',
	        update: 'highlight'
	    }, zrUtil.noop);
	    echarts.registerAction({
	        type: 'downplay',
	        event: 'downplay',
	        update: 'downplay'
	    }, zrUtil.noop);


	    // --------
	    // Exports
	    // --------

	    echarts.graphic = __webpack_require__(150);
	    echarts.number = __webpack_require__(115);
	    echarts.format = __webpack_require__(114);
	    echarts.matrix = __webpack_require__(125);
	    echarts.vector = __webpack_require__(124);

	    echarts.util = {};
	    each([
	            'map', 'each', 'filter', 'indexOf', 'inherits',
	            'reduce', 'filter', 'bind', 'curry', 'isArray',
	            'isString', 'isObject', 'isFunction', 'extend'
	        ],
	        function (name) {
	            echarts.util[name] = zrUtil[name];
	        }
	    );

	    module.exports = echarts;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 *
	 */



	    var zrUtil = __webpack_require__(111);
	    var modelUtil = __webpack_require__(113);
	    var Model = __webpack_require__(116);
	    var each = zrUtil.each;
	    var filter = zrUtil.filter;
	    var map = zrUtil.map;
	    var isArray = zrUtil.isArray;
	    var indexOf = zrUtil.indexOf;
	    var isObject = zrUtil.isObject;

	    var ComponentModel = __webpack_require__(127);

	    var globalDefault = __webpack_require__(131);

	    var OPTION_INNER_KEY = '\0_ec_inner';

	    /**
	     * @alias module:echarts/model/Global
	     *
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {Object} theme
	     */
	    var GlobalModel = Model.extend({

	        constructor: GlobalModel,

	        init: function (option, parentModel, theme, optionManager) {
	            theme = theme || {};

	            this.option = null; // Mark as not initialized.

	            /**
	             * @type {module:echarts/model/Model}
	             * @private
	             */
	            this._theme = new Model(theme);

	            /**
	             * @type {module:echarts/model/OptionManager}
	             */
	            this._optionManager = optionManager;
	        },

	        setOption: function (option, optionPreprocessorFuncs) {
	            zrUtil.assert(
	                !(OPTION_INNER_KEY in option),
	                'please use chart.getOption()'
	            );

	            this._optionManager.setOption(option, optionPreprocessorFuncs);

	            this.resetOption();
	        },

	        /**
	         * @param {string} type null/undefined: reset all.
	         *                      'recreate': force recreate all.
	         *                      'timeline': only reset timeline option
	         *                      'media': only reset media query option
	         * @return {boolean} Whether option changed.
	         */
	        resetOption: function (type) {
	            var optionChanged = false;
	            var optionManager = this._optionManager;

	            if (!type || type === 'recreate') {
	                var baseOption = optionManager.mountOption(type === 'recreate');

	                if (!this.option || type === 'recreate') {
	                    initBase.call(this, baseOption);
	                }
	                else {
	                    this.restoreData();
	                    this.mergeOption(baseOption);
	                }
	                optionChanged = true;
	            }

	            if (type === 'timeline' || type === 'media') {
	                this.restoreData();
	            }

	            if (!type || type === 'recreate' || type === 'timeline') {
	                var timelineOption = optionManager.getTimelineOption(this);
	                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	            }

	            if (!type || type === 'recreate' || type === 'media') {
	                var mediaOptions = optionManager.getMediaOption(this, this._api);
	                if (mediaOptions.length) {
	                    each(mediaOptions, function (mediaOption) {
	                        this.mergeOption(mediaOption, optionChanged = true);
	                    }, this);
	                }
	            }

	            return optionChanged;
	        },

	        /**
	         * @protected
	         */
	        mergeOption: function (newOption) {
	            var option = this.option;
	            var componentsMap = this._componentsMap;
	            var newCptTypes = [];

	            // 如果不存在对应的 component model 则直接 merge
	            each(newOption, function (componentOption, mainType) {
	                if (componentOption == null) {
	                    return;
	                }

	                if (!ComponentModel.hasClass(mainType)) {
	                    option[mainType] = option[mainType] == null
	                        ? zrUtil.clone(componentOption)
	                        : zrUtil.merge(option[mainType], componentOption, true);
	                }
	                else {
	                    newCptTypes.push(mainType);
	                }
	            });

	            // FIXME OPTION 同步是否要改回原来的
	            ComponentModel.topologicalTravel(
	                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this
	            );

	            function visitComponent(mainType, dependencies) {
	                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);

	                var mapResult = modelUtil.mappingToExists(
	                    componentsMap[mainType], newCptOptionList
	                );

	                makeKeyInfo(mainType, mapResult);

	                var dependentModels = getComponentsByTypes(
	                    componentsMap, dependencies
	                );

	                option[mainType] = [];
	                componentsMap[mainType] = [];

	                each(mapResult, function (resultItem, index) {
	                    var componentModel = resultItem.exist;
	                    var newCptOption = resultItem.option;

	                    zrUtil.assert(
	                        isObject(newCptOption) || componentModel,
	                        'Empty component definition'
	                    );

	                    // Consider where is no new option and should be merged using {},
	                    // see removeEdgeAndAdd in topologicalTravel and
	                    // ComponentModel.getAllClassMainTypes.
	                    if (!newCptOption) {
	                        componentModel.mergeOption({}, this);
	                        componentModel.optionUpdated(this);
	                    }
	                    else {
	                        var ComponentModelClass = ComponentModel.getClass(
	                            mainType, resultItem.keyInfo.subType, true
	                        );

	                        if (componentModel && componentModel instanceof ComponentModelClass) {
	                            componentModel.mergeOption(newCptOption, this);
	                            componentModel.optionUpdated(this);
	                        }
	                        else {
	                            // PENDING Global as parent ?
	                            componentModel = new ComponentModelClass(
	                                newCptOption, this, this,
	                                zrUtil.extend(
	                                    {
	                                        dependentModels: dependentModels,
	                                        componentIndex: index
	                                    },
	                                    resultItem.keyInfo
	                                )
	                            );
	                            // Call optionUpdated after init
	                            componentModel.optionUpdated(this);
	                        }
	                    }

	                    componentsMap[mainType][index] = componentModel;
	                    option[mainType][index] = componentModel.option;
	                }, this);

	                // Backup series for filtering.
	                if (mainType === 'series') {
	                    this._seriesIndices = createSeriesIndices(componentsMap.series);
	                }
	            }
	        },

	        /**
	         * Get option for output (cloned option and inner info removed)
	         * @public
	         * @return {Object}
	         */
	        getOption: function () {
	            var option = zrUtil.clone(this.option);

	            each(option, function (opts, mainType) {
	                if (ComponentModel.hasClass(mainType)) {
	                    var opts = modelUtil.normalizeToArray(opts);
	                    for (var i = opts.length - 1; i >= 0; i--) {
	                        // Remove options with inner id.
	                        if (modelUtil.isIdInner(opts[i])) {
	                            opts.splice(i, 1);
	                        }
	                    }
	                    option[mainType] = opts;
	                }
	            });

	            delete option[OPTION_INNER_KEY];

	            return option;
	        },

	        /**
	         * @return {module:echarts/model/Model}
	         */
	        getTheme: function () {
	            return this._theme;
	        },

	        /**
	         * @param {string} mainType
	         * @param {number} [idx=0]
	         * @return {module:echarts/model/Component}
	         */
	        getComponent: function (mainType, idx) {
	            var list = this._componentsMap[mainType];
	            if (list) {
	                return list[idx || 0];
	            }
	        },

	        /**
	         * @param {Object} condition
	         * @param {string} condition.mainType
	         * @param {string} [condition.subType] If ignore, only query by mainType
	         * @param {number} [condition.index] Either input index or id or name.
	         * @param {string} [condition.id] Either input index or id or name.
	         * @param {string} [condition.name] Either input index or id or name.
	         * @return {Array.<module:echarts/model/Component>}
	         */
	        queryComponents: function (condition) {
	            var mainType = condition.mainType;
	            if (!mainType) {
	                return [];
	            }

	            var index = condition.index;
	            var id = condition.id;
	            var name = condition.name;

	            var cpts = this._componentsMap[mainType];

	            if (!cpts || !cpts.length) {
	                return [];
	            }

	            var result;

	            if (index != null) {
	                if (!isArray(index)) {
	                    index = [index];
	                }
	                result = filter(map(index, function (idx) {
	                    return cpts[idx];
	                }), function (val) {
	                    return !!val;
	                });
	            }
	            else if (id != null) {
	                var isIdArray = isArray(id);
	                result = filter(cpts, function (cpt) {
	                    return (isIdArray && indexOf(id, cpt.id) >= 0)
	                        || (!isIdArray && cpt.id === id);
	                });
	            }
	            else if (name != null) {
	                var isNameArray = isArray(name);
	                result = filter(cpts, function (cpt) {
	                    return (isNameArray && indexOf(name, cpt.name) >= 0)
	                        || (!isNameArray && cpt.name === name);
	                });
	            }

	            return filterBySubType(result, condition);
	        },

	        /**
	         * The interface is different from queryComponents,
	         * which is convenient for inner usage.
	         *
	         * @usage
	         * var result = findComponents(
	         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	         * );
	         * var result = findComponents(
	         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	         * );
	         * var result = findComponents(
	         *     {mainType: 'series'},
	         *     function (model, index) {...}
	         * );
	         * // result like [component0, componnet1, ...]
	         *
	         * @param {Object} condition
	         * @param {string} condition.mainType Mandatory.
	         * @param {string} [condition.subType] Optional.
	         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	         *        where xxx is mainType.
	         *        If query attribute is null/undefined or has no index/id/name,
	         *        do not filtering by query conditions, which is convenient for
	         *        no-payload situations or when target of action is global.
	         * @param {Function} [condition.filter] parameter: component, return boolean.
	         * @return {Array.<module:echarts/model/Component>}
	         */
	        findComponents: function (condition) {
	            var query = condition.query;
	            var mainType = condition.mainType;

	            var queryCond = getQueryCond(query);
	            var result = queryCond
	                ? this.queryComponents(queryCond)
	                : this._componentsMap[mainType];

	            return doFilter(filterBySubType(result, condition));

	            function getQueryCond(q) {
	                var indexAttr = mainType + 'Index';
	                var idAttr = mainType + 'Id';
	                var nameAttr = mainType + 'Name';
	                return q && (
	                        q.hasOwnProperty(indexAttr)
	                        || q.hasOwnProperty(idAttr)
	                        || q.hasOwnProperty(nameAttr)
	                    )
	                    ? {
	                        mainType: mainType,
	                        // subType will be filtered finally.
	                        index: q[indexAttr],
	                        id: q[idAttr],
	                        name: q[nameAttr]
	                    }
	                    : null;
	            }

	            function doFilter(res) {
	                return condition.filter
	                     ? filter(res, condition.filter)
	                     : res;
	            }
	        },

	        /**
	         * @usage
	         * eachComponent('legend', function (legendModel, index) {
	         *     ...
	         * });
	         * eachComponent(function (componentType, model, index) {
	         *     // componentType does not include subType
	         *     // (componentType is 'xxx' but not 'xxx.aa')
	         * });
	         * eachComponent(
	         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	         *     function (model, index) {...}
	         * );
	         * eachComponent(
	         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	         *     function (model, index) {...}
	         * );
	         *
	         * @param {string|Object=} mainType When mainType is object, the definition
	         *                                  is the same as the method 'findComponents'.
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachComponent: function (mainType, cb, context) {
	            var componentsMap = this._componentsMap;

	            if (typeof mainType === 'function') {
	                context = cb;
	                cb = mainType;
	                each(componentsMap, function (components, componentType) {
	                    each(components, function (component, index) {
	                        cb.call(context, componentType, component, index);
	                    });
	                });
	            }
	            else if (zrUtil.isString(mainType)) {
	                each(componentsMap[mainType], cb, context);
	            }
	            else if (isObject(mainType)) {
	                var queryResult = this.findComponents(mainType);
	                each(queryResult, cb, context);
	            }
	        },

	        /**
	         * @param {string} name
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeriesByName: function (name) {
	            var series = this._componentsMap.series;
	            return filter(series, function (oneSeries) {
	                return oneSeries.name === name;
	            });
	        },

	        /**
	         * @param {number} seriesIndex
	         * @return {module:echarts/model/Series}
	         */
	        getSeriesByIndex: function (seriesIndex) {
	            return this._componentsMap.series[seriesIndex];
	        },

	        /**
	         * @param {string} subType
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeriesByType: function (subType) {
	            var series = this._componentsMap.series;
	            return filter(series, function (oneSeries) {
	                return oneSeries.subType === subType;
	            });
	        },

	        /**
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeries: function () {
	            return this._componentsMap.series.slice();
	        },

	        /**
	         * After filtering, series may be different
	         * frome raw series.
	         *
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachSeries: function (cb, context) {
	            assertSeriesInitialized(this);
	            each(this._seriesIndices, function (rawSeriesIndex) {
	                var series = this._componentsMap.series[rawSeriesIndex];
	                cb.call(context, series, rawSeriesIndex);
	            }, this);
	        },

	        /**
	         * Iterate raw series before filtered.
	         *
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachRawSeries: function (cb, context) {
	            each(this._componentsMap.series, cb, context);
	        },

	        /**
	         * After filtering, series may be different.
	         * frome raw series.
	         *
	         * @parma {string} subType
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachSeriesByType: function (subType, cb, context) {
	            assertSeriesInitialized(this);
	            each(this._seriesIndices, function (rawSeriesIndex) {
	                var series = this._componentsMap.series[rawSeriesIndex];
	                if (series.subType === subType) {
	                    cb.call(context, series, rawSeriesIndex);
	                }
	            }, this);
	        },

	        /**
	         * Iterate raw series before filtered of given type.
	         *
	         * @parma {string} subType
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachRawSeriesByType: function (subType, cb, context) {
	            return each(this.getSeriesByType(subType), cb, context);
	        },

	        /**
	         * @param {module:echarts/model/Series} seriesModel
	         */
	        isSeriesFiltered: function (seriesModel) {
	            assertSeriesInitialized(this);
	            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	        },

	        /**
	         * @param {Function} cb
	         * @param {*} context
	         */
	        filterSeries: function (cb, context) {
	            assertSeriesInitialized(this);
	            var filteredSeries = filter(
	                this._componentsMap.series, cb, context
	            );
	            this._seriesIndices = createSeriesIndices(filteredSeries);
	        },

	        restoreData: function () {
	            var componentsMap = this._componentsMap;

	            this._seriesIndices = createSeriesIndices(componentsMap.series);

	            var componentTypes = [];
	            each(componentsMap, function (components, componentType) {
	                componentTypes.push(componentType);
	            });

	            ComponentModel.topologicalTravel(
	                componentTypes,
	                ComponentModel.getAllClassMainTypes(),
	                function (componentType, dependencies) {
	                    each(componentsMap[componentType], function (component) {
	                        component.restoreData();
	                    });
	                }
	            );
	        }

	    });

	    /**
	     * @inner
	     */
	    function mergeTheme(option, theme) {
	        for (var name in theme) {
	            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	            if (!ComponentModel.hasClass(name)) {
	                if (typeof theme[name] === 'object') {
	                    option[name] = !option[name]
	                        ? zrUtil.clone(theme[name])
	                        : zrUtil.merge(option[name], theme[name], false);
	                }
	                else {
	                    if (option[name] == null) {
	                        option[name] = theme[name];
	                    }
	                }
	            }
	        }
	    }

	    function initBase(baseOption) {
	        baseOption = baseOption;

	        // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	        this.option = {};
	        this.option[OPTION_INNER_KEY] = 1;

	        /**
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @private
	         */
	        this._componentsMap = {};

	        /**
	         * Mapping between filtered series list and raw series list.
	         * key: filtered series indices, value: raw series indices.
	         * @type {Array.<nubmer>}
	         * @private
	         */
	        this._seriesIndices = null;

	        mergeTheme(baseOption, this._theme.option);

	        // TODO Needs clone when merging to the unexisted property
	        zrUtil.merge(baseOption, globalDefault, false);

	        this.mergeOption(baseOption);
	    }

	    /**
	     * @inner
	     * @param {Array.<string>|string} types model types
	     * @return {Object} key: {string} type, value: {Array.<Object>} models
	     */
	    function getComponentsByTypes(componentsMap, types) {
	        if (!zrUtil.isArray(types)) {
	            types = types ? [types] : [];
	        }

	        var ret = {};
	        each(types, function (type) {
	            ret[type] = (componentsMap[type] || []).slice();
	        });

	        return ret;
	    }

	    /**
	     * @inner
	     */
	    function makeKeyInfo(mainType, mapResult) {
	        // We use this id to hash component models and view instances
	        // in echarts. id can be specified by user, or auto generated.

	        // The id generation rule ensures new view instance are able
	        // to mapped to old instance when setOption are called in
	        // no-merge mode. So we generate model id by name and plus
	        // type in view id.

	        // name can be duplicated among components, which is convenient
	        // to specify multi components (like series) by one name.

	        // Ensure that each id is distinct.
	        var idMap = {};

	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            existCpt && (idMap[existCpt.id] = item);
	        });

	        each(mapResult, function (item, index) {
	            var opt = item.option;

	            zrUtil.assert(
	                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,
	                'id duplicates: ' + (opt && opt.id)
	            );

	            opt && opt.id != null && (idMap[opt.id] = item);

	            // Complete subType
	            if (isObject(opt)) {
	                var subType = determineSubType(mainType, opt, item.exist);
	                item.keyInfo = {mainType: mainType, subType: subType};
	            }
	        });

	        // Make name and id.
	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            var opt = item.option;
	            var keyInfo = item.keyInfo;

	            if (!isObject(opt)) {
	                return;
	            }

	            // name can be overwitten. Consider case: axis.name = '20km'.
	            // But id generated by name will not be changed, which affect
	            // only in that case: setOption with 'not merge mode' and view
	            // instance will be recreated, which can be accepted.
	            keyInfo.name = opt.name != null
	                ? opt.name + ''
	                : existCpt
	                ? existCpt.name
	                : '\0-';

	            if (existCpt) {
	                keyInfo.id = existCpt.id;
	            }
	            else if (opt.id != null) {
	                keyInfo.id = opt.id + '';
	            }
	            else {
	                // Consider this situatoin:
	                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	                //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	                // Series with the same name between optionA and optionB
	                // should be mapped.
	                var idNum = 0;
	                do {
	                    keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	                }
	                while (idMap[keyInfo.id]);
	            }

	            idMap[keyInfo.id] = item;
	        });
	    }

	    /**
	     * @inner
	     */
	    function determineSubType(mainType, newCptOption, existComponent) {
	        var subType = newCptOption.type
	            ? newCptOption.type
	            : existComponent
	            ? existComponent.subType
	            // Use determineSubType only when there is no existComponent.
	            : ComponentModel.determineSubType(mainType, newCptOption);

	        // tooltip, markline, markpoint may always has no subType
	        return subType;
	    }

	    /**
	     * @inner
	     */
	    function createSeriesIndices(seriesModels) {
	        return map(seriesModels, function (series) {
	            return series.componentIndex;
	        }) || [];
	    }

	    /**
	     * @inner
	     */
	    function filterBySubType(components, condition) {
	        // Using hasOwnProperty for restrict. Consider
	        // subType is undefined in user payload.
	        return condition.hasOwnProperty('subType')
	            ? filter(components, function (cpt) {
	                return cpt.subType === condition.subType;
	            })
	            : components;
	    }

	    /**
	     * @inner
	     */
	    function assertSeriesInitialized(ecModel) {
	        // Components that use _seriesIndices should depends on series component,
	        // which make sure that their initialization is after series.
	        if (!ecModel._seriesIndices) {
	            throw new Error('Series has not been initialized yet.');
	        }
	    }

	    module.exports = GlobalModel;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/core/util
	 */

	    var Gradient = __webpack_require__(112);
	    // 用于处理merge时无法遍历Date等对象的问题
	    var BUILTIN_OBJECT = {
	        '[object Function]': 1,
	        '[object RegExp]': 1,
	        '[object Date]': 1,
	        '[object Error]': 1,
	        '[object CanvasGradient]': 1
	    };

	    var objToString = Object.prototype.toString;

	    var arrayProto = Array.prototype;
	    var nativeForEach = arrayProto.forEach;
	    var nativeFilter = arrayProto.filter;
	    var nativeSlice = arrayProto.slice;
	    var nativeMap = arrayProto.map;
	    var nativeReduce = arrayProto.reduce;

	    /**
	     * @param {*} source
	     * @return {*} 拷贝后的新对象
	     */
	    function clone(source) {
	        if (typeof source == 'object' && source !== null) {
	            var result = source;
	            if (source instanceof Array) {
	                result = [];
	                for (var i = 0, len = source.length; i < len; i++) {
	                    result[i] = clone(source[i]);
	                }
	            }
	            else if (
	                !isBuildInObject(source)
	                // 是否为 dom 对象
	                && !isDom(source)
	            ) {
	                result = {};
	                for (var key in source) {
	                    if (source.hasOwnProperty(key)) {
	                        result[key] = clone(source[key]);
	                    }
	                }
	            }

	            return result;
	        }

	        return source;
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} target
	     * @param {*} source
	     * @param {boolean} [overwrite=false]
	     */
	    function merge(target, source, overwrite) {
	        // We should escapse that source is string
	        // and enter for ... in ...
	        if (!isObject(source) || !isObject(target)) {
	            return overwrite ? clone(source) : target;
	        }

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                var sourceProp = source[key];

	                if (isObject(sourceProp)
	                    && isObject(targetProp)
	                    && !isArray(sourceProp)
	                    && !isArray(targetProp)
	                    && !isDom(sourceProp)
	                    && !isDom(targetProp)
	                    && !isBuildInObject(sourceProp)
	                    && !isBuildInObject(targetProp)
	                ) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(targetProp, sourceProp, overwrite);
	                }
	                else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                    target[key] = clone(source[key], true);
	                }
	            }
	        }

	        return target;
	    }

	    /**
	     * @param {Array} targetAndSources The first item is target, and the rests are source.
	     * @param {boolean} [overwrite=false]
	     * @return {*} target
	     */
	    function mergeAll(targetAndSources, overwrite) {
	        var result = targetAndSources[0];
	        for (var i = 1, len = targetAndSources.length; i < len; i++) {
	            result = merge(result, targetAndSources[i], overwrite);
	        }
	        return result;
	    }

	    /**
	     * @param {*} target
	     * @param {*} source
	     * @memberOf module:zrender/core/util
	     */
	    function extend(target, source) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }

	    /**
	     * @param {*} target
	     * @param {*} source
	     * @param {boolen} [overlay=false]
	     * @memberOf module:zrender/core/util
	     */
	    function defaults(target, source, overlay) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)
	                && (overlay ? source[key] != null : target[key] == null)
	            ) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }

	    function createCanvas() {
	        return document.createElement('canvas');
	    }
	    // FIXME
	    var _ctx;
	    function getContext() {
	        if (!_ctx) {
	            // Use util.createCanvas instead of createCanvas
	            // because createCanvas may be overwritten in different environment
	            _ctx = util.createCanvas().getContext('2d');
	        }
	        return _ctx;
	    }

	    /**
	     * 查询数组中元素的index
	     * @memberOf module:zrender/core/util
	     */
	    function indexOf(array, value) {
	        if (array) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    }

	    /**
	     * 构造类继承关系
	     *
	     * @memberOf module:zrender/core/util
	     * @param {Function} clazz 源类
	     * @param {Function} baseClazz 基类
	     */
	    function inherits(clazz, baseClazz) {
	        var clazzPrototype = clazz.prototype;
	        function F() {}
	        F.prototype = baseClazz.prototype;
	        clazz.prototype = new F();

	        for (var prop in clazzPrototype) {
	            clazz.prototype[prop] = clazzPrototype[prop];
	        }
	        clazz.prototype.constructor = clazz;
	        clazz.superClass = baseClazz;
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Object|Function} target
	     * @param {Object|Function} sorce
	     * @param {boolean} overlay
	     */
	    function mixin(target, source, overlay) {
	        target = 'prototype' in target ? target.prototype : target;
	        source = 'prototype' in source ? source.prototype : source;

	        defaults(target, source, overlay);
	    }

	    /**
	     * @param {Array|TypedArray} data
	     */
	    function isArrayLike(data) {
	        if (! data) {
	            return;
	        }
	        if (typeof data == 'string') {
	            return false;
	        }
	        return typeof data.length == 'number';
	    }

	    /**
	     * 数组或对象遍历
	     * @memberOf module:zrender/core/util
	     * @param {Object|Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     */
	    function each(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.forEach && obj.forEach === nativeForEach) {
	            obj.forEach(cb, context);
	        }
	        else if (obj.length === +obj.length) {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                cb.call(context, obj[i], i, obj);
	            }
	        }
	        else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    cb.call(context, obj[key], key, obj);
	                }
	            }
	        }
	    }

	    /**
	     * 数组映射
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function map(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.map && obj.map === nativeMap) {
	            return obj.map(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                result.push(cb.call(context, obj[i], i, obj));
	            }
	            return result;
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {Object} [memo]
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function reduce(obj, cb, memo, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.reduce && obj.reduce === nativeReduce) {
	            return obj.reduce(cb, memo, context);
	        }
	        else {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                memo = cb.call(context, memo, obj[i], i, obj);
	            }
	            return memo;
	        }
	    }

	    /**
	     * 数组过滤
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function filter(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.filter && obj.filter === nativeFilter) {
	            return obj.filter(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                if (cb.call(context, obj[i], i, obj)) {
	                    result.push(obj[i]);
	                }
	            }
	            return result;
	        }
	    }

	    /**
	     * 数组项查找
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function find(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                return obj[i];
	            }
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @param {*} context
	     * @return {Function}
	     */
	    function bind(func, context) {
	        var args = nativeSlice.call(arguments, 2);
	        return function () {
	            return func.apply(context, args.concat(nativeSlice.call(arguments)));
	        };
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @return {Function}
	     */
	    function curry(func) {
	        var args = nativeSlice.call(arguments, 1);
	        return function () {
	            return func.apply(this, args.concat(nativeSlice.call(arguments)));
	        };
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isArray(value) {
	        return objToString.call(value) === '[object Array]';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isFunction(value) {
	        return typeof value === 'function';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isString(value) {
	        return objToString.call(value) === '[object String]';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isObject(value) {
	        // Avoid a V8 JIT bug in Chrome 19-20.
	        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	        var type = typeof value;
	        return type === 'function' || (!!value && type == 'object');
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isBuildInObject(value) {
	        return !!BUILTIN_OBJECT[objToString.call(value)]
	            || (value instanceof Gradient);
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isDom(value) {
	        return value && value.nodeType === 1
	               && typeof(value.nodeName) == 'string';
	    }

	    /**
	     * If value1 is not null, then return value1, otherwise judget rest of values.
	     * @memberOf module:zrender/core/util
	     * @return {*} Final value
	     */
	    function retrieve(values) {
	        for (var i = 0, len = arguments.length; i < len; i++) {
	            if (arguments[i] != null) {
	                return arguments[i];
	            }
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} arr
	     * @param {number} startIndex
	     * @param {number} endIndex
	     * @return {Array}
	     */
	    function slice() {
	        return Function.call.apply(nativeSlice, arguments);
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {boolean} condition
	     * @param {string} message
	     */
	    function assert(condition, message) {
	        if (!condition) {
	            throw new Error(message);
	        }
	    }

	    var util = {
	        inherits: inherits,
	        mixin: mixin,
	        clone: clone,
	        merge: merge,
	        mergeAll: mergeAll,
	        extend: extend,
	        defaults: defaults,
	        getContext: getContext,
	        createCanvas: createCanvas,
	        indexOf: indexOf,
	        slice: slice,
	        find: find,
	        isArrayLike: isArrayLike,
	        each: each,
	        map: map,
	        reduce: reduce,
	        filter: filter,
	        bind: bind,
	        curry: curry,
	        isArray: isArray,
	        isString: isString,
	        isObject: isObject,
	        isFunction: isFunction,
	        isBuildInObject: isBuildInObject,
	        isDom: isDom,
	        retrieve: retrieve,
	        assert: assert,
	        noop: function () {}
	    };
	    module.exports = util;



/***/ },
/* 112 */
/***/ function(module, exports) {

	

	    /**
	     * @param {Array.<Object>} colorStops
	     */
	    var Gradient = function (colorStops) {

	        this.colorStops = colorStops || [];
	    };

	    Gradient.prototype = {

	        constructor: Gradient,

	        addColorStop: function (offset, color) {
	            this.colorStops.push({

	                offset: offset,

	                color: color
	            });
	        }
	    };

	    module.exports = Gradient;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	

	    var formatUtil = __webpack_require__(114);
	    var nubmerUtil = __webpack_require__(115);
	    var zrUtil = __webpack_require__(111);

	    var Model = __webpack_require__(116);

	    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle'];

	    var modelUtil = {};

	    /**
	     * Create "each" method to iterate names.
	     *
	     * @pubilc
	     * @param  {Array.<string>} names
	     * @param  {Array.<string>=} attrs
	     * @return {Function}
	     */
	    modelUtil.createNameEach = function (names, attrs) {
	        names = names.slice();
	        var capitalNames = zrUtil.map(names, modelUtil.capitalFirst);
	        attrs = (attrs || []).slice();
	        var capitalAttrs = zrUtil.map(attrs, modelUtil.capitalFirst);

	        return function (callback, context) {
	            zrUtil.each(names, function (name, index) {
	                var nameObj = {name: name, capital: capitalNames[index]};

	                for (var j = 0; j < attrs.length; j++) {
	                    nameObj[attrs[j]] = name + capitalAttrs[j];
	                }

	                callback.call(context, nameObj);
	            });
	        };
	    };

	    /**
	     * @public
	     */
	    modelUtil.capitalFirst = function (str) {
	        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	    };

	    /**
	     * Iterate each dimension name.
	     *
	     * @public
	     * @param {Function} callback The parameter is like:
	     *                            {
	     *                                name: 'angle',
	     *                                capital: 'Angle',
	     *                                axis: 'angleAxis',
	     *                                axisIndex: 'angleAixs',
	     *                                index: 'angleIndex'
	     *                            }
	     * @param {Object} context
	     */
	    modelUtil.eachAxisDim = modelUtil.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index']);

	    /**
	     * If value is not array, then translate it to array.
	     * @param  {*} value
	     * @return {Array} [value] or value
	     */
	    modelUtil.normalizeToArray = function (value) {
	        return zrUtil.isArray(value)
	            ? value
	            : value == null
	            ? []
	            : [value];
	    };

	    /**
	     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	     * dataZoomModels and 'links' make up one or more graphics.
	     * This function finds the graphic where the source dataZoomModel is in.
	     *
	     * @public
	     * @param {Function} forEachNode Node iterator.
	     * @param {Function} forEachEdgeType edgeType iterator
	     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	     */
	    modelUtil.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {

	        return function (sourceNode) {
	            var result = {
	                nodes: [],
	                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).
	            };

	            forEachEdgeType(function (edgeType) {
	                result.records[edgeType.name] = {};
	            });

	            if (!sourceNode) {
	                return result;
	            }

	            absorb(sourceNode, result);

	            var existsLink;
	            do {
	                existsLink = false;
	                forEachNode(processSingleNode);
	            }
	            while (existsLink);

	            function processSingleNode(node) {
	                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	                    absorb(node, result);
	                    existsLink = true;
	                }
	            }

	            return result;
	        };

	        function isNodeAbsorded(node, result) {
	            return zrUtil.indexOf(result.nodes, node) >= 0;
	        }

	        function isLinked(node, result) {
	            var hasLink = false;
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] && (hasLink = true);
	                });
	            });
	            return hasLink;
	        }

	        function absorb(node, result) {
	            result.nodes.push(node);
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] = true;
	                });
	            });
	        }
	    };

	    /**
	     * Sync default option between normal and emphasis like `position` and `show`
	     * In case some one will write code like
	     *     label: {
	     *         normal: {
	     *             show: false,
	     *             position: 'outside',
	     *             textStyle: {
	     *                 fontSize: 18
	     *             }
	     *         },
	     *         emphasis: {
	     *             show: true
	     *         }
	     *     }
	     * @param {Object} opt
	     * @param {Array.<string>} subOpts
	     */
	     modelUtil.defaultEmphasis = function (opt, subOpts) {
	        if (opt) {
	            var emphasisOpt = opt.emphasis = opt.emphasis || {};
	            var normalOpt = opt.normal = opt.normal || {};

	            // Default emphasis option from normal
	            zrUtil.each(subOpts, function (subOptName) {
	                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
	                if (val != null) {
	                    emphasisOpt[subOptName] = val;
	                }
	            });
	        }
	    };

	    /**
	     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	     * @param {Object} opt
	     * @param {string} [opt.seriesIndex]
	     * @param {Object} [opt.name]
	     * @param {module:echarts/data/List} data
	     * @param {Array.<Object>} rawData
	     */
	    modelUtil.createDataFormatModel = function (opt, data, rawData) {
	        var model = new Model();
	        zrUtil.mixin(model, modelUtil.dataFormatMixin);
	        model.seriesIndex = opt.seriesIndex;
	        model.name = opt.name || '';

	        model.getData = function () {
	            return data;
	        };
	        model.getRawDataArray = function () {
	            return rawData;
	        };
	        return model;
	    };

	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method retieves value from data.
	     * @param {string|number|Date|Array|Object} dataItem
	     * @return {number|string|Date|Array.<number|string|Date>}
	     */
	    modelUtil.getDataItemValue = function (dataItem) {
	        // Performance sensitive.
	        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	    };

	    /**
	     * This helper method convert value in data.
	     * @param {string|number|Date} value
	     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	     */
	    modelUtil.converDataValue = function (value, dimInfo) {
	        // Performance sensitive.
	        var dimType = dimInfo && dimInfo.type;
	        if (dimType === 'ordinal') {
	            return value;
	        }

	        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
	            value = +nubmerUtil.parseDate(value);
	        }

	        // dimType defaults 'number'.
	        // If dimType is not ordinal and value is null or undefined or NaN or '-',
	        // parse to NaN.
	        return (value == null || value === '')
	            ? NaN : +value; // If string (like '-'), using '+' parse to NaN
	    };

	    modelUtil.dataFormatMixin = {
	        /**
	         * Get params for formatter
	         * @param {number} dataIndex
	         * @return {Object}
	         */
	        getDataParams: function (dataIndex) {
	            var data = this.getData();

	            var seriesIndex = this.seriesIndex;
	            var seriesName = this.name;

	            var rawValue = this.getRawValue(dataIndex);
	            var rawDataIndex = data.getRawIndex(dataIndex);
	            var name = data.getName(dataIndex, true);

	            // Data may not exists in the option given by user
	            var rawDataArray = this.getRawDataArray();
	            var itemOpt = rawDataArray && rawDataArray[rawDataIndex];

	            return {
	                componentType: 'series',
	                seriesType: this.subType,
	                seriesIndex: seriesIndex,
	                seriesName: seriesName,
	                name: name,
	                dataIndex: rawDataIndex,
	                data: itemOpt,
	                value: rawValue,
	                color: data.getItemVisual(dataIndex, 'color'),

	                // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	                $vars: ['seriesName', 'name', 'value']
	            };
	        },

	        /**
	         * Format label
	         * @param {number} dataIndex
	         * @param {string} [status='normal'] 'normal' or 'emphasis'
	         * @param {Function|string} [formatter] Default use the `itemStyle[status].label.formatter`
	         * @return {string}
	         */
	        getFormattedLabel: function (dataIndex, status, formatter) {
	            status = status || 'normal';
	            var data = this.getData();
	            var itemModel = data.getItemModel(dataIndex);

	            var params = this.getDataParams(dataIndex);
	            if (formatter == null) {
	                formatter = itemModel.get(['label', status, 'formatter']);
	            }

	            if (typeof formatter === 'function') {
	                params.status = status;
	                return formatter(params);
	            }
	            else if (typeof formatter === 'string') {
	                return formatUtil.formatTpl(formatter, params);
	            }
	        },

	        /**
	         * Get raw value in option
	         * @param {number} idx
	         * @return {Object}
	         */
	        getRawValue: function (idx) {
	            var itemModel = this.getData().getItemModel(idx);
	            if (itemModel && itemModel.option != null) {
	                var dataItem = itemModel.option;
	                return (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem))
	                    ? dataItem.value : dataItem;
	            }
	        }
	    };

	    /**
	     * Mapping to exists for merge.
	     *
	     * @public
	     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	     * @param {Object|Array.<Object>} newCptOptions
	     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	     *                          which order is the same as exists.
	     */
	    modelUtil.mappingToExists = function (exists, newCptOptions) {
	        // Mapping by the order by original option (but not order of
	        // new option) in merge mode. Because we should ensure
	        // some specified index (like xAxisIndex) is consistent with
	        // original option, which is easy to understand, espatially in
	        // media query. And in most case, merge option is used to
	        // update partial option but not be expected to change order.
	        newCptOptions = (newCptOptions || []).slice();

	        var result = zrUtil.map(exists || [], function (obj, index) {
	            return {exist: obj};
	        });

	        // Mapping by id or name if specified.
	        zrUtil.each(newCptOptions, function (cptOption, index) {
	            if (!zrUtil.isObject(cptOption)) {
	                return;
	            }

	            for (var i = 0; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option // Consider name: two map to one.
	                    && (
	                        // id has highest priority.
	                        (cptOption.id != null && exist.id === cptOption.id + '')
	                        || (cptOption.name != null
	                            && !modelUtil.isIdInner(cptOption)
	                            && !modelUtil.isIdInner(exist)
	                            && exist.name === cptOption.name + ''
	                        )
	                    )
	                ) {
	                    result[i].option = cptOption;
	                    newCptOptions[index] = null;
	                    break;
	                }
	            }
	        });

	        // Otherwise mapping by index.
	        zrUtil.each(newCptOptions, function (cptOption, index) {
	            if (!zrUtil.isObject(cptOption)) {
	                return;
	            }

	            var i = 0;
	            for (; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option
	                    && !modelUtil.isIdInner(exist)
	                    // Caution:
	                    // Do not overwrite id. But name can be overwritten,
	                    // because axis use name as 'show label text'.
	                    // 'exist' always has id and name and we dont
	                    // need to check it.
	                    && cptOption.id == null
	                ) {
	                    result[i].option = cptOption;
	                    break;
	                }
	            }

	            if (i >= result.length) {
	                result.push({option: cptOption});
	            }
	        });

	        return result;
	    };

	    /**
	     * @public
	     * @param {Object} cptOption
	     * @return {boolean}
	     */
	    modelUtil.isIdInner = function (cptOption) {
	        return zrUtil.isObject(cptOption)
	            && cptOption.id
	            && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	    };

	    module.exports = modelUtil;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var numberUtil = __webpack_require__(115);

	    /**
	     * 每三位默认加,格式化
	     * @type {string|number} x
	     */
	    function addCommas(x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,')
	               + (x.length > 1 ? ('.' + x[1]) : '');
	    }

	    /**
	     * @param {string} str
	     * @return {string} str
	     */
	    function toCamelCase(str) {
	        return str.toLowerCase().replace(/-(.)/g, function(match, group1) {
	            return group1.toUpperCase();
	        });
	    }

	    /**
	     * Normalize css liked array configuration
	     * e.g.
	     *  3 => [3, 3, 3, 3]
	     *  [4, 2] => [4, 2, 4, 2]
	     *  [4, 3, 2] => [4, 3, 2, 3]
	     * @param {number|Array.<number>} val
	     */
	    function normalizeCssArray(val) {
	        var len = val.length;
	        if (typeof (val) === 'number') {
	            return [val, val, val, val];
	        }
	        else if (len === 2) {
	            // vertical | horizontal
	            return [val[0], val[1], val[0], val[1]];
	        }
	        else if (len === 3) {
	            // top | horizontal | bottom
	            return [val[0], val[1], val[2], val[1]];
	        }
	        return val;
	    }

	    function encodeHTML(source) {
	        return String(source)
	            .replace(/&/g, '&amp;')
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;')
	            .replace(/"/g, '&quot;')
	            .replace(/'/g, '&#39;');
	    }

	    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

	    function wrapVar(varName, seriesIdx) {
	        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	    }
	    /**
	     * Template formatter
	     * @param  {string} tpl
	     * @param  {Array.<Object>|Object} paramsList
	     * @return {string}
	     */
	    function formatTpl(tpl, paramsList) {
	        if (!zrUtil.isArray(paramsList)) {
	            paramsList = [paramsList];
	        }
	        var seriesLen = paramsList.length;
	        if (!seriesLen) {
	            return '';
	        }

	        var $vars = paramsList[0].$vars;
	        for (var i = 0; i < $vars.length; i++) {
	            var alias = TPL_VAR_ALIAS[i];
	            tpl = tpl.replace(wrapVar(alias),  wrapVar(alias, 0));
	        }
	        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	            for (var k = 0; k < $vars.length; k++) {
	                tpl = tpl.replace(
	                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),
	                    paramsList[seriesIdx][$vars[k]]
	                );
	            }
	        }

	        return tpl;
	    }

	    /**
	     * ISO Date format
	     * @param {string} tpl
	     * @param {number} value
	     * @inner
	     */
	    function formatTime(tpl, value) {
	        if (tpl === 'week'
	            || tpl === 'month'
	            || tpl === 'quarter'
	            || tpl === 'half-year'
	            || tpl === 'year'
	        ) {
	            tpl = 'MM-dd\nyyyy';
	        }

	        var date = numberUtil.parseDate(value);
	        var y = date.getFullYear();
	        var M = date.getMonth() + 1;
	        var d = date.getDate();
	        var h = date.getHours();
	        var m = date.getMinutes();
	        var s = date.getSeconds();

	        tpl = tpl.replace('MM', s2d(M))
	            .toLowerCase()
	            .replace('yyyy', y)
	            .replace('yy', y % 100)
	            .replace('dd', s2d(d))
	            .replace('d', d)
	            .replace('hh', s2d(h))
	            .replace('h', h)
	            .replace('mm', s2d(m))
	            .replace('m', m)
	            .replace('ss', s2d(s))
	            .replace('s', s);

	        return tpl;
	    }

	    /**
	     * @param {string} str
	     * @return {string}
	     * @inner
	     */
	    function s2d(str) {
	        return str < 10 ? ('0' + str) : str;
	    }

	    module.exports = {

	        normalizeCssArray: normalizeCssArray,

	        addCommas: addCommas,

	        toCamelCase: toCamelCase,

	        encodeHTML: encodeHTML,

	        formatTpl: formatTpl,

	        formatTime: formatTime
	    };


/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * 数值处理模块
	 * @module echarts/util/number
	 */



	    var number = {};

	    var RADIAN_EPSILON = 1e-4;

	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }

	    /**
	     * Linear mapping a value from domain to range
	     * @memberOf module:echarts/util/number
	     * @param  {(number|Array.<number>)} val
	     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	     * @param  {boolean} clamp
	     * @return {(number|Array.<number>}
	     */
	    number.linearMap = function (val, domain, range, clamp) {

	        var sub = domain[1] - domain[0];

	        if (sub === 0) {
	            return (range[0] + range[1]) / 2;
	        }
	        var t = (val - domain[0]) / sub;

	        if (clamp) {
	            t = Math.min(Math.max(t, 0), 1);
	        }

	        return t * (range[1] - range[0]) + range[0];
	    };

	    /**
	     * Convert a percent string to absolute number.
	     * Returns NaN if percent is not a valid string or number
	     * @memberOf module:echarts/util/number
	     * @param {string|number} percent
	     * @param {number} all
	     * @return {number}
	     */
	    number.parsePercent = function(percent, all) {
	        switch (percent) {
	            case 'center':
	            case 'middle':
	                percent = '50%';
	                break;
	            case 'left':
	            case 'top':
	                percent = '0%';
	                break;
	            case 'right':
	            case 'bottom':
	                percent = '100%';
	                break;
	        }
	        if (typeof percent === 'string') {
	            if (_trim(percent).match(/%$/)) {
	                return parseFloat(percent) / 100 * all;
	            }

	            return parseFloat(percent);
	        }

	        return percent == null ? NaN : +percent;
	    };

	    /**
	     * Fix rounding error of float numbers
	     * @param {number} x
	     * @return {number}
	     */
	    number.round = function (x) {
	        // PENDING
	        return +(+x).toFixed(10);
	    };

	    number.asc = function (arr) {
	        arr.sort(function (a, b) {
	            return a - b;
	        });
	        return arr;
	    };

	    /**
	     * Get precision
	     * @param {number} val
	     */
	    number.getPrecision = function (val) {
	        if (isNaN(val)) {
	            return 0;
	        }
	        // It is much faster than methods converting number to string as follows
	        //      var tmp = val.toString();
	        //      return tmp.length - 1 - tmp.indexOf('.');
	        // especially when precision is low
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    };

	    /**
	     * @param {Array.<number>} dataExtent
	     * @param {Array.<number>} pixelExtent
	     * @return {number}  precision
	     */
	    number.getPixelPrecision = function (dataExtent, pixelExtent) {
	        var log = Math.log;
	        var LN10 = Math.LN10;
	        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	        return Math.max(
	            -dataQuantity + sizeQuantity,
	            0
	        );
	    };

	    // Number.MAX_SAFE_INTEGER, ie do not support.
	    number.MAX_SAFE_INTEGER = 9007199254740991;

	    /**
	     * To 0 - 2 * PI, considering negative radian.
	     * @param {number} radian
	     * @return {number}
	     */
	    number.remRadian = function (radian) {
	        var pi2 = Math.PI * 2;
	        return (radian % pi2 + pi2) % pi2;
	    };

	    /**
	     * @param {type} radian
	     * @return {boolean}
	     */
	    number.isRadianAroundZero = function (val) {
	        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	    };

	    /**
	     * @param {string|Date|number} value
	     * @return {number} timestamp
	     */
	    number.parseDate = function (value) {
	        return value instanceof Date
	            ? value
	            : new Date(
	                typeof value === 'string'
	                    ? value.replace(/-/g, '/')
	                    : Math.round(value)
	            );
	    };

	    // "Nice Numbers for Graph Labels" of Graphic Gems
	    /**
	     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	     * @param  {number} val
	     * @param  {boolean} round
	     * @return {number}
	     */
	    number.nice = function (val, round) {
	        var exp = Math.floor(Math.log(val) / Math.LN10);
	        var exp10 = Math.pow(10, exp);
	        var f = val / exp10; // between 1 and 10
	        var nf;
	        if (round) {
	            if (f < 1.5) { nf = 1; }
	            else if (f < 2.5) { nf = 2; }
	            else if (f < 4) { nf = 3; }
	            else if (f < 7) { nf = 5; }
	            else { nf = 10; }
	        }
	        else {
	            if (f < 1) { nf = 1; }
	            else if (f < 2) { nf = 2; }
	            else if (f < 3) { nf = 3; }
	            else if (f < 5) { nf = 5; }
	            else { nf = 10; }
	        }
	        return nf * exp10;
	    };

	    module.exports = number;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/model/Model
	 */


	    var zrUtil = __webpack_require__(111);
	    var clazzUtil = __webpack_require__(117);

	    /**
	     * @alias module:echarts/model/Model
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Object} extraOpt
	     */
	    function Model(option, parentModel, ecModel, extraOpt) {
	        /**
	         * @type {module:echarts/model/Model}
	         * @readOnly
	         */
	        this.parentModel = parentModel;

	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        this.ecModel = ecModel;

	        /**
	         * @type {Object}
	         * @protected
	         */
	        this.option = option;

	        // Simple optimization
	        if (this.init) {
	            if (arguments.length <= 4) {
	                this.init(option, parentModel, ecModel, extraOpt);
	            }
	            else {
	                this.init.apply(this, arguments);
	            }
	        }
	    }

	    Model.prototype = {

	        constructor: Model,

	        /**
	         * Model 的初始化函数
	         * @param {Object} option
	         */
	        init: null,

	        /**
	         * 从新的 Option merge
	         */
	        mergeOption: function (option) {
	            zrUtil.merge(this.option, option, true);
	        },

	        /**
	         * @param {string} path
	         * @param {boolean} [ignoreParent=false]
	         * @return {*}
	         */
	        get: function (path, ignoreParent) {
	            if (!path) {
	                return this.option;
	            }

	            if (typeof path === 'string') {
	                path = path.split('.');
	            }

	            var obj = this.option;
	            var parentModel = this.parentModel;
	            for (var i = 0; i < path.length; i++) {
	                // obj could be number/string/... (like 0)
	                obj = (obj && typeof obj === 'object') ? obj[path[i]] : null;
	                if (obj == null) {
	                    break;
	                }
	            }
	            if (obj == null && parentModel && !ignoreParent) {
	                obj = parentModel.get(path);
	            }
	            return obj;
	        },

	        /**
	         * @param {string} key
	         * @param {boolean} [ignoreParent=false]
	         * @return {*}
	         */
	        getShallow: function (key, ignoreParent) {
	            var option = this.option;
	            var val = option && option[key];
	            var parentModel = this.parentModel;
	            if (val == null && parentModel && !ignoreParent) {
	                val = parentModel.getShallow(key);
	            }
	            return val;
	        },

	        /**
	         * @param {string} path
	         * @param {module:echarts/model/Model} [parentModel]
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path, parentModel) {
	            var obj = this.get(path, true);
	            var thisParentModel = this.parentModel;
	            var model = new Model(
	                obj, parentModel || (thisParentModel && thisParentModel.getModel(path)),
	                this.ecModel
	            );
	            return model;
	        },

	        /**
	         * If model has option
	         */
	        isEmpty: function () {
	            return this.option == null;
	        },

	        restoreData: function () {},

	        // Pending
	        clone: function () {
	            var Ctor = this.constructor;
	            return new Ctor(zrUtil.clone(this.option));
	        },

	        setReadOnly: function (properties) {
	            clazzUtil.setReadOnly(this, properties);
	        }
	    };

	    // Enable Model.extend.
	    clazzUtil.enableClassExtend(Model);

	    var mixin = zrUtil.mixin;
	    mixin(Model, __webpack_require__(118));
	    mixin(Model, __webpack_require__(120));
	    mixin(Model, __webpack_require__(121));
	    mixin(Model, __webpack_require__(126));

	    module.exports = Model;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);

	    var clazz = {};

	    var TYPE_DELIMITER = '.';
	    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	    /**
	     * @public
	     */
	    var parseClassType = clazz.parseClassType = function (componentType) {
	        var ret = {main: '', sub: ''};
	        if (componentType) {
	            componentType = componentType.split(TYPE_DELIMITER);
	            ret.main = componentType[0] || '';
	            ret.sub = componentType[1] || '';
	        }
	        return ret;
	    };
	    /**
	     * @public
	     */
	    clazz.enableClassExtend = function (RootClass, preConstruct) {
	        RootClass.extend = function (proto) {
	            var ExtendedClass = function () {
	                preConstruct && preConstruct.apply(this, arguments);
	                RootClass.apply(this, arguments);
	            };

	            zrUtil.extend(ExtendedClass.prototype, proto);

	            ExtendedClass.extend = this.extend;
	            ExtendedClass.superCall = superCall;
	            ExtendedClass.superApply = superApply;
	            zrUtil.inherits(ExtendedClass, this);
	            ExtendedClass.superClass = this;

	            return ExtendedClass;
	        };
	    };

	    // superCall should have class info, which can not be fetch from 'this'.
	    // Consider this case:
	    // class A has method f,
	    // class B inherits class A, overrides method f, f call superApply('f'),
	    // class C inherits class B, do not overrides method f,
	    // then when method of class C is called, dead loop occured.
	    function superCall(context, methodName) {
	        var args = zrUtil.slice(arguments, 2);
	        return this.superClass.prototype[methodName].apply(context, args);
	    }

	    function superApply(context, methodName, args) {
	        return this.superClass.prototype[methodName].apply(context, args);
	    }

	    /**
	     * @param {Object} entity
	     * @param {Object} options
	     * @param {boolean} [options.registerWhenExtend]
	     * @public
	     */
	    clazz.enableClassManagement = function (entity, options) {
	        options = options || {};

	        /**
	         * Component model classes
	         * key: componentType,
	         * value:
	         *     componentClass, when componentType is 'xxx'
	         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	         * @type {Object}
	         */
	        var storage = {};

	        entity.registerClass = function (Clazz, componentType) {
	            if (componentType) {
	                componentType = parseClassType(componentType);

	                if (!componentType.sub) {
	                    if (storage[componentType.main]) {
	                        throw new Error(componentType.main + 'exists.');
	                    }
	                    storage[componentType.main] = Clazz;
	                }
	                else if (componentType.sub !== IS_CONTAINER) {
	                    var container = makeContainer(componentType);
	                    container[componentType.sub] = Clazz;
	                }
	            }
	            return Clazz;
	        };

	        entity.getClass = function (componentTypeMain, subType, throwWhenNotFound) {
	            var Clazz = storage[componentTypeMain];

	            if (Clazz && Clazz[IS_CONTAINER]) {
	                Clazz = subType ? Clazz[subType] : null;
	            }

	            if (throwWhenNotFound && !Clazz) {
	                throw new Error(
	                    'Component ' + componentTypeMain + '.' + (subType || '') + ' not exists. Load it first.'
	                );
	            }

	            return Clazz;
	        };

	        entity.getClassesByMainType = function (componentType) {
	            componentType = parseClassType(componentType);

	            var result = [];
	            var obj = storage[componentType.main];

	            if (obj && obj[IS_CONTAINER]) {
	                zrUtil.each(obj, function (o, type) {
	                    type !== IS_CONTAINER && result.push(o);
	                });
	            }
	            else {
	                result.push(obj);
	            }

	            return result;
	        };

	        entity.hasClass = function (componentType) {
	            // Just consider componentType.main.
	            componentType = parseClassType(componentType);
	            return !!storage[componentType.main];
	        };

	        /**
	         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	         */
	        entity.getAllClassMainTypes = function () {
	            var types = [];
	            zrUtil.each(storage, function (obj, type) {
	                types.push(type);
	            });
	            return types;
	        };

	        /**
	         * If a main type is container and has sub types
	         * @param  {string}  mainType
	         * @return {boolean}
	         */
	        entity.hasSubTypes = function (componentType) {
	            componentType = parseClassType(componentType);
	            var obj = storage[componentType.main];
	            return obj && obj[IS_CONTAINER];
	        };

	        entity.parseClassType = parseClassType;

	        function makeContainer(componentType) {
	            var container = storage[componentType.main];
	            if (!container || !container[IS_CONTAINER]) {
	                container = storage[componentType.main] = {};
	                container[IS_CONTAINER] = true;
	            }
	            return container;
	        }

	        if (options.registerWhenExtend) {
	            var originalExtend = entity.extend;
	            if (originalExtend) {
	                entity.extend = function (proto) {
	                    var ExtendedClass = originalExtend.call(this, proto);
	                    return entity.registerClass(ExtendedClass, proto.type);
	                };
	            }
	        }

	        return entity;
	    };

	    /**
	     * @param {string|Array.<string>} properties
	     */
	    clazz.setReadOnly = function (obj, properties) {
	        // FIXME It seems broken in IE8 simulation of IE11
	        // if (!zrUtil.isArray(properties)) {
	        //     properties = properties != null ? [properties] : [];
	        // }
	        // zrUtil.each(properties, function (prop) {
	        //     var value = obj[prop];

	        //     Object.defineProperty
	        //         && Object.defineProperty(obj, prop, {
	        //             value: value, writable: false
	        //         });
	        //     zrUtil.isArray(obj[prop])
	        //         && Object.freeze
	        //         && Object.freeze(obj[prop]);
	        // });
	    };

	    module.exports = clazz;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	
	    var getLineStyle = __webpack_require__(119)(
	        [
	            ['lineWidth', 'width'],
	            ['stroke', 'color'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]
	    );
	    module.exports = {
	        getLineStyle: function (excludes) {
	            var style = getLineStyle.call(this, excludes);
	            var lineDash = this.getLineDash();
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },

	        getLineDash: function () {
	            var lineType = this.get('type');
	            return (lineType === 'solid' || lineType == null) ? null
	                : (lineType === 'dashed' ? [5, 5] : [1, 1]);
	        }
	    };


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Parse shadow style
	// TODO Only shallow path support

	    var zrUtil = __webpack_require__(111);

	    module.exports = function (properties) {
	        // Normalize
	        for (var i = 0; i < properties.length; i++) {
	            if (!properties[i][1]) {
	               properties[i][1] = properties[i][0];
	            }
	        }
	        return function (excludes) {
	            var style = {};
	            for (var i = 0; i < properties.length; i++) {
	                var propName = properties[i][1];
	                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
	                    continue;
	                }
	                var val = this.getShallow(propName);
	                if (val != null) {
	                    style[properties[i][0]] = val;
	                }
	            }
	            return style;
	        };
	    };


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	
	    module.exports = {
	        getAreaStyle: __webpack_require__(119)(
	            [
	                ['fill', 'color'],
	                ['shadowBlur'],
	                ['shadowOffsetX'],
	                ['shadowOffsetY'],
	                ['opacity'],
	                ['shadowColor']
	            ]
	        )
	    };


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	

	    var textContain = __webpack_require__(122);

	    function getShallow(model, path) {
	        return model && model.getShallow(path);
	    }

	    module.exports = {
	        /**
	         * Get color property or get color from option.textStyle.color
	         * @return {string}
	         */
	        getTextColor: function () {
	            var ecModel = this.ecModel;
	            return this.getShallow('color')
	                || (ecModel && ecModel.get('textStyle.color'));
	        },

	        /**
	         * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	         * @return {string}
	         */
	        getFont: function () {
	            var ecModel = this.ecModel;
	            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
	            return [
	                // FIXME in node-canvas fontWeight is before fontStyle
	                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),
	                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),
	                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',
	                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'
	            ].join(' ');
	        },

	        getTextRect: function (text) {
	            var textStyle = this.get('textStyle') || {};
	            return textContain.getBoundingRect(
	                text,
	                this.getFont(),
	                textStyle.align,
	                textStyle.baseline
	            );
	        },

	        ellipsis: function (text, containerWidth, options) {
	            return textContain.ellipsis(
	                text, this.getFont(), containerWidth, options
	            );
	        }
	    };


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	

	    var textWidthCache = {};
	    var textWidthCacheCounter = 0;
	    var TEXT_CACHE_MAX = 5000;

	    var util = __webpack_require__(111);
	    var BoundingRect = __webpack_require__(123);

	    function getTextWidth(text, textFont) {
	        var key = text + ':' + textFont;
	        if (textWidthCache[key]) {
	            return textWidthCache[key];
	        }

	        var textLines = (text + '').split('\n');
	        var width = 0;

	        for (var i = 0, l = textLines.length; i < l; i++) {
	            // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	            width =  Math.max(textContain.measureText(textLines[i], textFont).width, width);
	        }

	        if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	            textWidthCacheCounter = 0;
	            textWidthCache = {};
	        }
	        textWidthCacheCounter++;
	        textWidthCache[key] = width;

	        return width;
	    }

	    function getTextRect(text, textFont, textAlign, textBaseline) {
	        var textLineLen = ((text || '') + '').split('\n').length;

	        var width = getTextWidth(text, textFont);
	        // FIXME 高度计算比较粗暴
	        var lineHeight = getTextWidth('国', textFont);
	        var height = textLineLen * lineHeight;

	        var rect = new BoundingRect(0, 0, width, height);
	        // Text has a special line height property
	        rect.lineHeight = lineHeight;

	        switch (textBaseline) {
	            case 'bottom':
	            case 'alphabetic':
	                rect.y -= lineHeight;
	                break;
	            case 'middle':
	                rect.y -= lineHeight / 2;
	                break;
	            // case 'hanging':
	            // case 'top':
	        }

	        // FIXME Right to left language
	        switch (textAlign) {
	            case 'end':
	            case 'right':
	                rect.x -= rect.width;
	                break;
	            case 'center':
	                rect.x -= rect.width / 2;
	                break;
	            // case 'start':
	            // case 'left':
	        }

	        return rect;
	    }

	    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {

	        var x = rect.x;
	        var y = rect.y;

	        var height = rect.height;
	        var width = rect.width;

	        var textHeight = textRect.height;

	        var halfHeight = height / 2 - textHeight / 2;

	        var textAlign = 'left';

	        switch (textPosition) {
	            case 'left':
	                x -= distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'right':
	                x += distance + width;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'top':
	                x += width / 2;
	                y -= distance + textHeight;
	                textAlign = 'center';
	                break;
	            case 'bottom':
	                x += width / 2;
	                y += height + distance;
	                textAlign = 'center';
	                break;
	            case 'inside':
	                x += width / 2;
	                y += halfHeight;
	                textAlign = 'center';
	                break;
	            case 'insideLeft':
	                x += distance;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'insideRight':
	                x += width - distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'insideTop':
	                x += width / 2;
	                y += distance;
	                textAlign = 'center';
	                break;
	            case 'insideBottom':
	                x += width / 2;
	                y += height - textHeight - distance;
	                textAlign = 'center';
	                break;
	            case 'insideTopLeft':
	                x += distance;
	                y += distance;
	                textAlign = 'left';
	                break;
	            case 'insideTopRight':
	                x += width - distance;
	                y += distance;
	                textAlign = 'right';
	                break;
	            case 'insideBottomLeft':
	                x += distance;
	                y += height - textHeight - distance;
	                break;
	            case 'insideBottomRight':
	                x += width - distance;
	                y += height - textHeight - distance;
	                textAlign = 'right';
	                break;
	        }

	        return {
	            x: x,
	            y: y,
	            textAlign: textAlign,
	            textBaseline: 'top'
	        };
	    }

	    /**
	     * Show ellipsis if overflow.
	     *
	     * @param  {string} text
	     * @param  {string} textFont
	     * @param  {string} containerWidth
	     * @param  {Object} [options]
	     * @param  {number} [options.ellipsis='...']
	     * @param  {number} [options.maxIterations=3]
	     * @param  {number} [options.minCharacters=3]
	     * @return {string}
	     */
	    function textEllipsis(text, textFont, containerWidth, options) {
	        if (!containerWidth) {
	            return '';
	        }

	        options = util.defaults({
	            ellipsis: '...',
	            minCharacters: 3,
	            maxIterations: 3,
	            cnCharWidth: getTextWidth('国', textFont),
	            // FIXME
	            // 未考虑非等宽字体
	            ascCharWidth: getTextWidth('a', textFont)
	        }, options, true);

	        containerWidth -= getTextWidth(options.ellipsis);

	        var textLines = (text + '').split('\n');

	        for (var i = 0, len = textLines.length; i < len; i++) {
	            textLines[i] = textLineTruncate(
	                textLines[i], textFont, containerWidth, options
	            );
	        }

	        return textLines.join('\n');
	    }

	    function textLineTruncate(text, textFont, containerWidth, options) {
	        // FIXME
	        // 粗糙得写的，尚未考虑性能和各种语言、字体的效果。
	        for (var i = 0;; i++) {
	            var lineWidth = getTextWidth(text, textFont);

	            if (lineWidth < containerWidth || i >= options.maxIterations) {
	                text += options.ellipsis;
	                break;
	            }

	            var subLength = i === 0
	                ? estimateLength(text, containerWidth, options)
	                : Math.floor(text.length * containerWidth / lineWidth);

	            if (subLength < options.minCharacters) {
	                text = '';
	                break;
	            }

	            text = text.substr(0, subLength);
	        }

	        return text;
	    }

	    function estimateLength(text, containerWidth, options) {
	        var width = 0;
	        var i = 0;
	        for (var len = text.length; i < len && width < containerWidth; i++) {
	            var charCode = text.charCodeAt(i);
	            width += (0 <= charCode && charCode <= 127)
	                ? options.ascCharWidth : options.cnCharWidth;
	        }
	        return i;
	    }

	    var textContain = {

	        getWidth: getTextWidth,

	        getBoundingRect: getTextRect,

	        adjustTextPositionOnRect: adjustTextPositionOnRect,

	        ellipsis: textEllipsis,

	        measureText: function (text, textFont) {
	            var ctx = util.getContext();
	            ctx.font = textFont;
	            return ctx.measureText(text);
	        }
	    };

	    module.exports = textContain;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/core/BoundingRect
	 */


	    var vec2 = __webpack_require__(124);
	    var matrix = __webpack_require__(125);

	    var v2ApplyTransform = vec2.applyTransform;
	    var mathMin = Math.min;
	    var mathAbs = Math.abs;
	    var mathMax = Math.max;
	    /**
	     * @alias module:echarts/core/BoundingRect
	     */
	    function BoundingRect(x, y, width, height) {
	        /**
	         * @type {number}
	         */
	        this.x = x;
	        /**
	         * @type {number}
	         */
	        this.y = y;
	        /**
	         * @type {number}
	         */
	        this.width = width;
	        /**
	         * @type {number}
	         */
	        this.height = height;
	    }

	    BoundingRect.prototype = {

	        constructor: BoundingRect,

	        /**
	         * @param {module:echarts/core/BoundingRect} other
	         */
	        union: function (other) {
	            var x = mathMin(other.x, this.x);
	            var y = mathMin(other.y, this.y);

	            this.width = mathMax(
	                    other.x + other.width,
	                    this.x + this.width
	                ) - x;
	            this.height = mathMax(
	                    other.y + other.height,
	                    this.y + this.height
	                ) - y;
	            this.x = x;
	            this.y = y;
	        },

	        /**
	         * @param {Array.<number>} m
	         * @methods
	         */
	        applyTransform: (function () {
	            var min = [];
	            var max = [];
	            return function (m) {
	                // In case usage like this
	                // el.getBoundingRect().applyTransform(el.transform)
	                // And element has no transform
	                if (!m) {
	                    return;
	                }
	                min[0] = this.x;
	                min[1] = this.y;
	                max[0] = this.x + this.width;
	                max[1] = this.y + this.height;

	                v2ApplyTransform(min, min, m);
	                v2ApplyTransform(max, max, m);

	                this.x = mathMin(min[0], max[0]);
	                this.y = mathMin(min[1], max[1]);
	                this.width = mathAbs(max[0] - min[0]);
	                this.height = mathAbs(max[1] - min[1]);
	            };
	        })(),

	        /**
	         * Calculate matrix of transforming from self to target rect
	         * @param  {module:zrender/core/BoundingRect} b
	         * @return {Array.<number>}
	         */
	        calculateTransform: function (b) {
	            var a = this;
	            var sx = b.width / a.width;
	            var sy = b.height / a.height;

	            var m = matrix.create();

	            // 矩阵右乘
	            matrix.translate(m, m, [-a.x, -a.y]);
	            matrix.scale(m, m, [sx, sy]);
	            matrix.translate(m, m, [b.x, b.y]);

	            return m;
	        },

	        /**
	         * @param {(module:echarts/core/BoundingRect|Object)} b
	         * @return {boolean}
	         */
	        intersect: function (b) {
	            var a = this;
	            var ax0 = a.x;
	            var ax1 = a.x + a.width;
	            var ay0 = a.y;
	            var ay1 = a.y + a.height;

	            var bx0 = b.x;
	            var bx1 = b.x + b.width;
	            var by0 = b.y;
	            var by1 = b.y + b.height;

	            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	        },

	        contain: function (x, y) {
	            var rect = this;
	            return x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height);
	        },

	        /**
	         * @return {module:echarts/core/BoundingRect}
	         */
	        clone: function () {
	            return new BoundingRect(this.x, this.y, this.width, this.height);
	        },

	        /**
	         * Copy from another rect
	         */
	        copy: function (other) {
	            this.x = other.x;
	            this.y = other.y;
	            this.width = other.width;
	            this.height = other.height;
	        }
	    };

	    module.exports = BoundingRect;


/***/ },
/* 124 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;

	    /**
	     * @typedef {Float32Array|Array.<number>} Vector2
	     */
	    /**
	     * 二维向量类
	     * @exports zrender/tool/vector
	     */
	    var vector = {
	        /**
	         * 创建一个向量
	         * @param {number} [x=0]
	         * @param {number} [y=0]
	         * @return {Vector2}
	         */
	        create: function (x, y) {
	            var out = new ArrayCtor(2);
	            out[0] = x || 0;
	            out[1] = y || 0;
	            return out;
	        },

	        /**
	         * 复制向量数据
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        copy: function (out, v) {
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },

	        /**
	         * 克隆一个向量
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        clone: function (v) {
	            var out = new ArrayCtor(2);
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },

	        /**
	         * 设置向量的两个项
	         * @param {Vector2} out
	         * @param {number} a
	         * @param {number} b
	         * @return {Vector2} 结果
	         */
	        set: function (out, a, b) {
	            out[0] = a;
	            out[1] = b;
	            return out;
	        },

	        /**
	         * 向量相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        add: function (out, v1, v2) {
	            out[0] = v1[0] + v2[0];
	            out[1] = v1[1] + v2[1];
	            return out;
	        },

	        /**
	         * 向量缩放后相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} a
	         */
	        scaleAndAdd: function (out, v1, v2, a) {
	            out[0] = v1[0] + v2[0] * a;
	            out[1] = v1[1] + v2[1] * a;
	            return out;
	        },

	        /**
	         * 向量相减
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        sub: function (out, v1, v2) {
	            out[0] = v1[0] - v2[0];
	            out[1] = v1[1] - v2[1];
	            return out;
	        },

	        /**
	         * 向量长度
	         * @param {Vector2} v
	         * @return {number}
	         */
	        len: function (v) {
	            return Math.sqrt(this.lenSquare(v));
	        },

	        /**
	         * 向量长度平方
	         * @param {Vector2} v
	         * @return {number}
	         */
	        lenSquare: function (v) {
	            return v[0] * v[0] + v[1] * v[1];
	        },

	        /**
	         * 向量乘法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        mul: function (out, v1, v2) {
	            out[0] = v1[0] * v2[0];
	            out[1] = v1[1] * v2[1];
	            return out;
	        },

	        /**
	         * 向量除法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        div: function (out, v1, v2) {
	            out[0] = v1[0] / v2[0];
	            out[1] = v1[1] / v2[1];
	            return out;
	        },

	        /**
	         * 向量点乘
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        dot: function (v1, v2) {
	            return v1[0] * v2[0] + v1[1] * v2[1];
	        },

	        /**
	         * 向量缩放
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {number} s
	         */
	        scale: function (out, v, s) {
	            out[0] = v[0] * s;
	            out[1] = v[1] * s;
	            return out;
	        },

	        /**
	         * 向量归一化
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        normalize: function (out, v) {
	            var d = vector.len(v);
	            if (d === 0) {
	                out[0] = 0;
	                out[1] = 0;
	            }
	            else {
	                out[0] = v[0] / d;
	                out[1] = v[1] / d;
	            }
	            return out;
	        },

	        /**
	         * 计算向量间距离
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distance: function (v1, v2) {
	            return Math.sqrt(
	                (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1])
	            );
	        },

	        /**
	         * 向量距离平方
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distanceSquare: function (v1, v2) {
	            return (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	        },

	        /**
	         * 求负向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        negate: function (out, v) {
	            out[0] = -v[0];
	            out[1] = -v[1];
	            return out;
	        },

	        /**
	         * 插值两个点
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} t
	         */
	        lerp: function (out, v1, v2, t) {
	            out[0] = v1[0] + t * (v2[0] - v1[0]);
	            out[1] = v1[1] + t * (v2[1] - v1[1]);
	            return out;
	        },

	        /**
	         * 矩阵左乘向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {Vector2} m
	         */
	        applyTransform: function (out, v, m) {
	            var x = v[0];
	            var y = v[1];
	            out[0] = m[0] * x + m[2] * y + m[4];
	            out[1] = m[1] * x + m[3] * y + m[5];
	            return out;
	        },
	        /**
	         * 求两个向量最小值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        min: function (out, v1, v2) {
	            out[0] = Math.min(v1[0], v2[0]);
	            out[1] = Math.min(v1[1], v2[1]);
	            return out;
	        },
	        /**
	         * 求两个向量最大值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        max: function (out, v1, v2) {
	            out[0] = Math.max(v1[0], v2[0]);
	            out[1] = Math.max(v1[1], v2[1]);
	            return out;
	        }
	    };

	    vector.length = vector.len;
	    vector.lengthSquare = vector.lenSquare;
	    vector.dist = vector.distance;
	    vector.distSquare = vector.distanceSquare;

	    module.exports = vector;



/***/ },
/* 125 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;
	    /**
	     * 3x2矩阵操作类
	     * @exports zrender/tool/matrix
	     */
	    var matrix = {
	        /**
	         * 创建一个单位矩阵
	         * @return {Float32Array|Array.<number>}
	         */
	        create : function() {
	            var out = new ArrayCtor(6);
	            matrix.identity(out);

	            return out;
	        },
	        /**
	         * 设置矩阵为单位矩阵
	         * @param {Float32Array|Array.<number>} out
	         */
	        identity : function(out) {
	            out[0] = 1;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            out[4] = 0;
	            out[5] = 0;
	            return out;
	        },
	        /**
	         * 复制矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m
	         */
	        copy: function(out, m) {
	            out[0] = m[0];
	            out[1] = m[1];
	            out[2] = m[2];
	            out[3] = m[3];
	            out[4] = m[4];
	            out[5] = m[5];
	            return out;
	        },
	        /**
	         * 矩阵相乘
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m1
	         * @param {Float32Array|Array.<number>} m2
	         */
	        mul : function (out, m1, m2) {
	            // Consider matrix.mul(m, m2, m);
	            // where out is the same as m2.
	            // So use temp variable to escape error.
	            var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	            var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	            var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	            var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	            out[0] = out0;
	            out[1] = out1;
	            out[2] = out2;
	            out[3] = out3;
	            out[4] = out4;
	            out[5] = out5;
	            return out;
	        },
	        /**
	         * 平移变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        translate : function(out, a, v) {
	            out[0] = a[0];
	            out[1] = a[1];
	            out[2] = a[2];
	            out[3] = a[3];
	            out[4] = a[4] + v[0];
	            out[5] = a[5] + v[1];
	            return out;
	        },
	        /**
	         * 旋转变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {number} rad
	         */
	        rotate : function(out, a, rad) {
	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];
	            var st = Math.sin(rad);
	            var ct = Math.cos(rad);

	            out[0] = aa * ct + ab * st;
	            out[1] = -aa * st + ab * ct;
	            out[2] = ac * ct + ad * st;
	            out[3] = -ac * st + ct * ad;
	            out[4] = ct * atx + st * aty;
	            out[5] = ct * aty - st * atx;
	            return out;
	        },
	        /**
	         * 缩放变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        scale : function(out, a, v) {
	            var vx = v[0];
	            var vy = v[1];
	            out[0] = a[0] * vx;
	            out[1] = a[1] * vy;
	            out[2] = a[2] * vx;
	            out[3] = a[3] * vy;
	            out[4] = a[4] * vx;
	            out[5] = a[5] * vy;
	            return out;
	        },
	        /**
	         * 求逆矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         */
	        invert : function(out, a) {

	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];

	            var det = aa * ad - ab * ac;
	            if (!det) {
	                return null;
	            }
	            det = 1.0 / det;

	            out[0] = ad * det;
	            out[1] = -ab * det;
	            out[2] = -ac * det;
	            out[3] = aa * det;
	            out[4] = (ac * aty - ad * atx) * det;
	            out[5] = (ab * atx - aa * aty) * det;
	            return out;
	        }
	    };

	    module.exports = matrix;



/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	
	    module.exports = {
	        getItemStyle: __webpack_require__(119)(
	            [
	                ['fill', 'color'],
	                ['stroke', 'borderColor'],
	                ['lineWidth', 'borderWidth'],
	                ['opacity'],
	                ['shadowBlur'],
	                ['shadowOffsetX'],
	                ['shadowOffsetY'],
	                ['shadowColor']
	            ]
	        )
	    };


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */


	    var Model = __webpack_require__(116);
	    var zrUtil = __webpack_require__(111);
	    var arrayPush = Array.prototype.push;
	    var componentUtil = __webpack_require__(128);
	    var clazzUtil = __webpack_require__(117);
	    var layout = __webpack_require__(129);

	    /**
	     * @alias module:echarts/model/Component
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {module:echarts/model/Model} ecModel
	     */
	    var ComponentModel = Model.extend({

	        type: 'component',

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        id: '',

	        /**
	         * @readOnly
	         */
	        name: '',

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        mainType: '',

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        subType: '',

	        /**
	         * @readOnly
	         * @type {number}
	         */
	        componentIndex: 0,

	        /**
	         * @type {Object}
	         * @protected
	         */
	        defaultOption: null,

	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        ecModel: null,

	        /**
	         * key: componentType
	         * value:  Component model list, can not be null.
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @readOnly
	         */
	        dependentModels: [],

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        uid: null,

	        /**
	         * Support merge layout params.
	         * Only support 'box' now (left/right/top/bottom/width/height).
	         * @type {string|Object} Object can be {ignoreSize: true}
	         * @readOnly
	         */
	        layoutMode: null,


	        init: function (option, parentModel, ecModel, extraOpt) {
	            this.mergeDefaultAndTheme(this.option, this.ecModel);
	        },

	        mergeDefaultAndTheme: function (option, ecModel) {
	            var layoutMode = this.layoutMode;
	            var inputPositionParams = layoutMode
	                ? layout.getLayoutParams(option) : {};

	            var themeModel = ecModel.getTheme();
	            zrUtil.merge(option, themeModel.get(this.mainType));
	            zrUtil.merge(option, this.getDefaultOption());

	            if (layoutMode) {
	                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	            }
	        },

	        mergeOption: function (option) {
	            zrUtil.merge(this.option, option, true);

	            var layoutMode = this.layoutMode;
	            if (layoutMode) {
	                layout.mergeLayoutParam(this.option, option, layoutMode);
	            }
	        },

	        // Hooker after init or mergeOption
	        optionUpdated: function (ecModel) {},

	        getDefaultOption: function () {
	            if (!this.hasOwnProperty('__defaultOption')) {
	                var optList = [];
	                var Class = this.constructor;
	                while (Class) {
	                    var opt = Class.prototype.defaultOption;
	                    opt && optList.push(opt);
	                    Class = Class.superClass;
	                }

	                var defaultOption = {};
	                for (var i = optList.length - 1; i >= 0; i--) {
	                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	                }
	                this.__defaultOption = defaultOption;
	            }
	            return this.__defaultOption;
	        }

	    });

	    // Reset ComponentModel.extend, add preConstruct.
	    clazzUtil.enableClassExtend(
	        ComponentModel,
	        function (option, parentModel, ecModel, extraOpt) {
	            // Set dependentModels, componentIndex, name, id, mainType, subType.
	            zrUtil.extend(this, extraOpt);

	            this.uid = componentUtil.getUID('componentModel');

	            // this.setReadOnly([
	            //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	            //     'dependentModels', 'componentIndex'
	            // ]);
	        }
	    );

	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(
	        ComponentModel, {registerWhenExtend: true}
	    );
	    componentUtil.enableSubTypeDefaulter(ComponentModel);

	    // Add capability of ComponentModel.topologicalTravel.
	    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);

	    function getDependencies(componentType) {
	        var deps = [];
	        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	            arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	        });
	        // Ensure main type
	        return zrUtil.map(deps, function (type) {
	            return clazzUtil.parseClassType(type).main;
	        });
	    }

	    zrUtil.mixin(ComponentModel, __webpack_require__(130));

	    module.exports = ComponentModel;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var clazz = __webpack_require__(117);

	    var parseClassType = clazz.parseClassType;

	    var base = 0;

	    var componentUtil = {};

	    var DELIMITER = '_';

	    /**
	     * @public
	     * @param {string} type
	     * @return {string}
	     */
	    componentUtil.getUID = function (type) {
	        // Considering the case of crossing js context,
	        // use Math.random to make id as unique as possible.
	        return [(type || ''), base++, Math.random()].join(DELIMITER);
	    };

	    /**
	     * @inner
	     */
	    componentUtil.enableSubTypeDefaulter = function (entity) {

	        var subTypeDefaulters = {};

	        entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	            componentType = parseClassType(componentType);
	            subTypeDefaulters[componentType.main] = defaulter;
	        };

	        entity.determineSubType = function (componentType, option) {
	            var type = option.type;
	            if (!type) {
	                var componentTypeMain = parseClassType(componentType).main;
	                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	                    type = subTypeDefaulters[componentTypeMain](option);
	                }
	            }
	            return type;
	        };

	        return entity;
	    };

	    /**
	     * Topological travel on Activity Network (Activity On Vertices).
	     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	     *
	     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	     *
	     * If there is circle dependencey, Error will be thrown.
	     *
	     */
	    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {

	        /**
	         * @public
	         * @param {Array.<string>} targetNameList Target Component type list.
	         *                                           Can be ['aa', 'bb', 'aa.xx']
	         * @param {Array.<string>} fullNameList By which we can build dependency graph.
	         * @param {Function} callback Params: componentType, dependencies.
	         * @param {Object} context Scope of callback.
	         */
	        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	            if (!targetNameList.length) {
	                return;
	            }

	            var result = makeDepndencyGraph(fullNameList);
	            var graph = result.graph;
	            var stack = result.noEntryList;

	            var targetNameSet = {};
	            zrUtil.each(targetNameList, function (name) {
	                targetNameSet[name] = true;
	            });

	            while (stack.length) {
	                var currComponentType = stack.pop();
	                var currVertex = graph[currComponentType];
	                var isInTargetNameSet = !!targetNameSet[currComponentType];
	                if (isInTargetNameSet) {
	                    callback.call(context, currComponentType, currVertex.originalDeps.slice());
	                    delete targetNameSet[currComponentType];
	                }
	                zrUtil.each(
	                    currVertex.successor,
	                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge
	                );
	            }

	            zrUtil.each(targetNameSet, function () {
	                throw new Error('Circle dependency may exists');
	            });

	            function removeEdge(succComponentType) {
	                graph[succComponentType].entryCount--;
	                if (graph[succComponentType].entryCount === 0) {
	                    stack.push(succComponentType);
	                }
	            }

	            // Consider this case: legend depends on series, and we call
	            // chart.setOption({series: [...]}), where only series is in option.
	            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	            // not be called, but only sereis.mergeOption is called. Thus legend
	            // have no chance to update its local record about series (like which
	            // name of series is available in legend).
	            function removeEdgeAndAdd(succComponentType) {
	                targetNameSet[succComponentType] = true;
	                removeEdge(succComponentType);
	            }
	        };

	        /**
	         * DepndencyGraph: {Object}
	         * key: conponentType,
	         * value: {
	         *     successor: [conponentTypes...],
	         *     originalDeps: [conponentTypes...],
	         *     entryCount: {number}
	         * }
	         */
	        function makeDepndencyGraph(fullNameList) {
	            var graph = {};
	            var noEntryList = [];

	            zrUtil.each(fullNameList, function (name) {

	                var thisItem = createDependencyGraphItem(graph, name);
	                var originalDeps = thisItem.originalDeps = dependencyGetter(name);

	                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	                thisItem.entryCount = availableDeps.length;
	                if (thisItem.entryCount === 0) {
	                    noEntryList.push(name);
	                }

	                zrUtil.each(availableDeps, function (dependentName) {
	                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	                        thisItem.predecessor.push(dependentName);
	                    }
	                    var thatItem = createDependencyGraphItem(graph, dependentName);
	                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	                        thatItem.successor.push(name);
	                    }
	                });
	            });

	            return {graph: graph, noEntryList: noEntryList};
	        }

	        function createDependencyGraphItem(graph, name) {
	            if (!graph[name]) {
	                graph[name] = {predecessor: [], successor: []};
	            }
	            return graph[name];
	        }

	        function getAvailableDependencies(originalDeps, fullNameList) {
	            var availableDeps = [];
	            zrUtil.each(originalDeps, function (dep) {
	                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	            });
	            return availableDeps;
	        }
	    };

	    module.exports = componentUtil;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Layout helpers for each component positioning


	    var zrUtil = __webpack_require__(111);
	    var BoundingRect = __webpack_require__(123);
	    var numberUtil = __webpack_require__(115);
	    var formatUtil = __webpack_require__(114);
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;

	    var layout = {};

	    var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];

	    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	        var x = 0;
	        var y = 0;
	        if (maxWidth == null) {
	            maxWidth = Infinity;
	        }
	        if (maxHeight == null) {
	            maxHeight = Infinity;
	        }
	        var currentLineMaxSize = 0;
	        group.eachChild(function (child, idx) {
	            var position = child.position;
	            var rect = child.getBoundingRect();
	            var nextChild = group.childAt(idx + 1);
	            var nextChildRect = nextChild && nextChild.getBoundingRect();
	            var nextX;
	            var nextY;
	            if (orient === 'horizontal') {
	                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);
	                nextX = x + moveX;
	                // Wrap when width exceeds maxWidth or meet a `newline` group
	                if (nextX > maxWidth || child.newline) {
	                    x = 0;
	                    nextX = moveX;
	                    y += currentLineMaxSize + gap;
	                    currentLineMaxSize = rect.height;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	                }
	            }
	            else {
	                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);
	                nextY = y + moveY;
	                // Wrap when width exceeds maxHeight or meet a `newline` group
	                if (nextY > maxHeight || child.newline) {
	                    x += currentLineMaxSize + gap;
	                    y = 0;
	                    nextY = moveY;
	                    currentLineMaxSize = rect.width;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	                }
	            }

	            if (child.newline) {
	                return;
	            }

	            position[0] = x;
	            position[1] = y;

	            orient === 'horizontal'
	                ? (x = nextX + gap)
	                : (y = nextY + gap);
	        });
	    }

	    /**
	     * VBox or HBox layouting
	     * @param {string} orient
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.box = boxLayout;

	    /**
	     * VBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.vbox = zrUtil.curry(boxLayout, 'vertical');

	    /**
	     * HBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');

	    /**
	     * If x or x2 is not specified or 'center' 'left' 'right',
	     * the width would be as long as possible.
	     * If y or y2 is not specified or 'middle' 'top' 'bottom',
	     * the height would be as long as possible.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.x]
	     * @param {number|string} [positionInfo.y]
	     * @param {number|string} [positionInfo.x2]
	     * @param {number|string} [positionInfo.y2]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @return {Object} {width, height}
	     */
	    layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;

	        var x = parsePercent(positionInfo.x, containerWidth);
	        var y = parsePercent(positionInfo.y, containerHeight);
	        var x2 = parsePercent(positionInfo.x2, containerWidth);
	        var y2 = parsePercent(positionInfo.y2, containerHeight);

	        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);

	        margin = formatUtil.normalizeCssArray(margin || 0);

	        return {
	            width: Math.max(x2 - x - margin[1] - margin[3], 0),
	            height: Math.max(y2 - y - margin[0] - margin[2], 0)
	        };
	    };

	    /**
	     * Parse position info.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {number|string} [positionInfo.width]
	     * @param {number|string} [positionInfo.height]
	     * @param {number|string} [positionInfo.aspect] Aspect is width / height
	     * @param {Object} containerRect
	     * @param {string|number} [margin]
	     *
	     * @return {module:zrender/core/BoundingRect}
	     */
	    layout.getLayoutRect = function (
	        positionInfo, containerRect, margin
	    ) {
	        margin = formatUtil.normalizeCssArray(margin || 0);

	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;

	        var left = parsePercent(positionInfo.left, containerWidth);
	        var top = parsePercent(positionInfo.top, containerHeight);
	        var right = parsePercent(positionInfo.right, containerWidth);
	        var bottom = parsePercent(positionInfo.bottom, containerHeight);
	        var width = parsePercent(positionInfo.width, containerWidth);
	        var height = parsePercent(positionInfo.height, containerHeight);

	        var verticalMargin = margin[2] + margin[0];
	        var horizontalMargin = margin[1] + margin[3];
	        var aspect = positionInfo.aspect;

	        // If width is not specified, calculate width from left and right
	        if (isNaN(width)) {
	            width = containerWidth - right - horizontalMargin - left;
	        }
	        if (isNaN(height)) {
	            height = containerHeight - bottom - verticalMargin - top;
	        }

	        // If width and height are not given
	        // 1. Graph should not exceeds the container
	        // 2. Aspect must be keeped
	        // 3. Graph should take the space as more as possible
	        if (isNaN(width) && isNaN(height)) {
	            if (aspect > containerWidth / containerHeight) {
	                width = containerWidth * 0.8;
	            }
	            else {
	                height = containerHeight * 0.8;
	            }
	        }

	        if (aspect != null) {
	            // Calculate width or height with given aspect
	            if (isNaN(width)) {
	                width = aspect * height;
	            }
	            if (isNaN(height)) {
	                height = width / aspect;
	            }
	        }

	        // If left is not specified, calculate left from right and width
	        if (isNaN(left)) {
	            left = containerWidth - right - width - horizontalMargin;
	        }
	        if (isNaN(top)) {
	            top = containerHeight - bottom - height - verticalMargin;
	        }

	        // Align left and top
	        switch (positionInfo.left || positionInfo.right) {
	            case 'center':
	                left = containerWidth / 2 - width / 2 - margin[3];
	                break;
	            case 'right':
	                left = containerWidth - width - horizontalMargin;
	                break;
	        }
	        switch (positionInfo.top || positionInfo.bottom) {
	            case 'middle':
	            case 'center':
	                top = containerHeight / 2 - height / 2 - margin[0];
	                break;
	            case 'bottom':
	                top = containerHeight - height - verticalMargin;
	                break;
	        }
	        // If something is wrong and left, top, width, height are calculated as NaN
	        left = left || 0;
	        top = top || 0;
	        if (isNaN(width)) {
	            // Width may be NaN if only one value is given except width
	            width = containerWidth - left - (right || 0);
	        }
	        if (isNaN(height)) {
	            // Height may be NaN if only one value is given except height
	            height = containerHeight - top - (bottom || 0);
	        }

	        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	        rect.margin = margin;
	        return rect;
	    };

	    /**
	     * Position group of component in viewport
	     *  Group position is specified by either
	     *  {left, top}, {right, bottom}
	     *  If all properties exists, right and bottom will be igonred.
	     *
	     * @param {module:zrender/container/Group} group
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     */
	    layout.positionGroup = function (
	        group, positionInfo, containerRect, margin
	    ) {
	        var groupRect = group.getBoundingRect();

	        positionInfo = zrUtil.extend(zrUtil.clone(positionInfo), {
	            width: groupRect.width,
	            height: groupRect.height
	        });

	        positionInfo = layout.getLayoutRect(
	            positionInfo, containerRect, margin
	        );

	        group.position = [
	            positionInfo.x - groupRect.x,
	            positionInfo.y - groupRect.y
	        ];
	    };

	    /**
	     * Consider Case:
	     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	     * through setOption or media query, using normal zrUtil.merge will cause
	     * {right: 0} does not take effect.
	     *
	     * @example
	     * ComponentModel.extend({
	     *     init: function () {
	     *         ...
	     *         var inputPositionParams = layout.getLayoutParams(option);
	     *         this.mergeOption(inputPositionParams);
	     *     },
	     *     mergeOption: function (newOption) {
	     *         newOption && zrUtil.merge(thisOption, newOption, true);
	     *         layout.mergeLayoutParam(thisOption, newOption);
	     *     }
	     * });
	     *
	     * @param {Object} targetOption
	     * @param {Object} newOption
	     * @param {Object|string} [opt]
	     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
	     */
	    layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	        !zrUtil.isObject(opt) && (opt = {});
	        var hNames = ['width', 'left', 'right']; // Order by priority.
	        var vNames = ['height', 'top', 'bottom']; // Order by priority.
	        var hResult = merge(hNames);
	        var vResult = merge(vNames);

	        copy(hNames, targetOption, hResult);
	        copy(vNames, targetOption, vResult);

	        function merge(names) {
	            var newParams = {};
	            var newValueCount = 0;
	            var merged = {};
	            var mergedValueCount = 0;
	            var enoughParamNumber = opt.ignoreSize ? 1 : 2;

	            each(names, function (name) {
	                merged[name] = targetOption[name];
	            });
	            each(names, function (name) {
	                // Consider case: newOption.width is null, which is
	                // set by user for removing width setting.
	                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	                hasValue(newParams, name) && newValueCount++;
	                hasValue(merged, name) && mergedValueCount++;
	            });

	            // Case: newOption: {width: ..., right: ...},
	            // or targetOption: {right: ...} and newOption: {width: ...},
	            // There is no conflict when merged only has params count
	            // little than enoughParamNumber.
	            if (mergedValueCount === enoughParamNumber || !newValueCount) {
	                return merged;
	            }
	            // Case: newOption: {width: ..., right: ...},
	            // Than we can make sure user only want those two, and ignore
	            // all origin params in targetOption.
	            else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            }
	            else {
	                // Chose another param from targetOption by priority.
	                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	        }

	        function hasProp(obj, name) {
	            return obj.hasOwnProperty(name);
	        }

	        function hasValue(obj, name) {
	            return obj[name] != null && obj[name] !== 'auto';
	        }

	        function copy(names, target, source) {
	            each(names, function (name) {
	                target[name] = source[name];
	            });
	        }
	    };

	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.getLayoutParams = function (source) {
	        return layout.copyLayoutParams({}, source);
	    };

	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.copyLayoutParams = function (target, source) {
	        source && target && each(LOCATION_PARAMS, function (name) {
	            source.hasOwnProperty(name) && (target[name] = source[name]);
	        });
	        return target;
	    };

	    module.exports = layout;


/***/ },
/* 130 */
/***/ function(module, exports) {

	

	    module.exports = {
	        getBoxLayoutParams: function () {
	            return {
	                left: this.get('left'),
	                top: this.get('top'),
	                right: this.get('right'),
	                bottom: this.get('bottom'),
	                width: this.get('width'),
	                height: this.get('height')
	            };
	        }
	    };


/***/ },
/* 131 */
/***/ function(module, exports) {

	
	    var platform = '';
	    // Navigator not exists in node
	    if (typeof navigator !== 'undefined') {
	        platform = navigator.platform || '';
	    }
	    module.exports = {
	        // 全图默认背景
	        // backgroundColor: 'rgba(0,0,0,0)',

	        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	        // 浅色
	        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	        // 深色
	        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],

	        // 默认需要 Grid 配置项
	        grid: {},
	        // 主题，主题
	        textStyle: {
	            // color: '#000',
	            // decoration: 'none',
	            // PENDING
	            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	            // fontFamily: 'Arial, Verdana, sans-serif',
	            fontSize: 12,
	            fontStyle: 'normal',
	            fontWeight: 'normal'
	        },
	        // 主题，默认标志图形类型列表
	        // symbolList: [
	        //     'circle', 'rectangle', 'triangle', 'diamond',
	        //     'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'
	        // ],
	        animation: true,                // 过渡动画是否开启
	        animationThreshold: 2000,       // 动画元素阀值，产生的图形原素超过2000不出动画
	        animationDuration: 1000,        // 过渡动画参数：进入
	        animationDurationUpdate: 300,   // 过渡动画参数：更新
	        animationEasing: 'exponentialOut',    //BounceOut
	        animationEasingUpdate: 'cubicOut'
	    };


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);

	    var echartsAPIList = [
	        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction',
	        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'
	    ];

	    function ExtensionAPI(chartInstance) {
	        zrUtil.each(echartsAPIList, function (name) {
	            this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	        }, this);
	    }

	    module.exports = ExtensionAPI;


/***/ },
/* 133 */
/***/ function(module, exports) {

	'use strict';


	    // var zrUtil = require('zrender/lib/core/util');
	    var coordinateSystemCreators = {};

	    function CoordinateSystemManager() {

	        this._coordinateSystems = [];
	    }

	    CoordinateSystemManager.prototype = {

	        constructor: CoordinateSystemManager,

	        create: function (ecModel, api) {
	            var coordinateSystems = [];
	            for (var type in coordinateSystemCreators) {
	                var list = coordinateSystemCreators[type].create(ecModel, api);
	                list && (coordinateSystems = coordinateSystems.concat(list));
	            }

	            this._coordinateSystems = coordinateSystems;
	        },

	        update: function (ecModel, api) {
	            var coordinateSystems = this._coordinateSystems;
	            for (var i = 0; i < coordinateSystems.length; i++) {
	                // FIXME MUST have
	                coordinateSystems[i].update && coordinateSystems[i].update(ecModel, api);
	            }
	        }
	    };

	    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	        coordinateSystemCreators[type] = coordinateSystemCreator;
	    };

	    CoordinateSystemManager.get = function (type) {
	        return coordinateSystemCreators[type];
	    };

	    module.exports = CoordinateSystemManager;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */



	    var zrUtil = __webpack_require__(111);
	    var modelUtil = __webpack_require__(113);
	    var ComponentModel = __webpack_require__(127);
	    var each = zrUtil.each;
	    var clone = zrUtil.clone;
	    var map = zrUtil.map;
	    var merge = zrUtil.merge;

	    var QUERY_REG = /^(min|max)?(.+)$/;

	    /**
	     * TERM EXPLANATIONS:
	     *
	     * [option]:
	     *
	     *     An object that contains definitions of components. For example:
	     *     var option = {
	     *         title: {...},
	     *         legend: {...},
	     *         visualMap: {...},
	     *         series: [
	     *             {data: [...]},
	     *             {data: [...]},
	     *             ...
	     *         ]
	     *     };
	     *
	     * [rawOption]:
	     *
	     *     An object input to echarts.setOption. 'rawOption' may be an
	     *     'option', or may be an object contains multi-options. For example:
	     *     var option = {
	     *         baseOption: {
	     *             title: {...},
	     *             legend: {...},
	     *             series: [
	     *                 {data: [...]},
	     *                 {data: [...]},
	     *                 ...
	     *             ]
	     *         },
	     *         timeline: {...},
	     *         options: [
	     *             {title: {...}, series: {data: [...]}},
	     *             {title: {...}, series: {data: [...]}},
	     *             ...
	     *         ],
	     *         media: [
	     *             {
	     *                 query: {maxWidth: 320},
	     *                 option: {series: {x: 20}, visualMap: {show: false}}
	     *             },
	     *             {
	     *                 query: {minWidth: 320, maxWidth: 720},
	     *                 option: {series: {x: 500}, visualMap: {show: true}}
	     *             },
	     *             {
	     *                 option: {series: {x: 1200}, visualMap: {show: true}}
	     *             }
	     *         ]
	     *     };
	     *
	     * @alias module:echarts/model/OptionManager
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function OptionManager(api) {

	        /**
	         * @private
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this._api = api;

	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._timelineOptions = [];

	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._mediaList = [];

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._mediaDefault;

	        /**
	         * -1, means default.
	         * empty means no media.
	         * @private
	         * @type {Array.<number>}
	         */
	        this._currentMediaIndices = [];

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._optionBackup;

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._newOptionBackup;
	    }

	    // timeline.notMerge is not supported in ec3. Firstly there is rearly
	    // case that notMerge is needed. Secondly supporting 'notMerge' requires
	    // rawOption cloned and backuped when timeline changed, which does no
	    // good to performance. What's more, that both timeline and setOption
	    // method supply 'notMerge' brings complex and some problems.
	    // Consider this case:
	    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);

	    OptionManager.prototype = {

	        constructor: OptionManager,

	        /**
	         * @public
	         * @param {Object} rawOption Raw option.
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Array.<Function>} optionPreprocessorFuncs
	         * @return {Object} Init option
	         */
	        setOption: function (rawOption, optionPreprocessorFuncs) {
	            rawOption = clone(rawOption, true);

	            // FIXME
	            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

	            var oldOptionBackup = this._optionBackup;
	            var newOptionBackup = this._newOptionBackup = parseRawOption.call(
	                this, rawOption, optionPreprocessorFuncs
	            );

	            // For setOption at second time (using merge mode);
	            if (oldOptionBackup) {
	                // Only baseOption can be merged.
	                mergeOption(oldOptionBackup.baseOption, newOptionBackup.baseOption);

	                if (newOptionBackup.timelineOptions.length) {
	                    oldOptionBackup.timelineOptions = newOptionBackup.timelineOptions;
	                }
	                if (newOptionBackup.mediaList.length) {
	                    oldOptionBackup.mediaList = newOptionBackup.mediaList;
	                }
	                if (newOptionBackup.mediaDefault) {
	                    oldOptionBackup.mediaDefault = newOptionBackup.mediaDefault;
	                }
	            }
	            else {
	                this._optionBackup = newOptionBackup;
	            }
	        },

	        /**
	         * @param {boolean} isRecreate
	         * @return {Object}
	         */
	        mountOption: function (isRecreate) {
	            var optionBackup = isRecreate
	                // this._optionBackup can be only used when recreate.
	                // In other cases we use model.mergeOption to handle merge.
	                ? this._optionBackup : this._newOptionBackup;

	            // FIXME
	            // 如果没有reset功能则不clone。

	            this._timelineOptions = map(optionBackup.timelineOptions, clone);
	            this._mediaList = map(optionBackup.mediaList, clone);
	            this._mediaDefault = clone(optionBackup.mediaDefault);
	            this._currentMediaIndices = [];

	            return clone(optionBackup.baseOption);
	        },

	        /**
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Object}
	         */
	        getTimelineOption: function (ecModel) {
	            var option;
	            var timelineOptions = this._timelineOptions;

	            if (timelineOptions.length) {
	                // getTimelineOption can only be called after ecModel inited,
	                // so we can get currentIndex from timelineModel.
	                var timelineModel = ecModel.getComponent('timeline');
	                if (timelineModel) {
	                    option = clone(
	                        timelineOptions[timelineModel.getCurrentIndex()],
	                        true
	                    );
	                }
	            }

	            return option;
	        },

	        /**
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Array.<Object>}
	         */
	        getMediaOption: function (ecModel) {
	            var ecWidth = this._api.getWidth();
	            var ecHeight = this._api.getHeight();
	            var mediaList = this._mediaList;
	            var mediaDefault = this._mediaDefault;
	            var indices = [];
	            var result = [];

	            // No media defined.
	            if (!mediaList.length && !mediaDefault) {
	                return result;
	            }

	            // Multi media may be applied, the latter defined media has higher priority.
	            for (var i = 0, len = mediaList.length; i < len; i++) {
	                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	                    indices.push(i);
	                }
	            }

	            // FIXME
	            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	            if (!indices.length && mediaDefault) {
	                indices = [-1];
	            }

	            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	                result = map(indices, function (index) {
	                    return clone(
	                        index === -1 ? mediaDefault.option : mediaList[index].option
	                    );
	                });
	            }
	            // Otherwise return nothing.

	            this._currentMediaIndices = indices;

	            return result;
	        }
	    };

	    function parseRawOption(rawOption, optionPreprocessorFuncs) {
	        var timelineOptions = [];
	        var mediaList = [];
	        var mediaDefault;
	        var baseOption;

	        // Compatible with ec2.
	        var timelineOpt = rawOption.timeline;

	        if (rawOption.baseOption) {
	            baseOption = rawOption.baseOption;
	        }

	        // For timeline
	        if (timelineOpt || rawOption.options) {
	            baseOption = baseOption || {};
	            timelineOptions = (rawOption.options || []).slice();
	        }
	        // For media query
	        if (rawOption.media) {
	            baseOption = baseOption || {};
	            var media = rawOption.media;
	            each(media, function (singleMedia) {
	                if (singleMedia && singleMedia.option) {
	                    if (singleMedia.query) {
	                        mediaList.push(singleMedia);
	                    }
	                    else if (!mediaDefault) {
	                        // Use the first media default.
	                        mediaDefault = singleMedia;
	                    }
	                }
	            });
	        }

	        // For normal option
	        if (!baseOption) {
	            baseOption = rawOption;
	        }

	        // Set timelineOpt to baseOption in ec3,
	        // which is convenient for merge option.
	        if (!baseOption.timeline) {
	            baseOption.timeline = timelineOpt;
	        }

	        // Preprocess.
	        each([baseOption].concat(timelineOptions)
	            .concat(zrUtil.map(mediaList, function (media) {
	                return media.option;
	            })),
	            function (option) {
	                each(optionPreprocessorFuncs, function (preProcess) {
	                    preProcess(option);
	                });
	            }
	        );

	        return {
	            baseOption: baseOption,
	            timelineOptions: timelineOptions,
	            mediaDefault: mediaDefault,
	            mediaList: mediaList
	        };
	    }

	    /**
	     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	     * Support: width, height, aspectRatio
	     * Can use max or min as prefix.
	     */
	    function applyMediaQuery(query, ecWidth, ecHeight) {
	        var realMap = {
	            width: ecWidth,
	            height: ecHeight,
	            aspectratio: ecWidth / ecHeight // lowser case for convenientce.
	        };

	        var applicatable = true;

	        zrUtil.each(query, function (value, attr) {
	            var matched = attr.match(QUERY_REG);

	            if (!matched || !matched[1] || !matched[2]) {
	                return;
	            }

	            var operator = matched[1];
	            var realAttr = matched[2].toLowerCase();

	            if (!compare(realMap[realAttr], value, operator)) {
	                applicatable = false;
	            }
	        });

	        return applicatable;
	    }

	    function compare(real, expect, operator) {
	        if (operator === 'min') {
	            return real >= expect;
	        }
	        else if (operator === 'max') {
	            return real <= expect;
	        }
	        else { // Equals
	            return real === expect;
	        }
	    }

	    function indicesEquals(indices1, indices2) {
	        // indices is always order by asc and has only finite number.
	        return indices1.join(',') === indices2.join(',');
	    }

	    /**
	     * Consider case:
	     * `chart.setOption(opt1);`
	     * Then user do some interaction like dataZoom, dataView changing.
	     * `chart.setOption(opt2);`
	     * Then user press 'reset button' in toolbox.
	     *
	     * After doing that all of the interaction effects should be reset, the
	     * chart should be the same as the result of invoke
	     * `chart.setOption(opt1); chart.setOption(opt2);`.
	     *
	     * Although it is not able ensure that
	     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	     * `chart.setOption(merge(opt1, opt2));` exactly,
	     * this might be the only simple way to implement that feature.
	     *
	     * MEMO: We've considered some other approaches:
	     * 1. Each model handle its self restoration but not uniform treatment.
	     *     (Too complex in logic and error-prone)
	     * 2. Use a shadow ecModel. (Performace expensive)
	     */
	    function mergeOption(oldOption, newOption) {
	        newOption = newOption || {};

	        each(newOption, function (newCptOpt, mainType) {
	            if (newCptOpt == null) {
	                return;
	            }

	            var oldCptOpt = oldOption[mainType];

	            if (!ComponentModel.hasClass(mainType)) {
	                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	            }
	            else {
	                newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);

	                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);

	                oldOption[mainType] = map(mapResult, function (item) {
	                    return (item.option && item.exist)
	                        ? merge(item.exist, item.option, true)
	                        : (item.exist || item.option);
	                });
	            }
	        });
	    }

	    module.exports = OptionManager;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);
	    var formatUtil = __webpack_require__(114);
	    var modelUtil = __webpack_require__(113);
	    var ComponentModel = __webpack_require__(127);

	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;

	    var SeriesModel = ComponentModel.extend({

	        type: 'series.__base__',

	        /**
	         * @readOnly
	         */
	        seriesIndex: 0,

	        // coodinateSystem will be injected in the echarts/CoordinateSystem
	        coordinateSystem: null,

	        /**
	         * @type {Object}
	         * @protected
	         */
	        defaultOption: null,

	        /**
	         * Data provided for legend
	         * @type {Function}
	         */
	        // PENDING
	        legendDataProvider: null,

	        init: function (option, parentModel, ecModel, extraOpt) {

	            /**
	             * @type {number}
	             * @readOnly
	             */
	            this.seriesIndex = this.componentIndex;

	            this.mergeDefaultAndTheme(option, ecModel);

	            /**
	             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	             * @private
	             */
	            this._dataBeforeProcessed = this.getInitialData(option, ecModel);

	            // When using module:echarts/data/Tree or module:echarts/data/Graph,
	            // cloneShallow will cause this._data.graph.data pointing to new data list.
	            // Wo we make this._dataBeforeProcessed first, and then make this._data.
	            this._data = this._dataBeforeProcessed.cloneShallow();
	        },

	        /**
	         * Util for merge default and theme to option
	         * @param  {Object} option
	         * @param  {module:echarts/model/Global} ecModel
	         */
	        mergeDefaultAndTheme: function (option, ecModel) {
	            zrUtil.merge(
	                option,
	                ecModel.getTheme().get(this.subType)
	            );
	            zrUtil.merge(option, this.getDefaultOption());

	            // Default label emphasis `position` and `show`
	            modelUtil.defaultEmphasis(
	                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']
	            );

	            // Default data label emphasis `position` and `show`
	            // FIXME Tree structure data ?
	            var data = option.data || [];
	            for (var i = 0; i < data.length; i++) {
	                if (data[i] && data[i].label) {
	                    modelUtil.defaultEmphasis(
	                        data[i].label, ['position', 'show', 'textStyle', 'distance', 'formatter']
	                    );
	                }
	            }
	        },

	        mergeOption: function (newSeriesOption, ecModel) {
	            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);

	            var data = this.getInitialData(newSeriesOption, ecModel);
	            // TODO Merge data?
	            if (data) {
	                this._data = data;
	                this._dataBeforeProcessed = data.cloneShallow();
	            }
	        },

	        /**
	         * Init a data structure from data related option in series
	         * Must be overwritten
	         */
	        getInitialData: function () {},

	        /**
	         * @return {module:echarts/data/List}
	         */
	        getData: function () {
	            return this._data;
	        },

	        /**
	         * @param {module:echarts/data/List} data
	         */
	        setData: function (data) {
	            this._data = data;
	        },

	        /**
	         * Get data before processed
	         * @return {module:echarts/data/List}
	         */
	        getRawData: function () {
	            return this._dataBeforeProcessed;
	        },

	        /**
	         * Get raw data array given by user
	         * @return {Array.<Object>}
	         */
	        getRawDataArray: function () {
	            return this.option.data;
	        },

	        /**
	         * Coord dimension to data dimension.
	         *
	         * By default the result is the same as dimensions of series data.
	         * But some series dimensions are different from coord dimensions (i.e.
	         * candlestick and boxplot). Override this method to handle those cases.
	         *
	         * Coord dimension to data dimension can be one-to-many
	         *
	         * @param {string} coordDim
	         * @return {Array.<string>} dimensions on the axis.
	         */
	        coordDimToDataDim: function (coordDim) {
	            return [coordDim];
	        },

	        /**
	         * Convert data dimension to coord dimension.
	         *
	         * @param {string|number} dataDim
	         * @return {string}
	         */
	        dataDimToCoordDim: function (dataDim) {
	            return dataDim;
	        },

	        /**
	         * Get base axis if has coordinate system and has axis.
	         * By default use coordSys.getBaseAxis();
	         * Can be overrided for some chart.
	         * @return {type} description
	         */
	        getBaseAxis: function () {
	            var coordSys = this.coordinateSystem;
	            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	        },

	        // FIXME
	        /**
	         * Default tooltip formatter
	         *
	         * @param {number} dataIndex
	         * @param {boolean} [multipleSeries=false]
	         */
	        formatTooltip: function (dataIndex, multipleSeries) {
	            var data = this._data;
	            var value = this.getRawValue(dataIndex);
	            var formattedValue = zrUtil.isArray(value)
	                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	            var name = data.getName(dataIndex);
	            var color = data.getItemVisual(dataIndex, 'color');
	            var colorEl = '<span style="display:inline-block;margin-right:5px;'
	                + 'border-radius:10px;width:9px;height:9px;background-color:' + color + '"></span>';

	            return !multipleSeries
	                ? (encodeHTML(this.name) + '<br />' + colorEl
	                    + (name
	                        ? encodeHTML(name) + ' : ' + formattedValue
	                        : formattedValue)
	                  )
	                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);
	        },

	        restoreData: function () {
	            this._data = this._dataBeforeProcessed.cloneShallow();
	        }
	    });

	    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);

	    module.exports = SeriesModel;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Group = __webpack_require__(137);
	    var componentUtil = __webpack_require__(128);
	    var clazzUtil = __webpack_require__(117);

	    var Component = function () {
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewComponent');
	    };

	    Component.prototype = {

	        constructor: Component,

	        init: function (ecModel, api) {},

	        render: function (componentModel, ecModel, api, payload) {},

	        dispose: function () {}
	    };

	    var componentProto = Component.prototype;
	    componentProto.updateView
	        = componentProto.updateLayout
	        = componentProto.updateVisual
	        = function (seriesModel, ecModel, api, payload) {
	            // Do nothing;
	        };
	    // Enable Component.extend.
	    clazzUtil.enableClassExtend(Component);

	    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});

	    module.exports = Component;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/lib/container/Group');
	 *     var Circle = require('zrender/lib/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */


	    var zrUtil = __webpack_require__(111);
	    var Element = __webpack_require__(138);
	    var BoundingRect = __webpack_require__(123);

	    /**
	     * @alias module:zrender/graphic/Group
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @extends module:zrender/mixin/Eventful
	     */
	    var Group = function (opts) {

	        opts = opts || {};

	        Element.call(this, opts);

	        for (var key in opts) {
	            this[key] = opts[key];
	        }

	        this._children = [];

	        this.__storage = null;

	        this.__dirty = true;
	    };

	    Group.prototype = {

	        constructor: Group,

	        /**
	         * @type {string}
	         */
	        type: 'group',

	        /**
	         * 所有子孙元素是否响应鼠标事件
	         * @name module:/zrender/container/Group#silent
	         * @type {boolean}
	         * @default false
	         */
	        silent: false,

	        /**
	         * @return {Array.<module:zrender/Element>}
	         */
	        children: function () {
	            return this._children.slice();
	        },

	        /**
	         * 获取指定 index 的儿子节点
	         * @param  {number} idx
	         * @return {module:zrender/Element}
	         */
	        childAt: function (idx) {
	            return this._children[idx];
	        },

	        /**
	         * 获取指定名字的儿子节点
	         * @param  {string} name
	         * @return {module:zrender/Element}
	         */
	        childOfName: function (name) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                if (children[i].name === name) {
	                    return children[i];
	                }
	             }
	        },

	        /**
	         * @return {number}
	         */
	        childCount: function () {
	            return this._children.length;
	        },

	        /**
	         * 添加子节点到最后
	         * @param {module:zrender/Element} child
	         */
	        add: function (child) {
	            if (child && child !== this && child.parent !== this) {

	                this._children.push(child);

	                this._doAdd(child);
	            }

	            return this;
	        },

	        /**
	         * 添加子节点在 nextSibling 之前
	         * @param {module:zrender/Element} child
	         * @param {module:zrender/Element} nextSibling
	         */
	        addBefore: function (child, nextSibling) {
	            if (child && child !== this && child.parent !== this
	                && nextSibling && nextSibling.parent === this) {

	                var children = this._children;
	                var idx = children.indexOf(nextSibling);

	                if (idx >= 0) {
	                    children.splice(idx, 0, child);
	                    this._doAdd(child);
	                }
	            }

	            return this;
	        },

	        _doAdd: function (child) {
	            if (child.parent) {
	                child.parent.remove(child);
	            }

	            child.parent = this;

	            var storage = this.__storage;
	            var zr = this.__zr;
	            if (storage && storage !== child.__storage) {

	                storage.addToMap(child);

	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }

	            zr && zr.refresh();
	        },

	        /**
	         * 移除子节点
	         * @param {module:zrender/Element} child
	         */
	        remove: function (child) {
	            var zr = this.__zr;
	            var storage = this.__storage;
	            var children = this._children;

	            var idx = zrUtil.indexOf(children, child);
	            if (idx < 0) {
	                return this;
	            }
	            children.splice(idx, 1);

	            child.parent = null;

	            if (storage) {

	                storage.delFromMap(child.id);

	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }

	            zr && zr.refresh();

	            return this;
	        },

	        /**
	         * 移除所有子节点
	         */
	        removeAll: function () {
	            var children = this._children;
	            var storage = this.__storage;
	            var child;
	            var i;
	            for (i = 0; i < children.length; i++) {
	                child = children[i];
	                if (storage) {
	                    storage.delFromMap(child.id);
	                    if (child instanceof Group) {
	                        child.delChildrenFromStorage(storage);
	                    }
	                }
	                child.parent = null;
	            }
	            children.length = 0;

	            return this;
	        },

	        /**
	         * 遍历所有子节点
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        eachChild: function (cb, context) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                cb.call(context, child, i);
	            }
	            return this;
	        },

	        /**
	         * 深度优先遍历所有子孙节点
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                cb.call(context, child);

	                if (child.type === 'group') {
	                    child.traverse(cb, context);
	                }
	            }
	            return this;
	        },

	        addChildrenToStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.addToMap(child);
	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }
	        },

	        delChildrenFromStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	        },

	        dirty: function () {
	            this.__dirty = true;
	            this.__zr && this.__zr.refresh();
	            return this;
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function (includeChildren) {
	            // TODO Caching
	            // TODO Transform
	            var rect = null;
	            var tmpRect = new BoundingRect(0, 0, 0, 0);
	            var children = includeChildren || this._children;
	            var tmpMat = [];

	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                if (child.ignore || child.invisible) {
	                    continue;
	                }

	                var childRect = child.getBoundingRect();
	                var transform = child.getLocalTransform(tmpMat);
	                if (transform) {
	                    tmpRect.copy(childRect);
	                    tmpRect.applyTransform(transform);
	                    rect = rect || tmpRect.clone();
	                    rect.union(tmpRect);
	                }
	                else {
	                    rect = rect || childRect.clone();
	                    rect.union(childRect);
	                }
	            }
	            return rect || tmpRect;
	        }
	    };

	    zrUtil.inherits(Group, Element);

	    module.exports = Group;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/Element
	 */


	    var guid = __webpack_require__(139);
	    var Eventful = __webpack_require__(140);
	    var Transformable = __webpack_require__(141);
	    var Animatable = __webpack_require__(142);
	    var zrUtil = __webpack_require__(111);

	    /**
	     * @alias module:zrender/Element
	     * @constructor
	     * @extends {module:zrender/mixin/Animatable}
	     * @extends {module:zrender/mixin/Transformable}
	     * @extends {module:zrender/mixin/Eventful}
	     */
	    var Element = function (opts) {

	        Transformable.call(this, opts);
	        Eventful.call(this, opts);
	        Animatable.call(this, opts);

	        /**
	         * 画布元素ID
	         * @type {string}
	         */
	        this.id = opts.id || guid();
	    };

	    Element.prototype = {

	        /**
	         * 元素类型
	         * Element type
	         * @type {string}
	         */
	        type: 'element',

	        /**
	         * 元素名字
	         * Element name
	         * @type {string}
	         */
	        name: '',

	        /**
	         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	         * ZRender instance will be assigned when element is associated with zrender
	         * @name module:/zrender/Element#__zr
	         * @type {module:zrender/ZRender}
	         */
	        __zr: null,

	        /**
	         * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	         * If ignore drawing and events of the element object
	         * @name module:/zrender/Element#ignore
	         * @type {boolean}
	         * @default false
	         */
	        ignore: false,

	        /**
	         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	         * 该路径会继承被裁减对象的变换
	         * @type {module:zrender/graphic/Path}
	         * @see http://www.w3.org/TR/2dcontext/#clipping-region
	         * @readOnly
	         */
	        clipPath: null,

	        /**
	         * Drift element
	         * @param  {number} dx dx on the global space
	         * @param  {number} dy dy on the global space
	         */
	        drift: function (dx, dy) {
	            switch (this.draggable) {
	                case 'horizontal':
	                    dy = 0;
	                    break;
	                case 'vertical':
	                    dx = 0;
	                    break;
	            }

	            var m = this.transform;
	            if (!m) {
	                m = this.transform = [1, 0, 0, 1, 0, 0];
	            }
	            m[4] += dx;
	            m[5] += dy;

	            this.decomposeTransform();
	            this.dirty();
	        },

	        /**
	         * Hook before update
	         */
	        beforeUpdate: function () {},
	        /**
	         * Hook after update
	         */
	        afterUpdate: function () {},
	        /**
	         * Update each frame
	         */
	        update: function () {
	            this.updateTransform();
	        },

	        /**
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {},

	        /**
	         * @protected
	         */
	        attrKV: function (key, value) {
	            if (key === 'position' || key === 'scale' || key === 'origin') {
	                // Copy the array
	                if (value) {
	                    var target = this[key];
	                    if (!target) {
	                        target = this[key] = [];
	                    }
	                    target[0] = value[0];
	                    target[1] = value[1];
	                }
	            }
	            else {
	                this[key] = value;
	            }
	        },

	        /**
	         * Hide the element
	         */
	        hide: function () {
	            this.ignore = true;
	            this.__zr && this.__zr.refresh();
	        },

	        /**
	         * Show the element
	         */
	        show: function () {
	            this.ignore = false;
	            this.__zr && this.__zr.refresh();
	        },

	        /**
	         * @param {string|Object} key
	         * @param {*} value
	         */
	        attr: function (key, value) {
	            if (typeof key === 'string') {
	                this.attrKV(key, value);
	            }
	            else if (zrUtil.isObject(key)) {
	                for (var name in key) {
	                    if (key.hasOwnProperty(name)) {
	                        this.attrKV(name, key[name]);
	                    }
	                }
	            }
	            this.dirty();

	            return this;
	        },

	        /**
	         * @param {module:zrender/graphic/Path} clipPath
	         */
	        setClipPath: function (clipPath) {
	            var zr = this.__zr;
	            if (zr) {
	                clipPath.addSelfToZr(zr);
	            }

	            // Remove previous clip path
	            if (this.clipPath && this.clipPath !== clipPath) {
	                this.removeClipPath();
	            }

	            this.clipPath = clipPath;
	            clipPath.__zr = zr;
	            clipPath.__clipTarget = this;

	            this.dirty();
	        },

	        /**
	         */
	        removeClipPath: function () {
	            var clipPath = this.clipPath;
	            if (clipPath) {
	                if (clipPath.__zr) {
	                    clipPath.removeSelfFromZr(clipPath.__zr);
	                }

	                clipPath.__zr = null;
	                clipPath.__clipTarget = null;
	                this.clipPath = null;

	                this.dirty();
	            }
	        },

	        /**
	         * Add self from zrender instance.
	         * Not recursively because it will be invoked when element added to storage.
	         * @param {module:zrender/ZRender} zr
	         */
	        addSelfToZr: function (zr) {
	            this.__zr = zr;
	            // 添加动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.addAnimator(animators[i]);
	                }
	            }

	            if (this.clipPath) {
	                this.clipPath.addSelfToZr(zr);
	            }
	        },

	        /**
	         * Remove self from zrender instance.
	         * Not recursively because it will be invoked when element added to storage.
	         * @param {module:zrender/ZRender} zr
	         */
	        removeSelfFromZr: function (zr) {
	            this.__zr = null;
	            // 移除动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.removeAnimator(animators[i]);
	                }
	            }

	            if (this.clipPath) {
	                this.clipPath.removeSelfFromZr(zr);
	            }
	        }
	    };

	    zrUtil.mixin(Element, Animatable);
	    zrUtil.mixin(Element, Transformable);
	    zrUtil.mixin(Element, Eventful);

	    module.exports = Element;


/***/ },
/* 139 */
/***/ function(module, exports) {

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */


	        var idStart = 0x0907;

	        module.exports = function () {
	            return 'zr_' + (idStart++);
	        };
	    


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */


	    var arrySlice = Array.prototype.slice;
	    var zrUtil = __webpack_require__(111);
	    var indexOf = zrUtil.indexOf;

	    /**
	     * 事件分发器
	     * @alias module:zrender/mixin/Eventful
	     * @constructor
	     */
	    var Eventful = function () {
	        this._$handlers = {};
	    };

	    Eventful.prototype = {

	        constructor: Eventful,

	        /**
	         * 单次触发绑定，trigger后销毁
	         *
	         * @param {string} event 事件名
	         * @param {Function} handler 响应函数
	         * @param {Object} context
	         */
	        one: function (event, handler, context) {
	            var _h = this._$handlers;

	            if (!handler || !event) {
	                return this;
	            }

	            if (!_h[event]) {
	                _h[event] = [];
	            }

	            if (indexOf(_h[event], event) >= 0) {
	                return this;
	            }

	            _h[event].push({
	                h: handler,
	                one: true,
	                ctx: context || this
	            });

	            return this;
	        },

	        /**
	         * 绑定事件
	         * @param {string} event 事件名
	         * @param {Function} handler 事件处理函数
	         * @param {Object} [context]
	         */
	        on: function (event, handler, context) {
	            var _h = this._$handlers;

	            if (!handler || !event) {
	                return this;
	            }

	            if (!_h[event]) {
	                _h[event] = [];
	            }

	            _h[event].push({
	                h: handler,
	                one: false,
	                ctx: context || this
	            });

	            return this;
	        },

	        /**
	         * 是否绑定了事件
	         * @param  {string}  event
	         * @return {boolean}
	         */
	        isSilent: function (event) {
	            var _h = this._$handlers;
	            return _h[event] && _h[event].length;
	        },

	        /**
	         * 解绑事件
	         * @param {string} event 事件名
	         * @param {Function} [handler] 事件处理函数
	         */
	        off: function (event, handler) {
	            var _h = this._$handlers;

	            if (!event) {
	                this._$handlers = {};
	                return this;
	            }

	            if (handler) {
	                if (_h[event]) {
	                    var newList = [];
	                    for (var i = 0, l = _h[event].length; i < l; i++) {
	                        if (_h[event][i]['h'] != handler) {
	                            newList.push(_h[event][i]);
	                        }
	                    }
	                    _h[event] = newList;
	                }

	                if (_h[event] && _h[event].length === 0) {
	                    delete _h[event];
	                }
	            }
	            else {
	                delete _h[event];
	            }

	            return this;
	        },

	        /**
	         * 事件分发
	         *
	         * @param {string} type 事件类型
	         */
	        trigger: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;

	                if (argLen > 3) {
	                    args = arrySlice.call(args, 1);
	                }

	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                        case 1:
	                            _h[i]['h'].call(_h[i]['ctx']);
	                            break;
	                        case 2:
	                            _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                            break;
	                        case 3:
	                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                            break;
	                        default:
	                            // have more than 2 given arguments
	                            _h[i]['h'].apply(_h[i]['ctx'], args);
	                            break;
	                    }

	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	            }

	            return this;
	        },

	        /**
	         * 带有context的事件分发, 最后一个参数是事件回调的context
	         * @param {string} type 事件类型
	         */
	        triggerWithContext: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;

	                if (argLen > 4) {
	                    args = arrySlice.call(args, 1, args.length - 1);
	                }
	                var ctx = args[args.length - 1];

	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                        case 1:
	                            _h[i]['h'].call(ctx);
	                            break;
	                        case 2:
	                            _h[i]['h'].call(ctx, args[1]);
	                            break;
	                        case 3:
	                            _h[i]['h'].call(ctx, args[1], args[2]);
	                            break;
	                        default:
	                            // have more than 2 given arguments
	                            _h[i]['h'].apply(ctx, args);
	                            break;
	                    }

	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	            }

	            return this;
	        }
	    };

	    // 对象可以通过 onxxxx 绑定事件
	    /**
	     * @event module:zrender/mixin/Eventful#onclick
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseout
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousemove
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousewheel
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousedown
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseup
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragstart
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragend
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragenter
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragleave
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrop
	     * @type {Function}
	     * @default null
	     */

	    module.exports = Eventful;



/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */


	    var matrix = __webpack_require__(125);
	    var vector = __webpack_require__(124);
	    var mIdentity = matrix.identity;

	    var EPSILON = 5e-5;

	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }

	    /**
	     * @alias module:zrender/mixin/Transformable
	     * @constructor
	     */
	    var Transformable = function (opts) {
	        opts = opts || {};
	        // If there are no given position, rotation, scale
	        if (!opts.position) {
	            /**
	             * 平移
	             * @type {Array.<number>}
	             * @default [0, 0]
	             */
	            this.position = [0, 0];
	        }
	        if (opts.rotation == null) {
	            /**
	             * 旋转
	             * @type {Array.<number>}
	             * @default 0
	             */
	            this.rotation = 0;
	        }
	        if (!opts.scale) {
	            /**
	             * 缩放
	             * @type {Array.<number>}
	             * @default [1, 1]
	             */
	            this.scale = [1, 1];
	        }
	        /**
	         * 旋转和缩放的原点
	         * @type {Array.<number>}
	         * @default null
	         */
	        this.origin = this.origin || null;
	    };

	    var transformableProto = Transformable.prototype;
	    transformableProto.transform = null;

	    /**
	     * 判断是否需要有坐标变换
	     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	     */
	    transformableProto.needLocalTransform = function () {
	        return isNotAroundZero(this.rotation)
	            || isNotAroundZero(this.position[0])
	            || isNotAroundZero(this.position[1])
	            || isNotAroundZero(this.scale[0] - 1)
	            || isNotAroundZero(this.scale[1] - 1);
	    };

	    transformableProto.updateTransform = function () {
	        var parent = this.parent;
	        var parentHasTransform = parent && parent.transform;
	        var needLocalTransform = this.needLocalTransform();

	        var m = this.transform;
	        if (!(needLocalTransform || parentHasTransform)) {
	            m && mIdentity(m);
	            return;
	        }

	        m = m || matrix.create();

	        if (needLocalTransform) {
	            this.getLocalTransform(m);
	        }
	        else {
	            mIdentity(m);
	        }

	        // 应用父节点变换
	        if (parentHasTransform) {
	            if (needLocalTransform) {
	                matrix.mul(m, parent.transform, m);
	            }
	            else {
	                matrix.copy(m, parent.transform);
	            }
	        }
	        // 保存这个变换矩阵
	        this.transform = m;

	        this.invTransform = this.invTransform || matrix.create();
	        matrix.invert(this.invTransform, m);
	    };

	    transformableProto.getLocalTransform = function (m) {
	        m = m || [];
	        mIdentity(m);

	        var origin = this.origin;

	        var scale = this.scale;
	        var rotation = this.rotation;
	        var position = this.position;
	        if (origin) {
	            // Translate to origin
	            m[4] -= origin[0];
	            m[5] -= origin[1];
	        }
	        matrix.scale(m, m, scale);
	        if (rotation) {
	            matrix.rotate(m, m, rotation);
	        }
	        if (origin) {
	            // Translate back from origin
	            m[4] += origin[0];
	            m[5] += origin[1];
	        }

	        m[4] += position[0];
	        m[5] += position[1];

	        return m;
	    };
	    /**
	     * 将自己的transform应用到context上
	     * @param {Context2D} ctx
	     */
	    transformableProto.setTransform = function (ctx) {
	        var m = this.transform;
	        if (m) {
	            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	    };

	    var tmpTransform = [];

	    /**
	     * 分解`transform`矩阵到`position`, `rotation`, `scale`
	     */
	    transformableProto.decomposeTransform = function () {
	        if (!this.transform) {
	            return;
	        }
	        var parent = this.parent;
	        var m = this.transform;
	        if (parent && parent.transform) {
	            // Get local transform and decompose them to position, scale, rotation
	            matrix.mul(tmpTransform, parent.invTransform, m);
	            m = tmpTransform;
	        }
	        var sx = m[0] * m[0] + m[1] * m[1];
	        var sy = m[2] * m[2] + m[3] * m[3];
	        var position = this.position;
	        var scale = this.scale;
	        if (isNotAroundZero(sx - 1)) {
	            sx = Math.sqrt(sx);
	        }
	        if (isNotAroundZero(sy - 1)) {
	            sy = Math.sqrt(sy);
	        }
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        position[0] = m[4];
	        position[1] = m[5];
	        scale[0] = sx;
	        scale[1] = sy;
	        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	    };

	    /**
	     * 变换坐标位置到 shape 的局部坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToLocal = function (x, y) {
	        var v2 = [x, y];
	        var invTransform = this.invTransform;
	        if (invTransform) {
	            vector.applyTransform(v2, v2, invTransform);
	        }
	        return v2;
	    };

	    /**
	     * 变换局部坐标位置到全局坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToGlobal = function (x, y) {
	        var v2 = [x, y];
	        var transform = this.transform;
	        if (transform) {
	            vector.applyTransform(v2, v2, transform);
	        }
	        return v2;
	    };

	    module.exports = Transformable;



/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/mixin/Animatable
	 */


	    var Animator = __webpack_require__(143);
	    var util = __webpack_require__(111);
	    var isString = util.isString;
	    var isFunction = util.isFunction;
	    var isObject = util.isObject;
	    var log = __webpack_require__(147);

	    /**
	     * @alias modue:zrender/mixin/Animatable
	     * @constructor
	     */
	    var Animatable = function () {

	        /**
	         * @type {Array.<module:zrender/animation/Animator>}
	         * @readOnly
	         */
	        this.animators = [];
	    };

	    Animatable.prototype = {

	        constructor: Animatable,

	        /**
	         * 动画
	         *
	         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	         * @param {boolean} [loop] 动画是否循环
	         * @return {module:zrender/animation/Animator}
	         * @example:
	         *     el.animate('style', false)
	         *         .when(1000, {x: 10} )
	         *         .done(function(){ // Animation done })
	         *         .start()
	         */
	        animate: function (path, loop) {
	            var target;
	            var animatingShape = false;
	            var el = this;
	            var zr = this.__zr;
	            if (path) {
	                var pathSplitted = path.split('.');
	                var prop = el;
	                // If animating shape
	                animatingShape = pathSplitted[0] === 'shape';
	                for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                    if (!prop) {
	                        continue;
	                    }
	                    prop = prop[pathSplitted[i]];
	                }
	                if (prop) {
	                    target = prop;
	                }
	            }
	            else {
	                target = el;
	            }

	            if (!target) {
	                log(
	                    'Property "'
	                    + path
	                    + '" is not existed in element '
	                    + el.id
	                );
	                return;
	            }

	            var animators = el.animators;

	            var animator = new Animator(target, loop);

	            animator.during(function (target) {
	                el.dirty(animatingShape);
	            })
	            .done(function () {
	                // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	                animators.splice(util.indexOf(animators, animator), 1);
	            });

	            animators.push(animator);

	            // If animate after added to the zrender
	            if (zr) {
	                zr.animation.addAnimator(animator);
	            }

	            return animator;
	        },

	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stopAnimation: function (forwardToLast) {
	            var animators = this.animators;
	            var len = animators.length;
	            for (var i = 0; i < len; i++) {
	                animators[i].stop(forwardToLast);
	            }
	            animators.length = 0;

	            return this;
	        },

	        /**
	         * @param {Object} target
	         * @param {number} [time=500] Time in ms
	         * @param {string} [easing='linear']
	         * @param {number} [delay=0]
	         * @param {Function} [callback]
	         *
	         * @example
	         *  // Animate position
	         *  el.animateTo({
	         *      position: [10, 10]
	         *  }, function () { // done })
	         *
	         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	         *  el.animateTo({
	         *      shape: {
	         *          width: 500
	         *      },
	         *      style: {
	         *          fill: 'red'
	         *      }
	         *      position: [10, 10]
	         *  }, 100, 100, 'cubicOut', function () { // done })
	         */
	         // TODO Return animation key
	        animateTo: function (target, time, delay, easing, callback) {
	            // animateTo(target, time, easing, callback);
	            if (isString(delay)) {
	                callback = easing;
	                easing = delay;
	                delay = 0;
	            }
	            // animateTo(target, time, delay, callback);
	            else if (isFunction(easing)) {
	                callback = easing;
	                easing = 'linear';
	                delay = 0;
	            }
	            // animateTo(target, time, callback);
	            else if (isFunction(delay)) {
	                callback = delay;
	                delay = 0;
	            }
	            // animateTo(target, callback)
	            else if (isFunction(time)) {
	                callback = time;
	                time = 500;
	            }
	            // animateTo(target)
	            else if (!time) {
	                time = 500;
	            }
	            // Stop all previous animations
	            this.stopAnimation();
	            this._animateToShallow('', this, target, time, delay, easing, callback);

	            // Animators may be removed immediately after start
	            // if there is nothing to animate
	            var animators = this.animators.slice();
	            var count = animators.length;
	            function done() {
	                count--;
	                if (!count) {
	                    callback && callback();
	                }
	            }

	            // No animators. This should be checked before animators[i].start(),
	            // because 'done' may be executed immediately if no need to animate.
	            if (!count) {
	                callback && callback();
	            }
	            // Start after all animators created
	            // Incase any animator is done immediately when all animation properties are not changed
	            for (var i = 0; i < animators.length; i++) {
	                animators[i]
	                    .done(done)
	                    .start(easing);
	            }
	        },

	        /**
	         * @private
	         * @param {string} path=''
	         * @param {Object} source=this
	         * @param {Object} target
	         * @param {number} [time=500]
	         * @param {number} [delay=0]
	         *
	         * @example
	         *  // Animate position
	         *  el._animateToShallow({
	         *      position: [10, 10]
	         *  })
	         *
	         *  // Animate shape, style and position in 100ms, delayed 100ms
	         *  el._animateToShallow({
	         *      shape: {
	         *          width: 500
	         *      },
	         *      style: {
	         *          fill: 'red'
	         *      }
	         *      position: [10, 10]
	         *  }, 100, 100)
	         */
	        _animateToShallow: function (path, source, target, time, delay) {
	            var objShallow = {};
	            var propertyCount = 0;
	            for (var name in target) {
	                if (source[name] != null) {
	                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {
	                        this._animateToShallow(
	                            path ? path + '.' + name : name,
	                            source[name],
	                            target[name],
	                            time,
	                            delay
	                        );
	                    }
	                    else {
	                        objShallow[name] = target[name];
	                        propertyCount++;
	                    }
	                }
	                else if (target[name] != null) {
	                    // Attr directly if not has property
	                    // FIXME, if some property not needed for element ?
	                    if (!path) {
	                        this.attr(name, target[name]);
	                    }
	                    else {  // Shape or style
	                        var props = {};
	                        props[path] = {};
	                        props[path][name] = target[name];
	                        this.attr(props);
	                    }
	                }
	            }

	            if (propertyCount > 0) {
	                this.animate(path, false)
	                    .when(time == null ? 500 : time, objShallow)
	                    .delay(delay || 0);
	            }

	            return this;
	        }
	    };

	    module.exports = Animatable;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/animation/Animator
	 */


	    var Clip = __webpack_require__(144);
	    var color = __webpack_require__(146);
	    var util = __webpack_require__(111);
	    var isArrayLike = util.isArrayLike;

	    var arraySlice = Array.prototype.slice;

	    function defaultGetter(target, key) {
	        return target[key];
	    }

	    function defaultSetter(target, key, value) {
	        target[key] = value;
	    }

	    /**
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} percent
	     * @return {number}
	     */
	    function interpolateNumber(p0, p1, percent) {
	        return (p1 - p0) * percent + p0;
	    }

	    /**
	     * @param  {string} p0
	     * @param  {string} p1
	     * @param  {number} percent
	     * @return {string}
	     */
	    function interpolateString(p0, p1, percent) {
	        return percent > 0.5 ? p1 : p0;
	    }

	    /**
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {number} percent
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function interpolateArray(p0, p1, percent, out, arrDim) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = interpolateNumber(p0[i], p1[i], percent);
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = interpolateNumber(
	                        p0[i][j], p1[i][j], percent
	                    );
	                }
	            }
	        }
	    }

	    function fillArr(arr0, arr1, arrDim) {
	        var arr0Len = arr0.length;
	        var arr1Len = arr1.length;
	        if (arr0Len === arr1Len) {
	            return;
	        }
	        // FIXME Not work for TypedArray
	        var isPreviousLarger = arr0Len > arr1Len;
	        if (isPreviousLarger) {
	            // Cut the previous
	            arr0.length = arr1Len;
	        }
	        else {
	            // Fill the previous
	            for (var i = arr0Len; i < arr1Len; i++) {
	                arr0.push(
	                    arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])
	                );
	            }
	        }
	    }

	    /**
	     * @param  {Array} arr0
	     * @param  {Array} arr1
	     * @param  {number} arrDim
	     * @return {boolean}
	     */
	    function isArraySame(arr0, arr1, arrDim) {
	        if (arr0 === arr1) {
	            return true;
	        }
	        var len = arr0.length;
	        if (len !== arr1.length) {
	            return false;
	        }
	        if (arrDim === 1) {
	            for (var i = 0; i < len; i++) {
	                if (arr0[i] !== arr1[i]) {
	                    return false;
	                }
	            }
	        }
	        else {
	            var len2 = arr0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    if (arr0[i][j] !== arr1[i][j]) {
	                        return false;
	                    }
	                }
	            }
	        }
	        return true;
	    }

	    /**
	     * Catmull Rom interpolate array
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {Array} p2
	     * @param  {Array} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function catmullRomInterpolateArray(
	        p0, p1, p2, p3, t, t2, t3, out, arrDim
	    ) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = catmullRomInterpolate(
	                    p0[i], p1[i], p2[i], p3[i], t, t2, t3
	                );
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = catmullRomInterpolate(
	                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],
	                        t, t2, t3
	                    );
	                }
	            }
	        }
	    }

	    /**
	     * Catmull Rom interpolate number
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @return {number}
	     */
	    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }

	    function cloneValue(value) {
	        if (isArrayLike(value)) {
	            var len = value.length;
	            if (isArrayLike(value[0])) {
	                var ret = [];
	                for (var i = 0; i < len; i++) {
	                    ret.push(arraySlice.call(value[i]));
	                }
	                return ret;
	            }

	            return arraySlice.call(value);
	        }

	        return value;
	    }

	    function rgba2String(rgba) {
	        rgba[0] = Math.floor(rgba[0]);
	        rgba[1] = Math.floor(rgba[1]);
	        rgba[2] = Math.floor(rgba[2]);

	        return 'rgba(' + rgba.join(',') + ')';
	    }

	    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {
	        var getter = animator._getter;
	        var setter = animator._setter;
	        var useSpline = easing === 'spline';

	        var trackLen = keyframes.length;
	        if (!trackLen) {
	            return;
	        }
	        // Guess data type
	        var firstVal = keyframes[0].value;
	        var isValueArray = isArrayLike(firstVal);
	        var isValueColor = false;
	        var isValueString = false;

	        // For vertices morphing
	        var arrDim = (
	                isValueArray
	                && isArrayLike(firstVal[0])
	            )
	            ? 2 : 1;
	        var trackMaxTime;
	        // Sort keyframe as ascending
	        keyframes.sort(function(a, b) {
	            return a.time - b.time;
	        });

	        trackMaxTime = keyframes[trackLen - 1].time;
	        // Percents of each keyframe
	        var kfPercents = [];
	        // Value of each keyframe
	        var kfValues = [];
	        var prevValue = keyframes[0].value;
	        var isAllValueEqual = true;
	        for (var i = 0; i < trackLen; i++) {
	            kfPercents.push(keyframes[i].time / trackMaxTime);
	            // Assume value is a color when it is a string
	            var value = keyframes[i].value;

	            // Check if value is equal, deep check if value is array
	            if (!((isValueArray && isArraySame(value, prevValue, arrDim))
	                || (!isValueArray && value === prevValue))) {
	                isAllValueEqual = false;
	            }
	            prevValue = value;

	            // Try converting a string to a color array
	            if (typeof value == 'string') {
	                var colorArray = color.parse(value);
	                if (colorArray) {
	                    value = colorArray;
	                    isValueColor = true;
	                }
	                else {
	                    isValueString = true;
	                }
	            }
	            kfValues.push(value);
	        }
	        if (isAllValueEqual) {
	            return;
	        }

	        if (isValueArray) {
	            var lastValue = kfValues[trackLen - 1];
	            // Polyfill array
	            for (var i = 0; i < trackLen - 1; i++) {
	                fillArr(kfValues[i], lastValue, arrDim);
	            }
	            fillArr(getter(animator._target, propName), lastValue, arrDim);
	        }

	        // Cache the key of last frame to speed up when
	        // animation playback is sequency
	        var lastFrame = 0;
	        var lastFramePercent = 0;
	        var start;
	        var w;
	        var p0;
	        var p1;
	        var p2;
	        var p3;

	        if (isValueColor) {
	            var rgba = [0, 0, 0, 0];
	        }

	        var onframe = function (target, percent) {
	            // Find the range keyframes
	            // kf1-----kf2---------current--------kf3
	            // find kf2 and kf3 and do interpolation
	            var frame;
	            if (percent < lastFramePercent) {
	                // Start from next key
	                start = Math.min(lastFrame + 1, trackLen - 1);
	                for (frame = start; frame >= 0; frame--) {
	                    if (kfPercents[frame] <= percent) {
	                        break;
	                    }
	                }
	                frame = Math.min(frame, trackLen - 2);
	            }
	            else {
	                for (frame = lastFrame; frame < trackLen; frame++) {
	                    if (kfPercents[frame] > percent) {
	                        break;
	                    }
	                }
	                frame = Math.min(frame - 1, trackLen - 2);
	            }
	            lastFrame = frame;
	            lastFramePercent = percent;

	            var range = (kfPercents[frame + 1] - kfPercents[frame]);
	            if (range === 0) {
	                return;
	            }
	            else {
	                w = (percent - kfPercents[frame]) / range;
	            }
	            if (useSpline) {
	                p1 = kfValues[frame];
	                p0 = kfValues[frame === 0 ? frame : frame - 1];
	                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	                if (isValueArray) {
	                    catmullRomInterpolateArray(
	                        p0, p1, p2, p3, w, w * w, w * w * w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        value = catmullRomInterpolateArray(
	                            p0, p1, p2, p3, w, w * w, w * w * w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(p1, p2, w);
	                    }
	                    else {
	                        value = catmullRomInterpolate(
	                            p0, p1, p2, p3, w, w * w, w * w * w
	                        );
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	            else {
	                if (isValueArray) {
	                    interpolateArray(
	                        kfValues[frame], kfValues[frame + 1], w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        interpolateArray(
	                            kfValues[frame], kfValues[frame + 1], w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    else {
	                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	        };

	        var clip = new Clip({
	            target: animator._target,
	            life: trackMaxTime,
	            loop: animator._loop,
	            delay: animator._delay,
	            onframe: onframe,
	            ondestroy: oneTrackDone
	        });

	        if (easing && easing !== 'spline') {
	            clip.easing = easing;
	        }

	        return clip;
	    }

	    /**
	     * @alias module:zrender/animation/Animator
	     * @constructor
	     * @param {Object} target
	     * @param {boolean} loop
	     * @param {Function} getter
	     * @param {Function} setter
	     */
	    var Animator = function(target, loop, getter, setter) {
	        this._tracks = {};
	        this._target = target;

	        this._loop = loop || false;

	        this._getter = getter || defaultGetter;
	        this._setter = setter || defaultSetter;

	        this._clipCount = 0;

	        this._delay = 0;

	        this._doneList = [];

	        this._onframeList = [];

	        this._clipList = [];
	    };

	    Animator.prototype = {
	        /**
	         * 设置动画关键帧
	         * @param  {number} time 关键帧时间，单位是ms
	         * @param  {Object} props 关键帧的属性值，key-value表示
	         * @return {module:zrender/animation/Animator}
	         */
	        when: function(time /* ms */, props) {
	            var tracks = this._tracks;
	            for (var propName in props) {
	                if (!tracks[propName]) {
	                    tracks[propName] = [];
	                    // Invalid value
	                    var value = this._getter(this._target, propName);
	                    if (value == null) {
	                        // zrLog('Invalid property ' + propName);
	                        continue;
	                    }
	                    // If time is 0
	                    //  Then props is given initialize value
	                    // Else
	                    //  Initialize value from current prop value
	                    if (time !== 0) {
	                        tracks[propName].push({
	                            time: 0,
	                            value: cloneValue(value)
	                        });
	                    }
	                }
	                tracks[propName].push({
	                    time: time,
	                    value: props[propName]
	                });
	            }
	            return this;
	        },
	        /**
	         * 添加动画每一帧的回调函数
	         * @param  {Function} callback
	         * @return {module:zrender/animation/Animator}
	         */
	        during: function (callback) {
	            this._onframeList.push(callback);
	            return this;
	        },

	        _doneCallback: function () {
	            // Clear all tracks
	            this._tracks = {};
	            // Clear all clips
	            this._clipList.length = 0;

	            var doneList = this._doneList;
	            var len = doneList.length;
	            for (var i = 0; i < len; i++) {
	                doneList[i].call(this);
	            }
	        },
	        /**
	         * 开始执行动画
	         * @param  {string|Function} easing
	         *         动画缓动函数，详见{@link module:zrender/animation/easing}
	         * @return {module:zrender/animation/Animator}
	         */
	        start: function (easing) {

	            var self = this;
	            var clipCount = 0;

	            var oneTrackDone = function() {
	                clipCount--;
	                if (!clipCount) {
	                    self._doneCallback();
	                }
	            };

	            var lastClip;
	            for (var propName in this._tracks) {
	                var clip = createTrackClip(
	                    this, easing, oneTrackDone,
	                    this._tracks[propName], propName
	                );
	                if (clip) {
	                    this._clipList.push(clip);
	                    clipCount++;

	                    // If start after added to animation
	                    if (this.animation) {
	                        this.animation.addClip(clip);
	                    }

	                    lastClip = clip;
	                }
	            }

	            // Add during callback on the last clip
	            if (lastClip) {
	                var oldOnFrame = lastClip.onframe;
	                lastClip.onframe = function (target, percent) {
	                    oldOnFrame(target, percent);

	                    for (var i = 0; i < self._onframeList.length; i++) {
	                        self._onframeList[i](target, percent);
	                    }
	                };
	            }

	            if (!clipCount) {
	                this._doneCallback();
	            }
	            return this;
	        },
	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stop: function (forwardToLast) {
	            var clipList = this._clipList;
	            var animation = this.animation;
	            for (var i = 0; i < clipList.length; i++) {
	                var clip = clipList[i];
	                if (forwardToLast) {
	                    // Move to last frame before stop
	                    clip.onframe(this._target, 1);
	                }
	                animation && animation.removeClip(clip);
	            }
	            clipList.length = 0;
	        },
	        /**
	         * 设置动画延迟开始的时间
	         * @param  {number} time 单位ms
	         * @return {module:zrender/animation/Animator}
	         */
	        delay: function (time) {
	            this._delay = time;
	            return this;
	        },
	        /**
	         * 添加动画结束的回调
	         * @param  {Function} cb
	         * @return {module:zrender/animation/Animator}
	         */
	        done: function(cb) {
	            if (cb) {
	                this._doneList.push(cb);
	            }
	            return this;
	        },

	        /**
	         * @return {Array.<module:zrender/animation/Clip>}
	         */
	        getClips: function () {
	            return this._clipList;
	        }
	    };

	    module.exports = Animator;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */


	    var easingFuncs = __webpack_require__(145);

	    function Clip(options) {

	        this._target = options.target;

	        // 生命周期
	        this._life = options.life || 1000;
	        // 延时
	        this._delay = options.delay || 0;
	        // 开始时间
	        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	        this._initialized = false;

	        // 是否循环
	        this.loop = options.loop == null ? false : options.loop;

	        this.gap = options.gap || 0;

	        this.easing = options.easing || 'Linear';

	        this.onframe = options.onframe;
	        this.ondestroy = options.ondestroy;
	        this.onrestart = options.onrestart;
	    }

	    Clip.prototype = {

	        constructor: Clip,

	        step: function (time) {
	            // Set startTime on first step, or _startTime may has milleseconds different between clips
	            // PENDING
	            if (!this._initialized) {
	                this._startTime = new Date().getTime() + this._delay;
	                this._initialized = true;
	            }

	            var percent = (time - this._startTime) / this._life;

	            // 还没开始
	            if (percent < 0) {
	                return;
	            }

	            percent = Math.min(percent, 1);

	            var easing = this.easing;
	            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	            var schedule = typeof easingFunc === 'function'
	                ? easingFunc(percent)
	                : percent;

	            this.fire('frame', schedule);

	            // 结束
	            if (percent == 1) {
	                if (this.loop) {
	                    this.restart();
	                    // 重新开始周期
	                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                    return 'restart';
	                }

	                // 动画完成将这个控制器标识为待删除
	                // 在Animation.update中进行批量删除
	                this._needsRemove = true;
	                return 'destroy';
	            }

	            return null;
	        },

	        restart: function() {
	            var time = new Date().getTime();
	            var remainder = (time - this._startTime) % this._life;
	            this._startTime = new Date().getTime() - remainder + this.gap;

	            this._needsRemove = false;
	        },

	        fire: function(eventType, arg) {
	            eventType = 'on' + eventType;
	            if (this[eventType]) {
	                this[eventType](this._target, arg);
	            }
	        }
	    };

	    module.exports = Clip;



/***/ },
/* 145 */
/***/ function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */

	    var easing = {
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        linear: function (k) {
	            return k;
	        },

	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticIn: function (k) {
	            return k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticOut: function (k) {
	            return k * (2 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k;
	            }
	            return -0.5 * (--k * (k - 2) - 1);
	        },

	        // 三次方的缓动（t^3）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicIn: function (k) {
	            return k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicOut: function (k) {
	            return --k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k + 2);
	        },

	        // 四次方的缓动（t^4）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticIn: function (k) {
	            return k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticOut: function (k) {
	            return 1 - (--k * k * k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k;
	            }
	            return -0.5 * ((k -= 2) * k * k * k - 2);
	        },

	        // 五次方的缓动（t^5）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticIn: function (k) {
	            return k * k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticOut: function (k) {
	            return --k * k * k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k * k * k + 2);
	        },

	        // 正弦曲线的缓动（sin(t)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalIn: function (k) {
	            return 1 - Math.cos(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalOut: function (k) {
	            return Math.sin(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalInOut: function (k) {
	            return 0.5 * (1 - Math.cos(Math.PI * k));
	        },

	        // 指数曲线的缓动（2^t）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialIn: function (k) {
	            return k === 0 ? 0 : Math.pow(1024, k - 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialOut: function (k) {
	            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialInOut: function (k) {
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if ((k *= 2) < 1) {
	                return 0.5 * Math.pow(1024, k - 1);
	            }
	            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	        },

	        // 圆形曲线的缓动（sqrt(1-t^2)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularIn: function (k) {
	            return 1 - Math.sqrt(1 - k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularOut: function (k) {
	            return Math.sqrt(1 - (--k * k));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return -0.5 * (Math.sqrt(1 - k * k) - 1);
	            }
	            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	        },

	        // 创建类似于弹簧在停止前来回振荡的动画
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticIn: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return -(a * Math.pow(2, 10 * (k -= 1)) *
	                        Math.sin((k - s) * (2 * Math.PI) / p));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return (a * Math.pow(2, -10 * k) *
	                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticInOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            if ((k *= 2) < 1) {
	                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p));
	            }
	            return a * Math.pow(2, -10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;

	        },

	        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backIn: function (k) {
	            var s = 1.70158;
	            return k * k * ((s + 1) * k - s);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backOut: function (k) {
	            var s = 1.70158;
	            return --k * k * ((s + 1) * k + s) + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backInOut: function (k) {
	            var s = 1.70158 * 1.525;
	            if ((k *= 2) < 1) {
	                return 0.5 * (k * k * ((s + 1) * k - s));
	            }
	            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	        },

	        // 创建弹跳效果
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceIn: function (k) {
	            return 1 - easing.bounceOut(1 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceOut: function (k) {
	            if (k < (1 / 2.75)) {
	                return 7.5625 * k * k;
	            }
	            else if (k < (2 / 2.75)) {
	                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	            }
	            else if (k < (2.5 / 2.75)) {
	                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	            }
	            else {
	                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	            }
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceInOut: function (k) {
	            if (k < 0.5) {
	                return easing.bounceIn(k * 2) * 0.5;
	            }
	            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	        }
	    };

	    module.exports = easing;




/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * @module zrender/tool/color
	 */


	    var kCSSColorTable = {
	        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],
	        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],
	        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],
	        'beige': [245,245,220,1], 'bisque': [255,228,196,1],
	        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],
	        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],
	        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],
	        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],
	        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],
	        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],
	        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],
	        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],
	        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],
	        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],
	        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],
	        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],
	        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],
	        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],
	        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],
	        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],
	        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],
	        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],
	        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],
	        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],
	        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],
	        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],
	        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],
	        'gray': [128,128,128,1], 'green': [0,128,0,1],
	        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],
	        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],
	        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],
	        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],
	        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],
	        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],
	        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],
	        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],
	        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],
	        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],
	        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],
	        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],
	        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],
	        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],
	        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],
	        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],
	        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],
	        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],
	        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],
	        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],
	        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],
	        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],
	        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],
	        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],
	        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],
	        'orange': [255,165,0,1], 'orangered': [255,69,0,1],
	        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],
	        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],
	        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],
	        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],
	        'pink': [255,192,203,1], 'plum': [221,160,221,1],
	        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],
	        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],
	        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],
	        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],
	        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],
	        'sienna': [160,82,45,1], 'silver': [192,192,192,1],
	        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],
	        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],
	        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],
	        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],
	        'teal': [0,128,128,1], 'thistle': [216,191,216,1],
	        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],
	        'violet': [238,130,238,1], 'wheat': [245,222,179,1],
	        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],
	        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]
	    };

	    function clampCssByte(i) {  // Clamp to integer 0 .. 255.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 255 ? 255 : i;
	    }

	    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 360 ? 360 : i;
	    }

	    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.
	        return f < 0 ? 0 : f > 1 ? 1 : f;
	    }

	    function parseCssInt(str) {  // int or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssByte(parseFloat(str) / 100 * 255);
	        }
	        return clampCssByte(parseInt(str, 10));
	    }

	    function parseCssFloat(str) {  // float or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssFloat(parseFloat(str) / 100);
	        }
	        return clampCssFloat(parseFloat(str));
	    }

	    function cssHueToRgb(m1, m2, h) {
	        if (h < 0) {
	            h += 1;
	        }
	        else if (h > 1) {
	            h -= 1;
	        }

	        if (h * 6 < 1) {
	            return m1 + (m2 - m1) * h * 6;
	        }
	        if (h * 2 < 1) {
	            return m2;
	        }
	        if (h * 3 < 2) {
	            return m1 + (m2 - m1) * (2/3 - h) * 6;
	        }
	        return m1;
	    }

	    function lerp(a, b, p) {
	        return a + (b - a) * p;
	    }

	    /**
	     * @param {string} colorStr
	     * @return {Array.<number>}
	     * @memberOf module:zrender/util/color
	     */
	    function parse(colorStr) {
	        if (!colorStr) {
	            return;
	        }
	        // colorStr may be not string
	        colorStr = colorStr + '';
	        // Remove all whitespace, not compliant, but should just be more accepting.
	        var str = colorStr.replace(/ /g, '').toLowerCase();

	        // Color keywords (and transparent) lookup.
	        if (str in kCSSColorTable) {
	            return kCSSColorTable[str].slice();  // dup.
	        }

	        // #abc and #abc123 syntax.
	        if (str.charAt(0) === '#') {
	            if (str.length === 4) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xfff)) {
	                    return;  // Covers NaN.
	                }
	                return [
	                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
	                    (iv & 0xf0) | ((iv & 0xf0) >> 4),
	                    (iv & 0xf) | ((iv & 0xf) << 4),
	                    1
	                ];
	            }
	            else if (str.length === 7) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xffffff)) {
	                    return;  // Covers NaN.
	                }
	                return [
	                    (iv & 0xff0000) >> 16,
	                    (iv & 0xff00) >> 8,
	                    iv & 0xff,
	                    1
	                ];
	            }

	            return;
	        }
	        var op = str.indexOf('('), ep = str.indexOf(')');
	        if (op !== -1 && ep + 1 === str.length) {
	            var fname = str.substr(0, op);
	            var params = str.substr(op + 1, ep - (op + 1)).split(',');
	            var alpha = 1;  // To allow case fallthrough.
	            switch (fname) {
	                case 'rgba':
	                    if (params.length !== 4) {
	                        return;
	                    }
	                    alpha = parseCssFloat(params.pop()); // jshint ignore:line
	                // Fall through.
	                case 'rgb':
	                    if (params.length !== 3) {
	                        return;
	                    }
	                    return [
	                        parseCssInt(params[0]),
	                        parseCssInt(params[1]),
	                        parseCssInt(params[2]),
	                        alpha
	                    ];
	                case 'hsla':
	                    if (params.length !== 4) {
	                        return;
	                    }
	                    params[3] = parseCssFloat(params[3]);
	                    return hsla2rgba(params);
	                case 'hsl':
	                    if (params.length !== 3) {
	                        return;
	                    }
	                    return hsla2rgba(params);
	                default:
	                    return;
	            }
	        }

	        return;
	    }

	    /**
	     * @param {Array.<number>} hsla
	     * @return {Array.<number>} rgba
	     */
	    function hsla2rgba(hsla) {
	        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
	        // NOTE(deanm): According to the CSS spec s/l should only be
	        // percentages, but we don't bother and let float or percentage.
	        var s = parseCssFloat(hsla[1]);
	        var l = parseCssFloat(hsla[2]);
	        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        var m1 = l * 2 - m2;

	        var rgba = [
	            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)
	        ];

	        if (hsla.length === 4) {
	            rgba[3] = hsla[3];
	        }

	        return rgba;
	    }

	    /**
	     * @param {Array.<number>} rgba
	     * @return {Array.<number>} hsla
	     */
	    function rgba2hsla(rgba) {
	        if (!rgba) {
	            return;
	        }

	        // RGB from 0 to 255
	        var R = rgba[0] / 255;
	        var G = rgba[1] / 255;
	        var B = rgba[2] / 255;

	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value

	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            }
	            else {
	                S = delta / (2 - vMax - vMin);
	            }

	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }

	            if (H < 0) {
	                H += 1;
	            }

	            if (H > 1) {
	                H -= 1;
	            }
	        }

	        var hsla = [H * 360, S, L];

	        if (rgba[3] != null) {
	            hsla.push(rgba[3]);
	        }

	        return hsla;
	    }

	    /**
	     * @param {string} color
	     * @param {number} level
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function lift(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            for (var i = 0; i < 3; i++) {
	                if (level < 0) {
	                    colorArr[i] = colorArr[i] * (1 - level) | 0;
	                }
	                else {
	                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;
	                }
	            }
	            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	        }
	    }

	    /**
	     * @param {string} color
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function toHex(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);
	        }
	    }

	    /**
	     * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<Array.<number>>} colors List of rgba color array
	     * @param {Array.<number>} [out] Mapped gba color array
	     * @return {Array.<number>}
	     */
	    function fastMapToColor(normalizedValue, colors, out) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }
	        out = out || [0, 0, 0, 0];
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = colors[leftIndex];
	        var rightColor = colors[rightIndex];
	        var dv = value - leftIndex;
	        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	        return out;
	    }
	    /**
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<string>} colors Color list.
	     * @param {boolean=} fullOutput Default false.
	     * @return {(string|Object)} Result color. If fullOutput,
	     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	     * @memberOf module:zrender/util/color
	     */
	    function mapToColor(normalizedValue, colors, fullOutput) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }

	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = parse(colors[leftIndex]);
	        var rightColor = parse(colors[rightIndex]);
	        var dv = value - leftIndex;

	        var color = stringify(
	            [
	                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),
	                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),
	                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),
	                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))
	            ],
	            'rgba'
	        );

	        return fullOutput
	            ? {
	                color: color,
	                leftIndex: leftIndex,
	                rightIndex: rightIndex,
	                value: value
	            }
	            : color;
	    }

	    /**
	     * @param {Array<number>} interval  Array length === 2,
	     *                                  each item is normalized value ([0, 1]).
	     * @param {Array.<string>} colors Color list.
	     * @return {Array.<Object>} colors corresponding to the interval,
	     *                          each item is {color: 'xxx', offset: ...}
	     *                          where offset is between 0 and 1.
	     * @memberOf module:zrender/util/color
	     */
	    function mapIntervalToColor(interval, colors) {
	        if (interval.length !== 2 || interval[1] < interval[0]) {
	            return;
	        }

	        var info0 = mapToColor(interval[0], colors, true);
	        var info1 = mapToColor(interval[1], colors, true);

	        var result = [{color: info0.color, offset: 0}];

	        var during = info1.value - info0.value;
	        var start = Math.max(info0.value, info0.rightIndex);
	        var end = Math.min(info1.value, info1.leftIndex);

	        for (var i = start; during > 0 && i <= end; i++) {
	            result.push({
	                color: colors[i],
	                offset: (i - info0.value) / during
	            });
	        }
	        result.push({color: info1.color, offset: 1});

	        return result;
	    }

	    /**
	     * @param {string} color
	     * @param {number=} h 0 ~ 360, ignore when null.
	     * @param {number=} s 0 ~ 1, ignore when null.
	     * @param {number=} l 0 ~ 1, ignore when null.
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyHSL(color, h, s, l) {
	        color = parse(color);

	        if (color) {
	            color = rgba2hsla(color);
	            h != null && (color[0] = clampCssAngle(h));
	            s != null && (color[1] = parseCssFloat(s));
	            l != null && (color[2] = parseCssFloat(l));

	            return stringify(hsla2rgba(color), 'rgba');
	        }
	    }

	    /**
	     * @param {string} color
	     * @param {number=} alpha 0 ~ 1
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyAlpha(color, alpha) {
	        color = parse(color);

	        if (color && alpha != null) {
	            color[3] = clampCssFloat(alpha);
	            return stringify(color, 'rgba');
	        }
	    }

	    /**
	     * @param {Array.<string>} colors Color list.
	     * @param {string} type 'rgba', 'hsva', ...
	     * @return {string} Result color.
	     */
	    function stringify(arrColor, type) {
	        if (type === 'rgb' || type === 'hsv' || type === 'hsl') {
	            arrColor = arrColor.slice(0, 3);
	        }
	        return type + '(' + arrColor.join(',') + ')';
	    }

	    module.exports = {
	        parse: parse,
	        lift: lift,
	        toHex: toHex,
	        fastMapToColor: fastMapToColor,
	        mapToColor: mapToColor,
	        mapIntervalToColor: mapIntervalToColor,
	        modifyHSL: modifyHSL,
	        modifyAlpha: modifyAlpha,
	        stringify: stringify
	    };




/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	
	        var config = __webpack_require__(148);

	        /**
	         * @exports zrender/tool/log
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         */
	        module.exports = function() {
	            if (config.debugMode === 0) {
	                return;
	            }
	            else if (config.debugMode == 1) {
	                for (var k in arguments) {
	                    throw new Error(arguments[k]);
	                }
	            }
	            else if (config.debugMode > 1) {
	                for (var k in arguments) {
	                    console.log(arguments[k]);
	                }
	            }
	        };

	        /* for debug
	        return function(mes) {
	            document.getElementById('wrong-message').innerHTML =
	                mes + ' ' + (new Date() - 0)
	                + '<br/>' 
	                + document.getElementById('wrong-message').innerHTML;
	        };
	        */
	    


/***/ },
/* 148 */
/***/ function(module, exports) {

	
	    var dpr = 1;
	    // If in browser environment
	    if (typeof window !== 'undefined') {
	        dpr = Math.max(window.devicePixelRatio || 1, 1);
	    }
	    /**
	     * config默认配置项
	     * @exports zrender/config
	     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	     */
	    var config = {
	        /**
	         * debug日志选项：catchBrushException为true下有效
	         * 0 : 不生成debug数据，发布用
	         * 1 : 异常抛出，调试用
	         * 2 : 控制台输出，调试用
	         */
	        debugMode: 0,

	        // retina 屏幕优化
	        devicePixelRatio: dpr
	    };
	    module.exports = config;




/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Group = __webpack_require__(137);
	    var componentUtil = __webpack_require__(128);
	    var clazzUtil = __webpack_require__(117);

	    function Chart() {

	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewChart');
	    }

	    Chart.prototype = {

	        type: 'chart',

	        /**
	         * Init the chart
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        init: function (ecModel, api) {},

	        /**
	         * Render the chart
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        render: function (seriesModel, ecModel, api, payload) {},

	        /**
	         * Highlight series or specified data item
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        highlight: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	        },

	        /**
	         * Downplay series or specified data item
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        downplay: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'normal');
	        },

	        /**
	         * Remove self
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        remove: function (ecModel, api) {
	            this.group.removeAll();
	        },

	        /**
	         * Dispose self
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        dispose: function () {}
	    };

	    var chartProto = Chart.prototype;
	    chartProto.updateView
	        = chartProto.updateLayout
	        = chartProto.updateVisual
	        = function (seriesModel, ecModel, api, payload) {
	            this.render(seriesModel, ecModel, api, payload);
	        };

	    /**
	     * Set state of single element
	     * @param  {module:zrender/Element} el
	     * @param  {string} state
	     */
	    function elSetState(el, state) {
	        if (el) {
	            el.trigger(state);
	            if (el.type === 'group') {
	                for (var i = 0; i < el.childCount(); i++) {
	                    elSetState(el.childAt(i), state);
	                }
	            }
	        }
	    }
	    /**
	     * @param  {module:echarts/data/List} data
	     * @param  {Object} payload
	     * @param  {string} state 'normal'|'emphasis'
	     * @inner
	     */
	    function toggleHighlight(data, payload, state) {
	        if (payload.dataIndex != null) {
	            var el = data.getItemGraphicEl(payload.dataIndex);
	            elSetState(el, state);
	        }
	        else if (payload.name) {
	            var dataIndex = data.indexOfName(payload.name);
	            var el = data.getItemGraphicEl(dataIndex);
	            elSetState(el, state);
	        }
	        else {
	            data.eachItemGraphicEl(function (el) {
	                elSetState(el, state);
	            });
	        }
	    }

	    // Enable Chart.extend.
	    clazzUtil.enableClassExtend(Chart);

	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});

	    module.exports = Chart;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);

	    var pathTool = __webpack_require__(151);
	    var round = Math.round;
	    var Path = __webpack_require__(152);
	    var colorTool = __webpack_require__(146);
	    var matrix = __webpack_require__(125);
	    var vector = __webpack_require__(124);
	    var Gradient = __webpack_require__(112);

	    var graphic = {};

	    graphic.Group = __webpack_require__(137);

	    graphic.Image = __webpack_require__(167);

	    graphic.Text = __webpack_require__(170);

	    graphic.Circle = __webpack_require__(171);

	    graphic.Sector = __webpack_require__(172);

	    graphic.Ring = __webpack_require__(173);

	    graphic.Polygon = __webpack_require__(174);

	    graphic.Polyline = __webpack_require__(178);

	    graphic.Rect = __webpack_require__(179);

	    graphic.Line = __webpack_require__(180);

	    graphic.BezierCurve = __webpack_require__(181);

	    graphic.Arc = __webpack_require__(182);

	    graphic.LinearGradient = __webpack_require__(183);

	    graphic.RadialGradient = __webpack_require__(184);

	    graphic.BoundingRect = __webpack_require__(123);

	    /**
	     * Extend shape with parameters
	     */
	    graphic.extendShape = function (opts) {
	        return Path.extend(opts);
	    };

	    /**
	     * Extend path
	     */
	    graphic.extendPath = function (pathData, opts) {
	        return pathTool.extendFromString(pathData, opts);
	    };

	    /**
	     * Create a path element from path data string
	     * @param {string} pathData
	     * @param {Object} opts
	     * @param {module:zrender/core/BoundingRect} rect
	     * @param {string} [layout=cover] 'center' or 'cover'
	     */
	    graphic.makePath = function (pathData, opts, rect, layout) {
	        var path = pathTool.createFromString(pathData, opts);
	        var boundingRect = path.getBoundingRect();
	        if (rect) {
	            var aspect = boundingRect.width / boundingRect.height;

	            if (layout === 'center') {
	                // Set rect to center, keep width / height ratio.
	                var width = rect.height * aspect;
	                var height;
	                if (width <= rect.width) {
	                    height = rect.height;
	                }
	                else {
	                    width = rect.width;
	                    height = width / aspect;
	                }
	                var cx = rect.x + rect.width / 2;
	                var cy = rect.y + rect.height / 2;

	                rect.x = cx - width / 2;
	                rect.y = cy - height / 2;
	                rect.width = width;
	                rect.height = height;
	            }

	            this.resizePath(path, rect);
	        }
	        return path;
	    };

	    graphic.mergePath = pathTool.mergePath,

	    /**
	     * Resize a path to fit the rect
	     * @param {module:zrender/graphic/Path} path
	     * @param {Object} rect
	     */
	    graphic.resizePath = function (path, rect) {
	        if (!path.applyTransform) {
	            return;
	        }

	        var pathRect = path.getBoundingRect();

	        var m = pathRect.calculateTransform(rect);

	        path.applyTransform(m);
	    };

	    /**
	     * Sub pixel optimize line for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x1]
	     * @param {number} [param.shape.y1]
	     * @param {number} [param.shape.x2]
	     * @param {number} [param.shape.y2]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeLine = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;

	        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	        }
	        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	        }
	        return param;
	    };

	    /**
	     * Sub pixel optimize rect for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x]
	     * @param {number} [param.shape.y]
	     * @param {number} [param.shape.width]
	     * @param {number} [param.shape.height]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeRect = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;
	        var originX = shape.x;
	        var originY = shape.y;
	        var originWidth = shape.width;
	        var originHeight = shape.height;
	        shape.x = subPixelOptimize(shape.x, lineWidth, true);
	        shape.y = subPixelOptimize(shape.y, lineWidth, true);
	        shape.width = Math.max(
	            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,
	            originWidth === 0 ? 0 : 1
	        );
	        shape.height = Math.max(
	            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,
	            originHeight === 0 ? 0 : 1
	        );
	        return param;
	    };

	    /**
	     * Sub pixel optimize for canvas
	     *
	     * @param {number} position Coordinate, such as x, y
	     * @param {number} lineWidth Should be nonnegative integer.
	     * @param {boolean=} positiveOrNegative Default false (negative).
	     * @return {number} Optimized position.
	     */
	    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
	        // Assure that (position + lineWidth / 2) is near integer edge,
	        // otherwise line will be fuzzy in canvas.
	        var doubledPosition = round(position * 2);
	        return (doubledPosition + round(lineWidth)) % 2 === 0
	            ? doubledPosition / 2
	            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	    };

	    /**
	     * @private
	     */
	    function doSingleEnterHover(el) {
	        if (el.__isHover) {
	            return;
	        }
	        if (el.__hoverStlDirty) {
	            var stroke = el.style.stroke;
	            var fill = el.style.fill;

	            // Create hoverStyle on mouseover
	            var hoverStyle = el.__hoverStl;
	            var lift = colorTool.lift;
	            hoverStyle.fill = hoverStyle.fill
	                || (fill && (fill instanceof Gradient ? fill : lift(fill, -0.1)));
	            hoverStyle.stroke = hoverStyle.stroke
	                || (stroke && (stroke instanceof Gradient ? stroke : lift(stroke, -0.1)));

	            var normalStyle = {};
	            for (var name in hoverStyle) {
	                if (hoverStyle.hasOwnProperty(name)) {
	                    normalStyle[name] = el.style[name];
	                }
	            }

	            el.__normalStl = normalStyle;

	            el.__hoverStlDirty = false;
	        }
	        el.setStyle(el.__hoverStl);
	        el.z2 += 1;

	        el.__isHover = true;
	    }

	    /**
	     * @inner
	     */
	    function doSingleLeaveHover(el) {
	        if (!el.__isHover) {
	            return;
	        }

	        var normalStl = el.__normalStl;
	        normalStl && el.setStyle(normalStl);
	        el.z2 -= 1;

	        el.__isHover = false;
	    }

	    /**
	     * @inner
	     */
	    function doEnterHover(el) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    doSingleEnterHover(child);
	                }
	            })
	            : doSingleEnterHover(el);
	    }

	    function doLeaveHover(el) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    doSingleLeaveHover(child);
	                }
	            })
	            : doSingleLeaveHover(el);
	    }

	    /**
	     * @inner
	     */
	    function setElementHoverStl(el, hoverStl) {
	        // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	        // Often used when item group has a label element and it's hoverStyle is different
	        el.__hoverStl = el.hoverStyle || hoverStl || {};
	        el.__hoverStlDirty = true;
	    }

	    /**
	     * @inner
	     */
	    function onElementMouseOver() {
	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doEnterHover(this);
	    }

	    /**
	     * @inner
	     */
	    function onElementMouseOut() {
	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doLeaveHover(this);
	    }

	    /**
	     * @inner
	     */
	    function enterEmphasis() {
	        this.__isEmphasis = true;
	        doEnterHover(this);
	    }

	    /**
	     * @inner
	     */
	    function leaveEmphasis() {
	        this.__isEmphasis = false;
	        doLeaveHover(this);
	    }

	    /**
	     * Set hover style of element
	     * @param {module:zrender/Element} el
	     * @param {Object} [hoverStyle]
	     */
	    graphic.setHoverStyle = function (el, hoverStyle) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    setElementHoverStl(child, hoverStyle);
	                }
	            })
	            : setElementHoverStl(el, hoverStyle);
	        // Remove previous bound handlers
	        el.on('mouseover', onElementMouseOver)
	          .on('mouseout', onElementMouseOut);

	        // Emphasis, normal can be triggered manually
	        el.on('emphasis', enterEmphasis)
	          .on('normal', leaveEmphasis);
	    };

	    /**
	     * Set text option in the style
	     * @param {Object} textStyle
	     * @param {module:echarts/model/Model} labelModel
	     * @param {string} color
	     */
	    graphic.setText = function (textStyle, labelModel, color) {
	        var labelPosition = labelModel.getShallow('position') || 'inside';
	        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
	        var textStyleModel = labelModel.getModel('textStyle');
	        zrUtil.extend(textStyle, {
	            textDistance: labelModel.getShallow('distance') || 5,
	            textFont: textStyleModel.getFont(),
	            textPosition: labelPosition,
	            textFill: textStyleModel.getTextColor() || labelColor
	        });
	    };

	    function animateOrSetProps(isUpdate, el, props, animatableModel, cb) {
	        var postfix = isUpdate ? 'Update' : '';
	        var duration = animatableModel
	            && animatableModel.getShallow('animationDuration' + postfix);
	        var animationEasing = animatableModel
	            && animatableModel.getShallow('animationEasing' + postfix);

	        animatableModel && animatableModel.getShallow('animation')
	            ? el.animateTo(props, duration, animationEasing, cb)
	            : (el.attr(props), cb && cb());
	    }
	    /**
	     * Update graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {Function} cb
	     */
	    graphic.updateProps = zrUtil.curry(animateOrSetProps, true);

	    /**
	     * Init graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {Function} cb
	     */
	    graphic.initProps = zrUtil.curry(animateOrSetProps, false);

	    /**
	     * Get transform matrix of target (param target),
	     * in coordinate of its ancestor (param ancestor)
	     *
	     * @param {module:zrender/mixin/Transformable} target
	     * @param {module:zrender/mixin/Transformable} ancestor
	     */
	    graphic.getTransform = function (target, ancestor) {
	        var mat = matrix.identity([]);

	        while (target && target !== ancestor) {
	            matrix.mul(mat, target.getLocalTransform(), mat);
	            target = target.parent;
	        }

	        return mat;
	    };

	    /**
	     * Apply transform to an vertex.
	     * @param {Array.<number>} vertex [x, y]
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {Array.<number>} [x, y]
	     */
	    graphic.applyTransform = function (vertex, transform, invert) {
	        if (invert) {
	            transform = matrix.invert([], transform);
	        }
	        return vector.applyTransform([], vertex, transform);
	    };

	    /**
	     * @param {string} direction 'left' 'right' 'top' 'bottom'
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	     */
	    graphic.transformDirection = function (direction, transform, invert) {

	        // Pick a base, ensure that transform result will not be (0, 0).
	        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)
	            ? 1 : Math.abs(2 * transform[4] / transform[0]);
	        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)
	            ? 1 : Math.abs(2 * transform[4] / transform[2]);

	        var vertex = [
	            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,
	            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0
	        ];

	        vertex = graphic.applyTransform(vertex, transform, invert);

	        return Math.abs(vertex[0]) > Math.abs(vertex[1])
	            ? (vertex[0] > 0 ? 'right' : 'left')
	            : (vertex[1] > 0 ? 'bottom' : 'top');
	    };

	    module.exports = graphic;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Path = __webpack_require__(152);
	    var PathProxy = __webpack_require__(156);
	    var transformPath = __webpack_require__(166);
	    var matrix = __webpack_require__(125);

	    // command chars
	    var cc = [
	        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',
	        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'
	    ];

	    var mathSqrt = Math.sqrt;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;
	    var PI = Math.PI;

	    var vMag = function(v) {
	        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	    };
	    var vRatio = function(u, v) {
	        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	    };
	    var vAngle = function(u, v) {
	        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)
	                * Math.acos(vRatio(u, v));
	    };

	    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	        var psi = psiDeg * (PI / 180.0);
	        var xp = mathCos(psi) * (x1 - x2) / 2.0
	                 + mathSin(psi) * (y1 - y2) / 2.0;
	        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0
	                 + mathCos(psi) * (y1 - y2) / 2.0;

	        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);

	        if (lambda > 1) {
	            rx *= mathSqrt(lambda);
	            ry *= mathSqrt(lambda);
	        }

	        var f = (fa === fs ? -1 : 1)
	            * mathSqrt((((rx * rx) * (ry * ry))
	                    - ((rx * rx) * (yp * yp))
	                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)
	                    + (ry * ry) * (xp * xp))
	                ) || 0;

	        var cxp = f * rx * yp / ry;
	        var cyp = f * -ry * xp / rx;

	        var cx = (x1 + x2) / 2.0
	                 + mathCos(psi) * cxp
	                 - mathSin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0
	                + mathSin(psi) * cxp
	                + mathCos(psi) * cyp;

	        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);
	        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];
	        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];
	        var dTheta = vAngle(u, v);

	        if (vRatio(u, v) <= -1) {
	            dTheta = PI;
	        }
	        if (vRatio(u, v) >= 1) {
	            dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	            dTheta = dTheta - 2 * PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	            dTheta = dTheta + 2 * PI;
	        }

	        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	    }

	    function createPathProxyFromString(data) {
	        if (!data) {
	            return [];
	        }

	        // command string
	        var cs = data.replace(/-/g, ' -')
	            .replace(/  /g, ' ')
	            .replace(/ /g, ',')
	            .replace(/,,/g, ',');

	        var n;
	        // create pipes so that we can split the data
	        for (n = 0; n < cc.length; n++) {
	            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	        }

	        // create array
	        var arr = cs.split('|');
	        // init context point
	        var cpx = 0;
	        var cpy = 0;

	        var path = new PathProxy();
	        var CMD = PathProxy.CMD;

	        var prevCmd;
	        for (n = 1; n < arr.length; n++) {
	            var str = arr[n];
	            var c = str.charAt(0);
	            var off = 0;
	            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	            var cmd;

	            if (p.length > 0 && p[0] === '') {
	                p.shift();
	            }

	            for (var i = 0; i < p.length; i++) {
	                p[i] = parseFloat(p[i]);
	            }
	            while (off < p.length && !isNaN(p[off])) {
	                if (isNaN(p[0])) {
	                    break;
	                }
	                var ctlPtx;
	                var ctlPty;

	                var rx;
	                var ry;
	                var psi;
	                var fa;
	                var fs;

	                var x1 = cpx;
	                var y1 = cpy;

	                // convert l, H, h, V, and v to L
	                switch (c) {
	                    case 'l':
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'L':
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'm':
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.M;
	                        path.addData(cmd, cpx, cpy);
	                        c = 'l';
	                        break;
	                    case 'M':
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.M;
	                        path.addData(cmd, cpx, cpy);
	                        c = 'L';
	                        break;
	                    case 'h':
	                        cpx += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'H':
	                        cpx = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'v':
	                        cpy += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'V':
	                        cpy = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'C':
	                        cmd = CMD.C;
	                        path.addData(
	                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]
	                        );
	                        cpx = p[off - 2];
	                        cpy = p[off - 1];
	                        break;
	                    case 'c':
	                        cmd = CMD.C;
	                        path.addData(
	                            cmd,
	                            p[off++] + cpx, p[off++] + cpy,
	                            p[off++] + cpx, p[off++] + cpy,
	                            p[off++] + cpx, p[off++] + cpy
	                        );
	                        cpx += p[off - 2];
	                        cpy += p[off - 1];
	                        break;
	                    case 'S':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.C) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cmd = CMD.C;
	                        x1 = p[off++];
	                        y1 = p[off++];
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                        break;
	                    case 's':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.C) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cmd = CMD.C;
	                        x1 = cpx + p[off++];
	                        y1 = cpy + p[off++];
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                        break;
	                    case 'Q':
	                        x1 = p[off++];
	                        y1 = p[off++];
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, x1, y1, cpx, cpy);
	                        break;
	                    case 'q':
	                        x1 = p[off++] + cpx;
	                        y1 = p[off++] + cpy;
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, x1, y1, cpx, cpy);
	                        break;
	                    case 'T':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.Q) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 't':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.Q) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 'A':
	                        rx = p[off++];
	                        ry = p[off++];
	                        psi = p[off++];
	                        fa = p[off++];
	                        fs = p[off++];

	                        x1 = cpx, y1 = cpy;
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.A;
	                        processArc(
	                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
	                        );
	                        break;
	                    case 'a':
	                        rx = p[off++];
	                        ry = p[off++];
	                        psi = p[off++];
	                        fa = p[off++];
	                        fs = p[off++];

	                        x1 = cpx, y1 = cpy;
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.A;
	                        processArc(
	                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
	                        );
	                        break;
	                }
	            }

	            if (c === 'z' || c === 'Z') {
	                cmd = CMD.Z;
	                path.addData(cmd);
	            }

	            prevCmd = cmd;
	        }

	        path.toStatic();

	        return path;
	    }

	    // TODO Optimize double memory cost problem
	    function createPathOptions(str, opts) {
	        var pathProxy = createPathProxyFromString(str);
	        var transform;
	        opts = opts || {};
	        opts.buildPath = function (path) {
	            path.setData(pathProxy.data);
	            transform && transformPath(path, transform);
	            // Svg and vml renderer don't have context
	            var ctx = path.getContext();
	            if (ctx) {
	                path.rebuildPath(ctx);
	            }
	        };

	        opts.applyTransform = function (m) {
	            if (!transform) {
	                transform = matrix.create();
	            }
	            matrix.mul(transform, m, transform);
	        };

	        return opts;
	    }

	    module.exports = {
	        /**
	         * Create a Path object from path string data
	         * http://www.w3.org/TR/SVG/paths.html#PathData
	         * @param  {Object} opts Other options
	         */
	        createFromString: function (str, opts) {
	            return new Path(createPathOptions(str, opts));
	        },

	        /**
	         * Create a Path class from path string data
	         * @param  {string} str
	         * @param  {Object} opts Other options
	         */
	        extendFromString: function (str, opts) {
	            return Path.extend(createPathOptions(str, opts));
	        },

	        /**
	         * Merge multiple paths
	         */
	        // TODO Apply transform
	        // TODO stroke dash
	        // TODO Optimize double memory cost problem
	        mergePath: function (pathEls, opts) {
	            var pathList = [];
	            var len = pathEls.length;
	            var pathEl;
	            var i;
	            for (i = 0; i < len; i++) {
	                pathEl = pathEls[i];
	                if (pathEl.__dirty) {
	                    pathEl.buildPath(pathEl.path, pathEl.shape);
	                }
	                pathList.push(pathEl.path);
	            }

	            var pathBundle = new Path(opts);
	            pathBundle.buildPath = function (path) {
	                path.appendPath(pathList);
	                // Svg and vml renderer don't have context
	                var ctx = path.getContext();
	                if (ctx) {
	                    path.rebuildPath(ctx);
	                }
	            };

	            return pathBundle;
	        }
	    };


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Path element
	 * @module zrender/graphic/Path
	 */



	    var Displayable = __webpack_require__(153);
	    var zrUtil = __webpack_require__(111);
	    var PathProxy = __webpack_require__(156);
	    var pathContain = __webpack_require__(159);

	    var Gradient = __webpack_require__(112);

	    function pathHasFill(style) {
	        var fill = style.fill;
	        return fill != null && fill !== 'none';
	    }

	    function pathHasStroke(style) {
	        var stroke = style.stroke;
	        return stroke != null && stroke !== 'none' && style.lineWidth > 0;
	    }

	    var abs = Math.abs;

	    /**
	     * @alias module:zrender/graphic/Path
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function Path(opts) {
	        Displayable.call(this, opts);

	        /**
	         * @type {module:zrender/core/PathProxy}
	         * @readOnly
	         */
	        this.path = new PathProxy();
	    }

	    Path.prototype = {

	        constructor: Path,

	        type: 'path',

	        __dirtyPath: true,

	        strokeContainThreshold: 5,

	        brush: function (ctx) {
	            ctx.save();

	            var style = this.style;
	            var path = this.path;
	            var hasStroke = pathHasStroke(style);
	            var hasFill = pathHasFill(style);

	            if (this.__dirtyPath) {
	                // Update gradient because bounding rect may changed
	                if (hasFill && (style.fill instanceof Gradient)) {
	                    style.fill.updateCanvasGradient(this, ctx);
	                }
	                if (hasStroke && (style.stroke instanceof Gradient)) {
	                    style.stroke.updateCanvasGradient(this, ctx);
	                }
	            }

	            style.bind(ctx, this);
	            this.setTransform(ctx);

	            var lineDash = style.lineDash;
	            var lineDashOffset = style.lineDashOffset;

	            var ctxLineDash = !!ctx.setLineDash;

	            // Proxy context
	            // Rebuild path in following 2 cases
	            // 1. Path is dirty
	            // 2. Path needs javascript implemented lineDash stroking.
	            //    In this case, lineDash information will not be saved in PathProxy
	            if (this.__dirtyPath || (
	                lineDash && !ctxLineDash && hasStroke
	            )) {
	                path = this.path.beginPath(ctx);

	                // Setting line dash before build path
	                if (lineDash && !ctxLineDash) {
	                    path.setLineDash(lineDash);
	                    path.setLineDashOffset(lineDashOffset);
	                }

	                this.buildPath(path, this.shape);

	                // Clear path dirty flag
	                this.__dirtyPath = false;
	            }
	            else {
	                // Replay path building
	                ctx.beginPath();
	                this.path.rebuildPath(ctx);
	            }

	            hasFill && path.fill(ctx);

	            if (lineDash && ctxLineDash) {
	                ctx.setLineDash(lineDash);
	                ctx.lineDashOffset = lineDashOffset;
	            }

	            hasStroke && path.stroke(ctx);

	            // Draw rect text
	            if (style.text != null) {
	                // var rect = this.getBoundingRect();
	                this.drawRectText(ctx, this.getBoundingRect());
	            }

	            ctx.restore();
	        },

	        buildPath: function (ctx, shapeCfg) {},

	        getBoundingRect: function () {
	            var rect = this._rect;
	            var style = this.style;
	            var needsUpdateRect = !rect;
	            if (needsUpdateRect) {
	                var path = this.path;
	                if (this.__dirtyPath) {
	                    path.beginPath();
	                    this.buildPath(path, this.shape);
	                }
	                rect = path.getBoundingRect();
	            }
	            this._rect = rect;

	            if (pathHasStroke(style)) {
	                // Needs update rect with stroke lineWidth when
	                // 1. Element changes scale or lineWidth
	                // 2. Shape is changed
	                var rectWithStroke = this._rectWithStroke;
	                if (this.__dirty || needsUpdateRect) {
	                    var rectWithStroke = this._rectWithStroke
	                        || (this._rectWithStroke = rect.clone());
	                    rectWithStroke.copy(rect);
	                    // FIXME Must after updateTransform
	                    var w = style.lineWidth;
	                    // PENDING, Min line width is needed when line is horizontal or vertical
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;

	                    // Only add extra hover lineWidth when there are no fill
	                    if (!pathHasFill(style)) {
	                        w = Math.max(w, this.strokeContainThreshold);
	                    }
	                    // Consider line width
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        rectWithStroke.width += w / lineScale;
	                        rectWithStroke.height += w / lineScale;
	                        rectWithStroke.x -= w / lineScale / 2;
	                        rectWithStroke.y -= w / lineScale / 2;
	                    }
	                }

	                // Return rect with stroke
	                return rectWithStroke;
	            }

	            return rect;
	        },

	        contain: function (x, y) {
	            var localPos = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            var style = this.style;
	            x = localPos[0];
	            y = localPos[1];

	            if (rect.contain(x, y)) {
	                var pathData = this.path.data;
	                if (pathHasStroke(style)) {
	                    var lineWidth = style.lineWidth;
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        // Only add extra hover lineWidth when there are no fill
	                        if (!pathHasFill(style)) {
	                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	                        }
	                        if (pathContain.containStroke(
	                            pathData, lineWidth / lineScale, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                }
	                if (pathHasFill(style)) {
	                    return pathContain.contain(pathData, x, y);
	                }
	            }
	            return false;
	        },

	        /**
	         * @param  {boolean} dirtyPath
	         */
	        dirty: function (dirtyPath) {
	            if (arguments.length ===0) {
	                dirtyPath = true;
	            }
	            // Only mark dirty, not mark clean
	            if (dirtyPath) {
	                this.__dirtyPath = dirtyPath;
	                this._rect = null;
	            }

	            this.__dirty = true;

	            this.__zr && this.__zr.refresh();

	            // Used as a clipping path
	            if (this.__clipTarget) {
	                this.__clipTarget.dirty();
	            }
	        },

	        /**
	         * Alias for animate('shape')
	         * @param {boolean} loop
	         */
	        animateShape: function (loop) {
	            return this.animate('shape', loop);
	        },

	        // Overwrite attrKV
	        attrKV: function (key, value) {
	            // FIXME
	            if (key === 'shape') {
	                this.setShape(value);
	            }
	            else {
	                Displayable.prototype.attrKV.call(this, key, value);
	            }
	        },

	        /**
	         * @param {Object|string} key
	         * @param {*} value
	         */
	        setShape: function (key, value) {
	            var shape = this.shape;
	            // Path from string may not have shape
	            if (shape) {
	                if (zrUtil.isObject(key)) {
	                    for (var name in key) {
	                        shape[name] = key[name];
	                    }
	                }
	                else {
	                    shape[key] = value;
	                }
	                this.dirty(true);
	            }
	            return this;
	        },

	        getLineScale: function () {
	            var m = this.transform;
	            // Get the line scale.
	            // Determinant of `m` means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10
	                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))
	                : 1;
	        }
	    };

	    /**
	     * 扩展一个 Path element, 比如星形，圆等。
	     * Extend a path element
	     * @param {Object} props
	     * @param {string} props.type Path type
	     * @param {Function} props.init Initialize
	     * @param {Function} props.buildPath Overwrite buildPath method
	     * @param {Object} [props.style] Extended default style config
	     * @param {Object} [props.shape] Extended default shape config
	     */
	    Path.extend = function (defaults) {
	        var Sub = function (opts) {
	            Path.call(this, opts);

	            if (defaults.style) {
	                // Extend default style
	                this.style.extendFrom(defaults.style, false);
	            }

	            // Extend default shape
	            var defaultShape = defaults.shape;
	            if (defaultShape) {
	                this.shape = this.shape || {};
	                var thisShape = this.shape;
	                for (var name in defaultShape) {
	                    if (
	                        ! thisShape.hasOwnProperty(name)
	                        && defaultShape.hasOwnProperty(name)
	                    ) {
	                        thisShape[name] = defaultShape[name];
	                    }
	                }
	            }

	            defaults.init && defaults.init.call(this, opts);
	        };

	        zrUtil.inherits(Sub, Path);

	        // FIXME 不能 extend position, rotation 等引用对象
	        for (var name in defaults) {
	            // Extending prototype values and methods
	            if (name !== 'style' && name !== 'shape') {
	                Sub.prototype[name] = defaults[name];
	            }
	        }

	        return Sub;
	    };

	    zrUtil.inherits(Path, Displayable);

	    module.exports = Path;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */



	    var zrUtil = __webpack_require__(111);

	    var Style = __webpack_require__(154);

	    var Element = __webpack_require__(138);
	    var RectText = __webpack_require__(155);
	    // var Stateful = require('./mixin/Stateful');

	    /**
	     * @alias module:zrender/graphic/Displayable
	     * @extends module:zrender/Element
	     * @extends module:zrender/graphic/mixin/RectText
	     */
	    function Displayable(opts) {

	        opts = opts || {};

	        Element.call(this, opts);

	        // Extend properties
	        for (var name in opts) {
	            if (
	                opts.hasOwnProperty(name) &&
	                name !== 'style'
	            ) {
	                this[name] = opts[name];
	            }
	        }

	        /**
	         * @type {module:zrender/graphic/Style}
	         */
	        this.style = new Style(opts.style);

	        this._rect = null;
	        // Shapes for cascade clipping.
	        this.__clipPaths = [];

	        // FIXME Stateful must be mixined after style is setted
	        // Stateful.call(this, opts);
	    }

	    Displayable.prototype = {

	        constructor: Displayable,

	        type: 'displayable',

	        /**
	         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	         * Dirty flag. From which painter will determine if this displayable object needs brush
	         * @name module:zrender/graphic/Displayable#__dirty
	         * @type {boolean}
	         */
	        __dirty: true,

	        /**
	         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	         * If ignore drawing of the displayable object. Mouse event will still be triggered
	         * @name module:/zrender/graphic/Displayable#invisible
	         * @type {boolean}
	         * @default false
	         */
	        invisible: false,

	        /**
	         * @name module:/zrender/graphic/Displayable#z
	         * @type {number}
	         * @default 0
	         */
	        z: 0,

	        /**
	         * @name module:/zrender/graphic/Displayable#z
	         * @type {number}
	         * @default 0
	         */
	        z2: 0,

	        /**
	         * z层level，决定绘画在哪层canvas中
	         * @name module:/zrender/graphic/Displayable#zlevel
	         * @type {number}
	         * @default 0
	         */
	        zlevel: 0,

	        /**
	         * 是否可拖拽
	         * @name module:/zrender/graphic/Displayable#draggable
	         * @type {boolean}
	         * @default false
	         */
	        draggable: false,

	        /**
	         * 是否正在拖拽
	         * @name module:/zrender/graphic/Displayable#draggable
	         * @type {boolean}
	         * @default false
	         */
	        dragging: false,

	        /**
	         * 是否相应鼠标事件
	         * @name module:/zrender/graphic/Displayable#silent
	         * @type {boolean}
	         * @default false
	         */
	        silent: false,

	        /**
	         * If enable culling
	         * @type {boolean}
	         * @default false
	         */
	        culling: false,

	        /**
	         * Mouse cursor when hovered
	         * @name module:/zrender/graphic/Displayable#cursor
	         * @type {string}
	         */
	        cursor: 'pointer',

	        /**
	         * If hover area is bounding rect
	         * @name module:/zrender/graphic/Displayable#rectHover
	         * @type {string}
	         */
	        rectHover: false,

	        beforeBrush: function (ctx) {},

	        afterBrush: function (ctx) {},

	        /**
	         * 图形绘制方法
	         * @param {Canvas2DRenderingContext} ctx
	         */
	        // Interface
	        brush: function (ctx) {},

	        /**
	         * 获取最小包围盒
	         * @return {module:zrender/core/BoundingRect}
	         */
	        // Interface
	        getBoundingRect: function () {},

	        /**
	         * 判断坐标 x, y 是否在图形上
	         * If displayable element contain coord x, y
	         * @param  {number} x
	         * @param  {number} y
	         * @return {boolean}
	         */
	        contain: function (x, y) {
	            return this.rectContain(x, y);
	        },

	        /**
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {
	            cb.call(context, this);
	        },

	        /**
	         * 判断坐标 x, y 是否在图形的包围盒上
	         * If bounding rect of element contain coord x, y
	         * @param  {number} x
	         * @param  {number} y
	         * @return {boolean}
	         */
	        rectContain: function (x, y) {
	            var coord = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            return rect.contain(coord[0], coord[1]);
	        },

	        /**
	         * 标记图形元素为脏，并且在下一帧重绘
	         * Mark displayable element dirty and refresh next frame
	         */
	        dirty: function () {
	            this.__dirty = true;

	            this._rect = null;

	            this.__zr && this.__zr.refresh();
	        },

	        /**
	         * 图形是否会触发事件
	         * If displayable object binded any event
	         * @return {boolean}
	         */
	        // TODO, 通过 bind 绑定的事件
	        // isSilent: function () {
	        //     return !(
	        //         this.hoverable || this.draggable
	        //         || this.onmousemove || this.onmouseover || this.onmouseout
	        //         || this.onmousedown || this.onmouseup || this.onclick
	        //         || this.ondragenter || this.ondragover || this.ondragleave
	        //         || this.ondrop
	        //     );
	        // },
	        /**
	         * Alias for animate('style')
	         * @param {boolean} loop
	         */
	        animateStyle: function (loop) {
	            return this.animate('style', loop);
	        },

	        attrKV: function (key, value) {
	            if (key !== 'style') {
	                Element.prototype.attrKV.call(this, key, value);
	            }
	            else {
	                this.style.set(value);
	            }
	        },

	        /**
	         * @param {Object|string} key
	         * @param {*} value
	         */
	        setStyle: function (key, value) {
	            this.style.set(key, value);
	            this.dirty(false);
	            return this;
	        }
	    };

	    zrUtil.inherits(Displayable, Element);

	    zrUtil.mixin(Displayable, RectText);
	    // zrUtil.mixin(Displayable, Stateful);

	    module.exports = Displayable;


/***/ },
/* 154 */
/***/ function(module, exports) {

	/**
	 * @module zrender/graphic/Style
	 */



	    var STYLE_LIST_COMMON = [
	        'lineCap', 'lineJoin', 'miterLimit',
	        'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'shadowColor'
	    ];

	    var Style = function (opts) {
	        this.extendFrom(opts);
	    };

	    Style.prototype = {

	        constructor: Style,

	        /**
	         * @type {string}
	         */
	        fill: '#000000',

	        /**
	         * @type {string}
	         */
	        stroke: null,

	        /**
	         * @type {number}
	         */
	        opacity: 1,

	        /**
	         * @type {Array.<number>}
	         */
	        lineDash: null,

	        /**
	         * @type {number}
	         */
	        lineDashOffset: 0,

	        /**
	         * @type {number}
	         */
	        shadowBlur: 0,

	        /**
	         * @type {number}
	         */
	        shadowOffsetX: 0,

	        /**
	         * @type {number}
	         */
	        shadowOffsetY: 0,

	        /**
	         * @type {number}
	         */
	        lineWidth: 1,

	        /**
	         * If stroke ignore scale
	         * @type {Boolean}
	         */
	        strokeNoScale: false,

	        // Bounding rect text configuration
	        // Not affected by element transform
	        /**
	         * @type {string}
	         */
	        text: null,

	        /**
	         * @type {string}
	         */
	        textFill: '#000',

	        /**
	         * @type {string}
	         */
	        textStroke: null,

	        /**
	         * 'inside', 'left', 'right', 'top', 'bottom'
	         * [x, y]
	         * @type {string|Array.<number>}
	         * @default 'inside'
	         */
	        textPosition: 'inside',

	        /**
	         * @type {string}
	         */
	        textBaseline: null,

	        /**
	         * @type {string}
	         */
	        textAlign: null,

	        /**
	         * @type {string}
	         */
	        textVerticalAlign: null,

	        /**
	         * @type {number}
	         */
	        textDistance: 5,

	        /**
	         * @type {number}
	         */
	        textShadowBlur: 0,

	        /**
	         * @type {number}
	         */
	        textShadowOffsetX: 0,

	        /**
	         * @type {number}
	         */
	        textShadowOffsetY: 0,

	        /**
	         * @param {CanvasRenderingContext2D} ctx
	         */
	        bind: function (ctx, el) {
	            var fill = this.fill;
	            var stroke = this.stroke;
	            for (var i = 0; i < STYLE_LIST_COMMON.length; i++) {
	                var styleName = STYLE_LIST_COMMON[i];

	                if (this[styleName] != null) {
	                    ctx[styleName] = this[styleName];
	                }
	            }
	            if (stroke != null) {
	                var lineWidth = this.lineWidth;
	                ctx.lineWidth = lineWidth / (
	                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1
	                );
	            }
	            if (fill != null) {
	                 // Use canvas gradient if has
	                ctx.fillStyle = fill.canvasGradient ? fill.canvasGradient : fill;
	            }
	            if (stroke != null) {
	                 // Use canvas gradient if has
	                ctx.strokeStyle = stroke.canvasGradient ? stroke.canvasGradient : stroke;
	            }
	            this.opacity != null && (ctx.globalAlpha = this.opacity);
	        },

	        /**
	         * Extend from other style
	         * @param {zrender/graphic/Style} otherStyle
	         * @param {boolean} overwrite
	         */
	        extendFrom: function (otherStyle, overwrite) {
	            if (otherStyle) {
	                var target = this;
	                for (var name in otherStyle) {
	                    if (otherStyle.hasOwnProperty(name)
	                        && (overwrite || ! target.hasOwnProperty(name))
	                    ) {
	                        target[name] = otherStyle[name];
	                    }
	                }
	            }
	        },

	        /**
	         * Batch setting style with a given object
	         * @param {Object|string} obj
	         * @param {*} [obj]
	         */
	        set: function (obj, value) {
	            if (typeof obj === 'string') {
	                this[obj] = value;
	            }
	            else {
	                this.extendFrom(obj, true);
	            }
	        },

	        /**
	         * Clone
	         * @return {zrender/graphic/Style} [description]
	         */
	        clone: function () {
	            var newStyle = new this.constructor();
	            newStyle.extendFrom(this, true);
	            return newStyle;
	        }
	    };

	    var styleProto = Style.prototype;
	    var name;
	    var i;
	    for (i = 0; i < STYLE_LIST_COMMON.length; i++) {
	        name = STYLE_LIST_COMMON[i];
	        if (!(name in styleProto)) {
	            styleProto[name] = null;
	        }
	    }

	    module.exports = Style;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */



	    var textContain = __webpack_require__(122);
	    var BoundingRect = __webpack_require__(123);

	    var tmpRect = new BoundingRect();

	    var RectText = function () {};

	    function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    }

	    function setTransform(ctx, m) {
	        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	    }

	    RectText.prototype = {

	        constructor: RectText,

	        /**
	         * Draw text in a rect with specified position.
	         * @param  {CanvasRenderingContext} ctx
	         * @param  {Object} rect Displayable rect
	         * @return {Object} textRect Alternative precalculated text bounding rect
	         */
	        drawRectText: function (ctx, rect, textRect) {
	            var style = this.style;
	            var text = style.text;
	            // Convert to string
	            text != null && (text += '');
	            if (!text) {
	                return;
	            }
	            var x;
	            var y;
	            var textPosition = style.textPosition;
	            var distance = style.textDistance;
	            var align = style.textAlign;
	            var font = style.textFont || style.font;
	            var baseline = style.textBaseline;
	            var verticalAlign = style.textVerticalAlign;

	            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

	            // Transform rect to view space
	            var transform = this.transform;
	            var invTransform = this.invTransform;
	            if (transform) {
	                tmpRect.copy(rect);
	                tmpRect.applyTransform(transform);
	                rect = tmpRect;
	                // Transform back
	                setTransform(ctx, invTransform);
	            }

	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                // Percent
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);
	                align = align || 'left';
	                baseline = baseline || 'top';
	            }
	            else {
	                var res = textContain.adjustTextPositionOnRect(
	                    textPosition, rect, textRect, distance
	                );
	                x = res.x;
	                y = res.y;
	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }

	            ctx.textAlign = align;
	            if (verticalAlign) {
	                switch (verticalAlign) {
	                    case 'middle':
	                        y -= textRect.height / 2;
	                        break;
	                    case 'bottom':
	                        y -= textRect.height;
	                        break;
	                    // 'top'
	                }
	                // Ignore baseline
	                ctx.textBaseline = 'top';
	            }
	            else {
	                ctx.textBaseline = baseline;
	            }

	            var textFill = style.textFill;
	            var textStroke = style.textStroke;
	            textFill && (ctx.fillStyle = textFill);
	            textStroke && (ctx.strokeStyle = textStroke);
	            ctx.font = font;

	            // Text shadow
	            ctx.shadowColor = style.textShadowColor;
	            ctx.shadowBlur = style.textShadowBlur;
	            ctx.shadowOffsetX = style.textShadowOffsetX;
	            ctx.shadowOffsetY = style.textShadowOffsetY;

	            var textLines = text.split('\n');
	            for (var i = 0; i < textLines.length; i++) {
	                textFill && ctx.fillText(textLines[i], x, y);
	                textStroke && ctx.strokeText(textLines[i], x, y);
	                y += textRect.lineHeight;
	            }

	            // Transform again
	            transform && setTransform(ctx, transform);
	        }
	    };

	    module.exports = RectText;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */

	 // TODO getTotalLength, getPointAtLength


	    var curve = __webpack_require__(157);
	    var vec2 = __webpack_require__(124);
	    var bbox = __webpack_require__(158);
	    var BoundingRect = __webpack_require__(123);

	    var CMD = {
	        M: 1,
	        L: 2,
	        C: 3,
	        Q: 4,
	        A: 5,
	        Z: 6,
	        // Rect
	        R: 7
	    };

	    var min = [];
	    var max = [];
	    var min2 = [];
	    var max2 = [];
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathCos = Math.cos;
	    var mathSin = Math.sin;
	    var mathSqrt = Math.sqrt;

	    var hasTypedArray = typeof Float32Array != 'undefined';

	    /**
	     * @alias module:zrender/core/PathProxy
	     * @constructor
	     */
	    var PathProxy = function () {

	        /**
	         * Path data. Stored as flat array
	         * @type {Array.<Object>}
	         */
	        this.data = [];

	        this._len = 0;

	        this._ctx = null;

	        this._xi = 0;
	        this._yi = 0;

	        this._x0 = 0;
	        this._y0 = 0;
	    };

	    /**
	     * 快速计算Path包围盒（并不是最小包围盒）
	     * @return {Object}
	     */
	    PathProxy.prototype = {

	        constructor: PathProxy,

	        _lineDash: null,

	        _dashOffset: 0,

	        _dashIdx: 0,

	        _dashSum: 0,

	        getContext: function () {
	            return this._ctx;
	        },

	        /**
	         * @param  {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        beginPath: function (ctx) {
	            this._ctx = ctx;

	            ctx && ctx.beginPath();

	            // Reset
	            this._len = 0;

	            if (this._lineDash) {
	                this._lineDash = null;

	                this._dashOffset = 0;
	            }

	            return this;
	        },

	        /**
	         * @param  {number} x
	         * @param  {number} y
	         * @return {module:zrender/core/PathProxy}
	         */
	        moveTo: function (x, y) {
	            this.addData(CMD.M, x, y);
	            this._ctx && this._ctx.moveTo(x, y);

	            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	            this._x0 = x;
	            this._y0 = y;

	            this._xi = x;
	            this._yi = y;

	            return this;
	        },

	        /**
	         * @param  {number} x
	         * @param  {number} y
	         * @return {module:zrender/core/PathProxy}
	         */
	        lineTo: function (x, y) {
	            this.addData(CMD.L, x, y);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedLineTo(x, y)
	                    : this._ctx.lineTo(x, y);
	            }
	            this._xi = x;
	            this._yi = y;
	            return this;
	        },

	        /**
	         * @param  {number} x1
	         * @param  {number} y1
	         * @param  {number} x2
	         * @param  {number} y2
	         * @param  {number} x3
	         * @param  {number} y3
	         * @return {module:zrender/core/PathProxy}
	         */
	        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)
	                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	            }
	            this._xi = x3;
	            this._yi = y3;
	            return this;
	        },

	        /**
	         * @param  {number} x1
	         * @param  {number} y1
	         * @param  {number} x2
	         * @param  {number} y2
	         * @return {module:zrender/core/PathProxy}
	         */
	        quadraticCurveTo: function (x1, y1, x2, y2) {
	            this.addData(CMD.Q, x1, y1, x2, y2);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)
	                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	            }
	            this._xi = x2;
	            this._yi = y2;
	            return this;
	        },

	        /**
	         * @param  {number} cx
	         * @param  {number} cy
	         * @param  {number} r
	         * @param  {number} startAngle
	         * @param  {number} endAngle
	         * @param  {boolean} anticlockwise
	         * @return {module:zrender/core/PathProxy}
	         */
	        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	            this.addData(
	                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1
	            );
	            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);

	            this._xi = mathCos(endAngle) * r + cx;
	            this._xi = mathSin(endAngle) * r + cx;
	            return this;
	        },

	        // TODO
	        arcTo: function (x1, y1, x2, y2, radius) {
	            if (this._ctx) {
	                this._ctx.arcTo(x1, y1, x2, y2, radius);
	            }
	            return this;
	        },

	        // TODO
	        rect: function (x, y, w, h) {
	            this._ctx && this._ctx.rect(x, y, w, h);
	            this.addData(CMD.R, x, y, w, h);
	            return this;
	        },

	        /**
	         * @return {module:zrender/core/PathProxy}
	         */
	        closePath: function () {
	            this.addData(CMD.Z);

	            var ctx = this._ctx;
	            var x0 = this._x0;
	            var y0 = this._y0;
	            if (ctx) {
	                this._needsDash() && this._dashedLineTo(x0, y0);
	                ctx.closePath();
	            }

	            this._xi = x0;
	            this._yi = y0;
	            return this;
	        },

	        /**
	         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	         * stroke 同样
	         * @param {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        fill: function (ctx) {
	            ctx && ctx.fill();
	            this.toStatic();
	        },

	        /**
	         * @param {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        stroke: function (ctx) {
	            ctx && ctx.stroke();
	            this.toStatic();
	        },

	        /**
	         * 必须在其它绘制命令前调用
	         * Must be invoked before all other path drawing methods
	         * @return {module:zrender/core/PathProxy}
	         */
	        setLineDash: function (lineDash) {
	            if (lineDash instanceof Array) {
	                this._lineDash = lineDash;

	                this._dashIdx = 0;

	                var lineDashSum = 0;
	                for (var i = 0; i < lineDash.length; i++) {
	                    lineDashSum += lineDash[i];
	                }
	                this._dashSum = lineDashSum;
	            }
	            return this;
	        },

	        /**
	         * 必须在其它绘制命令前调用
	         * Must be invoked before all other path drawing methods
	         * @return {module:zrender/core/PathProxy}
	         */
	        setLineDashOffset: function (offset) {
	            this._dashOffset = offset;
	            return this;
	        },

	        /**
	         *
	         * @return {boolean}
	         */
	        len: function () {
	            return this._len;
	        },

	        /**
	         * 直接设置 Path 数据
	         */
	        setData: function (data) {

	            var len = data.length;

	            if (! (this.data && this.data.length == len) && hasTypedArray) {
	                this.data = new Float32Array(len);
	            }

	            for (var i = 0; i < len; i++) {
	                this.data[i] = data[i];
	            }

	            this._len = len;
	        },

	        /**
	         * 添加子路径
	         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	         */
	        appendPath: function (path) {
	            if (!(path instanceof Array)) {
	                path = [path];
	            }
	            var len = path.length;
	            var appendSize = 0;
	            var offset = this._len;
	            for (var i = 0; i < len; i++) {
	                appendSize += path[i].len();
	            }
	            if (hasTypedArray && (this.data instanceof Float32Array)) {
	                this.data = new Float32Array(offset + appendSize);
	            }
	            for (var i = 0; i < len; i++) {
	                var appendPathData = path[i].data;
	                for (var k = 0; k < appendPathData.length; k++) {
	                    this.data[offset++] = appendPathData[k];
	                }
	            }
	            this._len = offset;
	        },

	        /**
	         * 填充 Path 数据。
	         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	         */
	        addData: function (cmd) {
	            var data = this.data;
	            if (this._len + arguments.length > data.length) {
	                // 因为之前的数组已经转换成静态的 Float32Array
	                // 所以不够用时需要扩展一个新的动态数组
	                this._expandData();
	                data = this.data;
	            }
	            for (var i = 0; i < arguments.length; i++) {
	                data[this._len++] = arguments[i];
	            }

	            this._prevCmd = cmd;
	        },

	        _expandData: function () {
	            // Only if data is Float32Array
	            if (!(this.data instanceof Array)) {
	                var newData = [];
	                for (var i = 0; i < this._len; i++) {
	                    newData[i] = this.data[i];
	                }
	                this.data = newData;
	            }
	        },

	        /**
	         * If needs js implemented dashed line
	         * @return {boolean}
	         * @private
	         */
	        _needsDash: function () {
	            return this._lineDash;
	        },

	        _dashedLineTo: function (x1, y1) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;

	            var x0 = this._xi;
	            var y0 = this._yi;
	            var dx = x1 - x0;
	            var dy = y1 - y0;
	            var dist = mathSqrt(dx * dx + dy * dy);
	            var x = x0;
	            var y = y0;
	            var dash;
	            var nDash = lineDash.length;
	            var idx;
	            dx /= dist;
	            dy /= dist;

	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            x -= offset * dx;
	            y -= offset * dy;

	            while ((dx >= 0 && x <= x1) || (dx < 0 && x > x1)) {
	                idx = this._dashIdx;
	                dash = lineDash[idx];
	                x += dx * dash;
	                y += dy * dash;
	                this._dashIdx = (idx + 1) % nDash;
	                // Skip positive offset
	                if ((dx > 0 && x < x0) || (dx < 0 && x > x0)) {
	                    continue;
	                }
	                ctx[idx % 2 ? 'moveTo' : 'lineTo'](
	                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),
	                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)
	                );
	            }
	            // Offset for next lineTo
	            dx = x - x1;
	            dy = y - y1;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },

	        // Not accurate dashed line to
	        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;

	            var x0 = this._xi;
	            var y0 = this._yi;
	            var t;
	            var dx;
	            var dy;
	            var cubicAt = curve.cubicAt;
	            var bezierLen = 0;
	            var idx = this._dashIdx;
	            var nDash = lineDash.length;

	            var x;
	            var y;

	            var tmpLen = 0;

	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            // Bezier approx length
	            for (t = 0; t < 1; t += 0.1) {
	                dx = cubicAt(x0, x1, x2, x3, t + 0.1)
	                    - cubicAt(x0, x1, x2, x3, t);
	                dy = cubicAt(y0, y1, y2, y3, t + 0.1)
	                    - cubicAt(y0, y1, y2, y3, t);
	                bezierLen += mathSqrt(dx * dx + dy * dy);
	            }

	            // Find idx after add offset
	            for (; idx < nDash; idx++) {
	                tmpLen += lineDash[idx];
	                if (tmpLen > offset) {
	                    break;
	                }
	            }
	            t = (tmpLen - offset) / bezierLen;

	            while (t <= 1) {

	                x = cubicAt(x0, x1, x2, x3, t);
	                y = cubicAt(y0, y1, y2, y3, t);

	                // Use line to approximate dashed bezier
	                // Bad result if dash is long
	                idx % 2 ? ctx.moveTo(x, y)
	                    : ctx.lineTo(x, y);

	                t += lineDash[idx] / bezierLen;

	                idx = (idx + 1) % nDash;
	            }

	            // Finish the last segment and calculate the new offset
	            (idx % 2 !== 0) && ctx.lineTo(x3, y3);
	            dx = x3 - x;
	            dy = y3 - y;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },

	        _dashedQuadraticTo: function (x1, y1, x2, y2) {
	            // Convert quadratic to cubic using degree elevation
	            var x3 = x2;
	            var y3 = y2;
	            x2 = (x2 + 2 * x1) / 3;
	            y2 = (y2 + 2 * y1) / 3;
	            x1 = (this._xi + 2 * x1) / 3;
	            y1 = (this._yi + 2 * y1) / 3;

	            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	        },

	        /**
	         * 转成静态的 Float32Array 减少堆内存占用
	         * Convert dynamic array to static Float32Array
	         */
	        toStatic: function () {
	            var data = this.data;
	            if (data instanceof Array) {
	                data.length = this._len;
	                if (hasTypedArray) {
	                    this.data = new Float32Array(data);
	                }
	            }
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function () {
	            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;

	            var data = this.data;
	            var xi = 0;
	            var yi = 0;
	            var x0 = 0;
	            var y0 = 0;

	            for (var i = 0; i < data.length;) {
	                var cmd = data[i++];

	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = data[i];
	                    yi = data[i + 1];

	                    x0 = xi;
	                    y0 = yi;
	                }

	                switch (cmd) {
	                    case CMD.M:
	                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                        // 在 closePath 的时候使用
	                        x0 = data[i++];
	                        y0 = data[i++];
	                        xi = x0;
	                        yi = y0;
	                        min2[0] = x0;
	                        min2[1] = y0;
	                        max2[0] = x0;
	                        max2[1] = y0;
	                        break;
	                    case CMD.L:
	                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.C:
	                        bbox.fromCubic(
	                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            min2, max2
	                        );
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.Q:
	                        bbox.fromQuadratic(
	                            xi, yi, data[i++], data[i++], data[i], data[i + 1],
	                            min2, max2
	                        );
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.A:
	                        // TODO Arc 判断的开销比较大
	                        var cx = data[i++];
	                        var cy = data[i++];
	                        var rx = data[i++];
	                        var ry = data[i++];
	                        var startAngle = data[i++];
	                        var endAngle = data[i++] + startAngle;
	                        // TODO Arc 旋转
	                        var psi = data[i++];
	                        var anticlockwise = 1 - data[i++];

	                        if (i == 1) {
	                            // 直接使用 arc 命令
	                            // 第一个命令起点还未定义
	                            x0 = mathCos(startAngle) * rx + cx;
	                            y0 = mathSin(startAngle) * ry + cy;
	                        }

	                        bbox.fromArc(
	                            cx, cy, rx, ry, startAngle, endAngle,
	                            anticlockwise, min2, max2
	                        );

	                        xi = mathCos(endAngle) * rx + cx;
	                        yi = mathSin(endAngle) * ry + cy;
	                        break;
	                    case CMD.R:
	                        x0 = xi = data[i++];
	                        y0 = yi = data[i++];
	                        var width = data[i++];
	                        var height = data[i++];
	                        // Use fromLine
	                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	                        break;
	                    case CMD.Z:
	                        xi = x0;
	                        yi = y0;
	                        break;
	                }

	                // Union
	                vec2.min(min, min, min2);
	                vec2.max(max, max, max2);
	            }

	            // No data
	            if (i === 0) {
	                min[0] = min[1] = max[0] = max[1] = 0;
	            }

	            return new BoundingRect(
	                min[0], min[1], max[0] - min[0], max[1] - min[1]
	            );
	        },

	        /**
	         * Rebuild path from current data
	         * Rebuild path will not consider javascript implemented line dash.
	         * @param {CanvasRenderingContext} ctx
	         */
	        rebuildPath: function (ctx) {
	            var d = this.data;
	            for (var i = 0; i < this._len;) {
	                var cmd = d[i++];
	                switch (cmd) {
	                    case CMD.M:
	                        ctx.moveTo(d[i++], d[i++]);
	                        break;
	                    case CMD.L:
	                        ctx.lineTo(d[i++], d[i++]);
	                        break;
	                    case CMD.C:
	                        ctx.bezierCurveTo(
	                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]
	                        );
	                        break;
	                    case CMD.Q:
	                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	                        break;
	                    case CMD.A:
	                        var cx = d[i++];
	                        var cy = d[i++];
	                        var rx = d[i++];
	                        var ry = d[i++];
	                        var theta = d[i++];
	                        var dTheta = d[i++];
	                        var psi = d[i++];
	                        var fs = d[i++];
	                        var r = (rx > ry) ? rx : ry;
	                        var scaleX = (rx > ry) ? 1 : rx / ry;
	                        var scaleY = (rx > ry) ? ry / rx : 1;
	                        var isEllipse = Math.abs(rx - ry) > 1e-3;
	                        if (isEllipse) {
	                            ctx.translate(cx, cy);
	                            ctx.rotate(psi);
	                            ctx.scale(scaleX, scaleY);
	                            ctx.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	                            ctx.scale(1 / scaleX, 1 / scaleY);
	                            ctx.rotate(-psi);
	                            ctx.translate(-cx, -cy);
	                        }
	                        else {
	                            ctx.arc(cx, cy, r, theta, theta + dTheta, 1 - fs);
	                        }
	                        break;
	                    case CMD.R:
	                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	                        break;
	                    case CMD.Z:
	                        ctx.closePath();
	                }
	            }
	        }
	    };

	    PathProxy.CMD = CMD;

	    module.exports = PathProxy;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */


	    var vec2 = __webpack_require__(124);
	    var v2Create = vec2.create;
	    var v2DistSquare = vec2.distSquare;
	    var mathPow = Math.pow;
	    var mathSqrt = Math.sqrt;

	    var EPSILON = 1e-8;
	    var EPSILON_NUMERIC = 1e-4;

	    var THREE_SQRT = mathSqrt(3);
	    var ONE_THIRD = 1 / 3;

	    // 临时变量
	    var _v0 = v2Create();
	    var _v1 = v2Create();
	    var _v2 = v2Create();
	    // var _v3 = vec2.create();

	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /**
	     * 计算三次贝塞尔值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p0 + 3 * t * p1)
	             + t * t * (t * p3 + 3 * onet * p2);
	    }

	    /**
	     * 计算三次贝塞尔导数值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (
	            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet
	            + (p3 - p2) * t * t
	        );
	    }

	    /**
	     * 计算三次贝塞尔方程根，使用盛金公式
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} val
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function cubicRootAt(p0, p1, p2, p3, val, roots) {
	        // Evaluate roots of cubic functions
	        var a = p3 + 3 * (p1 - p2) - p0;
	        var b = 3 * (p2 - p1 * 2 + p0);
	        var c = 3 * (p1  - p0);
	        var d = p0 - val;

	        var A = b * b - 3 * a * c;
	        var B = b * c - 9 * a * d;
	        var C = c * c - 3 * b * d;

	        var n = 0;

	        if (isAroundZero(A) && isAroundZero(B)) {
	            if (isAroundZero(b)) {
	                roots[0] = 0;
	            }
	            else {
	                var t1 = -c / b;  //t1, t2, t3, b is not zero
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = B * B - 4 * A * C;

	            if (isAroundZero(disc)) {
	                var K = B / A;
	                var t1 = -b / a + K;  // t1, a is not zero
	                var t2 = -K / 2;  // t2, t3
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	                if (Y1 < 0) {
	                    Y1 = -mathPow(-Y1, ONE_THIRD);
	                }
	                else {
	                    Y1 = mathPow(Y1, ONE_THIRD);
	                }
	                if (Y2 < 0) {
	                    Y2 = -mathPow(-Y2, ONE_THIRD);
	                }
	                else {
	                    Y2 = mathPow(Y2, ONE_THIRD);
	                }
	                var t1 = (-b - (Y1 + Y2)) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else {
	                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	                var theta = Math.acos(T) / 3;
	                var ASqrt = mathSqrt(A);
	                var tmp = Math.cos(theta);

	                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	                if (t3 >= 0 && t3 <= 1) {
	                    roots[n++] = t3;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 计算三次贝塞尔方程极限值的位置
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {Array.<number>} extrema
	     * @return {number} 有效数目
	     */
	    function cubicExtrema(p0, p1, p2, p3, extrema) {
	        var b = 6 * p2 - 12 * p1 + 6 * p0;
	        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	        var c = 3 * p1 - 3 * p0;

	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <=1) {
	                    extrema[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                extrema[0] = -b / (2 * a);
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    extrema[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 细分三次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function cubicSubdivide(p0, p1, p2, p3, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p23 = (p3 - p2) * t + p2;

	        var p012 = (p12 - p01) * t + p01;
	        var p123 = (p23 - p12) * t + p12;

	        var p0123 = (p123 - p012) * t + p012;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        out[3] = p0123;
	        // Seg1
	        out[4] = p0123;
	        out[5] = p123;
	        out[6] = p23;
	        out[7] = p3;
	    }

	    /**
	     * 投射点到三次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} [out] 投射点
	     * @return {number}
	     */
	    function cubicProjectPoint(
	        x0, y0, x1, y1, x2, y2, x3, y3,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	        var prev;
	        var next;
	        var d1;
	        var d2;

	        _v0[0] = x;
	        _v0[1] = y;

	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	            d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;

	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            prev = t - interval;
	            next = t + interval;
	            // t - interval
	            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	            _v1[1] = cubicAt(y0, y1, y2, y3, prev);

	            d1 = v2DistSquare(_v1, _v0);

	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = cubicAt(x0, x1, x2, x3, next);
	                _v2[1] = cubicAt(y0, y1, y2, y3, next);
	                d2 = v2DistSquare(_v2, _v0);

	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = cubicAt(x0, x1, x2, x3, t);
	            out[1] = cubicAt(y0, y1, y2, y3, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }

	    /**
	     * 计算二次方贝塞尔值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	    }

	    /**
	     * 计算二次方贝塞尔导数值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticDerivativeAt(p0, p1, p2, t) {
	        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	    }

	    /**
	     * 计算二次方贝塞尔方程根
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function quadraticRootAt(p0, p1, p2, val, roots) {
	        var a = p0 - 2 * p1 + p2;
	        var b = 2 * (p1 - p0);
	        var c = p0 - val;

	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                var t1 = -b / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 计算二次贝塞尔方程极限值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @return {number}
	     */
	    function quadraticExtremum(p0, p1, p2) {
	        var divider = p0 + p2 - 2 * p1;
	        if (divider === 0) {
	            // p1 is center of p0 and p2
	            return 0.5;
	        }
	        else {
	            return (p0 - p1) / divider;
	        }
	    }

	    /**
	     * 细分二次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function quadraticSubdivide(p0, p1, p2, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p012 = (p12 - p01) * t + p01;

	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;

	        // Seg1
	        out[3] = p012;
	        out[4] = p12;
	        out[5] = p2;
	    }

	    /**
	     * 投射点到二次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} out 投射点
	     * @return {number}
	     */
	    function quadraticProjectPoint(
	        x0, y0, x1, y1, x2, y2,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;

	        _v0[0] = x;
	        _v0[1] = y;

	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = quadraticAt(x0, x1, x2, _t);
	            _v1[1] = quadraticAt(y0, y1, y2, _t);
	            var d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;

	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = quadraticAt(x0, x1, x2, prev);
	            _v1[1] = quadraticAt(y0, y1, y2, prev);

	            var d1 = v2DistSquare(_v1, _v0);

	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = quadraticAt(x0, x1, x2, next);
	                _v2[1] = quadraticAt(y0, y1, y2, next);
	                var d2 = v2DistSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = quadraticAt(x0, x1, x2, t);
	            out[1] = quadraticAt(y0, y1, y2, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }

	    module.exports = {

	        cubicAt: cubicAt,

	        cubicDerivativeAt: cubicDerivativeAt,

	        cubicRootAt: cubicRootAt,

	        cubicExtrema: cubicExtrema,

	        cubicSubdivide: cubicSubdivide,

	        cubicProjectPoint: cubicProjectPoint,

	        quadraticAt: quadraticAt,

	        quadraticDerivativeAt: quadraticDerivativeAt,

	        quadraticRootAt: quadraticRootAt,

	        quadraticExtremum: quadraticExtremum,

	        quadraticSubdivide: quadraticSubdivide,

	        quadraticProjectPoint: quadraticProjectPoint
	    };


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */


	    var vec2 = __webpack_require__(124);
	    var curve = __webpack_require__(157);

	    var bbox = {};
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;

	    var start = vec2.create();
	    var end = vec2.create();
	    var extremity = vec2.create();

	    var PI2 = Math.PI * 2;
	    /**
	     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	     * @module zrender/core/bbox
	     * @param {Array<Object>} points 顶点数组
	     * @param {number} min
	     * @param {number} max
	     */
	    bbox.fromPoints = function(points, min, max) {
	        if (points.length === 0) {
	            return;
	        }
	        var p = points[0];
	        var left = p[0];
	        var right = p[0];
	        var top = p[1];
	        var bottom = p[1];
	        var i;

	        for (i = 1; i < points.length; i++) {
	            p = points[i];
	            left = mathMin(left, p[0]);
	            right = mathMax(right, p[0]);
	            top = mathMin(top, p[1]);
	            bottom = mathMax(bottom, p[1]);
	        }

	        min[0] = left;
	        min[1] = top;
	        max[0] = right;
	        max[1] = bottom;
	    };

	    /**
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromLine = function (x0, y0, x1, y1, min, max) {
	        min[0] = mathMin(x0, x1);
	        min[1] = mathMin(y0, y1);
	        max[0] = mathMax(x0, x1);
	        max[1] = mathMax(y0, y1);
	    };

	    var xDim = [];
	    var yDim = [];
	    /**
	     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromCubic = function(
	        x0, y0, x1, y1, x2, y2, x3, y3, min, max
	    ) {
	        var cubicExtrema = curve.cubicExtrema;
	        var cubicAt = curve.cubicAt;
	        var i;
	        var n = cubicExtrema(x0, x1, x2, x3, xDim);
	        min[0] = Infinity;
	        min[1] = Infinity;
	        max[0] = -Infinity;
	        max[1] = -Infinity;

	        for (i = 0; i < n; i++) {
	            var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	            min[0] = mathMin(x, min[0]);
	            max[0] = mathMax(x, max[0]);
	        }
	        n = cubicExtrema(y0, y1, y2, y3, yDim);
	        for (i = 0; i < n; i++) {
	            var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	            min[1] = mathMin(y, min[1]);
	            max[1] = mathMax(y, max[1]);
	        }

	        min[0] = mathMin(x0, min[0]);
	        max[0] = mathMax(x0, max[0]);
	        min[0] = mathMin(x3, min[0]);
	        max[0] = mathMax(x3, max[0]);

	        min[1] = mathMin(y0, min[1]);
	        max[1] = mathMax(y0, max[1]);
	        min[1] = mathMin(y3, min[1]);
	        max[1] = mathMax(y3, max[1]);
	    };

	    /**
	     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {
	        var quadraticExtremum = curve.quadraticExtremum;
	        var quadraticAt = curve.quadraticAt;
	        // Find extremities, where derivative in x dim or y dim is zero
	        var tx =
	            mathMax(
	                mathMin(quadraticExtremum(x0, x1, x2), 1), 0
	            );
	        var ty =
	            mathMax(
	                mathMin(quadraticExtremum(y0, y1, y2), 1), 0
	            );

	        var x = quadraticAt(x0, x1, x2, tx);
	        var y = quadraticAt(y0, y1, y2, ty);

	        min[0] = mathMin(x0, x2, x);
	        min[1] = mathMin(y0, y2, y);
	        max[0] = mathMax(x0, x2, x);
	        max[1] = mathMax(y0, y2, y);
	    };

	    /**
	     * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	     * @method
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x
	     * @param {number} y
	     * @param {number} rx
	     * @param {number} ry
	     * @param {number} startAngle
	     * @param {number} endAngle
	     * @param {number} anticlockwise
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromArc = function (
	        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max
	    ) {
	        var vec2Min = vec2.min;
	        var vec2Max = vec2.max;

	        var diff = Math.abs(startAngle - endAngle);


	        if (diff % PI2 < 1e-4 && diff > 1e-4) {
	            // Is a circle
	            min[0] = x - rx;
	            min[1] = y - ry;
	            max[0] = x + rx;
	            max[1] = y + ry;
	            return;
	        }

	        start[0] = mathCos(startAngle) * rx + x;
	        start[1] = mathSin(startAngle) * ry + y;

	        end[0] = mathCos(endAngle) * rx + x;
	        end[1] = mathSin(endAngle) * ry + y;

	        vec2Min(min, start, end);
	        vec2Max(max, start, end);

	        // Thresh to [0, Math.PI * 2]
	        startAngle = startAngle % (PI2);
	        if (startAngle < 0) {
	            startAngle = startAngle + PI2;
	        }
	        endAngle = endAngle % (PI2);
	        if (endAngle < 0) {
	            endAngle = endAngle + PI2;
	        }

	        if (startAngle > endAngle && !anticlockwise) {
	            endAngle += PI2;
	        }
	        else if (startAngle < endAngle && anticlockwise) {
	            startAngle += PI2;
	        }
	        if (anticlockwise) {
	            var tmp = endAngle;
	            endAngle = startAngle;
	            startAngle = tmp;
	        }

	        // var number = 0;
	        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	            if (angle > startAngle) {
	                extremity[0] = mathCos(angle) * rx + x;
	                extremity[1] = mathSin(angle) * ry + y;

	                vec2Min(min, extremity, min);
	                vec2Max(max, extremity, max);
	            }
	        }
	    };

	    module.exports = bbox;



/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var CMD = __webpack_require__(156).CMD;
	    var line = __webpack_require__(160);
	    var cubic = __webpack_require__(161);
	    var quadratic = __webpack_require__(162);
	    var arc = __webpack_require__(163);
	    var normalizeRadian = __webpack_require__(164).normalizeRadian;
	    var curve = __webpack_require__(157);

	    var windingLine = __webpack_require__(165);

	    var containStroke = line.containStroke;

	    var PI2 = Math.PI * 2;

	    var EPSILON = 1e-4;

	    function isAroundEqual(a, b) {
	        return Math.abs(a - b) < EPSILON;
	    }

	    // 临时数组
	    var roots = [-1, -1, -1];
	    var extrema = [-1, -1];

	    function swapExtrema() {
	        var tmp = extrema[0];
	        extrema[0] = extrema[1];
	        extrema[1] = tmp;
	    }

	    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	        // Quick reject
	        if (
	            (y > y0 && y > y1 && y > y2 && y > y3)
	            || (y < y0 && y < y1 && y < y2 && y < y3)
	        ) {
	            return 0;
	        }
	        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        }
	        else {
	            var w = 0;
	            var nExtrema = -1;
	            var y0_, y1_;
	            for (var i = 0; i < nRoots; i++) {
	                var t = roots[i];
	                var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	                if (x_ < x) { // Quick reject
	                    continue;
	                }
	                if (nExtrema < 0) {
	                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                    if (extrema[1] < extrema[0] && nExtrema > 1) {
	                        swapExtrema();
	                    }
	                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                    if (nExtrema > 1) {
	                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                    }
	                }
	                if (nExtrema == 2) {
	                    // 分成三段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? 1 : -1;
	                    }
	                    else if (t < extrema[1]) {
	                        w += y1_ < y0_ ? 1 : -1;
	                    }
	                    else {
	                        w += y3 < y1_ ? 1 : -1;
	                    }
	                }
	                else {
	                    // 分成两段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? 1 : -1;
	                    }
	                    else {
	                        w += y3 < y0_ ? 1 : -1;
	                    }
	                }
	            }
	            return w;
	        }
	    }

	    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	        // Quick reject
	        if (
	            (y > y0 && y > y1 && y > y2)
	            || (y < y0 && y < y1 && y < y2)
	        ) {
	            return 0;
	        }
	        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        }
	        else {
	            var t = curve.quadraticExtremum(y0, y1, y2);
	            if (t >= 0 && t <= 1) {
	                var w = 0;
	                var y_ = curve.quadraticAt(y0, y1, y2, t);
	                for (var i = 0; i < nRoots; i++) {
	                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                    if (x_ < x) {   // Quick reject
	                        continue;
	                    }
	                    if (roots[i] < t) {
	                        w += y_ < y0 ? 1 : -1;
	                    }
	                    else {
	                        w += y2 < y_ ? 1 : -1;
	                    }
	                }
	                return w;
	            }
	            else {
	                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	                if (x_ < x) {   // Quick reject
	                    return 0;
	                }
	                return y2 < y0 ? 1 : -1;
	            }
	        }
	    }

	    // TODO
	    // Arc 旋转
	    function windingArc(
	        cx, cy, r, startAngle, endAngle, anticlockwise, x, y
	    ) {
	        y -= cy;
	        if (y > r || y < -r) {
	            return 0;
	        }
	        var tmp = Math.sqrt(r * r - y * y);
	        roots[0] = -tmp;
	        roots[1] = tmp;

	        var diff = Math.abs(startAngle - endAngle);
	        if (diff < 1e-4) {
	            return 0;
	        }
	        if (diff % PI2 < 1e-4) {
	            // Is a circle
	            startAngle = 0;
	            endAngle = PI2;
	            var dir = anticlockwise ? 1 : -1;
	            if (x >= roots[0] + cx && x <= roots[1] + cx) {
	                return dir;
	            } else {
	                return 0;
	            }
	        }

	        if (anticlockwise) {
	            var tmp = startAngle;
	            startAngle = normalizeRadian(endAngle);
	            endAngle = normalizeRadian(tmp);
	        }
	        else {
	            startAngle = normalizeRadian(startAngle);
	            endAngle = normalizeRadian(endAngle);
	        }
	        if (startAngle > endAngle) {
	            endAngle += PI2;
	        }

	        var w = 0;
	        for (var i = 0; i < 2; i++) {
	            var x_ = roots[i];
	            if (x_ + cx > x) {
	                var angle = Math.atan2(y, x_);
	                var dir = anticlockwise ? 1 : -1;
	                if (angle < 0) {
	                    angle = PI2 + angle;
	                }
	                if (
	                    (angle >= startAngle && angle <= endAngle)
	                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)
	                ) {
	                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                        dir = -dir;
	                    }
	                    w += dir;
	                }
	            }
	        }
	        return w;
	    }

	    function containPath(data, lineWidth, isStroke, x, y) {
	        var w = 0;
	        var xi = 0;
	        var yi = 0;
	        var x0 = 0;
	        var y0 = 0;

	        for (var i = 0; i < data.length;) {
	            var cmd = data[i++];
	            // Begin a new subpath
	            if (cmd === CMD.M && i > 1) {
	                // Close previous subpath
	                if (!isStroke) {
	                    w += windingLine(xi, yi, x0, y0, x, y);
	                }
	                // 如果被任何一个 subpath 包含
	                if (w !== 0) {
	                    return true;
	                }
	            }

	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = data[i];
	                yi = data[i + 1];

	                x0 = xi;
	                y0 = yi;
	            }

	            switch (cmd) {
	                case CMD.M:
	                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                    // 在 closePath 的时候使用
	                    x0 = data[i++];
	                    y0 = data[i++];
	                    xi = x0;
	                    yi = y0;
	                    break;
	                case CMD.L:
	                    if (isStroke) {
	                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.C:
	                    if (isStroke) {
	                        if (cubic.containStroke(xi, yi,
	                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingCubic(
	                            xi, yi,
	                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            x, y
	                        ) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.Q:
	                    if (isStroke) {
	                        if (quadratic.containStroke(xi, yi,
	                            data[i++], data[i++], data[i], data[i + 1],
	                            lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingQuadratic(
	                            xi, yi,
	                            data[i++], data[i++], data[i], data[i + 1],
	                            x, y
	                        ) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.A:
	                    // TODO Arc 判断的开销比较大
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var theta = data[i++];
	                    var dTheta = data[i++];
	                    // TODO Arc 旋转
	                    var psi = data[i++];
	                    var anticlockwise = 1 - data[i++];
	                    var x1 = Math.cos(theta) * rx + cx;
	                    var y1 = Math.sin(theta) * ry + cy;
	                    // 不是直接使用 arc 命令
	                    if (i > 1) {
	                        w += windingLine(xi, yi, x1, y1, x, y);
	                    }
	                    else {
	                        // 第一个命令起点还未定义
	                        x0 = x1;
	                        y0 = y1;
	                    }
	                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                    var _x = (x - cx) * ry / rx + cx;
	                    if (isStroke) {
	                        if (arc.containStroke(
	                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
	                            lineWidth, _x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingArc(
	                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
	                            _x, y
	                        );
	                    }
	                    xi = Math.cos(theta + dTheta) * rx + cx;
	                    yi = Math.sin(theta + dTheta) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = data[i++];
	                    y0 = yi = data[i++];
	                    var width = data[i++];
	                    var height = data[i++];
	                    var x1 = x0 + width;
	                    var y1 = y0 + height;
	                    if (isStroke) {
	                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)
	                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)
	                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)
	                          || containStroke(x0, y1, x1, y1, lineWidth, x, y)
	                        ) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // FIXME Clockwise ?
	                        w += windingLine(x1, y0, x1, y1, x, y);
	                        w += windingLine(x0, y1, x0, y0, x, y);
	                    }
	                    break;
	                case CMD.Z:
	                    if (isStroke) {
	                        if (containStroke(
	                            xi, yi, x0, y0, lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // Close a subpath
	                        w += windingLine(xi, yi, x0, y0, x, y);
	                        // 如果被任何一个 subpath 包含
	                        if (w !== 0) {
	                            return true;
	                        }
	                    }
	                    xi = x0;
	                    yi = y0;
	                    break;
	            }
	        }
	        if (!isStroke && !isAroundEqual(yi, y0)) {
	            w += windingLine(xi, yi, x0, y0, x, y) || 0;
	        }
	        return w !== 0;
	    }

	    module.exports = {
	        contain: function (pathData, x, y) {
	            return containPath(pathData, 0, false, x, y);
	        },

	        containStroke: function (pathData, lineWidth, x, y) {
	            return containPath(pathData, lineWidth, true, x, y);
	        }
	    };


/***/ },
/* 160 */
/***/ function(module, exports) {

	
	    module.exports = {
	        /**
	         * 线段包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l)
	                || (y < y0 - _l && y < y1 - _l)
	                || (x > x0 + _l && x > x1 + _l)
	                || (x < x0 - _l && x < x1 - _l)
	            ) {
	                return false;
	            }

	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
	            }
	            else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }
	    };


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	

	    var curve = __webpack_require__(157);

	    module.exports = {
	        /**
	         * 三次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  x3
	         * @param  {number}  y3
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)
	            ) {
	                return false;
	            }
	            var d = curve.cubicProjectPoint(
	                x0, y0, x1, y1, x2, y2, x3, y3,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	    };


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	

	    var curve = __webpack_require__(157);

	    module.exports = {
	        /**
	         * 二次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)
	            ) {
	                return false;
	            }
	            var d = curve.quadraticProjectPoint(
	                x0, y0, x1, y1, x2, y2,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	    };


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	

	    var normalizeRadian = __webpack_require__(164).normalizeRadian;
	    var PI2 = Math.PI * 2;

	    module.exports = {
	        /**
	         * 圆弧描边包含判断
	         * @param  {number}  cx
	         * @param  {number}  cy
	         * @param  {number}  r
	         * @param  {number}  startAngle
	         * @param  {number}  endAngle
	         * @param  {boolean}  anticlockwise
	         * @param  {number} lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {Boolean}
	         */
	        containStroke: function (
	            cx, cy, r, startAngle, endAngle, anticlockwise,
	            lineWidth, x, y
	        ) {

	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;

	            x -= cx;
	            y -= cy;
	            var d = Math.sqrt(x * x + y * y);

	            if ((d - _l > r) || (d + _l < r)) {
	                return false;
	            }
	            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	                // Is a circle
	                return true;
	            }
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }

	            var angle = Math.atan2(y, x);
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return (angle >= startAngle && angle <= endAngle)
	                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);
	        }
	    };


/***/ },
/* 164 */
/***/ function(module, exports) {

	

	    var PI2 = Math.PI * 2;
	    module.exports = {
	        normalizeRadian: function(angle) {
	            angle %= PI2;
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle;
	        }
	    };


/***/ },
/* 165 */
/***/ function(module, exports) {

	
	    module.exports = function windingLine(x0, y0, x1, y1, x, y) {
	        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
	            return 0;
	        }
	        if (y1 === y0) {
	            return 0;
	        }
	        var dir = y1 < y0 ? 1 : -1;
	        var t = (y - y0) / (y1 - y0);
	        var x_ = t * (x1 - x0) + x0;

	        return x_ > x ? dir : 0;
	    };


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	

	    var CMD = __webpack_require__(156).CMD;
	    var vec2 = __webpack_require__(124);
	    var v2ApplyTransform = vec2.applyTransform;

	    var points = [[], [], []];
	    var mathSqrt = Math.sqrt;
	    var mathAtan2 = Math.atan2;
	    function transformPath(path, m) {
	        var data = path.data;
	        var cmd;
	        var nPoint;
	        var i;
	        var j;
	        var k;
	        var p;

	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var R = CMD.R;
	        var A = CMD.A;
	        var Q = CMD.Q;

	        for (i = 0, j = 0; i < data.length;) {
	            cmd = data[i++];
	            j = i;
	            nPoint = 0;

	            switch (cmd) {
	                case M:
	                    nPoint = 1;
	                    break;
	                case L:
	                    nPoint = 1;
	                    break;
	                case C:
	                    nPoint = 3;
	                    break;
	                case Q:
	                    nPoint = 2;
	                    break;
	                case A:
	                    var x = m[4];
	                    var y = m[5];
	                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);
	                    // cx
	                    data[i++] += x;
	                    // cy
	                    data[i++] += y;
	                    // Scale rx and ry
	                    // FIXME Assume psi is 0 here
	                    data[i++] *= sx;
	                    data[i++] *= sy;

	                    // Start angle
	                    data[i++] += angle;
	                    // end angle
	                    data[i++] += angle;
	                    // FIXME psi
	                    i += 2;
	                    j = i;
	                    break;
	                case R:
	                    // x0, y0
	                    p[0] = data[i++];
	                    p[1] = data[i++];
	                    v2ApplyTransform(p, p, m);
	                    data[j++] = p[0];
	                    data[j++] = p[1];
	                    // x1, y1
	                    p[0] += data[i++];
	                    p[1] += data[i++];
	                    v2ApplyTransform(p, p, m);
	                    data[j++] = p[0];
	                    data[j++] = p[1];
	            }

	            for (k = 0; k < nPoint; k++) {
	                var p = points[k];
	                p[0] = data[i++];
	                p[1] = data[i++];

	                v2ApplyTransform(p, p, m);
	                // Write back
	                data[j++] = p[0];
	                data[j++] = p[1];
	            }
	        }
	    }

	    module.exports = transformPath;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Image element
	 * @module zrender/graphic/Image
	 */



	    var Displayable = __webpack_require__(153);
	    var BoundingRect = __webpack_require__(123);
	    var zrUtil = __webpack_require__(111);
	    var roundRectHelper = __webpack_require__(168);

	    var LRU = __webpack_require__(169);
	    var globalImageCache = new LRU(50);
	    /**
	     * @alias zrender/graphic/Image
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function ZImage(opts) {
	        Displayable.call(this, opts);
	    }

	    ZImage.prototype = {

	        constructor: ZImage,

	        type: 'image',

	        brush: function (ctx) {
	            var style = this.style;
	            var src = style.image;
	            var image;
	            // style.image is a url string
	            if (typeof src === 'string') {
	                image = this._image;
	            }
	            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
	            else {
	                image = src;
	            }
	            // FIXME Case create many images with src
	            if (!image && src) {
	                // Try get from global image cache
	                var cachedImgObj = globalImageCache.get(src);
	                if (!cachedImgObj) {
	                    // Create a new image
	                    image = new Image();
	                    image.onload = function () {
	                        image.onload = null;
	                        for (var i = 0; i < cachedImgObj.pending.length; i++) {
	                            cachedImgObj.pending[i].dirty();
	                        }
	                    };
	                    cachedImgObj = {
	                        image: image,
	                        pending: [this]
	                    };
	                    image.src = src;
	                    globalImageCache.put(src, cachedImgObj);
	                    this._image = image;
	                    return;
	                }
	                else {
	                    image = cachedImgObj.image;
	                    this._image = image;
	                    // Image is not complete finish, add to pending list
	                    if (!image.width || !image.height) {
	                        cachedImgObj.pending.push(this);
	                        return;
	                    }
	                }
	            }

	            if (image) {
	                // 图片已经加载完成
	                // if (image.nodeName.toUpperCase() == 'IMG') {
	                //     if (!image.complete) {
	                //         return;
	                //     }
	                // }
	                // Else is canvas

	                var width = style.width || image.width;
	                var height = style.height || image.height;
	                var x = style.x || 0;
	                var y = style.y || 0;
	                // 图片加载失败
	                if (!image.width || !image.height) {
	                    return;
	                }

	                ctx.save();

	                style.bind(ctx);

	                // 设置transform
	                this.setTransform(ctx);

	                if (style.r) {
	                    // Border radius clipping
	                    // FIXME
	                    ctx.beginPath();
	                    roundRectHelper.buildPath(ctx, style);
	                    ctx.clip();
	                }

	                if (style.sWidth && style.sHeight) {
	                    var sx = style.sx || 0;
	                    var sy = style.sy || 0;
	                    ctx.drawImage(
	                        image,
	                        sx, sy, style.sWidth, style.sHeight,
	                        x, y, width, height
	                    );
	                }
	                else if (style.sx && style.sy) {
	                    var sx = style.sx;
	                    var sy = style.sy;
	                    var sWidth = width - sx;
	                    var sHeight = height - sy;
	                    ctx.drawImage(
	                        image,
	                        sx, sy, sWidth, sHeight,
	                        x, y, width, height
	                    );
	                }
	                else {
	                    ctx.drawImage(image, x, y, width, height);
	                }

	                // 如果没设置宽和高的话自动根据图片宽高设置
	                if (style.width == null) {
	                    style.width = width;
	                }
	                if (style.height == null) {
	                    style.height = height;
	                }

	                // Draw rect text
	                if (style.text != null) {
	                    this.drawRectText(ctx, this.getBoundingRect());
	                }

	                ctx.restore();
	            }
	        },

	        getBoundingRect: function () {
	            var style = this.style;
	            if (! this._rect) {
	                this._rect = new BoundingRect(
	                    style.x || 0, style.y || 0, style.width || 0, style.height || 0
	                );
	            }
	            return this._rect;
	        }
	    };

	    zrUtil.inherits(ZImage, Displayable);

	    module.exports = ZImage;


/***/ },
/* 168 */
/***/ function(module, exports) {

	

	    module.exports = {
	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            var r = shape.r;
	            var r1;
	            var r2;
	            var r3;
	            var r4;

	            // Convert width and height to positive for better borderRadius
	            if (width < 0) {
	                x = x + width;
	                width = -width;
	            }
	            if (height < 0) {
	                y = y + height;
	                height = -height;
	            }

	            if (typeof r === 'number') {
	                r1 = r2 = r3 = r4 = r;
	            }
	            else if (r instanceof Array) {
	                if (r.length === 1) {
	                    r1 = r2 = r3 = r4 = r[0];
	                }
	                else if (r.length === 2) {
	                    r1 = r3 = r[0];
	                    r2 = r4 = r[1];
	                }
	                else if (r.length === 3) {
	                    r1 = r[0];
	                    r2 = r4 = r[1];
	                    r3 = r[2];
	                }
	                else {
	                    r1 = r[0];
	                    r2 = r[1];
	                    r3 = r[2];
	                    r4 = r[3];
	                }
	            }
	            else {
	                r1 = r2 = r3 = r4 = 0;
	            }

	            var total;
	            if (r1 + r2 > width) {
	                total = r1 + r2;
	                r1 *= width / total;
	                r2 *= width / total;
	            }
	            if (r3 + r4 > width) {
	                total = r3 + r4;
	                r3 *= width / total;
	                r4 *= width / total;
	            }
	            if (r2 + r3 > height) {
	                total = r2 + r3;
	                r2 *= height / total;
	                r3 *= height / total;
	            }
	            if (r1 + r4 > height) {
	                total = r1 + r4;
	                r1 *= height / total;
	                r4 *= height / total;
	            }
	            ctx.moveTo(x + r1, y);
	            ctx.lineTo(x + width - r2, y);
	            r2 !== 0 && ctx.quadraticCurveTo(
	                x + width, y, x + width, y + r2
	            );
	            ctx.lineTo(x + width, y + height - r3);
	            r3 !== 0 && ctx.quadraticCurveTo(
	                x + width, y + height, x + width - r3, y + height
	            );
	            ctx.lineTo(x + r4, y + height);
	            r4 !== 0 && ctx.quadraticCurveTo(
	                x, y + height, x, y + height - r4
	            );
	            ctx.lineTo(x, y + r1);
	            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	        }
	    };


/***/ },
/* 169 */
/***/ function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU


	    /**
	     * Simple double linked list. Compared with array, it has O(1) remove operation.
	     * @constructor
	     */
	    var LinkedList = function() {

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.head = null;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.tail = null;

	        this._len = 0;
	    };

	    var linkedListProto = LinkedList.prototype;
	    /**
	     * Insert a new value at the tail
	     * @param  {} val
	     * @return {module:zrender/core/LRU~Entry}
	     */
	    linkedListProto.insert = function(val) {
	        var entry = new Entry(val);
	        this.insertEntry(entry);
	        return entry;
	    };

	    /**
	     * Insert an entry at the tail
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.insertEntry = function(entry) {
	        if (!this.head) {
	            this.head = this.tail = entry;
	        }
	        else {
	            this.tail.next = entry;
	            entry.prev = this.tail;
	            this.tail = entry;
	        }
	        this._len++;
	    };

	    /**
	     * Remove entry.
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.remove = function(entry) {
	        var prev = entry.prev;
	        var next = entry.next;
	        if (prev) {
	            prev.next = next;
	        }
	        else {
	            // Is head
	            this.head = next;
	        }
	        if (next) {
	            next.prev = prev;
	        }
	        else {
	            // Is tail
	            this.tail = prev;
	        }
	        entry.next = entry.prev = null;
	        this._len--;
	    };

	    /**
	     * @return {number}
	     */
	    linkedListProto.len = function() {
	        return this._len;
	    };

	    /**
	     * @constructor
	     * @param {} val
	     */
	    var Entry = function(val) {
	        /**
	         * @type {}
	         */
	        this.value = val;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.next;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.prev;
	    };

	    /**
	     * LRU Cache
	     * @constructor
	     * @alias module:zrender/core/LRU
	     */
	    var LRU = function(maxSize) {

	        this._list = new LinkedList();

	        this._map = {};

	        this._maxSize = maxSize || 10;
	    };

	    var LRUProto = LRU.prototype;

	    /**
	     * @param  {string} key
	     * @param  {} value
	     */
	    LRUProto.put = function(key, value) {
	        var list = this._list;
	        var map = this._map;
	        if (map[key] == null) {
	            var len = list.len();
	            if (len >= this._maxSize && len > 0) {
	                // Remove the least recently used
	                var leastUsedEntry = list.head;
	                list.remove(leastUsedEntry);
	                delete map[leastUsedEntry.key];
	            }

	            var entry = list.insert(value);
	            entry.key = key;
	            map[key] = entry;
	        }
	    };

	    /**
	     * @param  {string} key
	     * @return {}
	     */
	    LRUProto.get = function(key) {
	        var entry = this._map[key];
	        var list = this._list;
	        if (entry != null) {
	            // Put the latest used entry in the tail
	            if (entry !== list.tail) {
	                list.remove(entry);
	                list.insertEntry(entry);
	            }

	            return entry.value;
	        }
	    };

	    /**
	     * Clear the cache
	     */
	    LRUProto.clear = function() {
	        this._list.clear();
	        this._map = {};
	    };

	    module.exports = LRU;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Text element
	 * @module zrender/graphic/Text
	 *
	 * TODO Wrapping
	 */



	    var Displayable = __webpack_require__(153);
	    var zrUtil = __webpack_require__(111);
	    var textContain = __webpack_require__(122);

	    /**
	     * @alias zrender/graphic/Text
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    var Text = function (opts) {
	        Displayable.call(this, opts);
	    };

	    Text.prototype = {

	        constructor: Text,

	        type: 'text',

	        brush: function (ctx) {
	            var style = this.style;
	            var x = style.x || 0;
	            var y = style.y || 0;
	            // Convert to string
	            var text = style.text;
	            var textFill = style.fill;
	            var textStroke = style.stroke;

	            // Convert to string
	            text != null && (text += '');

	            if (text) {
	                ctx.save();

	                this.style.bind(ctx);
	                this.setTransform(ctx);

	                textFill && (ctx.fillStyle = textFill);
	                textStroke && (ctx.strokeStyle = textStroke);

	                ctx.font = style.textFont || style.font;
	                ctx.textAlign = style.textAlign;

	                if (style.textVerticalAlign) {
	                    var rect = textContain.getBoundingRect(
	                        text, ctx.font, style.textAlign, 'top'
	                    );
	                    // Ignore textBaseline
	                    ctx.textBaseline = 'top';
	                    switch (style.textVerticalAlign) {
	                        case 'middle':
	                            y -= rect.height / 2;
	                            break;
	                        case 'bottom':
	                            y -= rect.height;
	                            break;
	                        // 'top'
	                    }
	                }
	                else {
	                    ctx.textBaseline = style.textBaseline;
	                }
	                var lineHeight = textContain.measureText('国', ctx.font).width;

	                var textLines = text.split('\n');
	                for (var i = 0; i < textLines.length; i++) {
	                    textFill && ctx.fillText(textLines[i], x, y);
	                    textStroke && ctx.strokeText(textLines[i], x, y);
	                    y += lineHeight;
	                }

	                ctx.restore();
	            }
	        },

	        getBoundingRect: function () {
	            if (!this._rect) {
	                var style = this.style;
	                var textVerticalAlign = style.textVerticalAlign;
	                var rect = textContain.getBoundingRect(
	                    style.text + '', style.textFont || style.font, style.textAlign,
	                    textVerticalAlign ? 'top' : style.textBaseline
	                );
	                switch (textVerticalAlign) {
	                    case 'middle':
	                        rect.y -= rect.height / 2;
	                        break;
	                    case 'bottom':
	                        rect.y -= rect.height;
	                        break;
	                }
	                rect.x += style.x || 0;
	                rect.y += style.y || 0;
	                this._rect = rect;
	            }
	            return this._rect;
	        }
	    };

	    zrUtil.inherits(Text, Displayable);

	    module.exports = Text;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */



	    module.exports = __webpack_require__(152).extend({
	        
	        type: 'circle',

	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0
	        },

	        buildPath : function (ctx, shape) {
	            // Better stroking in ShapeBundle
	            ctx.moveTo(shape.cx + shape.r, shape.cy);
	            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	            return;
	        }
	    });



/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */

	// FIXME clockwise seems wrong


	    module.exports = __webpack_require__(152).extend({

	        type: 'sector',

	        shape: {

	            cx: 0,

	            cy: 0,

	            r0: 0,

	            r: 0,

	            startAngle: 0,

	            endAngle: Math.PI * 2,

	            clockwise: true
	        },

	        buildPath: function (ctx, shape) {

	            var x = shape.cx;
	            var y = shape.cy;
	            var r0 = Math.max(shape.r0 || 0, 0);
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;

	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);

	            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);

	            ctx.lineTo(unitX * r + x, unitY * r + y);

	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);

	            ctx.lineTo(
	                Math.cos(endAngle) * r0 + x,
	                Math.sin(endAngle) * r0 + y
	            );

	            if (r0 !== 0) {
	                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	            }

	            ctx.closePath();
	        }
	    });



/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */


	    module.exports = __webpack_require__(152).extend({

	        type: 'ring',

	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0,
	            r0: 0
	        },

	        buildPath: function (ctx, shape) {
	            var x = shape.cx;
	            var y = shape.cy;
	            var PI2 = Math.PI * 2;
	            ctx.moveTo(x + shape.r, y);
	            ctx.arc(x, y, shape.r, 0, PI2, false);
	            ctx.moveTo(x + shape.r0, y);
	            ctx.arc(x, y, shape.r0, 0, PI2, true);
	        }
	    });



/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */


	    var polyHelper = __webpack_require__(175);

	    module.exports = __webpack_require__(152).extend({
	        
	        type: 'polygon',

	        shape: {
	            points: null,

	            smooth: false,

	            smoothConstraint: null
	        },

	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, true);
	        }
	    });


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	

	    var smoothSpline = __webpack_require__(176);
	    var smoothBezier = __webpack_require__(177);

	    module.exports = {
	        buildPath: function (ctx, shape, closePath) {
	            var points = shape.points;
	            var smooth = shape.smooth;
	            if (points && points.length >= 2) {
	                if (smooth && smooth !== 'spline') {
	                    var controlPoints = smoothBezier(
	                        points, smooth, closePath, shape.smoothConstraint
	                    );

	                    ctx.moveTo(points[0][0], points[0][1]);
	                    var len = points.length;
	                    for (var i = 0; i < (closePath ? len : len - 1); i++) {
	                        var cp1 = controlPoints[i * 2];
	                        var cp2 = controlPoints[i * 2 + 1];
	                        var p = points[(i + 1) % len];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                }
	                else {
	                    if (smooth === 'spline') {
	                        points = smoothSpline(points, closePath);
	                    }

	                    ctx.moveTo(points[0][0], points[0][1]);
	                    for (var i = 1, l = points.length; i < l; i++) {
	                        ctx.lineTo(points[i][0], points[i][1]);
	                    }
	                }

	                closePath && ctx.closePath();
	            }
	        }
	    };


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	    var vec2 = __webpack_require__(124);

	    /**
	     * @inner
	     */
	    function interpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }

	    /**
	     * @alias module:zrender/shape/util/smoothSpline
	     * @param {Array} points 线段顶点数组
	     * @param {boolean} isLoop
	     * @return {Array}
	     */
	    module.exports = function (points, isLoop) {
	        var len = points.length;
	        var ret = [];

	        var distance = 0;
	        for (var i = 1; i < len; i++) {
	            distance += vec2.distance(points[i - 1], points[i]);
	        }

	        var segs = distance / 2;
	        segs = segs < len ? len : segs;
	        for (var i = 0; i < segs; i++) {
	            var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	            var idx = Math.floor(pos);

	            var w = pos - idx;

	            var p0;
	            var p1 = points[idx % len];
	            var p2;
	            var p3;
	            if (!isLoop) {
	                p0 = points[idx === 0 ? idx : idx - 1];
	                p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	                p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	            }
	            else {
	                p0 = points[(idx - 1 + len) % len];
	                p2 = points[(idx + 1) % len];
	                p3 = points[(idx + 2) % len];
	            }

	            var w2 = w * w;
	            var w3 = w * w2;

	            ret.push([
	                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
	                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
	            ]);
	        }
	        return ret;
	    };



/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */


	    var vec2 = __webpack_require__(124);
	    var v2Min = vec2.min;
	    var v2Max = vec2.max;
	    var v2Scale = vec2.scale;
	    var v2Distance = vec2.distance;
	    var v2Add = vec2.add;

	    /**
	     * 贝塞尔平滑曲线
	     * @alias module:zrender/shape/util/smoothBezier
	     * @param {Array} points 线段顶点数组
	     * @param {number} smooth 平滑等级, 0-1
	     * @param {boolean} isLoop
	     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	     *                           整个折线的包围盒做一个并集用来约束控制点。
	     * @param {Array} 计算出来的控制点数组
	     */
	    module.exports = function (points, smooth, isLoop, constraint) {
	        var cps = [];

	        var v = [];
	        var v1 = [];
	        var v2 = [];
	        var prevPoint;
	        var nextPoint;

	        var min, max;
	        if (constraint) {
	            min = [Infinity, Infinity];
	            max = [-Infinity, -Infinity];
	            for (var i = 0, len = points.length; i < len; i++) {
	                v2Min(min, min, points[i]);
	                v2Max(max, max, points[i]);
	            }
	            // 与指定的包围盒做并集
	            v2Min(min, min, constraint[0]);
	            v2Max(max, max, constraint[1]);
	        }

	        for (var i = 0, len = points.length; i < len; i++) {
	            var point = points[i];

	            if (isLoop) {
	                prevPoint = points[i ? i - 1 : len - 1];
	                nextPoint = points[(i + 1) % len];
	            }
	            else {
	                if (i === 0 || i === len - 1) {
	                    cps.push(vec2.clone(points[i]));
	                    continue;
	                }
	                else {
	                    prevPoint = points[i - 1];
	                    nextPoint = points[i + 1];
	                }
	            }

	            vec2.sub(v, nextPoint, prevPoint);

	            // use degree to scale the handle length
	            v2Scale(v, v, smooth);

	            var d0 = v2Distance(point, prevPoint);
	            var d1 = v2Distance(point, nextPoint);
	            var sum = d0 + d1;
	            if (sum !== 0) {
	                d0 /= sum;
	                d1 /= sum;
	            }

	            v2Scale(v1, v, -d0);
	            v2Scale(v2, v, d1);
	            var cp0 = v2Add([], point, v1);
	            var cp1 = v2Add([], point, v2);
	            if (constraint) {
	                v2Max(cp0, cp0, min);
	                v2Min(cp0, cp0, max);
	                v2Max(cp1, cp1, min);
	                v2Min(cp1, cp1, max);
	            }
	            cps.push(cp0);
	            cps.push(cp1);
	        }

	        if (isLoop) {
	            cps.push(cps.shift());
	        }

	        return cps;
	    };



/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/graphic/shape/Polyline
	 */


	    var polyHelper = __webpack_require__(175);

	    module.exports = __webpack_require__(152).extend({
	        
	        type: 'polyline',

	        shape: {
	            points: null,

	            smooth: false,

	            smoothConstraint: null
	        },

	        style: {
	            stroke: '#000',

	            fill: null
	        },

	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, false);
	        }
	    });


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */


	    var roundRectHelper = __webpack_require__(168);

	    module.exports = __webpack_require__(152).extend({

	        type: 'rect',

	        shape: {
	            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	            // r缩写为1         相当于 [1, 1, 1, 1]
	            // r缩写为[1]       相当于 [1, 1, 1, 1]
	            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	            r: 0,

	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            if (!shape.r) {
	                ctx.rect(x, y, width, height);
	            }
	            else {
	                roundRectHelper.buildPath(ctx, shape);
	            }
	            ctx.closePath();
	            return;
	        }
	    });



/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */

	    module.exports = __webpack_require__(152).extend({

	        type: 'line',

	        shape: {
	            // Start point
	            x1: 0,
	            y1: 0,
	            // End point
	            x2: 0,
	            y2: 0,

	            percent: 1
	        },

	        style: {
	            stroke: '#000',
	            fill: null
	        },

	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var percent = shape.percent;

	            if (percent === 0) {
	                return;
	            }

	            ctx.moveTo(x1, y1);

	            if (percent < 1) {
	                x2 = x1 * (1 - percent) + x2 * percent;
	                y2 = y1 * (1 - percent) + y2 * percent;
	            }
	            ctx.lineTo(x2, y2);
	        },

	        /**
	         * Get point at percent
	         * @param  {number} percent
	         * @return {Array.<number>}
	         */
	        pointAt: function (p) {
	            var shape = this.shape;
	            return [
	                shape.x1 * (1 - p) + shape.x2 * p,
	                shape.y1 * (1 - p) + shape.y2 * p
	            ];
	        }
	    });



/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */


	    var curveTool = __webpack_require__(157);
	    var quadraticSubdivide = curveTool.quadraticSubdivide;
	    var cubicSubdivide = curveTool.cubicSubdivide;
	    var quadraticAt = curveTool.quadraticAt;
	    var cubicAt = curveTool.cubicAt;

	    var out = [];
	    module.exports = __webpack_require__(152).extend({

	        type: 'bezier-curve',

	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            cpx1: 0,
	            cpy1: 0,
	            // cpx2: 0,
	            // cpy2: 0

	            // Curve show percent, for animating
	            percent: 1
	        },

	        style: {
	            stroke: '#000',
	            fill: null
	        },

	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var cpx1 = shape.cpx1;
	            var cpy1 = shape.cpy1;
	            var cpx2 = shape.cpx2;
	            var cpy2 = shape.cpy2;
	            var percent = shape.percent;
	            if (percent === 0) {
	                return;
	            }

	            ctx.moveTo(x1, y1);

	            if (cpx2 == null || cpy2 == null) {
	                if (percent < 1) {
	                    quadraticSubdivide(
	                        x1, cpx1, x2, percent, out
	                    );
	                    cpx1 = out[1];
	                    x2 = out[2];
	                    quadraticSubdivide(
	                        y1, cpy1, y2, percent, out
	                    );
	                    cpy1 = out[1];
	                    y2 = out[2];
	                }

	                ctx.quadraticCurveTo(
	                    cpx1, cpy1,
	                    x2, y2
	                );
	            }
	            else {
	                if (percent < 1) {
	                    cubicSubdivide(
	                        x1, cpx1, cpx2, x2, percent, out
	                    );
	                    cpx1 = out[1];
	                    cpx2 = out[2];
	                    x2 = out[3];
	                    cubicSubdivide(
	                        y1, cpy1, cpy2, y2, percent, out
	                    );
	                    cpy1 = out[1];
	                    cpy2 = out[2];
	                    y2 = out[3];
	                }
	                ctx.bezierCurveTo(
	                    cpx1, cpy1,
	                    cpx2, cpy2,
	                    x2, y2
	                );
	            }
	        },

	        /**
	         * Get point at percent
	         * @param  {number} percent
	         * @return {Array.<number>}
	         */
	        pointAt: function (p) {
	            var shape = this.shape;
	            var cpx2 = shape.cpx2;
	            var cpy2 = shape.cpy2;
	            if (cpx2 === null || cpy2 === null) {
	                return [
	                    quadraticAt(shape.x1, shape.cpx1, shape.x2, p),
	                    quadraticAt(shape.y1, shape.cpy1, shape.y2, p)
	                ];
	            }
	            else {
	                return [
	                    cubicAt(shape.x1, shape.cpx1, shape.cpx1, shape.x2, p),
	                    cubicAt(shape.y1, shape.cpy1, shape.cpy1, shape.y2, p)
	                ];
	            }
	        }
	    });



/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	 

	    module.exports = __webpack_require__(152).extend({

	        type: 'arc',

	        shape: {

	            cx: 0,

	            cy: 0,

	            r: 0,

	            startAngle: 0,

	            endAngle: Math.PI * 2,

	            clockwise: true
	        },

	        style: {

	            stroke: '#000',

	            fill: null
	        },

	        buildPath: function (ctx, shape) {

	            var x = shape.cx;
	            var y = shape.cy;
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;

	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);

	            ctx.moveTo(unitX * r + x, unitY * r + y);
	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	        }
	    });


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);

	    var Gradient = __webpack_require__(112);

	    /**
	     * x, y, x2, y2 are all percent from 0 to 1
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @param {number} [x2=1]
	     * @param {number} [y2=0]
	     * @param {Array.<Object>} colorStops
	     */
	    var LinearGradient = function (x, y, x2, y2, colorStops) {
	        this.x = x == null ? 0 : x;

	        this.y = y == null ? 0 : y;

	        this.x2 = x2 == null ? 1 : x2;

	        this.y2 = y2 == null ? 0 : y2;

	        Gradient.call(this, colorStops);
	    };

	    LinearGradient.prototype = {

	        constructor: LinearGradient,

	        type: 'linear',

	        updateCanvasGradient: function (shape, ctx) {
	            var rect = shape.getBoundingRect();
	            // var size =
	            var x = this.x * rect.width + rect.x;
	            var x2 = this.x2 * rect.width + rect.x;
	            var y = this.y * rect.height + rect.y;
	            var y2 = this.y2 * rect.height + rect.y;

	            var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);

	            var colorStops = this.colorStops;
	            for (var i = 0; i < colorStops.length; i++) {
	                canvasGradient.addColorStop(
	                    colorStops[i].offset, colorStops[i].color
	                );
	            }

	            this.canvasGradient = canvasGradient;
	        }

	    };

	    zrUtil.inherits(LinearGradient, Gradient);

	    module.exports = LinearGradient;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);

	    var Gradient = __webpack_require__(112);

	    /**
	     * x, y, r are all percent from 0 to 1
	     * @param {number} [x=0.5]
	     * @param {number} [y=0.5]
	     * @param {number} [r=0.5]
	     * @param {Array.<Object>} [colorStops]
	     */
	    var RadialGradient = function (x, y, r, colorStops) {
	        this.x = x == null ? 0.5 : x;

	        this.y = y == null ? 0.5 : y;

	        this.r = r == null ? 0.5 : r;

	        Gradient.call(this, colorStops);
	    };

	    RadialGradient.prototype = {

	        constructor: RadialGradient,

	        type: 'radial',

	        updateCanvasGradient: function (shape, ctx) {
	            var rect = shape.getBoundingRect();

	            var width = rect.width;
	            var height = rect.height;
	            var min = Math.min(width, height);
	            // var max = Math.max(width, height);

	            var x = this.x * width + rect.x;
	            var y = this.y * height + rect.y;
	            var r = this.r * min;

	            var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);

	            var colorStops = this.colorStops;
	            for (var i = 0; i < colorStops.length; i++) {
	                canvasGradient.addColorStop(
	                    colorStops[i].offset, colorStops[i].color
	                );
	            }

	            this.canvasGradient = canvasGradient;
	        }
	    };

	    zrUtil.inherits(RadialGradient, Gradient);

	    module.exports = RadialGradient;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * ZRender, a high performance 2d drawing library.
	 *
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	// Global defines

	    var guid = __webpack_require__(139);
	    var env = __webpack_require__(186);

	    var Handler = __webpack_require__(187);
	    var Storage = __webpack_require__(191);
	    var Animation = __webpack_require__(192);

	    var useVML = !env.canvasSupported;

	    var painterCtors = {
	        canvas: __webpack_require__(193)
	    };

	    var instances = {};    // ZRender实例map索引

	    var zrender = {};
	    /**
	     * @type {string}
	     */
	    zrender.version = '3.0.8';

	    /**
	     * Initializing a zrender instance
	     * @param {HTMLElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     * @return {module:zrender/ZRender}
	     */
	    zrender.init = function(dom, opts) {
	        var zr = new ZRender(guid(), dom, opts);
	        instances[zr.id] = zr;
	        return zr;
	    };

	    /**
	     * Dispose zrender instance
	     * @param {module:zrender/ZRender} zr
	     */
	    zrender.dispose = function (zr) {
	        if (zr) {
	            zr.dispose();
	        }
	        else {
	            for (var key in instances) {
	                instances[key].dispose();
	            }
	            instances = {};
	        }

	        return zrender;
	    };

	    /**
	     * Get zrender instance by id
	     * @param {string} id zrender instance id
	     * @return {module:zrender/ZRender}
	     */
	    zrender.getInstance = function (id) {
	        return instances[id];
	    };

	    zrender.registerPainter = function (name, Ctor) {
	        painterCtors[name] = Ctor;
	    };

	    function delInstance(id) {
	        delete instances[id];
	    }

	    /**
	     * @module zrender/ZRender
	     */
	    /**
	     * @constructor
	     * @alias module:zrender/ZRender
	     * @param {string} id
	     * @param {HTMLDomElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     */
	    var ZRender = function(id, dom, opts) {

	        opts = opts || {};

	        /**
	         * @type {HTMLDomElement}
	         */
	        this.dom = dom;

	        /**
	         * @type {string}
	         */
	        this.id = id;

	        var self = this;
	        var storage = new Storage();

	        var rendererType = opts.renderer;
	        if (useVML) {
	            if (!painterCtors.vml) {
	                throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	            }
	            rendererType = 'vml';
	        }
	        else if (!rendererType || !painterCtors[rendererType]) {
	            rendererType = 'canvas';
	        }
	        var painter = new painterCtors[rendererType](dom, storage, opts);

	        this.storage = storage;
	        this.painter = painter;
	        if (!env.node) {
	            this.handler = new Handler(painter.getViewportRoot(), storage, painter);
	        }

	        /**
	         * @type {module:zrender/animation/Animation}
	         */
	        this.animation = new Animation({
	            stage: {
	                update: function () {
	                    if (self._needsRefresh) {
	                        self.refreshImmediately();
	                    }
	                }
	            }
	        });
	        this.animation.start();

	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._needsRefresh;

	        // 修改 storage.delFromMap, 每次删除元素之前删除动画
	        // FIXME 有点ugly
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;

	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);

	            oldDelFromMap.call(storage, elId);

	            el && el.removeSelfFromZr(self);
	        };

	        storage.addToMap = function (el) {
	            oldAddToMap.call(storage, el);

	            el.addSelfToZr(self);
	        };
	    };

	    ZRender.prototype = {

	        constructor: ZRender,
	        /**
	         * 获取实例唯一标识
	         * @return {string}
	         */
	        getId: function () {
	            return this.id;
	        },

	        /**
	         * 添加元素
	         * @param  {string|module:zrender/Element} el
	         */
	        add: function (el) {
	            this.storage.addRoot(el);
	            this._needsRefresh = true;
	        },

	        /**
	         * 删除元素
	         * @param  {string|module:zrender/Element} el
	         */
	        remove: function (el) {
	            this.storage.delRoot(el);
	            this._needsRefresh = true;
	        },

	        /**
	         * Change configuration of layer
	         * @param {string} zLevel
	         * @param {Object} config
	         * @param {string} [config.clearColor=0] Clear color
	         * @param {string} [config.motionBlur=false] If enable motion blur
	         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	        */
	        configLayer: function (zLevel, config) {
	            this.painter.configLayer(zLevel, config);
	            this._needsRefresh = true;
	        },

	        /**
	         * Repaint the canvas immediately
	         */
	        refreshImmediately: function () {
	            // Clear needsRefresh ahead to avoid something wrong happens in refresh
	            // Or it will cause zrender refreshes again and again.
	            this._needsRefresh = false;
	            this.painter.refresh();
	            /**
	             * Avoid trigger zr.refresh in Element#beforeUpdate hook
	             */
	            this._needsRefresh = false;
	        },

	        /**
	         * Mark and repaint the canvas in the next frame of browser
	         */
	        refresh: function() {
	            this._needsRefresh = true;
	        },

	        /**
	         * Resize the canvas.
	         * Should be invoked when container size is changed
	         */
	        resize: function() {
	            this.painter.resize();
	            this.handler && this.handler.resize();
	        },

	        /**
	         * Stop and clear all animation immediately
	         */
	        clearAnimation: function () {
	            this.animation.clear();
	        },

	        /**
	         * Get container width
	         */
	        getWidth: function() {
	            return this.painter.getWidth();
	        },

	        /**
	         * Get container height
	         */
	        getHeight: function() {
	            return this.painter.getHeight();
	        },

	        /**
	         * Export the canvas as Base64 URL
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff']
	         * @return {string} Base64 URL
	         */
	        toDataURL: function(type, backgroundColor, args) {
	            return this.painter.toDataURL(type, backgroundColor, args);
	        },

	        /**
	         * Converting a path to image.
	         * It has much better performance of drawing image rather than drawing a vector path.
	         * @param {module:zrender/graphic/Path} e
	         * @param {number} width
	         * @param {number} height
	         */
	        pathToImage: function(e, width, height) {
	            var id = guid();
	            return this.painter.pathToImage(id, e, width, height);
	        },

	        /**
	         * Set default cursor
	         * @param {string} cursorStyle 例如 crosshair
	         */
	        setDefaultCursorStyle: function (cursorStyle) {
	            this.handler.setDefaultCursorStyle(cursorStyle);
	        },

	        /**
	         * Bind event
	         *
	         * @param {string} eventName Event name
	         * @param {Function} eventHandler Handler function
	         * @param {Object} [context] Context object
	         */
	        on: function(eventName, eventHandler, context) {
	            this.handler && this.handler.on(eventName, eventHandler, context);
	        },

	        /**
	         * Unbind event
	         * @param {string} eventName Event name
	         * @param {Function} [eventHandler] Handler function
	         */
	        off: function(eventName, eventHandler) {
	            this.handler && this.handler.off(eventName, eventHandler);
	        },

	        /**
	         * Trigger event manually
	         *
	         * @param {string} eventName Event name
	         * @param {event=} event Event object
	         */
	        trigger: function (eventName, event) {
	            this.handler && this.handler.trigger(eventName, event);
	        },


	        /**
	         * Clear all objects and the canvas.
	         */
	        clear: function () {
	            this.storage.delRoot();
	            this.painter.clear();
	        },

	        /**
	         * Dispose self.
	         */
	        dispose: function () {
	            this.animation.stop();

	            this.clear();
	            this.storage.dispose();
	            this.painter.dispose();
	            this.handler && this.handler.dispose();

	            this.animation =
	            this.storage =
	            this.painter =
	            this.handler = null;

	            delInstance(this.id);
	        }
	    };

	    module.exports = zrender;



/***/ },
/* 186 */
/***/ function(module, exports) {

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */

	    var env = {};
	    if (typeof navigator === 'undefined') {
	        // In node
	        env = {
	            browser: {},
	            os: {},
	            node: true,
	            // Assume canvas is supported
	            canvasSupported: true
	        };
	    }
	    else {
	        env = detect(navigator.userAgent);
	    }

	    module.exports = env;

	    // Zepto.js
	    // (c) 2010-2013 Thomas Fuchs
	    // Zepto.js may be freely distributed under the MIT license.

	    function detect(ua) {
	        var os = {};
	        var browser = {};
	        var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	        var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	        var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	        var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	        var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	        var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	        var touchpad = webos && ua.match(/TouchPad/);
	        var kindle = ua.match(/Kindle\/([\d.]+)/);
	        var silk = ua.match(/Silk\/([\d._]+)/);
	        var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	        var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	        var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	        var playbook = ua.match(/PlayBook/);
	        var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	        var firefox = ua.match(/Firefox\/([\d.]+)/);
	        var safari = webkit && ua.match(/Mobile\//) && !chrome;
	        var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	        var ie = ua.match(/MSIE\s([\d.]+)/)
	            // IE 11 Trident/7.0; rv:11.0
	            || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	        var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

	        // Todo: clean this up with a better OS/browser seperation:
	        // - discern (more) between multiple browsers on android
	        // - decide if kindle fire in silk mode is android or not
	        // - Firefox on Android doesn't specify the Android version
	        // - possibly devide in os, device and browser hashes

	        if (browser.webkit = !!webkit) browser.version = webkit[1];

	        if (android) os.android = true, os.version = android[2];
	        if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	        if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	        if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	        if (webos) os.webos = true, os.version = webos[2];
	        if (touchpad) os.touchpad = true;
	        if (blackberry) os.blackberry = true, os.version = blackberry[2];
	        if (bb10) os.bb10 = true, os.version = bb10[2];
	        if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	        if (playbook) browser.playbook = true;
	        if (kindle) os.kindle = true, os.version = kindle[1];
	        if (silk) browser.silk = true, browser.version = silk[1];
	        if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	        if (chrome) browser.chrome = true, browser.version = chrome[1];
	        if (firefox) browser.firefox = true, browser.version = firefox[1];
	        if (ie) browser.ie = true, browser.version = ie[1];
	        if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	        if (webview) browser.webview = true;
	        if (ie) browser.ie = true, browser.version = ie[1];
	        if (edge) browser.edge = true, browser.version = edge[1];

	        os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	            (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	        os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 ||
	            (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	            (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));

	        return {
	            browser: browser,
	            os: os,
	            node: false,
	            // 原生canvas支持，改极端点了
	            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	            canvasSupported : document.createElement('canvas').getContext ? true : false,
	            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
	            // works on most browsers
	            // IE10/11 does not support touch event, and MS Edge supports them but not by
	            // default, so we dont check navigator.maxTouchPoints for them here.
	            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	            // <http://caniuse.com/#search=pointer%20event>.
	            pointerEventsSupported: 'onpointerdown' in window
	                // Firefox supports pointer but not by default,
	                // only MS browsers are reliable on pointer events currently.
	                && (browser.edge || (browser.ie && browser.version >= 10))
	        };
	    }


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Handler
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (shenyi.914@gmail.com)
	 */


	    var env = __webpack_require__(186);
	    var eventTool = __webpack_require__(188);
	    var util = __webpack_require__(111);
	    var Draggable = __webpack_require__(189);
	    var GestureMgr = __webpack_require__(190);

	    var Eventful = __webpack_require__(140);

	    var mouseHandlerNames = [
	        'click', 'dblclick', 'mousewheel', 'mouseout'
	    ];
	    !usePointerEvent() && mouseHandlerNames.push(
	        'mouseup', 'mousedown', 'mousemove'
	    );

	    var touchHandlerNames = [
	        'touchstart', 'touchend', 'touchmove'
	    ];

	    var pointerHandlerNames = [
	        'pointerdown', 'pointerup', 'pointermove'
	    ];

	    var TOUCH_CLICK_DELAY = 300;

	    // touch指尖错觉的尝试偏移量配置
	    // var MOBILE_TOUCH_OFFSETS = [
	    //     { x: 10 },
	    //     { x: -20 },
	    //     { x: 10, y: 10 },
	    //     { y: -20 }
	    // ];

	    var addEventListener = eventTool.addEventListener;
	    var removeEventListener = eventTool.removeEventListener;
	    var normalizeEvent = eventTool.normalizeEvent;

	    function makeEventPacket(eveType, target, event) {
	        return {
	            type: eveType,
	            event: event,
	            target: target,
	            cancelBubble: false,
	            offsetX: event.zrX,
	            offsetY: event.zrY,
	            gestureEvent: event.gestureEvent,
	            pinchX: event.pinchX,
	            pinchY: event.pinchY,
	            pinchScale: event.pinchScale,
	            wheelDelta: event.zrDelta
	        };
	    }

	    var domHandlers = {
	        /**
	         * Mouse move handler
	         * @inner
	         * @param {Event} event
	         */
	        mousemove: function (event) {
	            event = normalizeEvent(this.root, event);

	            var x = event.zrX;
	            var y = event.zrY;

	            var hovered = this.findHover(x, y, null);
	            var lastHovered = this._hovered;

	            this._hovered = hovered;

	            this.root.style.cursor = hovered ? hovered.cursor : this._defaultCursorStyle;
	            // Mouse out on previous hovered element
	            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
	                this._dispatchProxy(lastHovered, 'mouseout', event);
	            }

	            // Mouse moving on one element
	            this._dispatchProxy(hovered, 'mousemove', event);

	            // Mouse over on a new element
	            if (hovered && hovered !== lastHovered) {
	                this._dispatchProxy(hovered, 'mouseover', event);
	            }
	        },

	        /**
	         * Mouse out handler
	         * @inner
	         * @param {Event} event
	         */
	        mouseout: function (event) {
	            event = normalizeEvent(this.root, event);

	            var element = event.toElement || event.relatedTarget;
	            if (element != this.root) {
	                while (element && element.nodeType != 9) {
	                    // 忽略包含在root中的dom引起的mouseOut
	                    if (element === this.root) {
	                        return;
	                    }

	                    element = element.parentNode;
	                }
	            }

	            this._dispatchProxy(this._hovered, 'mouseout', event);

	            this.trigger('globalout', {
	                event: event
	            });
	        },

	        /**
	         * Touch开始响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchstart: function (event) {
	            // FIXME
	            // 移动端可能需要default行为，例如静态图表时。
	            // eventTool.stop(event);// 阻止浏览器默认事件，重要
	            event = normalizeEvent(this.root, event);

	            this._lastTouchMoment = new Date();

	            processGesture(this, event, 'start');

	            // 平板补充一次findHover
	            // this._mobileFindFixed(event);
	            // Trigger mousemove and mousedown
	            domHandlers.mousemove.call(this, event);

	            domHandlers.mousedown.call(this, event);

	            setTouchTimer(this);
	        },

	        /**
	         * Touch移动响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchmove: function (event) {
	            // eventTool.stop(event);// 阻止浏览器默认事件，重要
	            event = normalizeEvent(this.root, event);

	            processGesture(this, event, 'change');

	            // Mouse move should always be triggered no matter whether
	            // there is gestrue event, because mouse move and pinch may
	            // be used at the same time.
	            domHandlers.mousemove.call(this, event);

	            setTouchTimer(this);
	        },

	        /**
	         * Touch结束响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchend: function (event) {
	            // eventTool.stop(event);// 阻止浏览器默认事件，重要
	            event = normalizeEvent(this.root, event);

	            processGesture(this, event, 'end');

	            domHandlers.mouseup.call(this, event);

	            // click event should always be triggered no matter whether
	            // there is gestrue event. System click can not be prevented.
	            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	                // this._mobileFindFixed(event);
	                domHandlers.click.call(this, event);
	            }

	            setTouchTimer(this);
	        }
	    };

	    // Common handlers
	    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick'], function (name) {
	        domHandlers[name] = function (event) {
	            event = normalizeEvent(this.root, event);
	            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	            var hovered = this.findHover(event.zrX, event.zrY, null);
	            this._dispatchProxy(hovered, name, event);
	        };
	    });

	    // Pointer event handlers
	    // util.each(['pointerdown', 'pointermove', 'pointerup'], function (name) {
	    //     domHandlers[name] = function (event) {
	    //         var mouseName = name.replace('pointer', 'mouse');
	    //         domHandlers[mouseName].call(this, event);
	    //     };
	    // });

	    function processGesture(zrHandler, event, stage) {
	        var gestureMgr = zrHandler._gestureMgr;

	        stage === 'start' && gestureMgr.clear();

	        var gestureInfo = gestureMgr.recognize(
	            event,
	            zrHandler.findHover(event.zrX, event.zrY, null)
	        );

	        stage === 'end' && gestureMgr.clear();

	        if (gestureInfo) {
	            // eventTool.stop(event);
	            var type = gestureInfo.type;
	            event.gestureEvent = type;

	            zrHandler._dispatchProxy(gestureInfo.target, type, gestureInfo.event);
	        }
	    }

	    /**
	     * 为控制类实例初始化dom 事件处理函数
	     *
	     * @inner
	     * @param {module:zrender/Handler} instance 控制类实例
	     */
	    function initDomHandler(instance) {
	        var handlerNames = touchHandlerNames.concat(pointerHandlerNames);
	        for (var i = 0; i < handlerNames.length; i++) {
	            var name = handlerNames[i];
	            instance._handlers[name] = util.bind(domHandlers[name], instance);
	        }

	        for (var i = 0; i < mouseHandlerNames.length; i++) {
	            var name = mouseHandlerNames[i];
	            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	        }

	        function makeMouseHandler(fn, instance) {
	            return function () {
	                if (instance._touching) {
	                    return;
	                }
	                return fn.apply(instance, arguments);
	            };
	        }
	    }

	    /**
	     * @alias module:zrender/Handler
	     * @constructor
	     * @extends module:zrender/mixin/Eventful
	     * @param {HTMLElement} root Main HTML element for painting.
	     * @param {module:zrender/Storage} storage Storage instance.
	     * @param {module:zrender/Painter} painter Painter instance.
	     */
	    var Handler = function(root, storage, painter) {
	        Eventful.call(this);

	        this.root = root;
	        this.storage = storage;
	        this.painter = painter;

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._hovered;

	        /**
	         * @private
	         * @type {Date}
	         */
	        this._lastTouchMoment;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastX;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastY;

	        /**
	         * @private
	         * @type {string}
	         */
	        this._defaultCursorStyle = 'default';

	        /**
	         * @private
	         * @type {module:zrender/core/GestureMgr}
	         */
	        this._gestureMgr = new GestureMgr();

	        /**
	         * @private
	         * @type {Array.<Function>}
	         */
	        this._handlers = [];

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._touching = false;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._touchTimer;

	        initDomHandler(this);

	        if (usePointerEvent()) {
	            mountHandlers(pointerHandlerNames, this);
	        }
	        else if (useTouchEvent()) {
	            mountHandlers(touchHandlerNames, this);

	            // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	            // addEventListener(root, 'mouseout', this._mouseoutHandler);
	        }

	        // Considering some devices that both enable touch and mouse event (like MS Surface
	        // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	        // mouse event can not be handle in those devices.
	        mountHandlers(mouseHandlerNames, this);

	        Draggable.call(this);

	        function mountHandlers(handlerNames, instance) {
	            util.each(handlerNames, function (name) {
	                addEventListener(root, eventNameFix(name), instance._handlers[name]);
	            }, instance);
	        }
	    };

	    Handler.prototype = {

	        constructor: Handler,

	        /**
	         * Resize
	         */
	        resize: function (event) {
	            this._hovered = null;
	        },

	        /**
	         * Dispatch event
	         * @param {string} eventName
	         * @param {event=} eventArgs
	         */
	        dispatch: function (eventName, eventArgs) {
	            var handler = this._handlers[eventName];
	            handler && handler.call(this, eventArgs);
	        },

	        /**
	         * Dispose
	         */
	        dispose: function () {
	            var root = this.root;

	            var handlerNames = mouseHandlerNames.concat(touchHandlerNames);

	            for (var i = 0; i < handlerNames.length; i++) {
	                var name = handlerNames[i];
	                removeEventListener(root, eventNameFix(name), this._handlers[name]);
	            }

	            this.root =
	            this.storage =
	            this.painter = null;
	        },

	        /**
	         * 设置默认的cursor style
	         * @param {string} cursorStyle 例如 crosshair
	         */
	        setDefaultCursorStyle: function (cursorStyle) {
	            this._defaultCursorStyle = cursorStyle;
	        },

	        /**
	         * 事件分发代理
	         *
	         * @private
	         * @param {Object} targetEl 目标图形元素
	         * @param {string} eventName 事件名称
	         * @param {Object} event 事件对象
	         */
	        _dispatchProxy: function (targetEl, eventName, event) {
	            var eventHandler = 'on' + eventName;
	            var eventPacket = makeEventPacket(eventName, targetEl, event);

	            var el = targetEl;

	            while (el) {
	                el[eventHandler]
	                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));

	                el.trigger(eventName, eventPacket);

	                el = el.parent;

	                if (eventPacket.cancelBubble) {
	                    break;
	                }
	            }

	            if (!eventPacket.cancelBubble) {
	                // 冒泡到顶级 zrender 对象
	                this.trigger(eventName, eventPacket);
	                // 分发事件到用户自定义层
	                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	                this.painter && this.painter.eachOtherLayer(function (layer) {
	                    if (typeof(layer[eventHandler]) == 'function') {
	                        layer[eventHandler].call(layer, eventPacket);
	                    }
	                    if (layer.trigger) {
	                        layer.trigger(eventName, eventPacket);
	                    }
	                });
	            }
	        },

	        /**
	         * @private
	         * @param {number} x
	         * @param {number} y
	         * @param {module:zrender/graphic/Displayable} exclude
	         * @method
	         */
	        findHover: function(x, y, exclude) {
	            var list = this.storage.getDisplayList();
	            for (var i = list.length - 1; i >= 0 ; i--) {
	                if (!list[i].silent
	                 && list[i] !== exclude
	                 // getDisplayList may include ignored item in VML mode
	                 && !list[i].ignore
	                 && isHover(list[i], x, y)) {
	                    return list[i];
	                }
	            }
	        }
	    };

	    function isHover(displayable, x, y) {
	        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	            var el = displayable;
	            while (el) {
	                // If ancestor is silent or clipped by ancestor
	                if (el.silent || (el.clipPath && !el.clipPath.contain(x, y)))  {
	                    return false;
	                }
	                el = el.parent;
	            }
	            return true;
	        }

	        return false;
	    }

	    /**
	     * Prevent mouse event from being dispatched after Touch Events action
	     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	     * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	     * Result: Blocking Mouse Events for 700ms.
	     */
	    function setTouchTimer(instance) {
	        instance._touching = true;
	        clearTimeout(instance._touchTimer);
	        instance._touchTimer = setTimeout(function () {
	            instance._touching = false;
	        }, 700);
	    }

	    /**
	     * Althought MS Surface support screen touch, IE10/11 do not support
	     * touch event and MS Edge supported them but not by default (but chrome
	     * and firefox do). Thus we use Pointer event on MS browsers to handle touch.
	     */
	    function usePointerEvent() {
	        // TODO
	        // pointermove event dont trigger when using finger.
	        // We may figger it out latter.
	        return false;
	        // return env.pointerEventsSupported
	            // In no-touch device we dont use pointer evnets but just
	            // use mouse event for avoiding problems.
	            // && window.navigator.maxTouchPoints;
	    }

	    function useTouchEvent() {
	        return env.touchEventsSupported;
	    }

	    function eventNameFix(name) {
	        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;
	    }

	    util.mixin(Handler, Eventful);
	    util.mixin(Handler, Draggable);

	    module.exports = Handler;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */


	    var Eventful = __webpack_require__(140);

	    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;

	    function getBoundingClientRect(el) {
	        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	        return el.getBoundingClientRect ? el.getBoundingClientRect() : { left: 0, top: 0};
	    }
	    /**
	     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标
	     */
	    function normalizeEvent(el, e) {

	        e = e || window.event;

	        if (e.zrX != null) {
	            return e;
	        }

	        var eventType = e.type;
	        var isTouch = eventType && eventType.indexOf('touch') >= 0;

	        if (!isTouch) {
	            var box = getBoundingClientRect(el);
	            e.zrX = e.clientX - box.left;
	            e.zrY = e.clientY - box.top;
	            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	        }
	        else {
	            var touch = eventType != 'touchend'
	                            ? e.targetTouches[0]
	                            : e.changedTouches[0];
	            if (touch) {
	                var rBounding = getBoundingClientRect(el);
	                // touch事件坐标是全屏的~
	                e.zrX = touch.clientX - rBounding.left;
	                e.zrY = touch.clientY - rBounding.top;
	            }
	        }

	        return e;
	    }

	    function addEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.addEventListener(name, handler);
	        }
	        else {
	            el.attachEvent('on' + name, handler);
	        }
	    }

	    function removeEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.removeEventListener(name, handler);
	        }
	        else {
	            el.detachEvent('on' + name, handler);
	        }
	    }

	    /**
	     * 停止冒泡和阻止默认行为
	     * @memberOf module:zrender/core/event
	     * @method
	     * @param {Event} e : event对象
	     */
	    var stop = isDomLevel2
	        ? function (e) {
	            e.preventDefault();
	            e.stopPropagation();
	            e.cancelBubble = true;
	        }
	        : function (e) {
	            e.returnValue = false;
	            e.cancelBubble = true;
	        };

	    module.exports = {
	        normalizeEvent: normalizeEvent,
	        addEventListener: addEventListener,
	        removeEventListener: removeEventListener,

	        stop: stop,
	        // 做向上兼容
	        Dispatcher: Eventful
	    };



/***/ },
/* 189 */
/***/ function(module, exports) {

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale

	    function Draggable() {

	        this.on('mousedown', this._dragStart, this);
	        this.on('mousemove', this._drag, this);
	        this.on('mouseup', this._dragEnd, this);
	        this.on('globalout', this._dragEnd, this);
	        // this._dropTarget = null;
	        // this._draggingTarget = null;

	        // this._x = 0;
	        // this._y = 0;
	    }

	    Draggable.prototype = {

	        constructor: Draggable,

	        _dragStart: function (e) {
	            var draggingTarget = e.target;
	            if (draggingTarget && draggingTarget.draggable) {
	                this._draggingTarget = draggingTarget;
	                draggingTarget.dragging = true;
	                this._x = e.offsetX;
	                this._y = e.offsetY;

	                this._dispatchProxy(draggingTarget, 'dragstart', e.event);
	            }
	        },

	        _drag: function (e) {
	            var draggingTarget = this._draggingTarget;
	            if (draggingTarget) {

	                var x = e.offsetX;
	                var y = e.offsetY;

	                var dx = x - this._x;
	                var dy = y - this._y;
	                this._x = x;
	                this._y = y;

	                draggingTarget.drift(dx, dy, e);
	                this._dispatchProxy(draggingTarget, 'drag', e.event);

	                var dropTarget = this.findHover(x, y, draggingTarget);
	                var lastDropTarget = this._dropTarget;
	                this._dropTarget = dropTarget;

	                if (draggingTarget !== dropTarget) {
	                    if (lastDropTarget && dropTarget !== lastDropTarget) {
	                        this._dispatchProxy(lastDropTarget, 'dragleave', e.event);
	                    }
	                    if (dropTarget && dropTarget !== lastDropTarget) {
	                        this._dispatchProxy(dropTarget, 'dragenter', e.event);
	                    }
	                }
	            }
	        },

	        _dragEnd: function (e) {
	            var draggingTarget = this._draggingTarget;

	            if (draggingTarget) {
	                draggingTarget.dragging = false;
	            }

	            this._dispatchProxy(draggingTarget, 'dragend', e.event);

	            if (this._dropTarget) {
	                this._dispatchProxy(this._dropTarget, 'drop', e.event);
	            }

	            this._draggingTarget = null;
	            this._dropTarget = null;
	        }

	    };

	    module.exports = Draggable;


/***/ },
/* 190 */
/***/ function(module, exports) {

	'use strict';
	/**
	 * Only implements needed gestures for mobile.
	 */


	    var GestureMgr = function () {

	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._track = [];
	    };

	    GestureMgr.prototype = {

	        constructor: GestureMgr,

	        recognize: function (event, target) {
	            this._doTrack(event, target);
	            return this._recognize(event);
	        },

	        clear: function () {
	            this._track.length = 0;
	            return this;
	        },

	        _doTrack: function (event, target) {
	            var touches = event.touches;

	            if (!touches) {
	                return;
	            }

	            var trackItem = {
	                points: [],
	                touches: [],
	                target: target,
	                event: event
	            };

	            for (var i = 0, len = touches.length; i < len; i++) {
	                var touch = touches[i];
	                trackItem.points.push([touch.clientX, touch.clientY]);
	                trackItem.touches.push(touch);
	            }

	            this._track.push(trackItem);
	        },

	        _recognize: function (event) {
	            for (var eventName in recognizers) {
	                if (recognizers.hasOwnProperty(eventName)) {
	                    var gestureInfo = recognizers[eventName](this._track, event);
	                    if (gestureInfo) {
	                        return gestureInfo;
	                    }
	                }
	            }
	        }
	    };

	    function dist(pointPair) {
	        var dx = pointPair[1][0] - pointPair[0][0];
	        var dy = pointPair[1][1] - pointPair[0][1];

	        return Math.sqrt(dx * dx + dy * dy);
	    }

	    function center(pointPair) {
	        return [
	            (pointPair[0][0] + pointPair[1][0]) / 2,
	            (pointPair[0][1] + pointPair[1][1]) / 2
	        ];
	    }

	    var recognizers = {

	        pinch: function (track, event) {
	            var trackLen = track.length;

	            if (!trackLen) {
	                return;
	            }

	            var pinchEnd = (track[trackLen - 1] || {}).points;
	            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

	            if (pinchPre
	                && pinchPre.length > 1
	                && pinchEnd
	                && pinchEnd.length > 1
	            ) {
	                var pinchScale = dist(pinchEnd) / dist(pinchPre);
	                !isFinite(pinchScale) && (pinchScale = 1);

	                event.pinchScale = pinchScale;

	                var pinchCenter = center(pinchEnd);
	                event.pinchX = pinchCenter[0];
	                event.pinchY = pinchCenter[1];

	                return {
	                    type: 'pinch',
	                    target: track[0].target,
	                    event: event
	                };
	            }
	        }

	        // Only pinch currently.
	    };

	    module.exports = GestureMgr;



/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */


	    var util = __webpack_require__(111);

	    var Group = __webpack_require__(137);

	    function shapeCompareFunc(a, b) {
	        if (a.zlevel === b.zlevel) {
	            if (a.z === b.z) {
	                if (a.z2 === b.z2) {
	                    return a.__renderidx - b.__renderidx;
	                }
	                return a.z2 - b.z2;
	            }
	            return a.z - b.z;
	        }
	        return a.zlevel - b.zlevel;
	    }
	    /**
	     * 内容仓库 (M)
	     * @alias module:zrender/Storage
	     * @constructor
	     */
	    var Storage = function () {
	        // 所有常规形状，id索引的map
	        this._elements = {};

	        this._roots = [];

	        this._displayList = [];

	        this._displayListLen = 0;
	    };

	    Storage.prototype = {

	        constructor: Storage,

	        /**
	         * 返回所有图形的绘制队列
	         * @param {boolean} [update=false] 是否在返回前更新该数组
	         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	         *
	         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	         * @return {Array.<module:zrender/graphic/Displayable>}
	         */
	        getDisplayList: function (update, includeIgnore) {
	            includeIgnore = includeIgnore || false;
	            if (update) {
	                this.updateDisplayList(includeIgnore);
	            }
	            return this._displayList;
	        },

	        /**
	         * 更新图形的绘制队列。
	         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	         */
	        updateDisplayList: function (includeIgnore) {
	            this._displayListLen = 0;
	            var roots = this._roots;
	            var displayList = this._displayList;
	            for (var i = 0, len = roots.length; i < len; i++) {
	                this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	            }
	            displayList.length = this._displayListLen;

	            for (var i = 0, len = displayList.length; i < len; i++) {
	                displayList[i].__renderidx = i;
	            }

	            displayList.sort(shapeCompareFunc);
	        },

	        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {

	            if (el.ignore && !includeIgnore) {
	                return;
	            }

	            el.beforeUpdate();

	            el.update();

	            el.afterUpdate();

	            var clipPath = el.clipPath;
	            if (clipPath) {
	                // clipPath 的变换是基于 group 的变换
	                clipPath.parent = el;
	                clipPath.updateTransform();

	                // FIXME 效率影响
	                if (clipPaths) {
	                    clipPaths = clipPaths.slice();
	                    clipPaths.push(clipPath);
	                }
	                else {
	                    clipPaths = [clipPath];
	                }
	            }

	            if (el.type == 'group') {
	                var children = el._children;

	                for (var i = 0; i < children.length; i++) {
	                    var child = children[i];

	                    // Force to mark as dirty if group is dirty
	                    // FIXME __dirtyPath ?
	                    child.__dirty = el.__dirty || child.__dirty;

	                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	                }

	                // Mark group clean here
	                el.__dirty = false;

	            }
	            else {
	                el.__clipPaths = clipPaths;

	                this._displayList[this._displayListLen++] = el;
	            }
	        },

	        /**
	         * 添加图形(Shape)或者组(Group)到根节点
	         * @param {module:zrender/Element} el
	         */
	        addRoot: function (el) {
	            // Element has been added
	            if (this._elements[el.id]) {
	                return;
	            }

	            if (el instanceof Group) {
	                el.addChildrenToStorage(this);
	            }

	            this.addToMap(el);
	            this._roots.push(el);
	        },

	        /**
	         * 删除指定的图形(Shape)或者组(Group)
	         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	         */
	        delRoot: function (elId) {
	            if (elId == null) {
	                // 不指定elId清空
	                for (var i = 0; i < this._roots.length; i++) {
	                    var root = this._roots[i];
	                    if (root instanceof Group) {
	                        root.delChildrenFromStorage(this);
	                    }
	                }

	                this._elements = {};
	                this._roots = [];
	                this._displayList = [];
	                this._displayListLen = 0;

	                return;
	            }

	            if (elId instanceof Array) {
	                for (var i = 0, l = elId.length; i < l; i++) {
	                    this.delRoot(elId[i]);
	                }
	                return;
	            }

	            var el;
	            if (typeof(elId) == 'string') {
	                el = this._elements[elId];
	            }
	            else {
	                el = elId;
	            }

	            var idx = util.indexOf(this._roots, el);
	            if (idx >= 0) {
	                this.delFromMap(el.id);
	                this._roots.splice(idx, 1);
	                if (el instanceof Group) {
	                    el.delChildrenFromStorage(this);
	                }
	            }
	        },

	        addToMap: function (el) {
	            if (el instanceof Group) {
	                el.__storage = this;
	            }
	            el.dirty();

	            this._elements[el.id] = el;

	            return this;
	        },

	        get: function (elId) {
	            return this._elements[elId];
	        },

	        delFromMap: function (elId) {
	            var elements = this._elements;
	            var el = elements[elId];
	            if (el) {
	                delete elements[elId];
	                if (el instanceof Group) {
	                    el.__storage = null;
	                }
	            }

	            return this;
	        },

	        /**
	         * 清空并且释放Storage
	         */
	        dispose: function () {
	            this._elements =
	            this._renderList =
	            this._roots = null;
	        }
	    };

	    module.exports = Storage;



/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236


	    var util = __webpack_require__(111);
	    var Dispatcher = __webpack_require__(188).Dispatcher;

	    var requestAnimationFrame = (typeof window !== 'undefined' &&
	                                    (window.requestAnimationFrame
	                                    || window.msRequestAnimationFrame
	                                    || window.mozRequestAnimationFrame
	                                    || window.webkitRequestAnimationFrame))
	                                || function (func) {
	                                    setTimeout(func, 16);
	                                };

	    var Animator = __webpack_require__(143);
	    /**
	     * @typedef {Object} IZRenderStage
	     * @property {Function} update
	     */

	    /**
	     * @alias module:zrender/animation/Animation
	     * @constructor
	     * @param {Object} [options]
	     * @param {Function} [options.onframe]
	     * @param {IZRenderStage} [options.stage]
	     * @example
	     *     var animation = new Animation();
	     *     var obj = {
	     *         x: 100,
	     *         y: 100
	     *     };
	     *     animation.animate(node.position)
	     *         .when(1000, {
	     *             x: 500,
	     *             y: 500
	     *         })
	     *         .when(2000, {
	     *             x: 100,
	     *             y: 100
	     *         })
	     *         .start('spline');
	     */
	    var Animation = function (options) {

	        options = options || {};

	        this.stage = options.stage || {};

	        this.onframe = options.onframe || function() {};

	        // private properties
	        this._clips = [];

	        this._running = false;

	        this._time = 0;

	        Dispatcher.call(this);
	    };

	    Animation.prototype = {

	        constructor: Animation,
	        /**
	         * 添加 clip
	         * @param {module:zrender/animation/Clip} clip
	         */
	        addClip: function (clip) {
	            this._clips.push(clip);
	        },
	        /**
	         * 添加 animator
	         * @param {module:zrender/animation/Animator} animator
	         */
	        addAnimator: function (animator) {
	            animator.animation = this;
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.addClip(clips[i]);
	            }
	        },
	        /**
	         * 删除动画片段
	         * @param {module:zrender/animation/Clip} clip
	         */
	        removeClip: function(clip) {
	            var idx = util.indexOf(this._clips, clip);
	            if (idx >= 0) {
	                this._clips.splice(idx, 1);
	            }
	        },

	        /**
	         * 删除动画片段
	         * @param {module:zrender/animation/Animator} animator
	         */
	        removeAnimator: function (animator) {
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.removeClip(clips[i]);
	            }
	            animator.animation = null;
	        },

	        _update: function() {

	            var time = new Date().getTime();
	            var delta = time - this._time;
	            var clips = this._clips;
	            var len = clips.length;

	            var deferredEvents = [];
	            var deferredClips = [];
	            for (var i = 0; i < len; i++) {
	                var clip = clips[i];
	                var e = clip.step(time);
	                // Throw out the events need to be called after
	                // stage.update, like destroy
	                if (e) {
	                    deferredEvents.push(e);
	                    deferredClips.push(clip);
	                }
	            }

	            // Remove the finished clip
	            for (var i = 0; i < len;) {
	                if (clips[i]._needsRemove) {
	                    clips[i] = clips[len - 1];
	                    clips.pop();
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }

	            len = deferredEvents.length;
	            for (var i = 0; i < len; i++) {
	                deferredClips[i].fire(deferredEvents[i]);
	            }

	            this._time = time;

	            this.onframe(delta);

	            this.trigger('frame', delta);

	            if (this.stage.update) {
	                this.stage.update();
	            }
	        },
	        /**
	         * 开始运行动画
	         */
	        start: function () {
	            var self = this;

	            this._running = true;

	            function step() {
	                if (self._running) {

	                    requestAnimationFrame(step);

	                    self._update();
	                }
	            }

	            this._time = new Date().getTime();
	            requestAnimationFrame(step);
	        },
	        /**
	         * 停止运行动画
	         */
	        stop: function () {
	            this._running = false;
	        },
	        /**
	         * 清除所有动画片段
	         */
	        clear: function () {
	            this._clips = [];
	        },
	        /**
	         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	         * @param  {Object} target
	         * @param  {Object} options
	         * @param  {boolean} [options.loop=false] 是否循环播放动画
	         * @param  {Function} [options.getter=null]
	         *         如果指定getter函数，会通过getter函数取属性值
	         * @param  {Function} [options.setter=null]
	         *         如果指定setter函数，会通过setter函数设置属性值
	         * @return {module:zrender/animation/Animation~Animator}
	         */
	        animate: function (target, options) {
	            options = options || {};
	            var animator = new Animator(
	                target,
	                options.loop,
	                options.getter,
	                options.setter
	            );

	            return animator;
	        }
	    };

	    util.mixin(Animation, Dispatcher);

	    module.exports = Animation;



/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Default canvas painter
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	 

	    var config = __webpack_require__(148);
	    var util = __webpack_require__(111);
	    var log = __webpack_require__(147);
	    var BoundingRect = __webpack_require__(123);

	    var Layer = __webpack_require__(194);

	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }

	    function isLayerValid(layer) {
	        if (!layer) {
	            return false;
	        }

	        if (layer.isBuildin) {
	            return true;
	        }

	        if (typeof(layer.resize) !== 'function'
	            || typeof(layer.refresh) !== 'function'
	        ) {
	            return false;
	        }

	        return true;
	    }

	    function preProcessLayer(layer) {
	        layer.__unusedCount++;
	    }

	    function postProcessLayer(layer) {
	        layer.__dirty = false;
	        if (layer.__unusedCount == 1) {
	            layer.clear();
	        }
	    }

	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var viewRect = new BoundingRect(0, 0, 0, 0);
	    function isDisplayableCulled(el, width, height) {
	        tmpRect.copy(el.getBoundingRect());
	        if (el.transform) {
	            tmpRect.applyTransform(el.transform);
	        }
	        viewRect.width = width;
	        viewRect.height = height;
	        return !tmpRect.intersect(viewRect);
	    }

	    function isClipPathChanged(clipPaths, prevClipPaths) {
	        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {
	            return true;
	        }
	        for (var i = 0; i < clipPaths.length; i++) {
	            if (clipPaths[i] !== prevClipPaths[i]) {
	                return true;
	            }
	        }
	    }

	    function doClip(clipPaths, ctx) {
	        for (var i = 0; i < clipPaths.length; i++) {
	            var clipPath = clipPaths[i];
	            var m;
	            if (clipPath.transform) {
	                m = clipPath.transform;
	                ctx.transform(
	                    m[0], m[1],
	                    m[2], m[3],
	                    m[4], m[5]
	                );
	            }
	            var path = clipPath.path;
	            path.beginPath(ctx);
	            clipPath.buildPath(path, clipPath.shape);
	            ctx.clip();
	            // Transform back
	            if (clipPath.transform) {
	                m = clipPath.invTransform;
	                ctx.transform(
	                    m[0], m[1],
	                    m[2], m[3],
	                    m[4], m[5]
	                );
	            }
	        }
	    }

	    /**
	     * @alias module:zrender/Painter
	     * @constructor
	     * @param {HTMLElement} root 绘图容器
	     * @param {module:zrender/Storage} storage
	     * @param {Ojbect} opts
	     */
	    var Painter = function (root, storage, opts) {
	        var singleCanvas = !root.nodeName // In node ?
	            || root.nodeName.toUpperCase() === 'CANVAS';

	        opts = opts || {};

	        /**
	         * @type {number}
	         */
	        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._singleCanvas = singleCanvas;
	        /**
	         * 绘图容器
	         * @type {HTMLElement}
	         */
	        this.root = root;

	        var rootStyle = root.style;

	        // In node environment using node-canvas
	        if (rootStyle) {
	            rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	            rootStyle['-webkit-user-select'] = 'none';
	            rootStyle['user-select'] = 'none';
	            rootStyle['-webkit-touch-callout'] = 'none';

	            root.innerHTML = '';
	        }

	        /**
	         * @type {module:zrender/Storage}
	         */
	        this.storage = storage;

	        if (!singleCanvas) {
	            var width = this._getWidth();
	            var height = this._getHeight();
	            this._width = width;
	            this._height = height;

	            var domRoot = document.createElement('div');
	            this._domRoot = domRoot;
	            var domRootStyle = domRoot.style;

	            // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	            domRootStyle.position = 'relative';
	            domRootStyle.overflow = 'hidden';
	            domRootStyle.width = this._width + 'px';
	            domRootStyle.height = this._height + 'px';
	            root.appendChild(domRoot);

	            /**
	             * @type {Object.<key, module:zrender/Layer>}
	             * @private
	             */
	            this._layers = {};
	            /**
	             * @type {Array.<number>}
	             * @private
	             */
	            this._zlevelList = [];
	        }
	        else {
	            // Use canvas width and height directly
	            var width = root.width;
	            var height = root.height;
	            this._width = width;
	            this._height = height;

	            // Create layer if only one given canvas
	            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
	            var mainLayer = new Layer(root, this, 1);
	            mainLayer.initContext();
	            // FIXME Use canvas width and height
	            // mainLayer.resize(width, height);
	            this._layers = {
	                0: mainLayer
	            };
	            this._zlevelList = [0];
	        }

	        this._layerConfig = {};

	        this.pathToImage = this._createPathToImage();
	    };

	    Painter.prototype = {

	        constructor: Painter,

	        /**
	         * If painter use a single canvas
	         * @return {boolean}
	         */
	        isSingleCanvas: function () {
	            return this._singleCanvas;
	        },
	        /**
	         * @return {HTMLDivElement}
	         */
	        getViewportRoot: function () {
	            return this._singleCanvas ? this._layers[0].dom : this._domRoot;
	        },

	        /**
	         * 刷新
	         * @param {boolean} [paintAll=false] 强制绘制所有displayable
	         */
	        refresh: function (paintAll) {
	            var list = this.storage.getDisplayList(true);
	            var zlevelList = this._zlevelList;

	            this._paintList(list, paintAll);

	            // Paint custum layers
	            for (var i = 0; i < zlevelList.length; i++) {
	                var z = zlevelList[i];
	                var layer = this._layers[z];
	                if (!layer.isBuildin && layer.refresh) {
	                    layer.refresh();
	                }
	            }

	            return this;
	        },

	        _paintList: function (list, paintAll) {

	            if (paintAll == null) {
	                paintAll = false;
	            }

	            this._updateLayerStatus(list);

	            var currentLayer;
	            var currentZLevel;
	            var ctx;

	            var viewWidth = this._width;
	            var viewHeight = this._height;

	            this.eachBuildinLayer(preProcessLayer);

	            // var invTransform = [];
	            var prevElClipPaths = null;

	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var elZLevel = this._singleCanvas ? 0 : el.zlevel;
	                // Change draw layer
	                if (currentZLevel !== elZLevel) {
	                    // Only 0 zlevel if only has one canvas
	                    currentZLevel = elZLevel;
	                    currentLayer = this.getLayer(currentZLevel);

	                    if (!currentLayer.isBuildin) {
	                        log(
	                            'ZLevel ' + currentZLevel
	                            + ' has been used by unkown layer ' + currentLayer.id
	                        );
	                    }

	                    ctx = currentLayer.ctx;

	                    // Reset the count
	                    currentLayer.__unusedCount = 0;

	                    if (currentLayer.__dirty || paintAll) {
	                        currentLayer.clear();
	                    }
	                }

	                if (
	                    (currentLayer.__dirty || paintAll)
	                    // Ignore invisible element
	                    && !el.invisible
	                    // Ignore transparent element
	                    && el.style.opacity !== 0
	                    // Ignore scale 0 element, in some environment like node-canvas
	                    // Draw a scale 0 element can cause all following draw wrong
	                    && el.scale[0] && el.scale[1]
	                    // Ignore culled element
	                    && !(el.culling && isDisplayableCulled(el, viewWidth, viewHeight))
	                ) {
	                    var clipPaths = el.__clipPaths;

	                    // Optimize when clipping on group with several elements
	                    if (isClipPathChanged(clipPaths, prevElClipPaths)) {
	                        // If has previous clipping state, restore from it
	                        if (prevElClipPaths) {
	                            ctx.restore();
	                        }
	                        // New clipping state
	                        if (clipPaths) {
	                            ctx.save();
	                            doClip(clipPaths, ctx);
	                        }
	                        prevElClipPaths = clipPaths;
	                    }
	                    el.beforeBrush && el.beforeBrush(ctx);
	                    el.brush(ctx, false);
	                    el.afterBrush && el.afterBrush(ctx);
	                }

	                el.__dirty = false;
	            }

	            // If still has clipping state
	            if (prevElClipPaths) {
	                ctx.restore();
	            }

	            this.eachBuildinLayer(postProcessLayer);
	        },

	        /**
	         * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	         * @param {number} zlevel
	         * @return {module:zrender/Layer}
	         */
	        getLayer: function (zlevel) {
	            if (this._singleCanvas) {
	                return this._layers[0];
	            }

	            var layer = this._layers[zlevel];
	            if (!layer) {
	                // Create a new layer
	                layer = new Layer('zr_' + zlevel, this, this.dpr);
	                layer.isBuildin = true;

	                if (this._layerConfig[zlevel]) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }

	                this.insertLayer(zlevel, layer);

	                // Context is created after dom inserted to document
	                // Or excanvas will get 0px clientWidth and clientHeight
	                layer.initContext();
	            }

	            return layer;
	        },

	        insertLayer: function (zlevel, layer) {

	            var layersMap = this._layers;
	            var zlevelList = this._zlevelList;
	            var len = zlevelList.length;
	            var prevLayer = null;
	            var i = -1;
	            var domRoot = this._domRoot;

	            if (layersMap[zlevel]) {
	                log('ZLevel ' + zlevel + ' has been used already');
	                return;
	            }
	            // Check if is a valid layer
	            if (!isLayerValid(layer)) {
	                log('Layer of zlevel ' + zlevel + ' is not valid');
	                return;
	            }

	            if (len > 0 && zlevel > zlevelList[0]) {
	                for (i = 0; i < len - 1; i++) {
	                    if (
	                        zlevelList[i] < zlevel
	                        && zlevelList[i + 1] > zlevel
	                    ) {
	                        break;
	                    }
	                }
	                prevLayer = layersMap[zlevelList[i]];
	            }
	            zlevelList.splice(i + 1, 0, zlevel);

	            if (prevLayer) {
	                var prevDom = prevLayer.dom;
	                if (prevDom.nextSibling) {
	                    domRoot.insertBefore(
	                        layer.dom,
	                        prevDom.nextSibling
	                    );
	                }
	                else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }
	            else {
	                if (domRoot.firstChild) {
	                    domRoot.insertBefore(layer.dom, domRoot.firstChild);
	                }
	                else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }

	            layersMap[zlevel] = layer;
	        },

	        // Iterate each layer
	        eachLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                cb.call(context, this._layers[z], z);
	            }
	        },

	        // Iterate each buildin layer
	        eachBuildinLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },

	        // Iterate each other layer except buildin layer
	        eachOtherLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (! layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },

	        /**
	         * 获取所有已创建的层
	         * @param {Array.<module:zrender/Layer>} [prevLayer]
	         */
	        getLayers: function () {
	            return this._layers;
	        },

	        _updateLayerStatus: function (list) {

	            var layers = this._layers;

	            var elCounts = {};

	            this.eachBuildinLayer(function (layer, z) {
	                elCounts[z] = layer.elCount;
	                layer.elCount = 0;
	            });

	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var zlevel = this._singleCanvas ? 0 : el.zlevel;
	                var layer = layers[zlevel];
	                if (layer) {
	                    layer.elCount++;
	                    // 已经被标记为需要刷新
	                    if (layer.__dirty) {
	                        continue;
	                    }
	                    layer.__dirty = el.__dirty;
	                }
	            }

	            // 层中的元素数量有发生变化
	            this.eachBuildinLayer(function (layer, z) {
	                if (elCounts[z] !== layer.elCount) {
	                    layer.__dirty = true;
	                }
	            });
	        },

	        /**
	         * 清除hover层外所有内容
	         */
	        clear: function () {
	            this.eachBuildinLayer(this._clearLayer);
	            return this;
	        },

	        _clearLayer: function (layer) {
	            layer.clear();
	        },

	        /**
	         * 修改指定zlevel的绘制参数
	         *
	         * @param {string} zlevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         */
	        configLayer: function (zlevel, config) {
	            if (config) {
	                var layerConfig = this._layerConfig;
	                if (!layerConfig[zlevel]) {
	                    layerConfig[zlevel] = config;
	                }
	                else {
	                    util.merge(layerConfig[zlevel], config, true);
	                }

	                var layer = this._layers[zlevel];

	                if (layer) {
	                    util.merge(layer, layerConfig[zlevel], true);
	                }
	            }
	        },

	        /**
	         * 删除指定层
	         * @param {number} zlevel 层所在的zlevel
	         */
	        delLayer: function (zlevel) {
	            var layers = this._layers;
	            var zlevelList = this._zlevelList;
	            var layer = layers[zlevel];
	            if (!layer) {
	                return;
	            }
	            layer.dom.parentNode.removeChild(layer.dom);
	            delete layers[zlevel];

	            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	        },

	        /**
	         * 区域大小变化后重绘
	         */
	        resize: function (width, height) {
	            var domRoot = this._domRoot;
	            // FIXME Why ?
	            domRoot.style.display = 'none';

	            width = width || this._getWidth();
	            height = height || this._getHeight();

	            domRoot.style.display = '';

	            // 优化没有实际改变的resize
	            if (this._width != width || height != this._height) {
	                domRoot.style.width = width + 'px';
	                domRoot.style.height = height + 'px';

	                for (var id in this._layers) {
	                    this._layers[id].resize(width, height);
	                }

	                this.refresh(true);
	            }

	            this._width = width;
	            this._height = height;

	            return this;
	        },

	        /**
	         * 清除单独的一个层
	         * @param {number} zlevel
	         */
	        clearLayer: function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (layer) {
	                layer.clear();
	            }
	        },

	        /**
	         * 释放
	         */
	        dispose: function () {
	            this.root.innerHTML = '';

	            this.root =
	            this.storage =

	            this._domRoot =
	            this._layers = null;
	        },

	        /**
	         * Get canvas which has all thing rendered
	         * @param {Object} opts
	         * @param {string} [opts.backgroundColor]
	         */
	        getRenderedCanvas: function (opts) {
	            opts = opts || {};
	            if (this._singleCanvas) {
	                return this._layers[0].dom;
	            }

	            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	            imageLayer.initContext();

	            var ctx = imageLayer.ctx;
	            imageLayer.clearColor = opts.backgroundColor;
	            imageLayer.clear();

	            var displayList = this.storage.getDisplayList(true);

	            for (var i = 0; i < displayList.length; i++) {
	                var el = displayList[i];
	                if (!el.invisible) {
	                    el.beforeBrush && el.beforeBrush(ctx);
	                    // TODO Check image cross origin
	                    el.brush(ctx, false);
	                    el.afterBrush && el.afterBrush(ctx);
	                }
	            }

	            return imageLayer.dom;
	        },
	        /**
	         * 获取绘图区域宽度
	         */
	        getWidth: function () {
	            return this._width;
	        },

	        /**
	         * 获取绘图区域高度
	         */
	        getHeight: function () {
	            return this._height;
	        },

	        _getWidth: function () {
	            var root = this.root;
	            var stl = document.defaultView.getComputedStyle(root);

	            // FIXME Better way to get the width and height when element has not been append to the document
	            return ((root.clientWidth || parseInt10(stl.width) || parseInt10(root.style.width))
	                    - (parseInt10(stl.paddingLeft) || 0)
	                    - (parseInt10(stl.paddingRight) || 0)) | 0;
	        },

	        _getHeight: function () {
	            var root = this.root;
	            var stl = document.defaultView.getComputedStyle(root);

	            return ((root.clientHeight || parseInt10(stl.height) || parseInt10(root.style.height))
	                    - (parseInt10(stl.paddingTop) || 0)
	                    - (parseInt10(stl.paddingBottom) || 0)) | 0;
	        },

	        _pathToImage: function (id, path, width, height, dpr) {
	            var canvas = document.createElement('canvas');
	            var ctx = canvas.getContext('2d');

	            canvas.width = width * dpr;
	            canvas.height = height * dpr;

	            ctx.clearRect(0, 0, width * dpr, height * dpr);

	            var pathTransform = {
	                position: path.position,
	                rotation: path.rotation,
	                scale: path.scale
	            };
	            path.position = [0, 0, 0];
	            path.rotation = 0;
	            path.scale = [1, 1];
	            if (path) {
	                path.brush(ctx);
	            }

	            var ImageShape = __webpack_require__(167);
	            var imgShape = new ImageShape({
	                id: id,
	                style: {
	                    x: 0,
	                    y: 0,
	                    image: canvas
	                }
	            });

	            if (pathTransform.position != null) {
	                imgShape.position = path.position = pathTransform.position;
	            }

	            if (pathTransform.rotation != null) {
	                imgShape.rotation = path.rotation = pathTransform.rotation;
	            }

	            if (pathTransform.scale != null) {
	                imgShape.scale = path.scale = pathTransform.scale;
	            }

	            return imgShape;
	        },

	        _createPathToImage: function () {
	            var me = this;

	            return function (id, e, width, height) {
	                return me._pathToImage(
	                    id, e, width, height, me.dpr
	                );
	            };
	        }
	    };

	    module.exports = Painter;



/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */


	    var util = __webpack_require__(111);
	    var config = __webpack_require__(148);

	    function returnFalse() {
	        return false;
	    }

	    /**
	     * 创建dom
	     *
	     * @inner
	     * @param {string} id dom id 待用
	     * @param {string} type dom type，such as canvas, div etc.
	     * @param {Painter} painter painter instance
	     * @param {number} number
	     */
	    function createDom(id, type, painter, dpr) {
	        var newDom = document.createElement(type);
	        var width = painter.getWidth();
	        var height = painter.getHeight();

	        var newDomStyle = newDom.style;
	        // 没append呢，请原谅我这样写，清晰~
	        newDomStyle.position = 'absolute';
	        newDomStyle.left = 0;
	        newDomStyle.top = 0;
	        newDomStyle.width = width + 'px';
	        newDomStyle.height = height + 'px';
	        newDom.width = width * dpr;
	        newDom.height = height * dpr;

	        // id不作为索引用，避免可能造成的重名，定义为私有属性
	        newDom.setAttribute('data-zr-dom-id', id);
	        return newDom;
	    }

	    /**
	     * @alias module:zrender/Layer
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @param {string} id
	     * @param {module:zrender/Painter} painter
	     * @param {number} [dpr]
	     */
	    var Layer = function(id, painter, dpr) {
	        var dom;
	        dpr = dpr || config.devicePixelRatio;
	        if (typeof id === 'string') {
	            dom = createDom(id, 'canvas', painter, dpr);
	        }
	        // Not using isDom because in node it will return false
	        else if (util.isObject(id)) {
	            dom = id;
	            id = dom.id;
	        }
	        this.id = id;
	        this.dom = dom;

	        var domStyle = dom.style;
	        if (domStyle) { // Not in node
	            dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	            domStyle['-webkit-user-select'] = 'none';
	            domStyle['user-select'] = 'none';
	            domStyle['-webkit-touch-callout'] = 'none';
	            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	        }

	        this.domBack = null;
	        this.ctxBack = null;

	        this.painter = painter;

	        this.config = null;

	        // Configs
	        /**
	         * 每次清空画布的颜色
	         * @type {string}
	         * @default 0
	         */
	        this.clearColor = 0;
	        /**
	         * 是否开启动态模糊
	         * @type {boolean}
	         * @default false
	         */
	        this.motionBlur = false;
	        /**
	         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @type {number}
	         * @default 0.7
	         */
	        this.lastFrameAlpha = 0.7;

	        /**
	         * Layer dpr
	         * @type {number}
	         */
	        this.dpr = dpr;
	    };

	    Layer.prototype = {

	        constructor: Layer,

	        elCount: 0,

	        __dirty: true,

	        initContext: function () {
	            this.ctx = this.dom.getContext('2d');

	            var dpr = this.dpr;
	            if (dpr != 1) {
	                this.ctx.scale(dpr, dpr);
	            }
	        },

	        createBackBuffer: function () {
	            var dpr = this.dpr;

	            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
	            this.ctxBack = this.domBack.getContext('2d');

	            if (dpr != 1) {
	                this.ctxBack.scale(dpr, dpr);
	            }
	        },

	        /**
	         * @param  {number} width
	         * @param  {number} height
	         */
	        resize: function (width, height) {
	            var dpr = this.dpr;

	            var dom = this.dom;
	            var domStyle = dom.style;
	            var domBack = this.domBack;

	            domStyle.width = width + 'px';
	            domStyle.height = height + 'px';

	            dom.width = width * dpr;
	            dom.height = height * dpr;

	            if (dpr != 1) {
	                this.ctx.scale(dpr, dpr);
	            }

	            if (domBack) {
	                domBack.width = width * dpr;
	                domBack.height = height * dpr;

	                if (dpr != 1) {
	                    this.ctxBack.scale(dpr, dpr);
	                }
	            }
	        },

	        /**
	         * 清空该层画布
	         * @param {boolean} clearAll Clear all with out motion blur
	         */
	        clear: function (clearAll) {
	            var dom = this.dom;
	            var ctx = this.ctx;
	            var width = dom.width;
	            var height = dom.height;

	            var haveClearColor = this.clearColor;
	            var haveMotionBLur = this.motionBlur && !clearAll;
	            var lastFrameAlpha = this.lastFrameAlpha;

	            var dpr = this.dpr;

	            if (haveMotionBLur) {
	                if (!this.domBack) {
	                    this.createBackBuffer();
	                }

	                this.ctxBack.globalCompositeOperation = 'copy';
	                this.ctxBack.drawImage(
	                    dom, 0, 0,
	                    width / dpr,
	                    height / dpr
	                );
	            }

	            ctx.clearRect(0, 0, width / dpr, height / dpr);
	            if (haveClearColor) {
	                ctx.save();
	                ctx.fillStyle = this.clearColor;
	                ctx.fillRect(0, 0, width / dpr, height / dpr);
	                ctx.restore();
	            }

	            if (haveMotionBLur) {
	                var domBack = this.domBack;
	                ctx.save();
	                ctx.globalAlpha = lastFrameAlpha;
	                ctx.drawImage(domBack, 0, 0, width / dpr, height / dpr);
	                ctx.restore();
	            }
	        }
	    };

	    module.exports = Layer;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(150);
	    var zrUtil = __webpack_require__(111);
	    var PI = Math.PI;
	    /**
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Object} [opts]
	     * @param {string} [opts.text]
	     * @param {string} [opts.color]
	     * @param {string} [opts.textColor]
	     * @return {module:zrender/Element}
	     */
	    module.exports = function (api, opts) {
	        opts = opts || {};
	        zrUtil.defaults(opts, {
	            text: 'loading',
	            color: '#c23531',
	            textColor: '#000',
	            maskColor: 'rgba(255, 255, 255, 0.8)',
	            zlevel: 0
	        });
	        var mask = new graphic.Rect({
	            style: {
	                fill: opts.maskColor
	            },
	            zlevel: opts.zlevel,
	            z: 10000
	        });
	        var arc = new graphic.Arc({
	            shape: {
	                startAngle: -PI / 2,
	                endAngle: -PI / 2 + 0.1,
	                r: 10
	            },
	            style: {
	                stroke: opts.color,
	                lineCap: 'round',
	                lineWidth: 5
	            },
	            zlevel: opts.zlevel,
	            z: 10001
	        });
	        var labelRect = new graphic.Rect({
	            style: {
	                fill: 'none',
	                text: opts.text,
	                textPosition: 'right',
	                textDistance: 10,
	                textFill: opts.textColor
	            },
	            zlevel: opts.zlevel,
	            z: 10001
	        });

	        arc.animateShape(true)
	            .when(1000, {
	                endAngle: PI * 3 / 2
	            })
	            .start('circularInOut');
	        arc.animateShape(true)
	            .when(1000, {
	                startAngle: PI * 3 / 2
	            })
	            .delay(300)
	            .start('circularInOut');

	        var group = new graphic.Group();
	        group.add(arc);
	        group.add(labelRect);
	        group.add(mask);
	        // Inject resize
	        group.resize = function () {
	            var cx = api.getWidth() / 2;
	            var cy = api.getHeight() / 2;
	            arc.setShape({
	                cx: cx,
	                cy: cy
	            });
	            var r = arc.shape.r;
	            labelRect.setShape({
	                x: cx - r,
	                y: cy - r,
	                width: r * 2,
	                height: r * 2
	            });

	            mask.setShape({
	                x: 0,
	                y: 0,
	                width: api.getWidth(),
	                height: api.getHeight()
	            });
	        };
	        group.resize();
	        return group;
	    };


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	
	    var Gradient = __webpack_require__(112);
	    module.exports = function (seriesType, styleType, ecModel) {
	        function encodeColor(seriesModel) {
	            var colorAccessPath = [styleType, 'normal', 'color'];
	            var colorList = ecModel.get('color');
	            var data = seriesModel.getData();
	            var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	                || colorList[seriesModel.seriesIndex % colorList.length];  // Default color

	            // FIXME Set color function or use the platte color
	            data.setVisual('color', color);

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof color === 'function' && !(color instanceof Gradient)) {
	                    data.each(function (idx) {
	                        data.setItemVisual(
	                            idx, 'color', color(seriesModel.getDataParams(idx))
	                        );
	                    });
	                }

	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var color = itemModel.get(colorAccessPath, true);
	                    if (color != null) {
	                        data.setItemVisual(idx, 'color', color);
	                    }
	                });
	            }
	        }
	        seriesType ? ecModel.eachSeriesByType(seriesType, encodeColor)
	            : ecModel.eachSeries(encodeColor);
	    };


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	// Compatitable with 2.0


	    var zrUtil = __webpack_require__(111);
	    var compatStyle = __webpack_require__(198);

	    function get(opt, path) {
	        path = path.split(',');
	        var obj = opt;
	        for (var i = 0; i < path.length; i++) {
	            obj = obj && obj[path[i]];
	            if (obj == null) {
	                break;
	            }
	        }
	        return obj;
	    }

	    function set(opt, path, val, overwrite) {
	        path = path.split(',');
	        var obj = opt;
	        var key;
	        for (var i = 0; i < path.length - 1; i++) {
	            key = path[i];
	            if (obj[key] == null) {
	                obj[key] = {};
	            }
	            obj = obj[key];
	        }
	        if (overwrite || obj[path[i]] == null) {
	            obj[path[i]] = val;
	        }
	    }

	    function compatLayoutProperties(option) {
	        each(LAYOUT_PROPERTIES, function (prop) {
	            if (prop[0] in option && !(prop[1] in option)) {
	                option[prop[1]] = option[prop[0]];
	            }
	        });
	    }

	    var LAYOUT_PROPERTIES = [
	        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']
	    ];

	    var COMPATITABLE_COMPONENTS = [
	        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'
	    ];

	    var COMPATITABLE_SERIES = [
	        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',
	        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',
	        'pie', 'radar', 'sankey', 'scatter', 'treemap'
	    ];

	    var each = zrUtil.each;

	    module.exports = function (option) {
	        each(option.series, function (seriesOpt) {
	            if (!zrUtil.isObject(seriesOpt)) {
	                return;
	            }

	            var seriesType = seriesOpt.type;

	            compatStyle(seriesOpt);

	            if (seriesType === 'pie' || seriesType === 'gauge') {
	                if (seriesOpt.clockWise != null) {
	                    seriesOpt.clockwise = seriesOpt.clockWise;
	                }
	            }
	            if (seriesType === 'gauge') {
	                var pointerColor = get(seriesOpt, 'pointer.color');
	                pointerColor != null
	                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	            }

	            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	                    compatLayoutProperties(seriesOpt);
	                    break;
	                }
	            }
	        });

	        // dataRange has changed to visualMap
	        if (option.dataRange) {
	            option.visualMap = option.dataRange;
	        }

	        each(COMPATITABLE_COMPONENTS, function (componentName) {
	            var options = option[componentName];
	            if (options) {
	                if (!zrUtil.isArray(options)) {
	                    options = [options];
	                }
	                each(options, function (option) {
	                    compatLayoutProperties(option);
	                });
	            }
	        });
	    };


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);

	    var POSSIBLE_STYLES = [
	        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',
	        'chordStyle', 'label', 'labelLine'
	    ];

	    function compatItemStyle(opt) {
	        var itemStyleOpt = opt && opt.itemStyle;
	        if (itemStyleOpt) {
	            zrUtil.each(POSSIBLE_STYLES, function (styleName) {
	                var normalItemStyleOpt = itemStyleOpt.normal;
	                var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].normal) {
	                        opt[styleName].normal = normalItemStyleOpt[styleName];
	                    }
	                    else {
	                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	                    }
	                    normalItemStyleOpt[styleName] = null;
	                }
	                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].emphasis) {
	                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	                    }
	                    else {
	                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	                    }
	                    emphasisItemStyleOpt[styleName] = null;
	                }
	            });
	        }
	    }

	    module.exports = function (seriesOpt) {
	        if (!seriesOpt) {
	            return;
	        }
	        compatItemStyle(seriesOpt);
	        compatItemStyle(seriesOpt.markPoint);
	        compatItemStyle(seriesOpt.markLine);
	        var data = seriesOpt.data;
	        if (data) {
	            for (var i = 0; i < data.length; i++) {
	                compatItemStyle(data[i]);
	            }
	            // mark point data
	            var markPoint = seriesOpt.markPoint;
	            if (markPoint && markPoint.data) {
	                var mpData = markPoint.data;
	                for (var i = 0; i < mpData.length; i++) {
	                    compatItemStyle(mpData[i]);
	                }
	            }
	            // mark line data
	            var markLine = seriesOpt.markLine;
	            if (markLine && markLine.data) {
	                var mlData = markLine.data;
	                for (var i = 0; i < mlData.length; i++) {
	                    if (zrUtil.isArray(mlData[i])) {
	                        compatItemStyle(mlData[i][0]);
	                        compatItemStyle(mlData[i][1]);
	                    }
	                    else {
	                        compatItemStyle(mlData[i]);
	                    }
	                }
	            }
	        }
	    };


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Legend component entry file8
	 */


	    __webpack_require__(200);
	    __webpack_require__(201);
	    __webpack_require__(202);

	    var echarts = __webpack_require__(109);
	    // Series Filter
	    echarts.registerProcessor('filter', __webpack_require__(205));


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);
	    var Model = __webpack_require__(116);

	    var LegendModel = __webpack_require__(109).extendComponentModel({

	        type: 'legend',

	        dependencies: ['series'],

	        layoutMode: {
	            type: 'box',
	            ignoreSize: true
	        },

	        init: function (option, parentModel, ecModel) {
	            this.mergeDefaultAndTheme(option, ecModel);

	            option.selected = option.selected || {};

	            this._updateData(ecModel);

	            var legendData = this._data;
	            // If has any selected in option.selected
	            var selectedMap = this.option.selected;
	            // If selectedMode is single, try to select one
	            if (legendData[0] && this.get('selectedMode') === 'single') {
	                var hasSelected = false;
	                for (var name in selectedMap) {
	                    if (selectedMap[name]) {
	                        this.select(name);
	                        hasSelected = true;
	                    }
	                }
	                // Try select the first if selectedMode is single
	                !hasSelected && this.select(legendData[0].get('name'));
	            }
	        },

	        mergeOption: function (option) {
	            LegendModel.superCall(this, 'mergeOption', option);

	            this._updateData(this.ecModel);
	        },

	        _updateData: function (ecModel) {
	            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	                if (typeof dataItem === 'string') {
	                    dataItem = {
	                        name: dataItem
	                    };
	                }
	                return new Model(dataItem, this, this.ecModel);
	            }, this);
	            this._data = legendData;

	            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	                return series.name;
	            });
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.legendDataProvider) {
	                    var data = seriesModel.legendDataProvider();
	                    availableNames = availableNames.concat(data.mapArray(data.getName));
	                }
	            });
	            /**
	             * @type {Array.<string>}
	             * @private
	             */
	            this._availableNames = availableNames;
	        },

	        /**
	         * @return {Array.<module:echarts/model/Model>}
	         */
	        getData: function () {
	            return this._data;
	        },

	        /**
	         * @param {string} name
	         */
	        select: function (name) {
	            var selected = this.option.selected;
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                var data = this._data;
	                zrUtil.each(data, function (dataItem) {
	                    selected[dataItem.get('name')] = false;
	                });
	            }
	            selected[name] = true;
	        },

	        /**
	         * @param {string} name
	         */
	        unSelect: function (name) {
	            if (this.get('selectedMode') !== 'single') {
	                this.option.selected[name] = false;
	            }
	        },

	        /**
	         * @param {string} name
	         */
	        toggleSelected: function (name) {
	            var selected = this.option.selected;
	            // Default is true
	            if (!(name in selected)) {
	                selected[name] = true;
	            }
	            this[selected[name] ? 'unSelect' : 'select'](name);
	        },

	        /**
	         * @param {string} name
	         */
	        isSelected: function (name) {
	            var selected = this.option.selected;
	            return !((name in selected) && !selected[name])
	                && zrUtil.indexOf(this._availableNames, name) >= 0;
	        },

	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 4,
	            show: true,

	            // 布局方式，默认为水平布局，可选为：
	            // 'horizontal' | 'vertical'
	            orient: 'horizontal',

	            left: 'center',
	            // right: 'center',

	            top: 'top',
	            // bottom: 'top',

	            // 水平对齐
	            // 'auto' | 'left' | 'right'
	            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	            align: 'auto',

	            backgroundColor: 'rgba(0,0,0,0)',
	            // 图例边框颜色
	            borderColor: '#ccc',
	            // 图例边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,
	            // 图例内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,
	            // 各个item之间的间隔，单位px，默认为10，
	            // 横向布局时为水平间隔，纵向布局时为纵向间隔
	            itemGap: 10,
	            // 图例图形宽度
	            itemWidth: 25,
	            // 图例图形高度
	            itemHeight: 14,
	            textStyle: {
	                // 图例文字颜色
	                color: '#333'
	            },
	            // formatter: '',
	            // 选择模式，默认开启图例开关
	            selectedMode: true
	            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	            // selected: null,
	            // 图例内容（详见legend.data，数组中每一项代表一个item
	            // data: [],
	        }
	    });

	    module.exports = LegendModel;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Legend action
	 */


	    var echarts = __webpack_require__(109);
	    var zrUtil = __webpack_require__(111);

	    function legendSelectActionHandler(methodName, payload, ecModel) {
	        var selectedMap = {};
	        var isToggleSelect = methodName === 'toggleSelected';
	        var isSelected;
	        // Update all legend components
	        ecModel.eachComponent('legend', function (legendModel) {
	            if (isToggleSelect && isSelected != null) {
	                // Force other legend has same selected status
	                // Or the first is toggled to true and other are toggled to false
	                // In the case one legend has some item unSelected in option. And if other legend
	                // doesn't has the item, they will assume it is selected.
	                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	            }
	            else {
	                legendModel[methodName](payload.name);
	                isSelected = legendModel.isSelected(payload.name);
	            }
	            var legendData = legendModel.getData();
	            zrUtil.each(legendData, function (model) {
	                var name = model.get('name');
	                // Wrap element
	                if (name === '\n' || name === '') {
	                    return;
	                }
	                var isItemSelected = legendModel.isSelected(name);
	                if (name in selectedMap) {
	                    // Unselected if any legend is unselected
	                    selectedMap[name] = selectedMap[name] && isItemSelected;
	                }
	                else {
	                    selectedMap[name] = isItemSelected;
	                }
	            });
	        });
	        // Return the event explicitly
	        return {
	            name: payload.name,
	            selected: selectedMap
	        };
	    }
	    /**
	     * @event legendToggleSelect
	     * @type {Object}
	     * @property {string} type 'legendToggleSelect'
	     * @property {string} [from]
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendToggleSelect', 'legendselectchanged',
	        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')
	    );

	    /**
	     * @event legendSelect
	     * @type {Object}
	     * @property {string} type 'legendSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendSelect', 'legendselected',
	        zrUtil.curry(legendSelectActionHandler, 'select')
	    );

	    /**
	     * @event legendUnSelect
	     * @type {Object}
	     * @property {string} type 'legendUnSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendUnSelect', 'legendunselected',
	        zrUtil.curry(legendSelectActionHandler, 'unSelect')
	    );


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var symbolCreator = __webpack_require__(203);
	    var graphic = __webpack_require__(150);
	    var listComponentHelper = __webpack_require__(204);

	    var curry = zrUtil.curry;

	    var LEGEND_DISABLE_COLOR = '#ccc';

	    function dispatchSelectAction(name, api) {
	        api.dispatchAction({
	            type: 'legendToggleSelect',
	            name: name
	        });
	    }

	    function dispatchHighlightAction(seriesModel, dataName, api) {
	        seriesModel.get('legendHoverLink') && api.dispatchAction({
	            type: 'highlight',
	            seriesName: seriesModel.name,
	            name: dataName
	        });
	    }

	    function dispatchDownplayAction(seriesModel, dataName, api) {
	        seriesModel.get('legendHoverLink') && api.dispatchAction({
	            type: 'downplay',
	            seriesName: seriesModel.name,
	            name: dataName
	        });
	    }

	    module.exports = __webpack_require__(109).extendComponentView({

	        type: 'legend',

	        init: function () {
	            this._symbolTypeStore = {};
	        },

	        render: function (legendModel, ecModel, api) {
	            var group = this.group;
	            group.removeAll();

	            if (!legendModel.get('show')) {
	                return;
	            }

	            var selectMode = legendModel.get('selectedMode');
	            var itemAlign = legendModel.get('align');

	            if (itemAlign === 'auto') {
	                itemAlign = (legendModel.get('left') === 'right'
	                    && legendModel.get('orient') === 'vertical')
	                    ? 'right' : 'left';
	            }

	            var legendDrawedMap = {};

	            zrUtil.each(legendModel.getData(), function (itemModel) {
	                var name = itemModel.get('name');

	                // Use empty string or \n as a newline string
	                if (name === '' || name === '\n') {
	                    group.add(new graphic.Group({
	                        newline: true
	                    }));
	                    return;
	                }

	                var seriesModel = ecModel.getSeriesByName(name)[0];

	                if (legendDrawedMap[name]) {
	                    // Series not exists
	                    return;
	                }

	                // Series legend
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    var color = data.getVisual('color');

	                    // If color is a callback function
	                    if (typeof color === 'function') {
	                        // Use the first data
	                        color = color(seriesModel.getDataParams(0));
	                    }

	                    // Using rect symbol defaultly
	                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	                    var symbolType = data.getVisual('symbol');

	                    var itemGroup = this._createItem(
	                        name, itemModel, legendModel,
	                        legendSymbolType, symbolType,
	                        itemAlign, color,
	                        selectMode
	                    );

	                    itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, '', api))
	                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, '', api));

	                    legendDrawedMap[name] = true;
	                }
	                else {
	                    // Data legend of pie, funnel
	                    ecModel.eachRawSeries(function (seriesModel) {
	                        // In case multiple series has same data name
	                        if (legendDrawedMap[name]) {
	                            return;
	                        }
	                        if (seriesModel.legendDataProvider) {
	                            var data = seriesModel.legendDataProvider();
	                            var idx = data.indexOfName(name);

	                            var color = data.getItemVisual(idx, 'color');

	                            var legendSymbolType = 'roundRect';

	                            var itemGroup = this._createItem(
	                                name, itemModel, legendModel,
	                                legendSymbolType, null,
	                                itemAlign, color,
	                                selectMode
	                            );

	                            itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                                // FIXME Should not specify the series name
	                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))
	                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));

	                            legendDrawedMap[name] = true;
	                        }
	                    }, this);
	                }
	            }, this);

	            listComponentHelper.layout(group, legendModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, legendModel);
	        },

	        _createItem: function (
	            name, itemModel, legendModel,
	            legendSymbolType, symbolType,
	            itemAlign, color, selectMode
	        ) {
	            var itemWidth = legendModel.get('itemWidth');
	            var itemHeight = legendModel.get('itemHeight');

	            var isSelected = legendModel.isSelected(name);
	            var itemGroup = new graphic.Group();

	            var textStyleModel = itemModel.getModel('textStyle');

	            var itemIcon = itemModel.get('icon');

	            // Use user given icon first
	            legendSymbolType = itemIcon || legendSymbolType;
	            itemGroup.add(symbolCreator.createSymbol(
	                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : LEGEND_DISABLE_COLOR
	            ));

	            // Compose symbols
	            // PENDING
	            if (!itemIcon && symbolType
	                // At least show one symbol, can't be all none
	                && ((symbolType !== legendSymbolType) || symbolType == 'none')
	            ) {
	                var size = itemHeight * 0.8;
	                if (symbolType === 'none') {
	                    symbolType = 'circle';
	                }
	                // Put symbol in the center
	                itemGroup.add(symbolCreator.createSymbol(
	                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,
	                    isSelected ? color : LEGEND_DISABLE_COLOR
	                ));
	            }

	            // Text
	            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	            var textAlign = itemAlign;

	            var formatter = legendModel.get('formatter');
	            if (typeof formatter === 'string' && formatter) {
	                name = formatter.replace('{name}', name);
	            }
	            else if (typeof formatter === 'function') {
	                name = formatter(name);
	            }

	            var text = new graphic.Text({
	                style: {
	                    text: name,
	                    x: textX,
	                    y: itemHeight / 2,
	                    fill: isSelected ? textStyleModel.getTextColor() : LEGEND_DISABLE_COLOR,
	                    textFont: textStyleModel.getFont(),
	                    textAlign: textAlign,
	                    textVerticalAlign: 'middle'
	                }
	            });
	            itemGroup.add(text);

	            // Add a invisible rect to increase the area of mouse hover
	            itemGroup.add(new graphic.Rect({
	                shape: itemGroup.getBoundingRect(),
	                invisible: true
	            }));

	            itemGroup.eachChild(function (child) {
	                child.silent = !selectMode;
	            });

	            this.group.add(itemGroup);

	            graphic.setHoverStyle(itemGroup);

	            return itemGroup;
	        }
	    });


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Symbol factory


	    var graphic = __webpack_require__(150);
	    var BoundingRect = __webpack_require__(123);

	    /**
	     * Triangle shape
	     * @inner
	     */
	    var Triangle = graphic.extendShape({
	        type: 'triangle',
	        shape: {
	            cx: 0,
	            cy: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (path, shape) {
	            var cx = shape.cx;
	            var cy = shape.cy;
	            var width = shape.width / 2;
	            var height = shape.height / 2;
	            path.moveTo(cx, cy - height);
	            path.lineTo(cx + width, cy + height);
	            path.lineTo(cx - width, cy + height);
	            path.closePath();
	        }
	    });
	    /**
	     * Diamond shape
	     * @inner
	     */
	    var Diamond = graphic.extendShape({
	        type: 'diamond',
	        shape: {
	            cx: 0,
	            cy: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (path, shape) {
	            var cx = shape.cx;
	            var cy = shape.cy;
	            var width = shape.width / 2;
	            var height = shape.height / 2;
	            path.moveTo(cx, cy - height);
	            path.lineTo(cx + width, cy);
	            path.lineTo(cx, cy + height);
	            path.lineTo(cx - width, cy);
	            path.closePath();
	        }
	    });

	    /**
	     * Pin shape
	     * @inner
	     */
	    var Pin = graphic.extendShape({
	        type: 'pin',
	        shape: {
	            // x, y on the cusp
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        buildPath: function (path, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var w = shape.width / 5 * 3;
	            // Height must be larger than width
	            var h = Math.max(w, shape.height);
	            var r = w / 2;

	            // Dist on y with tangent point and circle center
	            var dy = r * r / (h - r);
	            var cy = y - h + r + dy;
	            var angle = Math.asin(dy / r);
	            // Dist on x with tangent point and circle center
	            var dx = Math.cos(angle) * r;

	            var tanX = Math.sin(angle);
	            var tanY = Math.cos(angle);

	            path.arc(
	                x, cy, r,
	                Math.PI - angle,
	                Math.PI * 2 + angle
	            );

	            var cpLen = r * 0.6;
	            var cpLen2 = r * 0.7;
	            path.bezierCurveTo(
	                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,
	                x, y - cpLen2,
	                x, y
	            );
	            path.bezierCurveTo(
	                x, y - cpLen2,
	                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,
	                x - dx, cy + dy
	            );
	            path.closePath();
	        }
	    });

	    /**
	     * Arrow shape
	     * @inner
	     */
	    var Arrow = graphic.extendShape({

	        type: 'arrow',

	        shape: {
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        buildPath: function (ctx, shape) {
	            var height = shape.height;
	            var width = shape.width;
	            var x = shape.x;
	            var y = shape.y;
	            var dx = width / 3 * 2;
	            ctx.moveTo(x, y);
	            ctx.lineTo(x + dx, y + height);
	            ctx.lineTo(x, y + height / 4 * 3);
	            ctx.lineTo(x - dx, y + height);
	            ctx.lineTo(x, y);
	            ctx.closePath();
	        }
	    });

	    /**
	     * Map of path contructors
	     * @type {Object.<string, module:zrender/graphic/Path>}
	     */
	    var symbolCtors = {
	        line: graphic.Line,

	        rect: graphic.Rect,

	        roundRect: graphic.Rect,

	        square: graphic.Rect,

	        circle: graphic.Circle,

	        diamond: Diamond,

	        pin: Pin,

	        arrow: Arrow,

	        triangle: Triangle
	    };

	    var symbolShapeMakers = {

	        line: function (x, y, w, h, shape) {
	            // FIXME
	            shape.x1 = x;
	            shape.y1 = y + h / 2;
	            shape.x2 = x + w;
	            shape.y2 = y + h / 2;
	        },

	        rect: function (x, y, w, h, shape) {
	            shape.x = x;
	            shape.y = y;
	            shape.width = w;
	            shape.height = h;
	        },

	        roundRect: function (x, y, w, h, shape) {
	            shape.x = x;
	            shape.y = y;
	            shape.width = w;
	            shape.height = h;
	            shape.r = Math.min(w, h) / 4;
	        },

	        square: function (x, y, w, h, shape) {
	            var size = Math.min(w, h);
	            shape.x = x;
	            shape.y = y;
	            shape.width = size;
	            shape.height = size;
	        },

	        circle: function (x, y, w, h, shape) {
	            // Put circle in the center of square
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.r = Math.min(w, h) / 2;
	        },

	        diamond: function (x, y, w, h, shape) {
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },

	        pin: function (x, y, w, h, shape) {
	            shape.x = x + w / 2;
	            shape.y = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },

	        arrow: function (x, y, w, h, shape) {
	            shape.x = x + w / 2;
	            shape.y = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },

	        triangle: function (x, y, w, h, shape) {
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        }
	    };

	    var symbolBuildProxies = {};
	    for (var name in symbolCtors) {
	        symbolBuildProxies[name] = new symbolCtors[name]();
	    }

	    var Symbol = graphic.extendShape({

	        type: 'symbol',

	        shape: {
	            symbolType: '',
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        beforeBrush: function () {
	            var style = this.style;
	            var shape = this.shape;
	            // FIXME
	            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	                style.textPosition = ['50%', '40%'];
	                style.textAlign = 'center';
	                style.textVerticalAlign = 'middle';
	            }
	        },

	        buildPath: function (ctx, shape) {
	            var symbolType = shape.symbolType;
	            var proxySymbol = symbolBuildProxies[symbolType];
	            if (shape.symbolType !== 'none') {
	                if (!proxySymbol) {
	                    // Default rect
	                    symbolType = 'rect';
	                    proxySymbol = symbolBuildProxies[symbolType];
	                }
	                symbolShapeMakers[symbolType](
	                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape
	                );
	                proxySymbol.buildPath(ctx, proxySymbol.shape);
	            }
	        }
	    });

	    // Provide setColor helper method to avoid determine if set the fill or stroke outside
	    var symbolPathSetColor = function (color) {
	        if (this.type !== 'image') {
	            var symbolStyle = this.style;
	            var symbolShape = this.shape;
	            if (symbolShape && symbolShape.symbolType === 'line') {
	                symbolStyle.stroke = color;
	            }
	            else if (this.__isEmptyBrush) {
	                symbolStyle.stroke = color;
	                symbolStyle.fill = '#fff';
	            }
	            else {
	                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	                symbolStyle.fill && (symbolStyle.fill = color);
	                symbolStyle.stroke && (symbolStyle.stroke = color);
	            }
	            this.dirty();
	        }
	    };

	    var symbolUtil = {
	        /**
	         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	         * @param {string} symbolType
	         * @param {number} x
	         * @param {number} y
	         * @param {number} w
	         * @param {number} h
	         * @param {string} color
	         */
	        createSymbol: function (symbolType, x, y, w, h, color) {
	            var isEmpty = symbolType.indexOf('empty') === 0;
	            if (isEmpty) {
	                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	            }
	            var symbolPath;

	            if (symbolType.indexOf('image://') === 0) {
	                symbolPath = new graphic.Image({
	                    style: {
	                        image: symbolType.slice(8),
	                        x: x,
	                        y: y,
	                        width: w,
	                        height: h
	                    }
	                });
	            }
	            else if (symbolType.indexOf('path://') === 0) {
	                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
	            }
	            else {
	                symbolPath = new Symbol({
	                    shape: {
	                        symbolType: symbolType,
	                        x: x,
	                        y: y,
	                        width: w,
	                        height: h
	                    }
	                });
	            }

	            symbolPath.__isEmptyBrush = isEmpty;

	            symbolPath.setColor = symbolPathSetColor;

	            symbolPath.setColor(color);

	            return symbolPath;
	        }
	    };

	    module.exports = symbolUtil;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	
	    // List layout
	    var layout = __webpack_require__(129);
	    var formatUtil = __webpack_require__(114);
	    var graphic = __webpack_require__(150);

	    function positionGroup(group, model, api) {
	        layout.positionGroup(
	            group, model.getBoxLayoutParams(),
	            {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            model.get('padding')
	        );
	    }

	    module.exports = {
	        /**
	         * Layout list like component.
	         * It will box layout each items in group of component and then position the whole group in the viewport
	         * @param {module:zrender/group/Group} group
	         * @param {module:echarts/model/Component} componentModel
	         * @param {module:echarts/ExtensionAPI}
	         */
	        layout: function (group, componentModel, api) {
	            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }, componentModel.get('padding'));
	            layout.box(
	                componentModel.get('orient'),
	                group,
	                componentModel.get('itemGap'),
	                rect.width,
	                rect.height
	            );

	            positionGroup(group, componentModel, api);
	        },

	        addBackground: function (group, componentModel) {
	            var padding = formatUtil.normalizeCssArray(
	                componentModel.get('padding')
	            );
	            var boundingRect = group.getBoundingRect();
	            var style = componentModel.getItemStyle(['color', 'opacity']);
	            style.fill = componentModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                shape: {
	                    x: boundingRect.x - padding[3],
	                    y: boundingRect.y - padding[0],
	                    width: boundingRect.width + padding[1] + padding[3],
	                    height: boundingRect.height + padding[0] + padding[2]
	                },
	                style: style,
	                silent: true,
	                z2: -1
	            });
	            graphic.subPixelOptimizeRect(rect);

	            group.add(rect);
	        }
	    };


/***/ },
/* 205 */
/***/ function(module, exports) {

	
	   module.exports = function (ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (legendModels && legendModels.length) {
	            ecModel.filterSeries(function (series) {
	                // If in any legend component the status is not selected.
	                // Because in legend series is assumed selected when it is not in the legend data.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(series.name)) {
	                        return false;
	                    }
	                }
	                return true;
	            });
	        }
	    };


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	// FIXME Better way to pack data in graphic element


	    __webpack_require__(207);

	    __webpack_require__(208);

	    // Show tip action
	    /**
	     * @action
	     * @property {string} type
	     * @property {number} seriesIndex
	     * @property {number} dataIndex
	     * @property {number} [x]
	     * @property {number} [y]
	     */
	    __webpack_require__(109).registerAction(
	        {
	            type: 'showTip',
	            event: 'showTip',
	            update: 'none'
	        },
	        // noop
	        function () {}
	    );
	    // Hide tip action
	    __webpack_require__(109).registerAction(
	        {
	            type: 'hideTip',
	            event: 'hideTip',
	            update: 'none'
	        },
	        // noop
	        function () {}
	    );


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(109).extendComponentModel({

	        type: 'tooltip',

	        defaultOption: {
	            zlevel: 0,

	            z: 8,

	            show: true,

	            // tooltip主体内容
	            showContent: true,

	            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	            trigger: 'item',

	            // 触发条件，支持 'click' | 'mousemove'
	            triggerOn: 'mousemove',

	            // 是否永远显示 content
	            alwaysShowContent: false,

	            // 位置 {Array} | {Function}
	            // position: null

	            // 内容格式器：{string}（Template） ¦ {Function}
	            // formatter: null

	            showDelay: 0,

	            // 隐藏延迟，单位ms
	            hideDelay: 100,

	            // 动画变换时间，单位s
	            transitionDuration: 0.4,

	            enterable: false,

	            // 提示背景颜色，默认为透明度为0.7的黑色
	            backgroundColor: 'rgba(50,50,50,0.7)',

	            // 提示边框颜色
	            borderColor: '#333',

	            // 提示边框圆角，单位px，默认为4
	            borderRadius: 4,

	            // 提示边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,

	            // 提示内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,

	            // Extra css text
	            extraCssText: '',

	            // 坐标轴指示器，坐标轴触发有效
	            axisPointer: {
	                // 默认为直线
	                // 可选为：'line' | 'shadow' | 'cross'
	                type: 'line',

	                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	                // 极坐标系会默认选择 angle 轴
	                axis: 'auto',

	                animation: true,
	                animationDurationUpdate: 200,
	                animationEasingUpdate: 'exponentialOut',

	                // 直线指示器样式设置
	                lineStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'solid'
	                },

	                crossStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'dashed',

	                    // TODO formatter
	                    textStyle: {}
	                },

	                // 阴影指示器样式设置
	                shadowStyle: {
	                    color: 'rgba(150,150,150,0.3)'
	                }
	            },
	            textStyle: {
	                color: '#fff',
	                fontSize: 14
	            }
	        }
	    });


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	

	    var TooltipContent = __webpack_require__(209);
	    var graphic = __webpack_require__(150);
	    var zrUtil = __webpack_require__(111);
	    var formatUtil = __webpack_require__(114);
	    var numberUtil = __webpack_require__(115);
	    var parsePercent = numberUtil.parsePercent;
	    var env = __webpack_require__(186);

	    function dataEqual(a, b) {
	        if (!a || !b) {
	            return false;
	        }
	        var round = numberUtil.round;
	        return round(a[0]) === round(b[0])
	            && round(a[1]) === round(b[1]);
	    }
	    /**
	     * @inner
	     */
	    function makeLineShape(x1, y1, x2, y2) {
	        return {
	            x1: x1,
	            y1: y1,
	            x2: x2,
	            y2: y2
	        };
	    }

	    /**
	     * @inner
	     */
	    function makeRectShape(x, y, width, height) {
	        return {
	            x: x,
	            y: y,
	            width: width,
	            height: height
	        };
	    }

	    /**
	     * @inner
	     */
	    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	        return {
	            cx: cx,
	            cy: cy,
	            r0: r0,
	            r: r,
	            startAngle: startAngle,
	            endAngle: endAngle,
	            clockwise: true
	        };
	    }

	    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	        var width = el.clientWidth;
	        var height = el.clientHeight;
	        var gap = 20;

	        if (x + width + gap > viewWidth) {
	            x -= width + gap;
	        }
	        else {
	            x += gap;
	        }
	        if (y + height + gap > viewHeight) {
	            y -= height + gap;
	        }
	        else {
	            y += gap;
	        }
	        return [x, y];
	    }

	    function calcTooltipPosition(position, rect, dom) {
	        var domWidth = dom.clientWidth;
	        var domHeight = dom.clientHeight;
	        var gap = 5;
	        var x = 0;
	        var y = 0;
	        var rectWidth = rect.width;
	        var rectHeight = rect.height;
	        switch (position) {
	            case 'inside':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	                break;
	            case 'top':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y - domHeight - gap;
	                break;
	            case 'bottom':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y + rectHeight + gap;
	                break;
	            case 'left':
	                x = rect.x - domWidth - gap;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	                break;
	            case 'right':
	                x = rect.x + rectWidth + gap;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	        }
	        return [x, y];
	    }

	    /**
	     * @param  {string|Function|Array.<number>} positionExpr
	     * @param  {number} x Mouse x
	     * @param  {number} y Mouse y
	     * @param  {module:echarts/component/tooltip/TooltipContent} content
	     * @param  {Object|<Array.<Object>} params
	     * @param  {module:zrender/Element} el target element
	     * @param  {module:echarts/ExtensionAPI} api
	     * @return {Array.<number>}
	     */
	    function updatePosition(positionExpr, x, y, content, params, el, api) {
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();

	        var rect = el && el.getBoundingRect().clone();
	        el && rect.applyTransform(el.transform);
	        if (typeof positionExpr === 'function') {
	            // Callback of position can be an array or a string specify the positiont
	            positionExpr = positionExpr([x, y], params, rect);
	        }

	        if (zrUtil.isArray(positionExpr)) {
	            x = parsePercent(positionExpr[0], viewWidth);
	            y = parsePercent(positionExpr[1], viewHeight);
	        }
	        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	        else if (typeof positionExpr === 'string' && el) {
	            var pos = calcTooltipPosition(
	                positionExpr, rect, content.el
	            );
	            x = pos[0];
	            y = pos[1];
	        }
	        else {
	            var pos = refixTooltipPosition(
	                x, y, content.el, viewWidth, viewHeight
	            );
	            x = pos[0];
	            y = pos[1];
	        }

	        content.moveTo(x, y);
	    }

	    function ifSeriesSupportAxisTrigger(seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var trigger = seriesModel.get('tooltip.trigger', true);
	        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
	        return !(!coordSys
	            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'single')
	            || trigger === 'item');
	    }

	    __webpack_require__(109).extendComponentView({

	        type: 'tooltip',

	        _axisPointers: {},

	        init: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var tooltipContent = new TooltipContent(api.getDom(), api);
	            this._tooltipContent = tooltipContent;

	            api.on('showTip', this._manuallyShowTip, this);
	            api.on('hideTip', this._manuallyHideTip, this);
	        },

	        render: function (tooltipModel, ecModel, api) {
	            if (env.node) {
	                return;
	            }

	            // Reset
	            this.group.removeAll();

	            /**
	             * @type {Object}
	             * @private
	             */
	            this._axisPointers = {};

	            /**
	             * @private
	             * @type {module:echarts/component/tooltip/TooltipModel}
	             */
	            this._tooltipModel = tooltipModel;

	            /**
	             * @private
	             * @type {module:echarts/model/Global}
	             */
	            this._ecModel = ecModel;

	            /**
	             * @private
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this._api = api;

	            /**
	             * @type {Object}
	             * @private
	             */
	            this._lastHover = {
	                // data
	                // payloadBatch
	            };

	            var tooltipContent = this._tooltipContent;
	            tooltipContent.update();
	            tooltipContent.enterable = tooltipModel.get('enterable');
	            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');

	            /**
	             * @type {Object.<string, Array>}
	             */
	            this._seriesGroupByAxis = this._prepareAxisTriggerData(
	                tooltipModel, ecModel
	            );

	            var crossText = this._crossText;
	            if (crossText) {
	                this.group.add(crossText);
	            }

	            // Try to keep the tooltip show when refreshing
	            if (this._lastX != null && this._lastY != null) {
	                var self = this;
	                clearTimeout(this._refreshUpdateTimeout);
	                this._refreshUpdateTimeout = setTimeout(function () {
	                    // Show tip next tick after other charts are rendered
	                    // In case highlight action has wrong result
	                    // FIXME
	                    self._manuallyShowTip({
	                        x: self._lastX,
	                        y: self._lastY
	                    });
	                });
	            }

	            var zr = this._api.getZr();
	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);
	            if (tooltipModel.get('triggerOn') === 'click') {
	                zr.on('click', this._tryShow, this);
	            }
	            else {
	                zr.on('mousemove', this._mousemove, this);
	                zr.on('mouseout', this._hide, this);
	                zr.on('globalout', this._hide, this);
	            }
	        },

	        _mousemove: function (e) {
	            var showDelay = this._tooltipModel.get('showDelay');
	            var self = this;
	            clearTimeout(this._showTimeout);
	            if (showDelay > 0) {
	                this._showTimeout = setTimeout(function () {
	                    self._tryShow(e);
	                }, showDelay);
	            }
	            else {
	                this._tryShow(e);
	            }
	        },

	        /**
	         * Show tip manually by
	         *  dispatchAction({
	         *      type: 'showTip',
	         *      x: 10,
	         *      y: 10
	         *  });
	         * Or
	         *  dispatchAction({
	         *      type: 'showTip',
	         *      seriesIndex: 0,
	         *      dataIndex: 1
	         *  });
	         *
	         *  TODO Batch
	         */
	        _manuallyShowTip: function (event) {
	            // From self
	            if (event.from === this.uid) {
	                return;
	            }

	            var ecModel = this._ecModel;
	            var seriesIndex = event.seriesIndex;
	            var dataIndex = event.dataIndex;
	            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	            var api = this._api;

	            if (event.x == null || event.y == null) {
	                if (!seriesModel) {
	                    // Find the first series can use axis trigger
	                    ecModel.eachSeries(function (_series) {
	                        if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
	                            seriesModel = _series;
	                        }
	                    });
	                }
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    if (dataIndex == null) {
	                        dataIndex = data.indexOfName(event.name);
	                    }
	                    var el = data.getItemGraphicEl(dataIndex);
	                    var cx, cy;
	                    // Try to get the point in coordinate system
	                    var coordSys = seriesModel.coordinateSystem;
	                    if (coordSys && coordSys.dataToPoint) {
	                        var point = coordSys.dataToPoint(
	                            data.getValues(
	                                zrUtil.map(coordSys.dimensions, function (dim) {
	                                    return seriesModel.coordDimToDataDim(dim)[0];
	                                }), dataIndex, true
	                            )
	                        );
	                        cx = point && point[0];
	                        cy = point && point[1];
	                    }
	                    else if (el) {
	                        // Use graphic bounding rect
	                        var rect = el.getBoundingRect().clone();
	                        rect.applyTransform(el.transform);
	                        cx = rect.x + rect.width / 2;
	                        cy = rect.y + rect.height / 2;
	                    }
	                    if (cx != null && cy != null) {
	                        this._tryShow({
	                            offsetX: cx,
	                            offsetY: cy,
	                            target: el,
	                            event: {}
	                        });
	                    }
	                }
	            }
	            else {
	                var el = api.getZr().handler.findHover(event.x, event.y);
	                this._tryShow({
	                    offsetX: event.x,
	                    offsetY: event.y,
	                    target: el,
	                    event: {}
	                });
	            }
	        },

	        _manuallyHideTip: function (e) {
	            if (e.from === this.uid) {
	                return;
	            }

	            this._hide();
	        },

	        _prepareAxisTriggerData: function (tooltipModel, ecModel) {
	            // Prepare data for axis trigger
	            var seriesGroupByAxis = {};
	            ecModel.eachSeries(function (seriesModel) {
	                if (ifSeriesSupportAxisTrigger(seriesModel)) {
	                    var coordSys = seriesModel.coordinateSystem;
	                    var baseAxis;
	                    var key;

	                    // Only cartesian2d, polar and single support axis trigger
	                    if (coordSys.type === 'cartesian2d') {
	                        // FIXME `axisPointer.axis` is not baseAxis
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + baseAxis.index;
	                    }
	                    else if (coordSys.type === 'single') {
	                        baseAxis = coordSys.getAxis();
	                        key = baseAxis.dim + baseAxis.type;
	                    }
	                    else {
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + coordSys.name;
	                    }

	                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
	                        coordSys: [],
	                        series: []
	                    };
	                    seriesGroupByAxis[key].coordSys.push(coordSys);
	                    seriesGroupByAxis[key].series.push(seriesModel);
	                }
	            }, this);

	            return seriesGroupByAxis;
	        },

	        /**
	         * mousemove handler
	         * @param {Object} e
	         * @private
	         */
	        _tryShow: function (e) {
	            var el = e.target;
	            var tooltipModel = this._tooltipModel;
	            var globalTrigger = tooltipModel.get('trigger');
	            var ecModel = this._ecModel;
	            var api = this._api;

	            if (!tooltipModel) {
	                return;
	            }

	            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	            this._lastX = e.offsetX;
	            this._lastY = e.offsetY;

	            // Always show item tooltip if mouse is on the element with dataIndex
	            if (el && el.dataIndex != null) {
	                // Use dataModel in element if possible
	                // Used when mouseover on a element like markPoint or edge
	                // In which case, the data is not main data in series.
	                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                var dataIndex = el.dataIndex;
	                var itemModel = dataModel.getData().getItemModel(dataIndex);
	                // Series or single data may use item trigger when global is axis trigger
	                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }
	                else {
	                    // Reset ticket
	                    this._ticket = '';
	                    // If either single data or series use item trigger
	                    this._hideAxisPointer();
	                    // Reset last hover and dispatch downplay action
	                    this._resetLastHover();

	                    this._showItemTooltipContent(dataModel, dataIndex, e);
	                }

	                api.dispatchAction({
	                    type: 'showTip',
	                    from: this.uid,
	                    dataIndex: el.dataIndex,
	                    seriesIndex: el.seriesIndex
	                });
	            }
	            else {
	                if (globalTrigger === 'item') {
	                    this._hide();
	                }
	                else {
	                    // Try show axis tooltip
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }

	                // Action of cross pointer
	                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
	                if (tooltipModel.get('axisPointer.type') === 'cross') {
	                    api.dispatchAction({
	                        type: 'showTip',
	                        from: this.uid,
	                        x: e.offsetX,
	                        y: e.offsetY
	                    });
	                }
	            }
	        },

	        /**
	         * Show tooltip on axis
	         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Object} e
	         * @private
	         */
	        _showAxisTooltip: function (tooltipModel, ecModel, e) {
	            var axisPointerModel = tooltipModel.getModel('axisPointer');
	            var axisPointerType = axisPointerModel.get('type');

	            if (axisPointerType === 'cross') {
	                var el = e.target;
	                if (el && el.dataIndex != null) {
	                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
	                    var dataIndex = el.dataIndex;
	                    this._showItemTooltipContent(seriesModel, dataIndex, e);
	                }
	            }

	            this._showAxisPointer();
	            var allNotShow = true;
	            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
	                // Try show the axis pointer
	                var allCoordSys = seriesCoordSysSameAxis.coordSys;
	                var coordSys = allCoordSys[0];

	                // If mouse position is not in the grid or polar
	                var point = [e.offsetX, e.offsetY];

	                if (!coordSys.containPoint(point)) {
	                    // Hide axis pointer
	                    this._hideAxisPointer(coordSys.name);
	                    return;
	                }

	                allNotShow = false;
	                // Make sure point is discrete on cateogry axis
	                var dimensions = coordSys.dimensions;
	                var value = coordSys.pointToData(point, true);
	                point = coordSys.dataToPoint(value);
	                var baseAxis = coordSys.getBaseAxis();
	                var axisType = axisPointerModel.get('axis');
	                if (axisType === 'auto') {
	                    axisType = baseAxis.dim;
	                }

	                var contentNotChange = false;
	                var lastHover = this._lastHover;
	                if (axisPointerType === 'cross') {
	                    // If hover data not changed
	                    // Possible when two axes are all category
	                    if (dataEqual(lastHover.data, value)) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value;
	                }
	                else {
	                    var valIndex = zrUtil.indexOf(dimensions, axisType);

	                    // If hover data not changed on the axis dimension
	                    if (lastHover.data === value[valIndex]) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value[valIndex];
	                }

	                if (coordSys.type === 'cartesian2d' && !contentNotChange) {
	                    this._showCartesianPointer(
	                        axisPointerModel, coordSys, axisType, point
	                    );
	                }
	                else if (coordSys.type === 'polar' && !contentNotChange) {
	                    this._showPolarPointer(
	                        axisPointerModel, coordSys, axisType, point
	                    );
	                }
	                else if (coordSys.type === 'single' && !contentNotChange) {
	                    this._showSinglePointer(
	                        axisPointerModel, coordSys, axisType, point
	                    );
	                }

	                if (axisPointerType !== 'cross') {
	                    this._dispatchAndShowSeriesTooltipContent(
	                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange
	                    );
	                }
	            }, this);

	            if (allNotShow) {
	                this._hide();
	            }
	        },

	        /**
	         * Show tooltip on axis of cartesian coordinate
	         * @param {module:echarts/model/Model} axisPointerModel
	         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians
	         * @param {string} axisType
	         * @param {Array.<number>} point
	         * @private
	         */
	        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point) {
	            var self = this;

	            var axisPointerType = axisPointerModel.get('type');
	            var moveAnimation = axisPointerType !== 'cross';

	            if (axisPointerType === 'cross') {
	                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
	                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());

	                this._updateCrossText(cartesian, point, axisPointerModel);
	            }
	            else {
	                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
	                var otherExtent = otherAxis.getGlobalExtent();

	                if (cartesian.type === 'cartesian2d') {
	                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(
	                        axisType, point, otherExtent
	                    );
	                }
	            }

	            /**
	             * @inner
	             */
	            function moveGridLine(axisType, point, otherExtent) {
	                var targetShape = axisType === 'x'
	                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
	                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

	                var pointerEl = self._getPointerElement(
	                    cartesian, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }

	            /**
	             * @inner
	             */
	            function moveGridShadow(axisType, point, otherExtent) {
	                var axis = cartesian.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();
	                var span = otherExtent[1] - otherExtent[0];
	                var targetShape = axisType === 'x'
	                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)
	                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);

	                var pointerEl = self._getPointerElement(
	                    cartesian, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	        },

	        _showSinglePointer: function (axisPointerModel, single, axisType, point) {
	            var self = this;
	            var axisPointerType = axisPointerModel.get('type');
	            var moveAnimation = axisPointerType !== 'cross';
	            var rect = single.getRect();
	            var otherExtent = [rect.y, rect.y + rect.height];

	            moveSingleLine(axisType, point, otherExtent);

	            /**
	             * @inner
	             */
	            function moveSingleLine(axisType, point, otherExtent) {
	                var axis = single.getAxis();
	                var orient = axis.orient;

	                var targetShape = orient === 'horizontal'
	                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
	                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

	                var pointerEl = self._getPointerElement(
	                    single, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }

	        },

	        /**
	         * Show tooltip on axis of polar coordinate
	         * @param {module:echarts/model/Model} axisPointerModel
	         * @param {Array.<module:echarts/coord/polar/Polar>} polar
	         * @param {string} axisType
	         * @param {Array.<number>} point
	         */
	        _showPolarPointer: function (axisPointerModel, polar, axisType, point) {
	            var self = this;

	            var axisPointerType = axisPointerModel.get('type');

	            var angleAxis = polar.getAngleAxis();
	            var radiusAxis = polar.getRadiusAxis();

	            var moveAnimation = axisPointerType !== 'cross';

	            if (axisPointerType === 'cross') {
	                movePolarLine('angle', point, radiusAxis.getExtent());
	                movePolarLine('radius', point, angleAxis.getExtent());

	                this._updateCrossText(polar, point, axisPointerModel);
	            }
	            else {
	                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
	                var otherExtent = otherAxis.getExtent();

	                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(
	                    axisType, point, otherExtent
	                );
	            }
	            /**
	             * @inner
	             */
	            function movePolarLine(axisType, point, otherExtent) {
	                var mouseCoord = polar.pointToCoord(point);

	                var targetShape;

	                if (axisType === 'angle') {
	                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);
	                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);
	                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
	                }
	                else {
	                    targetShape = {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r: mouseCoord[0]
	                    };
	                }

	                var pointerEl = self._getPointerElement(
	                    polar, axisPointerModel, axisType, targetShape
	                );

	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }

	            /**
	             * @inner
	             */
	            function movePolarShadow(axisType, point, otherExtent) {
	                var axis = polar.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();

	                var mouseCoord = polar.pointToCoord(point);

	                var targetShape;

	                var radian = Math.PI / 180;

	                if (axisType === 'angle') {
	                    targetShape = makeSectorShape(
	                        polar.cx, polar.cy,
	                        otherExtent[0], otherExtent[1],
	                        // In ECharts y is negative if angle is positive
	                        (-mouseCoord[1] - bandWidth / 2) * radian,
	                        (-mouseCoord[1] + bandWidth / 2) * radian
	                    );
	                }
	                else {
	                    targetShape = makeSectorShape(
	                        polar.cx, polar.cy,
	                        mouseCoord[0] - bandWidth / 2,
	                        mouseCoord[0] + bandWidth / 2,
	                        0, Math.PI * 2
	                    );
	                }

	                var pointerEl = self._getPointerElement(
	                    polar, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	        },

	        _updateCrossText: function (coordSys, point, axisPointerModel) {
	            var crossStyleModel = axisPointerModel.getModel('crossStyle');
	            var textStyleModel = crossStyleModel.getModel('textStyle');

	            var tooltipModel = this._tooltipModel;

	            var text = this._crossText;
	            if (!text) {
	                text = this._crossText = new graphic.Text({
	                    style: {
	                        textAlign: 'left',
	                        textVerticalAlign: 'bottom'
	                    }
	                });
	                this.group.add(text);
	            }

	            var value = coordSys.pointToData(point);

	            var dims = coordSys.dimensions;
	            value = zrUtil.map(value, function (val, idx) {
	                var axis = coordSys.getAxis(dims[idx]);
	                if (axis.type === 'category' || axis.type === 'time') {
	                    val = axis.scale.getLabel(val);
	                }
	                else {
	                    val = formatUtil.addCommas(
	                        val.toFixed(axis.getPixelPrecision())
	                    );
	                }
	                return val;
	            });

	            text.setStyle({
	                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
	                textFont: textStyleModel.getFont(),
	                text: value.join(', '),
	                x: point[0] + 5,
	                y: point[1] - 5
	            });
	            text.z = tooltipModel.get('z');
	            text.zlevel = tooltipModel.get('zlevel');
	        },

	        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {
	            var tooltipModel = this._tooltipModel;
	            var z = tooltipModel.get('z');
	            var zlevel = tooltipModel.get('zlevel');
	            var axisPointers = this._axisPointers;
	            var coordSysName = coordSys.name;
	            axisPointers[coordSysName] = axisPointers[coordSysName] || {};
	            if (axisPointers[coordSysName][axisType]) {
	                return axisPointers[coordSysName][axisType];
	            }

	            // Create if not exists
	            var pointerType = pointerModel.get('type');
	            var styleModel = pointerModel.getModel(pointerType + 'Style');
	            var isShadow = pointerType === 'shadow';
	            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();

	            var elementType = coordSys.type === 'polar'
	                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))
	                : (isShadow ? 'Rect' : 'Line');

	           isShadow ? (style.stroke = null) : (style.fill = null);

	            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
	                style: style,
	                z: z,
	                zlevel: zlevel,
	                silent: true,
	                shape: initShape
	            });

	            this.group.add(el);
	            return el;
	        },

	        /**
	         * Dispatch actions and show tooltip on series
	         * @param {Array.<module:echarts/model/Series>} seriesList
	         * @param {Array.<number>} point
	         * @param {Array.<number>} value
	         * @param {boolean} contentNotChange
	         * @param {Object} e
	         */
	        _dispatchAndShowSeriesTooltipContent: function (
	            coordSys, seriesList, point, value, contentNotChange
	        ) {

	            var rootTooltipModel = this._tooltipModel;
	            var tooltipContent = this._tooltipContent;

	            var baseAxis = coordSys.getBaseAxis();

	            var payloadBatch = zrUtil.map(seriesList, function (series) {
	                return {
	                    seriesIndex: series.seriesIndex,
	                    dataIndex: series.getAxisTooltipDataIndex
	                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)
	                        : series.getData().indexOfNearest(
	                            series.coordDimToDataDim(baseAxis.dim)[0],
	                            value[baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1]
	                        )
	                };
	            });

	            var lastHover = this._lastHover;
	            var api = this._api;
	            // Dispatch downplay action
	            if (lastHover.payloadBatch && !contentNotChange) {
	                api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Dispatch highlight action
	            if (!contentNotChange) {
	                api.dispatchAction({
	                    type: 'highlight',
	                    batch: payloadBatch
	                });
	                lastHover.payloadBatch = payloadBatch;
	            }
	            // Dispatch showTip action
	            api.dispatchAction({
	                type: 'showTip',
	                dataIndex: payloadBatch[0].dataIndex,
	                seriesIndex: payloadBatch[0].seriesIndex,
	                from: this.uid
	            });

	            if (baseAxis && rootTooltipModel.get('showContent')) {

	                var formatter = rootTooltipModel.get('formatter');
	                var positionExpr = rootTooltipModel.get('position');
	                var html;

	                var paramsList = zrUtil.map(seriesList, function (series, index) {
	                    return series.getDataParams(payloadBatch[index].dataIndex);
	                });
	                // If only one series
	                // FIXME
	                // if (paramsList.length === 1) {
	                //     paramsList = paramsList[0];
	                // }

	                tooltipContent.show(rootTooltipModel);

	                // Update html content
	                var firstDataIndex = payloadBatch[0].dataIndex;
	                if (!contentNotChange) {
	                    // Reset ticket
	                    this._ticket = '';
	                    if (!formatter) {
	                        // Default tooltip content
	                        // FIXME
	                        // (1) shold be the first data which has name?
	                        // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	                        var firstLine = seriesList[0].getData().getName(firstDataIndex);
	                        html = (firstLine ? firstLine + '<br />' : '')
	                            + zrUtil.map(seriesList, function (series, index) {
	                                return series.formatTooltip(payloadBatch[index].dataIndex, true);
	                            }).join('<br />');
	                    }
	                    else {
	                        if (typeof formatter === 'string') {
	                            html = formatUtil.formatTpl(formatter, paramsList);
	                        }
	                        else if (typeof formatter === 'function') {
	                            var self = this;
	                            var ticket = 'axis_' + coordSys.name + '_' + firstDataIndex;
	                            var callback = function (cbTicket, html) {
	                                if (cbTicket === self._ticket) {
	                                    tooltipContent.setContent(html);

	                                    updatePosition(
	                                        positionExpr, point[0], point[1],
	                                        tooltipContent, paramsList, null, api
	                                    );
	                                }
	                            };
	                            self._ticket = ticket;
	                            html = formatter(paramsList, ticket, callback);
	                        }
	                    }

	                    tooltipContent.setContent(html);
	                }

	                updatePosition(
	                    positionExpr, point[0], point[1],
	                    tooltipContent, paramsList, null, api
	                );
	            }
	        },

	        /**
	         * Show tooltip on item
	         * @param {module:echarts/model/Series} seriesModel
	         * @param {number} dataIndex
	         * @param {Object} e
	         */
	        _showItemTooltipContent: function (seriesModel, dataIndex, e) {
	            // FIXME Graph data
	            var api = this._api;
	            var data = seriesModel.getData();
	            var itemModel = data.getItemModel(dataIndex);

	            var rootTooltipModel = this._tooltipModel;

	            var tooltipContent = this._tooltipContent;

	            var tooltipModel = itemModel.getModel('tooltip');

	            // If series model
	            if (tooltipModel.parentModel) {
	                tooltipModel.parentModel.parentModel = rootTooltipModel;
	            }
	            else {
	                tooltipModel.parentModel = this._tooltipModel;
	            }

	            if (tooltipModel.get('showContent')) {
	                var formatter = tooltipModel.get('formatter');
	                var positionExpr = tooltipModel.get('position');
	                var params = seriesModel.getDataParams(dataIndex);
	                var html;
	                if (!formatter) {
	                    html = seriesModel.formatTooltip(dataIndex);
	                }
	                else {
	                    if (typeof formatter === 'string') {
	                        html = formatUtil.formatTpl(formatter, params);
	                    }
	                    else if (typeof formatter === 'function') {
	                        var self = this;
	                        var ticket = 'item_' + seriesModel.name + '_' + dataIndex;
	                        var callback = function (cbTicket, html) {
	                            if (cbTicket === self._ticket) {
	                                tooltipContent.setContent(html);

	                                updatePosition(
	                                    positionExpr, e.offsetX, e.offsetY,
	                                    tooltipContent, params, e.target, api
	                                );
	                            }
	                        };
	                        self._ticket = ticket;
	                        html = formatter(params, ticket, callback);
	                    }
	                }

	                tooltipContent.show(tooltipModel);
	                tooltipContent.setContent(html);

	                updatePosition(
	                    positionExpr, e.offsetX, e.offsetY,
	                    tooltipContent, params, e.target, api
	                );
	            }
	        },

	        /**
	         * Show axis pointer
	         * @param {string} [coordSysName]
	         */
	        _showAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.show();
	                });
	            }
	            else {
	                this.group.eachChild(function (child) {
	                    child.show();
	                });
	                this.group.show();
	            }
	        },

	        _resetLastHover: function () {
	            var lastHover = this._lastHover;
	            if (lastHover.payloadBatch) {
	                this._api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Reset lastHover
	            this._lastHover = {};
	        },
	        /**
	         * Hide axis pointer
	         * @param {string} [coordSysName]
	         */
	        _hideAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.hide();
	                });
	            }
	            else {
	                this.group.hide();
	            }
	        },

	        _hide: function () {
	            clearTimeout(this._showTimeout);

	            this._hideAxisPointer();
	            this._resetLastHover();
	            if (!this._alwaysShowContent) {
	                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	            }

	            this._api.dispatchAction({
	                type: 'hideTip',
	                from: this.uid
	            });

	            this._lastX = this._lastY = null;
	        },

	        dispose: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var zr = api.getZr();
	            this._tooltipContent.hide();

	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);

	            api.off('showTip', this._manuallyShowTip);
	            api.off('hideTip', this._manuallyHideTip);
	        }
	    });


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/tooltip/TooltipContent
	 */


	    var zrUtil = __webpack_require__(111);
	    var zrColor = __webpack_require__(146);
	    var eventUtil = __webpack_require__(188);
	    var formatUtil = __webpack_require__(114);
	    var each = zrUtil.each;
	    var toCamelCase = formatUtil.toCamelCase;

	    var vendors = ['', '-webkit-', '-moz-', '-o-'];

	    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';

	    /**
	     * @param {number} duration
	     * @return {string}
	     * @inner
	     */
	    function assembleTransition(duration) {
	        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','
	                            + 'top ' + duration + 's ' + transitionCurve;
	        return zrUtil.map(vendors, function (vendorPrefix) {
	            return vendorPrefix + 'transition:' + transitionText;
	        }).join(';');
	    }

	    /**
	     * @param {Object} textStyle
	     * @return {string}
	     * @inner
	     */
	    function assembleFont(textStyleModel) {
	        var cssText = [];

	        var fontSize = textStyleModel.get('fontSize');
	        var color = textStyleModel.getTextColor();

	        color && cssText.push('color:' + color);

	        cssText.push('font:' + textStyleModel.getFont());

	        fontSize &&
	            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');

	        each(['decoration', 'align'], function (name) {
	            var val = textStyleModel.get(name);
	            val && cssText.push('text-' + name + ':' + val);
	        });

	        return cssText.join(';');
	    }

	    /**
	     * @param {Object} tooltipModel
	     * @return {string}
	     * @inner
	     */
	    function assembleCssText(tooltipModel) {

	        tooltipModel = tooltipModel;

	        var cssText = [];

	        var transitionDuration = tooltipModel.get('transitionDuration');
	        var backgroundColor = tooltipModel.get('backgroundColor');
	        var textStyleModel = tooltipModel.getModel('textStyle');
	        var padding = tooltipModel.get('padding');

	        // Animation transition
	        transitionDuration &&
	            cssText.push(assembleTransition(transitionDuration));

	        if (backgroundColor) {
	            // for ie
	            cssText.push(
	                'background-Color:' + zrColor.toHex(backgroundColor)
	            );
	            cssText.push('filter:alpha(opacity=70)');
	            cssText.push('background-Color:' + backgroundColor);
	        }

	        // Border style
	        each(['width', 'color', 'radius'], function (name) {
	            var borderName = 'border-' + name;
	            var camelCase = toCamelCase(borderName);
	            var val = tooltipModel.get(camelCase);
	            val != null &&
	                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	        });

	        // Text style
	        cssText.push(assembleFont(textStyleModel));

	        // Padding
	        if (padding != null) {
	            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	        }

	        return cssText.join(';') + ';';
	    }

	    /**
	     * @alias module:echarts/component/tooltip/TooltipContent
	     * @constructor
	     */
	    function TooltipContent(container, api) {
	        var el = document.createElement('div');
	        var zr = api.getZr();

	        this.el = el;

	        this._x = api.getWidth() / 2;
	        this._y = api.getHeight() / 2;

	        container.appendChild(el);

	        this._container = container;

	        this._show = false;

	        /**
	         * @private
	         */
	        this._hideTimeout;

	        var self = this;
	        el.onmouseenter = function () {
	            // clear the timeout in hideLater and keep showing tooltip
	            if (self.enterable) {
	                clearTimeout(self._hideTimeout);
	                self._show = true;
	            }
	            self._inContent = true;
	        };
	        el.onmousemove = function (e) {
	            if (!self.enterable) {
	                // Try trigger zrender event to avoid mouse
	                // in and out shape too frequently
	                var handler = zr.handler;
	                eventUtil.normalizeEvent(container, e);
	                handler.dispatch('mousemove', e);
	            }
	        };
	        el.onmouseleave = function () {
	            if (self.enterable) {
	                if (self._show) {
	                    self.hideLater(self._hideDelay);
	                }
	            }
	            self._inContent = false;
	        };

	        compromiseMobile(el, container);
	    }

	    function compromiseMobile(tooltipContentEl, container) {
	        // Prevent default behavior on mobile. For example,
	        // default pinch gesture will cause browser zoom.
	        // We do not preventing event on tooltip contnet el,
	        // because user may need customization in tooltip el.
	        eventUtil.addEventListener(container, 'touchstart', preventDefault);
	        eventUtil.addEventListener(container, 'touchmove', preventDefault);
	        eventUtil.addEventListener(container, 'touchend', preventDefault);

	        function preventDefault(e) {
	            if (contains(e.target)) {
	                e.preventDefault();
	            }
	        }

	        function contains(targetEl) {
	            while (targetEl && targetEl !== container) {
	                if (targetEl === tooltipContentEl) {
	                    return true;
	                }
	                targetEl = targetEl.parentNode;
	            }
	        }
	    }

	    TooltipContent.prototype = {

	        constructor: TooltipContent,

	        enterable: true,

	        /**
	         * Update when tooltip is rendered
	         */
	        update: function () {
	            var container = this._container;
	            var stl = container.currentStyle
	                || document.defaultView.getComputedStyle(container);
	            var domStyle = container.style;
	            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	                domStyle.position = 'relative';
	            }
	            // Hide the tooltip
	            // PENDING
	            // this.hide();
	        },

	        show: function (tooltipModel) {
	            clearTimeout(this._hideTimeout);

	            this.el.style.cssText = gCssText + assembleCssText(tooltipModel)
	                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	                + ';left:' + this._x + 'px;top:' + this._y + 'px;'
	                + (tooltipModel.get('extraCssText') || '');

	            this._show = true;
	        },

	        setContent: function (content) {
	            var el = this.el;
	            el.innerHTML = content;
	            el.style.display = content ? 'block' : 'none';
	        },

	        moveTo: function (x, y) {
	            var style = this.el.style;
	            style.left = x + 'px';
	            style.top = y + 'px';

	            this._x = x;
	            this._y = y;
	        },

	        hide: function () {
	            this.el.style.display = 'none';
	            this._show = false;
	        },

	        // showLater: function ()

	        hideLater: function (time) {
	            if (this._show && !(this._inContent && this.enterable)) {
	                if (time) {
	                    this._hideDelay = time;
	                    // Set show false to avoid invoke hideLater mutiple times
	                    this._show = false;
	                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	                }
	                else {
	                    this.hide();
	                }
	            }
	        },

	        isShow: function () {
	            return this._show;
	        }
	    };

	    module.exports = TooltipContent;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);

	    __webpack_require__(211);

	    __webpack_require__(228);
	    __webpack_require__(233);

	    var barLayoutGrid = __webpack_require__(235);
	    var echarts = __webpack_require__(109);

	    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
	    // Visual coding for legend
	    echarts.registerVisualCoding('chart', function (ecModel) {
	        ecModel.eachSeriesByType('bar', function (seriesModel) {
	            var data = seriesModel.getData();
	            data.setVisual('legendSymbol', 'roundRect');
	        });
	    });

	    // In case developer forget to include grid component
	    __webpack_require__(236);


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	var factory = exports;

	    var layout = __webpack_require__(129);
	    var axisHelper = __webpack_require__(212);

	    var zrUtil = __webpack_require__(111);
	    var Cartesian2D = __webpack_require__(218);
	    var Axis2D = __webpack_require__(220);

	    var each = zrUtil.each;

	    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	    var niceScaleExtent = axisHelper.niceScaleExtent;

	    // 依赖 GridModel, AxisModel 做预处理
	    __webpack_require__(223);

	    /**
	     * Check if the axis is used in the specified grid
	     * @inner
	     */
	    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	        return ecModel.getComponent('grid', axisModel.get('gridIndex')) === gridModel;
	    }

	    function getLabelUnionRect(axis) {
	        var axisModel = axis.model;
	        var labels = axisModel.getFormattedLabels();
	        var rect;
	        var step = 1;
	        var labelCount = labels.length;
	        if (labelCount > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.ceil(labelCount / 40);
	        }
	        for (var i = 0; i < labelCount; i += step) {
	            if (!axis.isLabelIgnored(i)) {
	                var singleRect = axisModel.getTextRect(labels[i]);
	                // FIXME consider label rotate
	                rect ? rect.union(singleRect) : (rect = singleRect);
	            }
	        }
	        return rect;
	    }

	    function Grid(gridModel, ecModel, api) {
	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	         * @private
	         */
	        this._coordsMap = {};

	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	         * @private
	         */
	        this._coordsList = [];

	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesMap = {};

	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesList = [];

	        this._initCartesian(gridModel, ecModel, api);

	        this._model = gridModel;
	    }

	    var gridProto = Grid.prototype;

	    gridProto.type = 'grid';

	    gridProto.getRect = function () {
	        return this._rect;
	    };

	    gridProto.update = function (ecModel, api) {

	        var axesMap = this._axesMap;

	        this._updateScale(ecModel, this._model);

	        function ifAxisCanNotOnZero(otherAxisDim) {
	            var axes = axesMap[otherAxisDim];
	            for (var idx in axes) {
	                var axis = axes[idx];
	                if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
	                    return true;
	                }
	            }
	            return false;
	        }

	        each(axesMap.x, function (xAxis) {
	            niceScaleExtent(xAxis, xAxis.model);
	        });
	        each(axesMap.y, function (yAxis) {
	            niceScaleExtent(yAxis, yAxis.model);
	        });
	        // Fix configuration
	        each(axesMap.x, function (xAxis) {
	            // onZero can not be enabled in these two situations
	            // 1. When any other axis is a category axis
	            // 2. When any other axis not across 0 point
	            if (ifAxisCanNotOnZero('y')) {
	                xAxis.onZero = false;
	            }
	        });
	        each(axesMap.y, function (yAxis) {
	            if (ifAxisCanNotOnZero('x')) {
	                yAxis.onZero = false;
	            }
	        });

	        // Resize again if containLabel is enabled
	        // FIXME It may cause getting wrong grid size in data processing stage
	        this.resize(this._model, api);
	    };

	    /**
	     * Resize the grid
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    gridProto.resize = function (gridModel, api) {

	        var gridRect = layout.getLayoutRect(
	            gridModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            });

	        this._rect = gridRect;

	        var axesList = this._axesList;

	        adjustAxes();

	        // Minus label size
	        if (gridModel.get('containLabel')) {
	            each(axesList, function (axis) {
	                if (!axis.model.get('axisLabel.inside')) {
	                    var labelUnionRect = getLabelUnionRect(axis);
	                    if (labelUnionRect) {
	                        var dim = axis.isHorizontal() ? 'height' : 'width';
	                        var margin = axis.model.get('axisLabel.margin');
	                        gridRect[dim] -= labelUnionRect[dim] + margin;
	                        if (axis.position === 'top') {
	                            gridRect.y += labelUnionRect.height + margin;
	                        }
	                        else if (axis.position === 'left')  {
	                            gridRect.x += labelUnionRect.width + margin;
	                        }
	                    }
	                }
	            });

	            adjustAxes();
	        }

	        function adjustAxes() {
	            each(axesList, function (axis) {
	                var isHorizontal = axis.isHorizontal();
	                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	                var idx = axis.inverse ? 1 : 0;
	                axis.setExtent(extent[idx], extent[1 - idx]);
	                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	            });
	        }
	    };

	    /**
	     * @param {string} axisType
	     * @param {ndumber} [axisIndex]
	     */
	    gridProto.getAxis = function (axisType, axisIndex) {
	        var axesMapOnDim = this._axesMap[axisType];
	        if (axesMapOnDim != null) {
	            if (axisIndex == null) {
	                // Find first axis
	                for (var name in axesMapOnDim) {
	                    return axesMapOnDim[name];
	                }
	            }
	            return axesMapOnDim[axisIndex];
	        }
	    };

	    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	        return this._coordsMap[key];
	    };

	    /**
	     * Initialize cartesian coordinate systems
	     * @private
	     */
	    gridProto._initCartesian = function (gridModel, ecModel, api) {
	        var axisPositionUsed = {
	            left: false,
	            right: false,
	            top: false,
	            bottom: false
	        };

	        var axesMap = {
	            x: {},
	            y: {}
	        };
	        var axesCount = {
	            x: 0,
	            y: 0
	        };

	        /// Create axis
	        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

	        if (!axesCount.x || !axesCount.y) {
	            // Roll back when there no either x or y axis
	            this._axesMap = {};
	            this._axesList = [];
	            return;
	        }

	        this._axesMap = axesMap;

	        /// Create cartesian2d
	        each(axesMap.x, function (xAxis, xAxisIndex) {
	            each(axesMap.y, function (yAxis, yAxisIndex) {
	                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	                var cartesian = new Cartesian2D(key);

	                cartesian.grid = this;

	                this._coordsMap[key] = cartesian;
	                this._coordsList.push(cartesian);

	                cartesian.addAxis(xAxis);
	                cartesian.addAxis(yAxis);
	            }, this);
	        }, this);

	        function createAxisCreator(axisType) {
	            return function (axisModel, idx) {
	                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	                    return;
	                }

	                var axisPosition = axisModel.get('position');
	                if (axisType === 'x') {
	                    // Fix position
	                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	                        // Default bottom of X
	                        axisPosition = 'bottom';
	                    }
	                    if (axisPositionUsed[axisPosition]) {
	                        axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	                    }
	                }
	                else {
	                    // Fix position
	                    if (axisPosition !== 'left' && axisPosition !== 'right') {
	                        // Default left of Y
	                        axisPosition = 'left';
	                    }
	                    if (axisPositionUsed[axisPosition]) {
	                        axisPosition = axisPosition === 'left' ? 'right' : 'left';
	                    }
	                }
	                axisPositionUsed[axisPosition] = true;

	                var axis = new Axis2D(
	                    axisType, axisHelper.createScaleByModel(axisModel),
	                    [0, 0],
	                    axisModel.get('type'),
	                    axisPosition
	                );

	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');

	                axis.onZero = axisModel.get('axisLine.onZero');

	                // Inject axis into axisModel
	                axisModel.axis = axis;

	                // Inject axisModel into axis
	                axis.model = axisModel;

	                // Index of axis, can be used as key
	                axis.index = idx;

	                this._axesList.push(axis);

	                axesMap[axisType][idx] = axis;
	                axesCount[axisType]++;
	            };
	        }
	    };

	    /**
	     * Update cartesian properties from series
	     * @param  {module:echarts/model/Option} option
	     * @private
	     */
	    gridProto._updateScale = function (ecModel, gridModel) {
	        // Reset scale
	        zrUtil.each(this._axesList, function (axis) {
	            axis.scale.setExtent(Infinity, -Infinity);
	        });
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'cartesian2d') {
	                var xAxisIndex = seriesModel.get('xAxisIndex');
	                var yAxisIndex = seriesModel.get('yAxisIndex');

	                var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
	                var yAxisModel = ecModel.getComponent('yAxis', yAxisIndex);

	                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)
	                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)
	                 ) {
	                    return;
	                }

	                var cartesian = this.getCartesian(xAxisIndex, yAxisIndex);
	                var data = seriesModel.getData();
	                var xAxis = cartesian.getAxis('x');
	                var yAxis = cartesian.getAxis('y');

	                if (data.type === 'list') {
	                    unionExtent(data, xAxis, seriesModel);
	                    unionExtent(data, yAxis, seriesModel);
	                }
	            }
	        }, this);

	        function unionExtent(data, axis, seriesModel) {
	            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	                axis.scale.unionExtent(data.getDataExtent(
	                    dim, axis.scale.type !== 'ordinal'
	                ));
	            });
	        }
	    };

	    /**
	     * @inner
	     */
	    function updateAxisTransfrom(axis, coordBase) {
	        var axisExtent = axis.getExtent();
	        var axisExtentSum = axisExtent[0] + axisExtent[1];

	        // Fast transform
	        axis.toGlobalCoord = axis.dim === 'x'
	            ? function (coord) {
	                return coord + coordBase;
	            }
	            : function (coord) {
	                return axisExtentSum - coord + coordBase;
	            };
	        axis.toLocalCoord = axis.dim === 'x'
	            ? function (coord) {
	                return coord - coordBase;
	            }
	            : function (coord) {
	                return axisExtentSum - coord + coordBase;
	            };
	    }

	    Grid.create = function (ecModel, api) {
	        var grids = [];
	        ecModel.eachComponent('grid', function (gridModel, idx) {
	            var grid = new Grid(gridModel, ecModel, api);
	            grid.name = 'grid_' + idx;
	            grid.resize(gridModel, api);

	            gridModel.coordinateSystem = grid;

	            grids.push(grid);
	        });

	        // Inject the coordinateSystems into seriesModel
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') !== 'cartesian2d') {
	                return;
	            }
	            var xAxisIndex = seriesModel.get('xAxisIndex');
	            // TODO Validate
	            var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
	            var grid = grids[xAxisModel.get('gridIndex')];
	            seriesModel.coordinateSystem = grid.getCartesian(
	                xAxisIndex, seriesModel.get('yAxisIndex')
	            );
	        });

	        return grids;
	    };

	    // For deciding which dimensions to use when creating list data
	    Grid.dimensions = Cartesian2D.prototype.dimensions;

	    __webpack_require__(133).register('cartesian2d', Grid);

	    module.exports = Grid;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	

	    var OrdinalScale = __webpack_require__(213);
	    var IntervalScale = __webpack_require__(215);
	    __webpack_require__(216);
	    __webpack_require__(217);
	    var Scale = __webpack_require__(214);

	    var numberUtil = __webpack_require__(115);
	    var zrUtil = __webpack_require__(111);
	    var textContain = __webpack_require__(122);
	    var axisHelper = {};

	    /**
	     * Get axis scale extent before niced.
	     */
	    axisHelper.getScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var originalExtent = scale.getExtent();
	        var span = originalExtent[1] - originalExtent[0];
	        if (scale.type === 'ordinal') {
	            // If series has no data, scale extent may be wrong
	            if (!isFinite(span)) {
	                return [0, 0];
	            }
	            else {
	                return originalExtent;
	            }
	        }
	        var min = model.getMin ? model.getMin() : model.get('min');
	        var max = model.getMax ? model.getMax() : model.get('max');
	        var crossZero = model.getNeedCrossZero
	            ? model.getNeedCrossZero() : !model.get('scale');
	        var boundaryGap = model.get('boundaryGap');
	        if (!zrUtil.isArray(boundaryGap)) {
	            boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	        }
	        boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	        boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	        var fixMin = true;
	        var fixMax = true;
	        // Add boundary gap
	        if (min == null) {
	            min = originalExtent[0] - boundaryGap[0] * span;
	            fixMin = false;
	        }
	        if (max == null) {
	            max = originalExtent[1] + boundaryGap[1] * span;
	            fixMax = false;
	        }
	        // TODO Only one data
	        if (min === 'dataMin') {
	            min = originalExtent[0];
	        }
	        if (max === 'dataMax') {
	            max = originalExtent[1];
	        }
	        // Evaluate if axis needs cross zero
	        if (crossZero) {
	            // Axis is over zero and min is not set
	            if (min > 0 && max > 0 && !fixMin) {
	                min = 0;
	            }
	            // Axis is under zero and max is not set
	            if (min < 0 && max < 0 && !fixMax) {
	                max = 0;
	            }
	        }
	        return [min, max];
	    };

	    axisHelper.niceScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var extent = axisHelper.getScaleExtent(axis, model);
	        var fixMin = (model.getMin ? model.getMin() : model.get('min')) != null;
	        var fixMax = (model.getMax ? model.getMax() : model.get('max')) != null;
	        scale.setExtent(extent[0], extent[1]);
	        scale.niceExtent(model.get('splitNumber'), fixMin, fixMax);

	        // If some one specified the min, max. And the default calculated interval
	        // is not good enough. He can specify the interval. It is often appeared
	        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	        // to be 60.
	        // FIXME
	        var interval = model.get('interval');
	        if (interval != null) {
	            scale.setInterval && scale.setInterval(interval);
	        }
	    };

	    /**
	     * @param {module:echarts/model/Model} model
	     * @param {string} [axisType] Default retrieve from model.type
	     * @return {module:echarts/scale/*}
	     */
	    axisHelper.createScaleByModel = function(model, axisType) {
	        axisType = axisType || model.get('type');
	        if (axisType) {
	            switch (axisType) {
	                // Buildin scale
	                case 'category':
	                    return new OrdinalScale(
	                        model.getCategories(), [Infinity, -Infinity]
	                    );
	                case 'value':
	                    return new IntervalScale();
	                // Extended scale, like time and log
	                default:
	                    return (Scale.getClass(axisType) || IntervalScale).create(model);
	            }
	        }
	    };

	    /**
	     * Check if the axis corss 0
	     */
	    axisHelper.ifAxisCrossZero = function (axis) {
	        var dataExtent = axis.scale.getExtent();
	        var min = dataExtent[0];
	        var max = dataExtent[1];
	        return !((min > 0 && max > 0) || (min < 0 && max < 0));
	    };

	    /**
	     * @param {Array.<number>} tickCoords In axis self coordinate.
	     * @param {Array.<string>} labels
	     * @param {string} font
	     * @param {boolean} isAxisHorizontal
	     * @return {number}
	     */
	    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
	        // FIXME
	        // 不同角的axis和label，不只是horizontal和vertical.

	        var textSpaceTakenRect;
	        var autoLabelInterval = 0;
	        var accumulatedLabelInterval = 0;

	        var step = 1;
	        if (labels.length > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.round(labels.length / 40);
	        }
	        for (var i = 0; i < tickCoords.length; i += step) {
	            var tickCoord = tickCoords[i];
	            var rect = textContain.getBoundingRect(
	                labels[i], font, 'center', 'top'
	            );
	            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
	            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.5;
	            if (!textSpaceTakenRect) {
	                textSpaceTakenRect = rect.clone();
	            }
	            // There is no space for current label;
	            else if (textSpaceTakenRect.intersect(rect)) {
	                accumulatedLabelInterval++;
	                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	            }
	            else {
	                textSpaceTakenRect.union(rect);
	                // Reset
	                accumulatedLabelInterval = 0;
	            }
	        }
	        if (autoLabelInterval === 0 && step > 1) {
	            return step;
	        }
	        return autoLabelInterval * step;
	    };

	    /**
	     * @param {Object} axis
	     * @param {Function} labelFormatter
	     * @return {Array.<string>}
	     */
	    axisHelper.getFormattedLabels = function (axis, labelFormatter) {
	        var scale = axis.scale;
	        var labels = scale.getTicksLabels();
	        var ticks = scale.getTicks();
	        if (typeof labelFormatter === 'string') {
	            labelFormatter = (function (tpl) {
	                return function (val) {
	                    return tpl.replace('{value}', val);
	                };
	            })(labelFormatter);
	            return zrUtil.map(labels, labelFormatter);
	        }
	        else if (typeof labelFormatter === 'function') {
	            return zrUtil.map(ticks, function (tick, idx) {
	                return labelFormatter(
	                    axis.type === 'category' ? scale.getLabel(tick) : tick,
	                    idx
	                );
	            }, this);
	        }
	        else {
	            return labels;
	        }
	    };

	    module.exports = axisHelper;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */

	// FIXME only one data


	    var zrUtil = __webpack_require__(111);
	    var Scale = __webpack_require__(214);

	    var scaleProto = Scale.prototype;

	    var OrdinalScale = Scale.extend({

	        type: 'ordinal',

	        init: function (data, extent) {
	            this._data = data;
	            this._extent = extent || [0, data.length - 1];
	        },

	        parse: function (val) {
	            return typeof val === 'string'
	                ? zrUtil.indexOf(this._data, val)
	                // val might be float.
	                : Math.round(val);
	        },

	        contain: function (rank) {
	            rank = this.parse(rank);
	            return scaleProto.contain.call(this, rank)
	                && this._data[rank] != null;
	        },

	        /**
	         * Normalize given rank or name to linear [0, 1]
	         * @param {number|string} [val]
	         * @return {number}
	         */
	        normalize: function (val) {
	            return scaleProto.normalize.call(this, this.parse(val));
	        },

	        scale: function (val) {
	            return Math.round(scaleProto.scale.call(this, val));
	        },

	        /**
	         * @return {Array}
	         */
	        getTicks: function () {
	            var ticks = [];
	            var extent = this._extent;
	            var rank = extent[0];

	            while (rank <= extent[1]) {
	                ticks.push(rank);
	                rank++;
	            }

	            return ticks;
	        },

	        /**
	         * Get item on rank n
	         * @param {number} n
	         * @return {string}
	         */
	        getLabel: function (n) {
	            return this._data[n];
	        },

	        /**
	         * @return {number}
	         */
	        count: function () {
	            return this._extent[1] - this._extent[0] + 1;
	        },

	        niceTicks: zrUtil.noop,
	        niceExtent: zrUtil.noop
	    });

	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    OrdinalScale.create = function () {
	        return new OrdinalScale();
	    };

	    module.exports = OrdinalScale;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */


	    var clazzUtil = __webpack_require__(117);

	    function Scale() {
	        /**
	         * Extent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._extent = [Infinity, -Infinity];

	        /**
	         * Step is calculated in adjustExtent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._interval = 0;

	        this.init && this.init.apply(this, arguments);
	    }

	    var scaleProto = Scale.prototype;

	    /**
	     * Parse input val to valid inner number.
	     * @param {*} val
	     * @return {number}
	     */
	    scaleProto.parse = function (val) {
	        // Notice: This would be a trap here, If the implementation
	        // of this method depends on extent, and this method is used
	        // before extent set (like in dataZoom), it would be wrong.
	        // Nevertheless, parse does not depend on extent generally.
	        return val;
	    };

	    scaleProto.contain = function (val) {
	        var extent = this._extent;
	        return val >= extent[0] && val <= extent[1];
	    };

	    /**
	     * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.normalize = function (val) {
	        var extent = this._extent;
	        if (extent[1] === extent[0]) {
	            return 0.5;
	        }
	        return (val - extent[0]) / (extent[1] - extent[0]);
	    };

	    /**
	     * Scale normalized value
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.scale = function (val) {
	        var extent = this._extent;
	        return val * (extent[1] - extent[0]) + extent[0];
	    };

	    /**
	     * Set extent from data
	     * @param {Array.<number>} other
	     */
	    scaleProto.unionExtent = function (other) {
	        var extent = this._extent;
	        other[0] < extent[0] && (extent[0] = other[0]);
	        other[1] > extent[1] && (extent[1] = other[1]);
	        // not setExtent because in log axis it may transformed to power
	        // this.setExtent(extent[0], extent[1]);
	    };

	    /**
	     * Get extent
	     * @return {Array.<number>}
	     */
	    scaleProto.getExtent = function () {
	        return this._extent.slice();
	    };

	    /**
	     * Set extent
	     * @param {number} start
	     * @param {number} end
	     */
	    scaleProto.setExtent = function (start, end) {
	        var thisExtent = this._extent;
	        if (!isNaN(start)) {
	            thisExtent[0] = start;
	        }
	        if (!isNaN(end)) {
	            thisExtent[1] = end;
	        }
	    };

	    /**
	     * @return {Array.<string>}
	     */
	    scaleProto.getTicksLabels = function () {
	        var labels = [];
	        var ticks = this.getTicks();
	        for (var i = 0; i < ticks.length; i++) {
	            labels.push(this.getLabel(ticks[i]));
	        }
	        return labels;
	    };

	    clazzUtil.enableClassExtend(Scale);
	    clazzUtil.enableClassManagement(Scale, {
	        registerWhenExtend: true
	    });

	    module.exports = Scale;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */



	    var numberUtil = __webpack_require__(115);
	    var formatUtil = __webpack_require__(114);
	    var Scale = __webpack_require__(214);

	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	    /**
	     * @alias module:echarts/coord/scale/Interval
	     * @constructor
	     */
	    var IntervalScale = Scale.extend({

	        type: 'interval',

	        _interval: 0,

	        setExtent: function (start, end) {
	            var thisExtent = this._extent;
	            //start,end may be a Number like '25',so...
	            if (!isNaN(start)) {
	                thisExtent[0] = parseFloat(start);
	            }
	            if (!isNaN(end)) {
	                thisExtent[1] = parseFloat(end);
	            }
	        },

	        unionExtent: function (other) {
	            var extent = this._extent;
	            other[0] < extent[0] && (extent[0] = other[0]);
	            other[1] > extent[1] && (extent[1] = other[1]);

	            // unionExtent may called by it's sub classes
	            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	        },
	        /**
	         * Get interval
	         */
	        getInterval: function () {
	            if (!this._interval) {
	                this.niceTicks();
	            }
	            return this._interval;
	        },

	        /**
	         * Set interval
	         */
	        setInterval: function (interval) {
	            this._interval = interval;
	            // Dropped auto calculated niceExtent and use user setted extent
	            // We assume user wan't to set both interval, min, max to get a better result
	            this._niceExtent = this._extent.slice();
	        },

	        /**
	         * @return {Array.<number>}
	         */
	        getTicks: function () {
	            if (!this._interval) {
	                this.niceTicks();
	            }
	            var interval = this._interval;
	            var extent = this._extent;
	            var ticks = [];

	            // Consider this case: using dataZoom toolbox, zoom and zoom.
	            var safeLimit = 10000;

	            if (interval) {
	                var niceExtent = this._niceExtent;
	                if (extent[0] < niceExtent[0]) {
	                    ticks.push(extent[0]);
	                }
	                var tick = niceExtent[0];
	                while (tick <= niceExtent[1]) {
	                    ticks.push(tick);
	                    // Avoid rounding error
	                    tick = numberUtil.round(tick + interval);
	                    if (ticks.length > safeLimit) {
	                        return [];
	                    }
	                }
	                if (extent[1] > niceExtent[1]) {
	                    ticks.push(extent[1]);
	                }
	            }

	            return ticks;
	        },

	        /**
	         * @return {Array.<string>}
	         */
	        getTicksLabels: function () {
	            var labels = [];
	            var ticks = this.getTicks();
	            for (var i = 0; i < ticks.length; i++) {
	                labels.push(this.getLabel(ticks[i]));
	            }
	            return labels;
	        },

	        /**
	         * @param {number} n
	         * @return {number}
	         */
	        getLabel: function (data) {
	            return formatUtil.addCommas(data);
	        },

	        /**
	         * Update interval and extent of intervals for nice ticks
	         *
	         * @param {number} [splitNumber = 5] Desired number of ticks
	         */
	        niceTicks: function (splitNumber) {
	            splitNumber = splitNumber || 5;
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            if (!isFinite(span)) {
	                return;
	            }
	            // User may set axis min 0 and data are all negative
	            // FIXME If it needs to reverse ?
	            if (span < 0) {
	                span = -span;
	                extent.reverse();
	            }

	            // From "Nice Numbers for Graph Labels" of Graphic Gems
	            // var niceSpan = numberUtil.nice(span, false);
	            var step = numberUtil.nice(span / splitNumber, true);

	            // Niced extent inside original extent
	            var niceExtent = [
	                numberUtil.round(mathCeil(extent[0] / step) * step),
	                numberUtil.round(mathFloor(extent[1] / step) * step)
	            ];

	            this._interval = step;
	            this._niceExtent = niceExtent;
	        },

	        /**
	         * Nice extent.
	         * @param {number} [splitNumber = 5] Given approx tick number
	         * @param {boolean} [fixMin=false]
	         * @param {boolean} [fixMax=false]
	         */
	        niceExtent: function (splitNumber, fixMin, fixMax) {
	            var extent = this._extent;
	            // If extent start and end are same, expand them
	            if (extent[0] === extent[1]) {
	                if (extent[0] !== 0) {
	                    // Expand extent
	                    var expandSize = extent[0] / 2;
	                    extent[0] -= expandSize;
	                    extent[1] += expandSize;
	                }
	                else {
	                    extent[1] = 1;
	                }
	            }
	            var span = extent[1] - extent[0];
	            // If there are no data and extent are [Infinity, -Infinity]
	            if (!isFinite(span)) {
	                extent[0] = 0;
	                extent[1] = 1;
	            }

	            this.niceTicks(splitNumber);

	            // var extent = this._extent;
	            var interval = this._interval;

	            if (!fixMin) {
	                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	            }
	            if (!fixMax) {
	                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	            }
	        }
	    });

	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    IntervalScale.create = function () {
	        return new IntervalScale();
	    };

	    module.exports = IntervalScale;



/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval scale
	 * @module echarts/coord/scale/Time
	 */



	    var zrUtil = __webpack_require__(111);
	    var numberUtil = __webpack_require__(115);
	    var formatUtil = __webpack_require__(114);

	    var IntervalScale = __webpack_require__(215);

	    var intervalScaleProto = IntervalScale.prototype;

	    var mathCeil = Math.ceil;
	    var mathFloor = Math.floor;
	    var ONE_DAY = 3600000 * 24;

	    // FIXME 公用？
	    var bisect = function (a, x, lo, hi) {
	        while (lo < hi) {
	            var mid = lo + hi >>> 1;
	            if (a[mid][2] < x) {
	                lo = mid + 1;
	            }
	            else {
	                hi  = mid;
	            }
	        }
	        return lo;
	    };

	    /**
	     * @alias module:echarts/coord/scale/Time
	     * @constructor
	     */
	    var TimeScale = IntervalScale.extend({
	        type: 'time',

	        // Overwrite
	        getLabel: function (val) {
	            var stepLvl = this._stepLvl;

	            var date = new Date(val);

	            return formatUtil.formatTime(stepLvl[0], date);
	        },

	        // Overwrite
	        niceExtent: function (approxTickNum, fixMin, fixMax) {
	            var extent = this._extent;
	            // If extent start and end are same, expand them
	            if (extent[0] === extent[1]) {
	                // Expand extent
	                extent[0] -= ONE_DAY;
	                extent[1] += ONE_DAY;
	            }
	            // If there are no data and extent are [Infinity, -Infinity]
	            if (extent[1] === -Infinity && extent[0] === Infinity) {
	                var d = new Date();
	                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
	                extent[0] = extent[1] - ONE_DAY;
	            }

	            this.niceTicks(approxTickNum, fixMin, fixMax);

	            // var extent = this._extent;
	            var interval = this._interval;

	            if (!fixMin) {
	                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	            }
	            if (!fixMax) {
	                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	            }
	        },

	        // Overwrite
	        niceTicks: function (approxTickNum) {
	            approxTickNum = approxTickNum || 10;

	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            var approxInterval = span / approxTickNum;
	            var scaleLevelsLen = scaleLevels.length;
	            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);

	            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	            var interval = level[2];
	            // Same with interval scale if span is much larger than 1 year
	            if (level[0] === 'year') {
	                var yearSpan = span / interval;

	                // From "Nice Numbers for Graph Labels" of Graphic Gems
	                // var niceYearSpan = numberUtil.nice(yearSpan, false);
	                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);

	                interval *= yearStep;
	            }

	            var niceExtent = [
	                mathCeil(extent[0] / interval) * interval,
	                mathFloor(extent[1] / interval) * interval
	            ];

	            this._stepLvl = level;
	            // Interval will be used in getTicks
	            this._interval = interval;
	            this._niceExtent = niceExtent;
	        },

	        parse: function (val) {
	            // val might be float.
	            return +numberUtil.parseDate(val);
	        }
	    });

	    zrUtil.each(['contain', 'normalize'], function (methodName) {
	        TimeScale.prototype[methodName] = function (val) {
	            return intervalScaleProto[methodName].call(this, this.parse(val));
	        };
	    });

	    // Steps from d3
	    var scaleLevels = [
	        // Format       step    interval
	        ['hh:mm:ss',    1,      1000],           // 1s
	        ['hh:mm:ss',    5,      1000 * 5],       // 5s
	        ['hh:mm:ss',    10,     1000 * 10],      // 10s
	        ['hh:mm:ss',    15,     1000 * 15],      // 15s
	        ['hh:mm:ss',    30,     1000 * 30],      // 30s
	        ['hh:mm\nMM-dd',1,      60000],          // 1m
	        ['hh:mm\nMM-dd',5,      60000 * 5],      // 5m
	        ['hh:mm\nMM-dd',10,     60000 * 10],     // 10m
	        ['hh:mm\nMM-dd',15,     60000 * 15],     // 15m
	        ['hh:mm\nMM-dd',30,     60000 * 30],     // 30m
	        ['hh:mm\nMM-dd',1,      3600000],        // 1h
	        ['hh:mm\nMM-dd',2,      3600000 * 2],    // 2h
	        ['hh:mm\nMM-dd',6,      3600000 * 6],    // 6h
	        ['hh:mm\nMM-dd',12,     3600000 * 12],   // 12h
	        ['MM-dd\nyyyy', 1,      ONE_DAY],   // 1d
	        ['week',        7,      ONE_DAY * 7],        // 7d
	        ['month',       1,      ONE_DAY * 31],       // 1M
	        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M
	        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M
	        ['year',        1,      ONE_DAY * 380]       // 1Y
	    ];

	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    TimeScale.create = function () {
	        return new TimeScale();
	    };

	    module.exports = TimeScale;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */


	    var zrUtil = __webpack_require__(111);
	    var Scale = __webpack_require__(214);
	    var numberUtil = __webpack_require__(115);

	    // Use some method of IntervalScale
	    var IntervalScale = __webpack_require__(215);

	    var scaleProto = Scale.prototype;
	    var intervalScaleProto = IntervalScale.prototype;

	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	    var mathPow = Math.pow;

	    var LOG_BASE = 10;
	    var mathLog = Math.log;

	    var LogScale = Scale.extend({

	        type: 'log',

	        /**
	         * @return {Array.<number>}
	         */
	        getTicks: function () {
	            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	                return numberUtil.round(mathPow(LOG_BASE, val));
	            });
	        },

	        /**
	         * @param {number} val
	         * @return {string}
	         */
	        getLabel: intervalScaleProto.getLabel,

	        /**
	         * @param  {number} val
	         * @return {number}
	         */
	        scale: function (val) {
	            val = scaleProto.scale.call(this, val);
	            return mathPow(LOG_BASE, val);
	        },

	        /**
	         * @param {number} start
	         * @param {number} end
	         */
	        setExtent: function (start, end) {
	            start = mathLog(start) / mathLog(LOG_BASE);
	            end = mathLog(end) / mathLog(LOG_BASE);
	            intervalScaleProto.setExtent.call(this, start, end);
	        },

	        /**
	         * @return {number} end
	         */
	        getExtent: function () {
	            var extent = scaleProto.getExtent.call(this);
	            extent[0] = mathPow(LOG_BASE, extent[0]);
	            extent[1] = mathPow(LOG_BASE, extent[1]);
	            return extent;
	        },

	        /**
	         * @param  {Array.<number>} extent
	         */
	        unionExtent: function (extent) {
	            extent[0] = mathLog(extent[0]) / mathLog(LOG_BASE);
	            extent[1] = mathLog(extent[1]) / mathLog(LOG_BASE);
	            scaleProto.unionExtent.call(this, extent);
	        },

	        /**
	         * Update interval and extent of intervals for nice ticks
	         * @param  {number} [approxTickNum = 10] Given approx tick number
	         */
	        niceTicks: function (approxTickNum) {
	            approxTickNum = approxTickNum || 10;
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            if (span === Infinity || span <= 0) {
	                return;
	            }

	            var interval = mathPow(10, mathFloor(mathLog(span / approxTickNum) / Math.LN10));
	            var err = approxTickNum / span * interval;

	            // Filter ticks to get closer to the desired count.
	            if (err <= 0.5) {
	                interval *= 10;
	            }
	            var niceExtent = [
	                numberUtil.round(mathCeil(extent[0] / interval) * interval),
	                numberUtil.round(mathFloor(extent[1] / interval) * interval)
	            ];

	            this._interval = interval;
	            this._niceExtent = niceExtent;
	        },

	        /**
	         * Nice extent.
	         * @param {number} [approxTickNum = 10] Given approx tick number
	         * @param {boolean} [fixMin=false]
	         * @param {boolean} [fixMax=false]
	         */
	        niceExtent: intervalScaleProto.niceExtent
	    });

	    zrUtil.each(['contain', 'normalize'], function (methodName) {
	        LogScale.prototype[methodName] = function (val) {
	            val = mathLog(val) / mathLog(LOG_BASE);
	            return scaleProto[methodName].call(this, val);
	        };
	    });

	    LogScale.create = function () {
	        return new LogScale();
	    };

	    module.exports = LogScale;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);
	    var Cartesian = __webpack_require__(219);

	    function Cartesian2D(name) {

	        Cartesian.call(this, name);
	    }

	    Cartesian2D.prototype = {

	        constructor: Cartesian2D,

	        type: 'cartesian2d',

	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['x', 'y'],

	        /**
	         * Base axis will be used on stacking.
	         *
	         * @return {module:echarts/coord/cartesian/Axis2D}
	         */
	        getBaseAxis: function () {
	            return this.getAxesByScale('ordinal')[0]
	                || this.getAxesByScale('time')[0]
	                || this.getAxis('x');
	        },

	        /**
	         * If contain point
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var axisX = this.getAxis('x');
	            var axisY = this.getAxis('y');
	            return axisX.contain(axisX.toLocalCoord(point[0]))
	                && axisY.contain(axisY.toLocalCoord(point[1]));
	        },

	        /**
	         * If contain data
	         * @param {Array.<number>} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this.getAxis('x').containData(data[0])
	                && this.getAxis('y').containData(data[1]);
	        },

	        /**
	         * Convert series data to an array of points
	         * @param {module:echarts/data/List} data
	         * @param {boolean} stack
	         * @return {Array}
	         *  Return array of points. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data, stack) {
	            return data.mapArray(['x', 'y'], function (x, y) {
	                return this.dataToPoint([x, y]);
	            }, stack, this);
	        },

	        /**
	         * @param {Array.<number>} data
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),
	                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))
	            ];
	        },

	        /**
	         * @param {Array.<number>} point
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        pointToData: function (point, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),
	                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)
	            ];
	        },

	        /**
	         * Get other axis
	         * @param {module:echarts/coord/cartesian/Axis2D} axis
	         */
	        getOtherAxis: function (axis) {
	            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	        }
	    };

	    zrUtil.inherits(Cartesian2D, Cartesian);

	    module.exports = Cartesian2D;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */


	    var zrUtil = __webpack_require__(111);

	    function dimAxisMapper(dim) {
	        return this._axes[dim];
	    }

	    /**
	     * @alias module:echarts/coord/Cartesian
	     * @constructor
	     */
	    var Cartesian = function (name) {
	        this._axes = {};

	        this._dimList = [];

	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	    };

	    Cartesian.prototype = {

	        constructor: Cartesian,

	        type: 'cartesian',

	        /**
	         * Get axis
	         * @param  {number|string} dim
	         * @return {module:echarts/coord/Cartesian~Axis}
	         */
	        getAxis: function (dim) {
	            return this._axes[dim];
	        },

	        /**
	         * Get axes list
	         * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	         */
	        getAxes: function () {
	            return zrUtil.map(this._dimList, dimAxisMapper, this);
	        },

	        /**
	         * Get axes list by given scale type
	         */
	        getAxesByScale: function (scaleType) {
	            scaleType = scaleType.toLowerCase();
	            return zrUtil.filter(
	                this.getAxes(),
	                function (axis) {
	                    return axis.scale.type === scaleType;
	                }
	            );
	        },

	        /**
	         * Add axis
	         * @param {module:echarts/coord/Cartesian.Axis}
	         */
	        addAxis: function (axis) {
	            var dim = axis.dim;

	            this._axes[dim] = axis;

	            this._dimList.push(dim);
	        },

	        /**
	         * Convert data to coord in nd space
	         * @param {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        dataToCoord: function (val) {
	            return this._dataCoordConvert(val, 'dataToCoord');
	        },

	        /**
	         * Convert coord in nd space to data
	         * @param  {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        coordToData: function (val) {
	            return this._dataCoordConvert(val, 'coordToData');
	        },

	        _dataCoordConvert: function (input, method) {
	            var dimList = this._dimList;

	            var output = input instanceof Array ? [] : {};

	            for (var i = 0; i < dimList.length; i++) {
	                var dim = dimList[i];
	                var axis = this._axes[dim];

	                output[dim] = axis[method](input[dim]);
	            }

	            return output;
	        }
	    };

	    module.exports = Cartesian;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var Axis = __webpack_require__(221);
	    var axisLabelInterval = __webpack_require__(222);

	    /**
	     * Extend axis 2d
	     * @constructor module:echarts/coord/cartesian/Axis2D
	     * @extends {module:echarts/coord/cartesian/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	        Axis.call(this, dim, scale, coordExtent);
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';

	        /**
	         * Axis position
	         *  - 'top'
	         *  - 'bottom'
	         *  - 'left'
	         *  - 'right'
	         */
	        this.position = position || 'bottom';
	    };

	    Axis2D.prototype = {

	        constructor: Axis2D,

	        /**
	         * Index of axis, can be used as key
	         */
	        index: 0,
	        /**
	         * If axis is on the zero position of the other axis
	         * @type {boolean}
	         */
	        onZero: false,

	        /**
	         * Axis model
	         * @param {module:echarts/coord/cartesian/AxisModel}
	         */
	        model: null,

	        isHorizontal: function () {
	            var position = this.position;
	            return position === 'top' || position === 'bottom';
	        },

	        getGlobalExtent: function () {
	            var ret = this.getExtent();
	            ret[0] = this.toGlobalCoord(ret[0]);
	            ret[1] = this.toGlobalCoord(ret[1]);
	            return ret;
	        },

	        /**
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var labelInterval = this._labelInterval;
	            if (!labelInterval) {
	                labelInterval = this._labelInterval = axisLabelInterval(this);
	            }
	            return labelInterval;
	        },

	        /**
	         * If label is ignored.
	         * Automatically used when axis is category and label can not be all shown
	         * @param  {number}  idx
	         * @return {boolean}
	         */
	        isLabelIgnored: function (idx) {
	            if (this.type === 'category') {
	                var labelInterval = this.getLabelInterval();
	                return ((typeof labelInterval === 'function')
	                    && !labelInterval(idx, this.scale.getLabel(idx)))
	                    || idx % (labelInterval + 1);
	            }
	        },

	        /**
	         * Transform global coord to local coord,
	         * i.e. var localCoord = axis.toLocalCoord(80);
	         * designate by module:echarts/coord/cartesian/Grid.
	         * @type {Function}
	         */
	        toLocalCoord: null,

	        /**
	         * Transform global coord to local coord,
	         * i.e. var globalCoord = axis.toLocalCoord(40);
	         * designate by module:echarts/coord/cartesian/Grid.
	         * @type {Function}
	         */
	        toGlobalCoord: null

	    };
	    zrUtil.inherits(Axis2D, Axis);

	    module.exports = Axis2D;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	

	    var numberUtil = __webpack_require__(115);
	    var linearMap = numberUtil.linearMap;
	    var zrUtil = __webpack_require__(111);

	    function fixExtentWithBands(extent, nTick) {
	        var size = extent[1] - extent[0];
	        var len = nTick;
	        var margin = size / len / 2;
	        extent[0] += margin;
	        extent[1] -= margin;
	    }

	    var normalizedExtent = [0, 1];
	    /**
	     * @name module:echarts/coord/CartesianAxis
	     * @constructor
	     */
	    var Axis = function (dim, scale, extent) {

	        /**
	         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	         * @type {string}
	         */
	        this.dim = dim;

	        /**
	         * Axis scale
	         * @type {module:echarts/coord/scale/*}
	         */
	        this.scale = scale;

	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        this._extent = extent || [0, 0];

	        /**
	         * @type {boolean}
	         */
	        this.inverse = false;

	        /**
	         * Usually true when axis has a ordinal scale
	         * @type {boolean}
	         */
	        this.onBand = false;
	    };

	    Axis.prototype = {

	        constructor: Axis,

	        /**
	         * If axis extent contain given coord
	         * @param {number} coord
	         * @return {boolean}
	         */
	        contain: function (coord) {
	            var extent = this._extent;
	            var min = Math.min(extent[0], extent[1]);
	            var max = Math.max(extent[0], extent[1]);
	            return coord >= min && coord <= max;
	        },

	        /**
	         * If axis extent contain given data
	         * @param {number} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this.contain(this.dataToCoord(data));
	        },

	        /**
	         * Get coord extent.
	         * @return {Array.<number>}
	         */
	        getExtent: function () {
	            var ret = this._extent.slice();
	            return ret;
	        },

	        /**
	         * Get precision used for formatting
	         * @param {Array.<number>} [dataExtent]
	         * @return {number}
	         */
	        getPixelPrecision: function (dataExtent) {
	            return numberUtil.getPixelPrecision(
	                dataExtent || this.scale.getExtent(),
	                this._extent
	            );
	        },

	        /**
	         * Set coord extent
	         * @param {number} start
	         * @param {number} end
	         */
	        setExtent: function (start, end) {
	            var extent = this._extent;
	            extent[0] = start;
	            extent[1] = end;
	        },

	        /**
	         * Convert data to coord. Data is the rank if it has a ordinal scale
	         * @param {number} data
	         * @param  {boolean} clamp
	         * @return {number}
	         */
	        dataToCoord: function (data, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;
	            data = scale.normalize(data);

	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }

	            return linearMap(data, normalizedExtent, extent, clamp);
	        },

	        /**
	         * Convert coord to data. Data is the rank if it has a ordinal scale
	         * @param {number} coord
	         * @param  {boolean} clamp
	         * @return {number}
	         */
	        coordToData: function (coord, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;

	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }

	            var t = linearMap(coord, extent, normalizedExtent, clamp);

	            return this.scale.scale(t);
	        },
	        /**
	         * @return {Array.<number>}
	         */
	        getTicksCoords: function () {
	            if (this.onBand) {
	                var bands = this.getBands();
	                var coords = [];
	                for (var i = 0; i < bands.length; i++) {
	                    coords.push(bands[i][0]);
	                }
	                if (bands[i - 1]) {
	                    coords.push(bands[i - 1][1]);
	                }
	                return coords;
	            }
	            else {
	                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	            }
	        },

	        /**
	         * Coords of labels are on the ticks or on the middle of bands
	         * @return {Array.<number>}
	         */
	        getLabelsCoords: function () {
	            if (this.onBand) {
	                var bands = this.getBands();
	                var coords = [];
	                var band;
	                for (var i = 0; i < bands.length; i++) {
	                    band = bands[i];
	                    coords.push((band[0] + band[1]) / 2);
	                }
	                return coords;
	            }
	            else {
	                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	            }
	        },

	        /**
	         * Get bands.
	         *
	         * If axis has labels [1, 2, 3, 4]. Bands on the axis are
	         * |---1---|---2---|---3---|---4---|.
	         *
	         * @return {Array}
	         */
	         // FIXME Situation when labels is on ticks
	        getBands: function () {
	            var extent = this.getExtent();
	            var bands = [];
	            var len = this.scale.count();
	            var start = extent[0];
	            var end = extent[1];
	            var span = end - start;

	            for (var i = 0; i < len; i++) {
	                bands.push([
	                    span * i / len + start,
	                    span * (i + 1) / len + start
	                ]);
	            }
	            return bands;
	        },

	        /**
	         * Get width of band
	         * @return {number}
	         */
	        getBandWidth: function () {
	            var axisExtent = this._extent;
	            var dataExtent = this.scale.getExtent();

	            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
	            // Fix #2728, avoid NaN when only one data.
	            len === 0 && (len = 1);

	            var size = Math.abs(axisExtent[1] - axisExtent[0]);

	            return Math.abs(size) / len;
	        }
	    };

	    module.exports = Axis;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Helper function for axisLabelInterval calculation
	 */



	    var zrUtil = __webpack_require__(111);
	    var axisHelper = __webpack_require__(212);

	    module.exports = function (axis) {
	        var axisModel = axis.model;
	        var labelModel = axisModel.getModel('axisLabel');
	        var labelInterval = labelModel.get('interval');
	        if (!(axis.type === 'category' && labelInterval === 'auto')) {
	            return labelInterval === 'auto' ? 0 : labelInterval;
	        }

	        return axisHelper.getAxisLabelInterval(
	            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),
	            axisModel.getFormattedLabels(),
	            labelModel.getModel('textStyle').getFont(),
	            axis.isHorizontal()
	        );
	    };


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖


	    __webpack_require__(224);
	    var ComponentModel = __webpack_require__(127);

	    module.exports = ComponentModel.extend({

	        type: 'grid',

	        dependencies: ['xAxis', 'yAxis'],

	        layoutMode: 'box',

	        /**
	         * @type {module:echarts/coord/cartesian/Grid}
	         */
	        coordinateSystem: null,

	        defaultOption: {
	            show: false,
	            zlevel: 0,
	            z: 0,
	            left: '10%',
	            top: 60,
	            right: '10%',
	            bottom: 60,
	            // If grid size contain label
	            containLabel: false,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderWidth: 1,
	            borderColor: '#ccc'
	        }
	    });


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var ComponentModel = __webpack_require__(127);
	    var zrUtil = __webpack_require__(111);
	    var axisModelCreator = __webpack_require__(225);

	    var AxisModel = ComponentModel.extend({

	        type: 'cartesian2dAxis',

	        /**
	         * @type {module:echarts/coord/cartesian/Axis2D}
	         */
	        axis: null,

	        /**
	         * @override
	         */
	        init: function () {
	            AxisModel.superApply(this, 'init', arguments);
	            this._resetRange();
	        },

	        /**
	         * @override
	         */
	        mergeOption: function () {
	            AxisModel.superApply(this, 'mergeOption', arguments);
	            this._resetRange();
	        },

	        /**
	         * @override
	         */
	        restoreData: function () {
	            AxisModel.superApply(this, 'restoreData', arguments);
	            this._resetRange();
	        },

	        /**
	         * @public
	         * @param {number} rangeStart
	         * @param {number} rangeEnd
	         */
	        setRange: function (rangeStart, rangeEnd) {
	            this.option.rangeStart = rangeStart;
	            this.option.rangeEnd = rangeEnd;
	        },

	        /**
	         * @public
	         * @return {Array.<number|string|Date>}
	         */
	        getMin: function () {
	            var option = this.option;
	            return option.rangeStart != null ? option.rangeStart : option.min;
	        },

	        /**
	         * @public
	         * @return {Array.<number|string|Date>}
	         */
	        getMax: function () {
	            var option = this.option;
	            return option.rangeEnd != null ? option.rangeEnd : option.max;
	        },

	        /**
	         * @public
	         * @return {boolean}
	         */
	        getNeedCrossZero: function () {
	            var option = this.option;
	            return (option.rangeStart != null || option.rangeEnd != null)
	                ? false : !option.scale;
	        },

	        /**
	         * @private
	         */
	        _resetRange: function () {
	            // rangeStart and rangeEnd is readonly.
	            this.option.rangeStart = this.option.rangeEnd = null;
	        }

	    });

	    function getAxisType(axisDim, option) {
	        // Default axis with data is category axis
	        return option.type || (option.data ? 'category' : 'value');
	    }

	    zrUtil.merge(AxisModel.prototype, __webpack_require__(227));

	    var extraOption = {
	        gridIndex: 0
	    };

	    axisModelCreator('x', AxisModel, getAxisType, extraOption);
	    axisModelCreator('y', AxisModel, getAxisType, extraOption);

	    module.exports = AxisModel;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	

	    var axisDefault = __webpack_require__(226);
	    var zrUtil = __webpack_require__(111);
	    var ComponentModel = __webpack_require__(127);
	    var layout = __webpack_require__(129);

	    // FIXME axisType is fixed ?
	    var AXIS_TYPES = ['value', 'category', 'time', 'log'];

	    /**
	     * Generate sub axis model class
	     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	     * @param {module:echarts/model/Component} BaseAxisModelClass
	     * @param {Function} axisTypeDefaulter
	     * @param {Object} [extraDefaultOption]
	     */
	    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

	        zrUtil.each(AXIS_TYPES, function (axisType) {

	            BaseAxisModelClass.extend({

	                type: axisName + 'Axis.' + axisType,

	                mergeDefaultAndTheme: function (option, ecModel) {
	                    var layoutMode = this.layoutMode;
	                    var inputPositionParams = layoutMode
	                        ? layout.getLayoutParams(option) : {};

	                    var themeModel = ecModel.getTheme();
	                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	                    zrUtil.merge(option, this.getDefaultOption());

	                    option.type = axisTypeDefaulter(axisName, option);

	                    if (layoutMode) {
	                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                    }
	                },

	                defaultOption: zrUtil.mergeAll(
	                    [
	                        {},
	                        axisDefault[axisType + 'Axis'],
	                        extraDefaultOption
	                    ],
	                    true
	                )
	            });
	        });

	        ComponentModel.registerSubTypeDefaulter(
	            axisName + 'Axis',
	            zrUtil.curry(axisTypeDefaulter, axisName)
	        );
	    };


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);

	    var defaultOption = {
	        show: true,
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        // 反向坐标轴
	        inverse: false,
	        // 坐标轴名字，默认为空
	        name: '',
	        // 坐标轴名字位置，支持'start' | 'middle' | 'end'
	        nameLocation: 'end',
	        // 坐标轴文字样式，默认取全局样式
	        nameTextStyle: {},
	        // 文字与轴线距离
	        nameGap: 15,
	        // 是否能触发鼠标事件
	        silent: true,
	        // 坐标轴线
	        axisLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            onZero: true,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                color: '#333',
	                width: 1,
	                type: 'solid'
	            }
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // 属性show控制显示与否，默认显示
	            show: true,
	            // 控制小标记是否在grid里
	            inside: false,
	            // 属性length控制线长
	            length: 5,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                color: '#333',
	                width: 1
	            }
	        },
	        // 坐标轴文本标签，详见axis.axisLabel
	        axisLabel: {
	            show: true,
	            // 控制文本标签是否在grid里
	            inside: false,
	            rotate: 0,
	            margin: 8,
	            // formatter: null,
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                color: '#333',
	                fontSize: 12
	            }
	        },
	        // 分隔线
	        splitLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            // 属性lineStyle（详见lineStyle）控制线条样式
	            lineStyle: {
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        // 分隔区域
	        splitArea: {
	            // 默认不显示，属性show控制显示与否
	            show: false,
	            // 属性areaStyle（详见areaStyle）控制区域样式
	            areaStyle: {
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };

	    var categoryAxis = zrUtil.merge({
	        // 类目起始和结束两端空白策略
	        boundaryGap: true,
	        // 坐标轴小标记
	        axisTick: {
	            interval: 'auto'
	        },
	        // 坐标轴文本标签，详见axis.axisLabel
	        axisLabel: {
	            interval: 'auto'
	        }
	    }, defaultOption);

	    var valueAxis = zrUtil.defaults({
	        // 数值起始和结束两端空白策略
	        boundaryGap: [0, 0],
	        // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	        // min: null,
	        // 最大值，设置成 'dataMax' 则从数据中计算最大值
	        // max: null,
	        // Readonly prop, specifies start value of the range when using data zoom.
	        // rangeStart: null
	        // Readonly prop, specifies end value of the range when using data zoom.
	        // rangeEnd: null
	        // 脱离0值比例，放大聚焦到最终_min，_max区间
	        // scale: false,
	        // 分割段数，默认为5
	        splitNumber: 5
	    }, defaultOption);

	    // FIXME
	    var timeAxis = zrUtil.defaults({
	        scale: true,
	        min: 'dataMin',
	        max: 'dataMax'
	    }, valueAxis);
	    var logAxis = zrUtil.defaults({}, valueAxis);
	    logAxis.scale = true;

	    module.exports = {
	        categoryAxis: categoryAxis,
	        valueAxis: valueAxis,
	        timeAxis: timeAxis,
	        logAxis: logAxis
	    };


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var axisHelper = __webpack_require__(212);

	    function getName(obj) {
	        if (zrUtil.isObject(obj) && obj.value != null) {
	            return obj.value;
	        }
	        else {
	            return obj;
	        }
	    }
	    /**
	     * Get categories
	     */
	    function getCategories() {
	        return this.get('type') === 'category'
	            && zrUtil.map(this.get('data'), getName);
	    }

	    /**
	     * Format labels
	     * @return {Array.<string>}
	     */
	    function getFormattedLabels() {
	        return axisHelper.getFormattedLabels(
	            this.axis,
	            this.get('axisLabel.formatter')
	        );
	    }

	    module.exports = {

	        getFormattedLabels: getFormattedLabels,

	        getCategories: getCategories
	    };


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var SeriesModel = __webpack_require__(135);
	    var createListFromArray = __webpack_require__(229);

	    module.exports = SeriesModel.extend({

	        type: 'series.bar',

	        dependencies: ['grid', 'polar'],

	        getInitialData: function (option, ecModel) {
	            return createListFromArray(option.data, this, ecModel);
	        },

	        getMarkerPosition: function (value) {
	            var coordSys = this.coordinateSystem;
	            if (coordSys) {
	                var pt = coordSys.dataToPoint(value);
	                var data = this.getData();
	                var offset = data.getLayout('offset');
	                var size = data.getLayout('size');
	                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	                pt[offsetIndex] += offset + size / 2;
	                return pt;
	            }
	            return [NaN, NaN];
	        },

	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	            // stack: null

	            // Cartesian coordinate system
	            xAxisIndex: 0,
	            yAxisIndex: 0,

	            // 最小高度改为0
	            barMinHeight: 0,

	            // barMaxWidth: null,
	            // 默认自适应
	            // barWidth: null,
	            // 柱间距离，默认为柱形宽度的30%，可设固定值
	            // barGap: '30%',
	            // 类目间柱形距离，默认为类目间距的20%，可设固定值
	            // barCategoryGap: '20%',
	            // label: {
	            //     normal: {
	            //         show: false
	            //         formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调

	            //         // 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	            //         //           'inside' | 'insideleft' | 'insideTop' | 'insideRight' | 'insideBottom' |
	            //         //           'outside' |'left' | 'right'|'top'|'bottom'
	            //         position:

	            //         textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            //     }
	            // },
	            itemStyle: {
	                normal: {
	                    // color: '各异',
	                    // 柱条边线
	                    barBorderColor: '#fff',
	                    // 柱条边线线宽，单位px，默认为1
	                    barBorderWidth: 0
	                },
	                emphasis: {
	                    // color: '各异',
	                    // 柱条边线
	                    barBorderColor: '#fff',
	                    // 柱条边线线宽，单位px，默认为1
	                    barBorderWidth: 0
	                }
	            }
	        }
	    });


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(230);
	    var completeDimensions = __webpack_require__(232);
	    var zrUtil = __webpack_require__(111);
	    var modelUtil = __webpack_require__(113);
	    var CoordinateSystem = __webpack_require__(133);
	    var getDataItemValue = modelUtil.getDataItemValue;
	    var converDataValue = modelUtil.converDataValue;

	    function firstDataNotNull(data) {
	        var i = 0;
	        while (i < data.length && data[i] == null) {
	            i++;
	        }
	        return data[i];
	    }
	    function ifNeedCompleteOrdinalData(data) {
	        var sampleItem = firstDataNotNull(data);
	        return sampleItem != null
	            && !zrUtil.isArray(getDataItemValue(sampleItem));
	    }

	    /**
	     * Helper function to create a list from option data
	     */
	    function createListFromArray(data, seriesModel, ecModel) {
	        // If data is undefined
	        data = data || [];

	        var coordSysName = seriesModel.get('coordinateSystem');
	        var creator = creators[coordSysName];
	        var registeredCoordSys = CoordinateSystem.get(coordSysName);
	        // FIXME
	        var result = creator && creator(data, seriesModel, ecModel);
	        var dimensions = result && result.dimensions;
	        if (!dimensions) {
	            // Get dimensions from registered coordinate system
	            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];
	            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
	        }
	        var categoryAxisModel = result && result.categoryAxisModel;
	        var categories;

	        var categoryDimIndex = dimensions[0].type === 'ordinal'
	            ? 0 : (dimensions[1].type === 'ordinal' ? 1 : -1);

	        var list = new List(dimensions, seriesModel);

	        var nameList = createNameList(result, data);

	        var dimValueGetter = (categoryAxisModel && ifNeedCompleteOrdinalData(data))
	            ? function (itemOpt, dimName, dataIndex, dimIndex) {
	                // Use dataIndex as ordinal value in categoryAxis
	                return dimIndex === categoryDimIndex
	                    ? dataIndex
	                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	            }
	            : function (itemOpt, dimName, dataIndex, dimIndex) {
	                var value = getDataItemValue(itemOpt);
	                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);
	                if (categoryDimIndex === dimIndex) {
	                    // If given value is a category string
	                    if (typeof val === 'string') {
	                        // Lazy get categories
	                        categories = categories || categoryAxisModel.getCategories();
	                        val = zrUtil.indexOf(categories, val);
	                        if (val < 0 && !isNaN(val)) {
	                            // In case some one write '1', '2' istead of 1, 2
	                            val = +val;
	                        }
	                    }
	                }
	                return val;
	            };

	        list.initData(data, nameList, dimValueGetter);

	        return list;
	    }

	    function isStackable(axisType) {
	        return axisType !== 'category' && axisType !== 'time';
	    }

	    function getDimTypeByAxis(axisType) {
	        return axisType === 'category'
	            ? 'ordinal'
	            : axisType === 'time'
	            ? 'time'
	            : 'float';
	    }

	    /**
	     * Creaters for each coord system.
	     * @return {Object} {dimensions, categoryAxisModel};
	     */
	    var creators = {

	        cartesian2d: function (data, seriesModel, ecModel) {
	            var xAxisModel = ecModel.getComponent('xAxis', seriesModel.get('xAxisIndex'));
	            var yAxisModel = ecModel.getComponent('yAxis', seriesModel.get('yAxisIndex'));
	            var xAxisType = xAxisModel.get('type');
	            var yAxisType = yAxisModel.get('type');

	            var dimensions = [
	                {
	                    name: 'x',
	                    type: getDimTypeByAxis(xAxisType),
	                    stackable: isStackable(xAxisType)
	                },
	                {
	                    name: 'y',
	                    // If two category axes
	                    type: getDimTypeByAxis(yAxisType),
	                    stackable: isStackable(yAxisType)
	                }
	            ];

	            var isXAxisCateogry = xAxisType === 'category';

	            completeDimensions(dimensions, data, ['x', 'y', 'z']);

	            return {
	                dimensions: dimensions,
	                categoryIndex: isXAxisCateogry ? 0 : 1,
	                categoryAxisModel: isXAxisCateogry
	                    ? xAxisModel
	                    : (yAxisType === 'category' ? yAxisModel : null)
	            };
	        },

	        polar: function (data, seriesModel, ecModel) {
	            var polarIndex = seriesModel.get('polarIndex') || 0;

	            var axisFinder = function (axisModel) {
	                return axisModel.get('polarIndex') === polarIndex;
	            };

	            var angleAxisModel = ecModel.findComponents({
	                mainType: 'angleAxis', filter: axisFinder
	            })[0];
	            var radiusAxisModel = ecModel.findComponents({
	                mainType: 'radiusAxis', filter: axisFinder
	            })[0];

	            var radiusAxisType = radiusAxisModel.get('type');
	            var angleAxisType = angleAxisModel.get('type');

	            var dimensions = [
	                {
	                    name: 'radius',
	                    type: getDimTypeByAxis(radiusAxisType),
	                    stackable: isStackable(radiusAxisType)
	                },
	                {
	                    name: 'angle',
	                    type: getDimTypeByAxis(angleAxisType),
	                    stackable: isStackable(angleAxisType)
	                }
	            ];
	            var isAngleAxisCateogry = angleAxisType === 'category';

	            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);

	            return {
	                dimensions: dimensions,
	                categoryIndex: isAngleAxisCateogry ? 1 : 0,
	                categoryAxisModel: isAngleAxisCateogry
	                    ? angleAxisModel
	                    : (radiusAxisType === 'category' ? radiusAxisModel : null)
	            };
	        },

	        geo: function (data, seriesModel, ecModel) {
	            // TODO Region
	            // 多个散点图系列在同一个地区的时候
	            return {
	                dimensions: completeDimensions([
	                    {name: 'lng'},
	                    {name: 'lat'}
	                ], data, ['lng', 'lat', 'value'])
	            };
	        }
	    };

	    function createNameList(result, data) {
	        var nameList = [];

	        if (result && result.categoryAxisModel) {
	            // FIXME Two category axis
	            var categories = result.categoryAxisModel.getCategories();
	            if (categories) {
	                var dataLen = data.length;
	                // Ordered data is given explicitly like
	                // [[3, 0.2], [1, 0.3], [2, 0.15]]
	                // or given scatter data,
	                // pick the category
	                if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	                    nameList = [];
	                    for (var i = 0; i < dataLen; i++) {
	                        nameList[i] = categories[data[i][result.categoryIndex || 0]];
	                    }
	                }
	                else {
	                    nameList = categories.slice(0);
	                }
	            }
	        }

	        return nameList;
	    }

	    module.exports = createListFromArray;



/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * List for data storage
	 * @module echarts/data/List
	 */


	    var UNDEFINED = 'undefined';
	    var globalObj = typeof window === 'undefined' ? global : window;
	    var Float64Array = typeof globalObj.Float64Array === UNDEFINED
	        ? Array : globalObj.Float64Array;
	    var Int32Array = typeof globalObj.Int32Array === UNDEFINED
	        ? Array : globalObj.Int32Array;

	    var dataCtors = {
	        'float': Float64Array,
	        'int': Int32Array,
	        // Ordinal data type can be string or int
	        'ordinal': Array,
	        'number': Array,
	        'time': Array
	    };

	    var Model = __webpack_require__(116);
	    var DataDiffer = __webpack_require__(231);

	    var zrUtil = __webpack_require__(111);
	    var modelUtil = __webpack_require__(113);
	    var isObject = zrUtil.isObject;

	    var IMMUTABLE_PROPERTIES = [
	        'stackedOn', '_nameList', '_idList', '_rawData'
	    ];

	    var transferImmuProperties = function (a, b, wrappedMethod) {
	        zrUtil.each(IMMUTABLE_PROPERTIES.concat(wrappedMethod || []), function (propName) {
	            if (b.hasOwnProperty(propName)) {
	                a[propName] = b[propName];
	            }
	        });
	    };

	    /**
	     * @constructor
	     * @alias module:echarts/data/List
	     *
	     * @param {Array.<string>} dimensions
	     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	     * @param {module:echarts/model/Model} hostModel
	     */
	    var List = function (dimensions, hostModel) {

	        dimensions = dimensions || ['x', 'y'];

	        var dimensionInfos = {};
	        var dimensionNames = [];
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimensionName;
	            var dimensionInfo = {};
	            if (typeof dimensions[i] === 'string') {
	                dimensionName = dimensions[i];
	                dimensionInfo = {
	                    name: dimensionName,
	                    stackable: false,
	                    // Type can be 'float', 'int', 'number'
	                    // Default is number, Precision of float may not enough
	                    type: 'number'
	                };
	            }
	            else {
	                dimensionInfo = dimensions[i];
	                dimensionName = dimensionInfo.name;
	                dimensionInfo.type = dimensionInfo.type || 'number';
	            }
	            dimensionNames.push(dimensionName);
	            dimensionInfos[dimensionName] = dimensionInfo;
	        }
	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        this.dimensions = dimensionNames;

	        /**
	         * Infomation of each data dimension, like data type.
	         * @type {Object}
	         */
	        this._dimensionInfos = dimensionInfos;

	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.hostModel = hostModel;

	        /**
	         * Indices stores the indices of data subset after filtered.
	         * This data subset will be used in chart.
	         * @type {Array.<number>}
	         * @readOnly
	         */
	        this.indices = [];

	        /**
	         * Data storage
	         * @type {Object.<key, TypedArray|Array>}
	         * @private
	         */
	        this._storage = {};

	        /**
	         * @type {Array.<string>}
	         */
	        this._nameList = [];
	        /**
	         * @type {Array.<string>}
	         */
	        this._idList = [];
	        /**
	         * Models of data option is stored sparse for optimizing memory cost
	         * @type {Array.<module:echarts/model/Model>}
	         * @private
	         */
	        this._optionModels = [];

	        /**
	         * @param {module:echarts/data/List}
	         */
	        this.stackedOn = null;

	        /**
	         * Global visual properties after visual coding
	         * @type {Object}
	         * @private
	         */
	        this._visual = {};

	        /**
	         * Globel layout properties.
	         * @type {Object}
	         * @private
	         */
	        this._layout = {};

	        /**
	         * Item visual properties after visual coding
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemVisuals = [];

	        /**
	         * Item layout properties after layout
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemLayouts = [];

	        /**
	         * Graphic elemnents
	         * @type {Array.<module:zrender/Element>}
	         * @private
	         */
	        this._graphicEls = [];

	        /**
	         * @type {Array.<Array|Object>}
	         * @private
	         */
	        this._rawData;

	        /**
	         * @type {Object}
	         * @private
	         */
	        this._extent;
	    };

	    var listProto = List.prototype;

	    listProto.type = 'list';

	    /**
	     * Get dimension name
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     */
	    listProto.getDimension = function (dim) {
	        if (!isNaN(dim)) {
	            dim = this.dimensions[dim] || dim;
	        }
	        return dim;
	    };
	    /**
	     * Get type and stackable info of particular dimension
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     */
	    listProto.getDimensionInfo = function (dim) {
	        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	    };

	    /**
	     * Initialize from data
	     * @param {Array.<Object|number|Array>} data
	     * @param {Array.<string>} [nameList]
	     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	     */
	    listProto.initData = function (data, nameList, dimValueGetter) {
	        data = data || [];

	        this._rawData = data;

	        // Clear
	        var storage = this._storage = {};
	        var indices = this.indices = [];

	        var dimensions = this.dimensions;
	        var size = data.length;
	        var dimensionInfoMap = this._dimensionInfos;

	        var idList = [];
	        var nameRepeatCount = {};

	        nameList = nameList || [];

	        // Init storage
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimInfo = dimensionInfoMap[dimensions[i]];
	            var DataCtor = dataCtors[dimInfo.type];
	            storage[dimensions[i]] = new DataCtor(size);
	        }

	        // Default dim value getter
	        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	            var value = modelUtil.getDataItemValue(dataItem);
	            return modelUtil.converDataValue(
	                zrUtil.isArray(value)
	                    ? value[dimIndex]
	                    // If value is a single number or something else not array.
	                    : value,
	                dimensionInfoMap[dimName]
	            );
	        };

	        for (var idx = 0; idx < data.length; idx++) {
	            var dataItem = data[idx];
	            // Each data item is value
	            // [1, 2]
	            // 2
	            // Bar chart, line chart which uses category axis
	            // only gives the 'y' value. 'x' value is the indices of cateogry
	            // Use a tempValue to normalize the value to be a (x, y) value

	            // Store the data by dimensions
	            for (var k = 0; k < dimensions.length; k++) {
	                var dim = dimensions[k];
	                var dimStorage = storage[dim];
	                // PENDING NULL is empty or zero
	                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
	            }

	            indices.push(idx);
	        }

	        // Use the name in option and create id
	        for (var i = 0; i < data.length; i++) {
	            var id = '';
	            if (!nameList[i]) {
	                nameList[i] = data[i].name;
	                // Try using the id in option
	                id = data[i].id;
	            }
	            var name = nameList[i] || '';
	            if (!id && name) {
	                // Use name as id and add counter to avoid same name
	                nameRepeatCount[name] = nameRepeatCount[name] || 0;
	                id = name;
	                if (nameRepeatCount[name] > 0) {
	                    id += '__ec__' + nameRepeatCount[name];
	                }
	                nameRepeatCount[name]++;
	            }
	            id && (idList[i] = id);
	        }

	        this._nameList = nameList;
	        this._idList = idList;
	    };

	    /**
	     * @return {number}
	     */
	    listProto.count = function () {
	        return this.indices.length;
	    };

	    /**
	     * Get value. Return NaN if idx is out of range.
	     * @param {string} dim Dim must be concrete name.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.get = function (dim, idx, stack) {
	        var storage = this._storage;
	        var dataIndex = this.indices[idx];

	        // If value not exists
	        if (dataIndex == null) {
	            return NaN;
	        }

	        var value = storage[dim] && storage[dim][dataIndex];
	        // FIXME ordinal data type is not stackable
	        if (stack) {
	            var dimensionInfo = this._dimensionInfos[dim];
	            if (dimensionInfo && dimensionInfo.stackable) {
	                var stackedOn = this.stackedOn;
	                while (stackedOn) {
	                    // Get no stacked data of stacked on
	                    var stackedValue = stackedOn.get(dim, idx);
	                    // Considering positive stack, negative stack and empty data
	                    if ((value >= 0 && stackedValue > 0)  // Positive stack
	                        || (value <= 0 && stackedValue < 0) // Negative stack
	                    ) {
	                        value += stackedValue;
	                    }
	                    stackedOn = stackedOn.stackedOn;
	                }
	            }
	        }
	        return value;
	    };

	    /**
	     * Get value for multi dimensions.
	     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.getValues = function (dimensions, idx, stack) {
	        var values = [];

	        if (!zrUtil.isArray(dimensions)) {
	            stack = idx;
	            idx = dimensions;
	            dimensions = this.dimensions;
	        }

	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            values.push(this.get(dimensions[i], idx, stack));
	        }

	        return values;
	    };

	    /**
	     * If value is NaN. Inlcuding '-'
	     * @param {string} dim
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.hasValue = function (idx) {
	        var dimensions = this.dimensions;
	        var dimensionInfos = this._dimensionInfos;
	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            if (
	                // Ordinal type can be string or number
	                dimensionInfos[dimensions[i]].type !== 'ordinal'
	                && isNaN(this.get(dimensions[i], idx))
	            ) {
	                return false;
	            }
	        }
	        return true;
	    };

	    /**
	     * Get extent of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     */
	    listProto.getDataExtent = function (dim, stack) {
	        var dimData = this._storage[dim];
	        var dimInfo = this.getDimensionInfo(dim);
	        stack = (dimInfo && dimInfo.stackable) && stack;
	        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];
	        var value;
	        if (dimExtent) {
	            return dimExtent;
	        }
	        // var dimInfo = this._dimensionInfos[dim];
	        if (dimData) {
	            var min = Infinity;
	            var max = -Infinity;
	            // var isOrdinal = dimInfo.type === 'ordinal';
	            for (var i = 0, len = this.count(); i < len; i++) {
	                value = this.get(dim, i, stack);
	                // FIXME
	                // if (isOrdinal && typeof value === 'string') {
	                //     value = zrUtil.indexOf(dimData, value);
	                // }
	                value < min && (min = value);
	                value > max && (max = value);
	            }
	            return (this._extent[dim + stack] = [min, max]);
	        }
	        else {
	            return [Infinity, -Infinity];
	        }
	    };

	    /**
	     * Get sum of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     */
	    listProto.getSum = function (dim, stack) {
	        var dimData = this._storage[dim];
	        var sum = 0;
	        if (dimData) {
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var value = this.get(dim, i, stack);
	                if (!isNaN(value)) {
	                    sum += value;
	                }
	            }
	        }
	        return sum;
	    };

	    /**
	     * Retreive the index with given value
	     * @param {number} idx
	     * @param {number} value
	     * @return {number}
	     */
	    // FIXME Precision of float value
	    listProto.indexOf = function (dim, value) {
	        var storage = this._storage;
	        var dimData = storage[dim];
	        var indices = this.indices;

	        if (dimData) {
	            for (var i = 0, len = indices.length; i < len; i++) {
	                var rawIndex = indices[i];
	                if (dimData[rawIndex] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    };

	    /**
	     * Retreive the index with given name
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfName = function (name) {
	        var indices = this.indices;
	        var nameList = this._nameList;

	        for (var i = 0, len = indices.length; i < len; i++) {
	            var rawIndex = indices[i];
	            if (nameList[rawIndex] === name) {
	                return i;
	            }
	        }

	        return -1;
	    };

	    /**
	     * Retreive the index of nearest value
	     * @param {string>} dim
	     * @param {number} value
	     * @param {boolean} stack If given value is after stacked
	     * @return {number}
	     */
	    listProto.indexOfNearest = function (dim, value, stack) {
	        var storage = this._storage;
	        var dimData = storage[dim];

	        if (dimData) {
	            var minDist = Number.MAX_VALUE;
	            var nearestIdx = -1;
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var diff = value - this.get(dim, i, stack);
	                var dist = Math.abs(diff);
	                if (dist < minDist
	                    // For the case of two data are same on xAxis, which has sequence data.
	                    // Show the nearest index
	                    // https://github.com/ecomfe/echarts/issues/2869
	                    || (dist === minDist && diff > 0)
	                ) {
	                    minDist = dist;
	                    nearestIdx = i;
	                }
	            }
	            return nearestIdx;
	        }
	        return -1;
	    };

	    /**
	     * Get raw data index
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawIndex = function (idx) {
	        var rawIdx = this.indices[idx];
	        return rawIdx == null ? -1 : rawIdx;
	    };

	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getName = function (idx) {
	        return this._nameList[this.indices[idx]] || '';
	    };

	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getId = function (idx) {
	        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');
	    };


	    function normalizeDimensions(dimensions) {
	        if (!zrUtil.isArray(dimensions)) {
	            dimensions = [dimensions];
	        }
	        return dimensions;
	    }

	    /**
	     * Data iteration
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     *
	     * @example
	     *  list.each('x', function (x, idx) {});
	     *  list.each(['x', 'y'], function (x, y, idx) {});
	     *  list.each(function (idx) {})
	     */
	    listProto.each = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }

	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );

	        var value = [];
	        var dimSize = dimensions.length;
	        var indices = this.indices;

	        context = context || this;

	        for (var i = 0; i < indices.length; i++) {
	            if (dimSize === 0) {
	                cb.call(context, i);
	            }
	            // Simple optimization
	            else if (dimSize === 1) {
	                cb.call(context, this.get(dimensions[0], i, stack), i);
	            }
	            else {
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dimensions[k], i, stack);
	                }
	                // Index
	                value[k] = i;
	                cb.apply(context, value);
	            }
	        }
	    };

	    /**
	     * Data filter
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     */
	    listProto.filterSelf = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }

	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );

	        var newIndices = [];
	        var value = [];
	        var dimSize = dimensions.length;
	        var indices = this.indices;

	        context = context || this;

	        for (var i = 0; i < indices.length; i++) {
	            var keep;
	            // Simple optimization
	            if (dimSize === 1) {
	                keep = cb.call(
	                    context, this.get(dimensions[0], i, stack), i
	                );
	            }
	            else {
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dimensions[k], i, stack);
	                }
	                value[k] = i;
	                keep = cb.apply(context, value);
	            }
	            if (keep) {
	                newIndices.push(indices[i]);
	            }
	        }

	        this.indices = newIndices;

	        // Reset data extent
	        this._extent = {};

	        return this;
	    };

	    /**
	     * Data mapping to a plain array
	     * @param {string|Array.<string>} [dimensions]
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.mapArray = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }

	        var result = [];
	        this.each(dimensions, function () {
	            result.push(cb && cb.apply(this, arguments));
	        }, stack, context);
	        return result;
	    };

	    function cloneListForMapAndSample(original, excludeDimensions) {
	        var allDimensions = original.dimensions;
	        var list = new List(
	            zrUtil.map(allDimensions, original.getDimensionInfo, original),
	            original.hostModel
	        );
	        // FIXME If needs stackedOn, value may already been stacked
	        transferImmuProperties(list, original, original._wrappedMethods);

	        var storage = list._storage = {};
	        var originalStorage = original._storage;
	        // Init storage
	        for (var i = 0; i < allDimensions.length; i++) {
	            var dim = allDimensions[i];
	            var dimStore = originalStorage[dim];
	            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	                storage[dim] = new dimStore.constructor(
	                    originalStorage[dim].length
	                );
	            }
	            else {
	                // Direct reference for other dimensions
	                storage[dim] = originalStorage[dim];
	            }
	        }
	        return list;
	    }

	    /**
	     * Data mapping to a new List with given dimensions
	     * @param {string|Array.<string>} dimensions
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.map = function (dimensions, cb, stack, context) {
	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );

	        var list = cloneListForMapAndSample(this, dimensions);
	        // Following properties are all immutable.
	        // So we can reference to the same value
	        var indices = list.indices = this.indices;

	        var storage = list._storage;

	        var tmpRetValue = [];
	        this.each(dimensions, function () {
	            var idx = arguments[arguments.length - 1];
	            var retValue = cb && cb.apply(this, arguments);
	            if (retValue != null) {
	                // a number
	                if (typeof retValue === 'number') {
	                    tmpRetValue[0] = retValue;
	                    retValue = tmpRetValue;
	                }
	                for (var i = 0; i < retValue.length; i++) {
	                    var dim = dimensions[i];
	                    var dimStore = storage[dim];
	                    var rawIdx = indices[idx];
	                    if (dimStore) {
	                        dimStore[rawIdx] = retValue[i];
	                    }
	                }
	            }
	        }, stack, context);

	        return list;
	    };

	    /**
	     * Large data down sampling on given dimension
	     * @param {string} dimension
	     * @param {number} rate
	     * @param {Function} sampleValue
	     * @param {Function} sampleIndex Sample index for name and id
	     */
	    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	        var list = cloneListForMapAndSample(this, [dimension]);
	        var storage = this._storage;
	        var targetStorage = list._storage;

	        var originalIndices = this.indices;
	        var indices = list.indices = [];

	        var frameValues = [];
	        var frameIndices = [];
	        var frameSize = Math.floor(1 / rate);

	        var dimStore = targetStorage[dimension];
	        var len = this.count();
	        // Copy data from original data
	        for (var i = 0; i < storage[dimension].length; i++) {
	            targetStorage[dimension][i] = storage[dimension][i];
	        }
	        for (var i = 0; i < len; i += frameSize) {
	            // Last frame
	            if (frameSize > len - i) {
	                frameSize = len - i;
	                frameValues.length = frameSize;
	            }
	            for (var k = 0; k < frameSize; k++) {
	                var idx = originalIndices[i + k];
	                frameValues[k] = dimStore[idx];
	                frameIndices[k] = idx;
	            }
	            var value = sampleValue(frameValues);
	            var idx = frameIndices[sampleIndex(frameValues, value) || 0];
	            // Only write value on the filtered data
	            dimStore[idx] = value;
	            indices.push(idx);
	        }
	        return list;
	    };

	    /**
	     * Get model of one data item.
	     *
	     * @param {number} idx
	     */
	    // FIXME Model proxy ?
	    listProto.getItemModel = function (idx) {
	        var hostModel = this.hostModel;
	        idx = this.indices[idx];
	        return new Model(this._rawData[idx], hostModel, hostModel.ecModel);
	    };

	    /**
	     * Create a data differ
	     * @param {module:echarts/data/List} otherList
	     * @return {module:echarts/data/DataDiffer}
	     */
	    listProto.diff = function (otherList) {
	        var idList = this._idList;
	        var otherIdList = otherList && otherList._idList;
	        return new DataDiffer(
	            otherList ? otherList.indices : [], this.indices, function (idx) {
	                return otherIdList[idx] || (idx + '');
	            }, function (idx) {
	                return idList[idx] || (idx + '');
	            }
	        );
	    };
	    /**
	     * Get visual property.
	     * @param {string} key
	     */
	    listProto.getVisual = function (key) {
	        var visual = this._visual;
	        return visual && visual[key];
	    };

	    /**
	     * Set visual property
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setVisual('color', color);
	     *  setVisual({
	     *      'color': color
	     *  });
	     */
	    listProto.setVisual = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setVisual(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._visual = this._visual || {};
	        this._visual[key] = val;
	    };

	    /**
	     * Set layout property.
	     * @param {string} key
	     * @param {*} [val]
	     */
	    listProto.setLayout = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setLayout(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._layout[key] = val;
	    };

	    /**
	     * Get layout property.
	     * @param  {string} key.
	     * @return {*}
	     */
	    listProto.getLayout = function (key) {
	        return this._layout[key];
	    };

	    /**
	     * Get layout of single data item
	     * @param {number} idx
	     */
	    listProto.getItemLayout = function (idx) {
	        return this._itemLayouts[idx];
	    },

	    /**
	     * Set layout of single data item
	     * @param {number} idx
	     * @param {Object} layout
	     * @param {boolean=} [merge=false]
	     */
	    listProto.setItemLayout = function (idx, layout, merge) {
	        this._itemLayouts[idx] = merge
	            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)
	            : layout;
	    },

	    /**
	     * Get visual property of single data item
	     * @param {number} idx
	     * @param {string} key
	     * @param {boolean} ignoreParent
	     */
	    listProto.getItemVisual = function (idx, key, ignoreParent) {
	        var itemVisual = this._itemVisuals[idx];
	        var val = itemVisual && itemVisual[key];
	        if (val == null && !ignoreParent) {
	            // Use global visual property
	            return this.getVisual(key);
	        }
	        return val;
	    },

	    /**
	     * Set visual property of single data item
	     *
	     * @param {number} idx
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setItemVisual(0, 'color', color);
	     *  setItemVisual(0, {
	     *      'color': color
	     *  });
	     */
	    listProto.setItemVisual = function (idx, key, value) {
	        var itemVisual = this._itemVisuals[idx] || {};
	        this._itemVisuals[idx] = itemVisual;

	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    itemVisual[name] = key[name];
	                }
	            }
	            return;
	        }
	        itemVisual[key] = value;
	    };

	    var setItemDataAndSeriesIndex = function (child) {
	        child.seriesIndex = this.seriesIndex;
	        child.dataIndex = this.dataIndex;
	    };
	    /**
	     * Set graphic element relative to data. It can be set as null
	     * @param {number} idx
	     * @param {module:zrender/Element} [el]
	     */
	    listProto.setItemGraphicEl = function (idx, el) {
	        var hostModel = this.hostModel;

	        if (el) {
	            // Add data index and series index for indexing the data by element
	            // Useful in tooltip
	            el.dataIndex = idx;
	            el.seriesIndex = hostModel && hostModel.seriesIndex;
	            if (el.type === 'group') {
	                el.traverse(setItemDataAndSeriesIndex, el);
	            }
	        }

	        this._graphicEls[idx] = el;
	    };

	    /**
	     * @param {number} idx
	     * @return {module:zrender/Element}
	     */
	    listProto.getItemGraphicEl = function (idx) {
	        return this._graphicEls[idx];
	    };

	    /**
	     * @param {Function} cb
	     * @param {*} context
	     */
	    listProto.eachItemGraphicEl = function (cb, context) {
	        zrUtil.each(this._graphicEls, function (el, idx) {
	            if (el) {
	                cb && cb.call(context, el, idx);
	            }
	        });
	    };

	    /**
	     * Shallow clone a new list except visual and layout properties, and graph elements.
	     * New list only change the indices.
	     */
	    listProto.cloneShallow = function () {
	        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	        var list = new List(dimensionInfoList, this.hostModel);

	        // FIXME
	        list._storage = this._storage;

	        transferImmuProperties(list, this, this._wrappedMethods);

	        list.indices = this.indices.slice();

	        return list;
	    };

	    /**
	     * Wrap some method to add more feature
	     * @param {string} methodName
	     * @param {Function} injectFunction
	     */
	    listProto.wrapMethod = function (methodName, injectFunction) {
	        var originalMethod = this[methodName];
	        if (typeof originalMethod !== 'function') {
	            return;
	        }
	        this._wrappedMethods = this._wrappedMethods || [];
	        this._wrappedMethods.push(methodName);
	        this[methodName] = function () {
	            var res = originalMethod.apply(this, arguments);
	            return injectFunction.call(this, res);
	        };
	    };

	    module.exports = List;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 231 */
/***/ function(module, exports) {

	'use strict';


	    function defaultKeyGetter(item) {
	        return item;
	    }

	    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
	        this._old = oldArr;
	        this._new = newArr;

	        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	        this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	    }

	    DataDiffer.prototype = {

	        constructor: DataDiffer,

	        /**
	         * Callback function when add a data
	         */
	        add: function (func) {
	            this._add = func;
	            return this;
	        },

	        /**
	         * Callback function when update a data
	         */
	        update: function (func) {
	            this._update = func;
	            return this;
	        },

	        /**
	         * Callback function when remove a data
	         */
	        remove: function (func) {
	            this._remove = func;
	            return this;
	        },

	        execute: function () {
	            var oldArr = this._old;
	            var newArr = this._new;
	            var oldKeyGetter = this._oldKeyGetter;
	            var newKeyGetter = this._newKeyGetter;

	            var oldDataIndexMap = {};
	            var newDataIndexMap = {};
	            var i;

	            initIndexMap(oldArr, oldDataIndexMap, oldKeyGetter);
	            initIndexMap(newArr, newDataIndexMap, newKeyGetter);

	            // Travel by inverted order to make sure order consistency
	            // when duplicate keys exists (consider newDataIndex.pop() below).
	            // For performance consideration, these code below do not look neat.
	            for (i = 0; i < oldArr.length; i++) {
	                var key = oldKeyGetter(oldArr[i]);
	                var idx = newDataIndexMap[key];

	                // idx can never be empty array here. see 'set null' logic below.
	                if (idx != null) {
	                    // Consider there is duplicate key (for example, use dataItem.name as key).
	                    // We should make sure every item in newArr and oldArr can be visited.
	                    var len = idx.length;
	                    if (len) {
	                        len === 1 && (newDataIndexMap[key] = null);
	                        idx = idx.unshift();
	                    }
	                    else {
	                        newDataIndexMap[key] = null;
	                    }
	                    this._update && this._update(idx, i);
	                }
	                else {
	                    this._remove && this._remove(i);
	                }
	            }

	            for (var key in newDataIndexMap) {
	                if (newDataIndexMap.hasOwnProperty(key)) {
	                    var idx = newDataIndexMap[key];
	                    if (idx == null) {
	                        continue;
	                    }
	                    // idx can never be empty array here. see 'set null' logic above.
	                    if (!idx.length) {
	                        this._add && this._add(idx);
	                    }
	                    else {
	                        for (var i = 0, len = idx.length; i < len; i++) {
	                            this._add && this._add(idx[i]);
	                        }
	                    }
	                }
	            }
	        }
	    };

	    function initIndexMap(arr, map, keyGetter) {
	        for (var i = 0; i < arr.length; i++) {
	            var key = keyGetter(arr[i]);
	            var existence = map[key];
	            if (existence == null) {
	                map[key] = i;
	            }
	            else {
	                if (!existence.length) {
	                    map[key] = existence = [existence];
	                }
	                existence.push(i);
	            }
	        }
	    }

	    module.exports = DataDiffer;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Complete dimensions by data (guess dimension).
	 */


	    var zrUtil = __webpack_require__(111);

	    /**
	     * Complete the dimensions array guessed from the data structure.
	     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
	     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
	     * @param  {Array.<string>} defaultNames    Default names to fill not necessary dimensions, like ['value']
	     * @param  {string} extraPrefix             Prefix of name when filling the left dimensions.
	     * @return {Array.<string>}
	     */
	    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
	        if (!data) {
	            return dimensions;
	        }

	        var value0 = retrieveValue(data[0]);
	        var dimSize = zrUtil.isArray(value0) && value0.length || 1;

	        defaultNames = defaultNames || [];
	        extraPrefix = extraPrefix || 'extra';
	        for (var i = 0; i < dimSize; i++) {
	            if (!dimensions[i]) {
	                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));
	                dimensions[i] = guessOrdinal(data, i)
	                    ? {type: 'ordinal', name: name}
	                    : name;
	            }
	        }

	        return dimensions;
	    }

	    // The rule should not be complex, otherwise user might not
	    // be able to known where the data is wrong.
	    function guessOrdinal(data, dimIndex) {
	        for (var i = 0, len = data.length; i < len; i++) {
	            var value = retrieveValue(data[i]);

	            if (!zrUtil.isArray(value)) {
	                return false;
	            }

	            var value = value[dimIndex];
	            if (value != null && isFinite(value)) {
	                return false;
	            }
	            else if (zrUtil.isString(value) && value !== '-') {
	                return true;
	            }
	        }
	        return false;
	    }

	    function retrieveValue(o) {
	        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;
	    }

	    module.exports = completeDimensions;



/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);
	    var graphic = __webpack_require__(150);

	    zrUtil.extend(__webpack_require__(116).prototype, __webpack_require__(234));

	    function fixLayoutWithLineWidth(layout, lineWidth) {
	        var signX = layout.width > 0 ? 1 : -1;
	        var signY = layout.height > 0 ? 1 : -1;
	        // In case width or height are too small.
	        lineWidth = Math.min(lineWidth, Math.abs(layout.width), Math.abs(layout.height));
	        layout.x += signX * lineWidth / 2;
	        layout.y += signY * lineWidth / 2;
	        layout.width -= signX * lineWidth;
	        layout.height -= signY * lineWidth;
	    }

	    module.exports = __webpack_require__(109).extendChartView({

	        type: 'bar',

	        render: function (seriesModel, ecModel, api) {
	            var coordinateSystemType = seriesModel.get('coordinateSystem');

	            if (coordinateSystemType === 'cartesian2d') {
	                this._renderOnCartesian(seriesModel, ecModel, api);
	            }

	            return this.group;
	        },

	        _renderOnCartesian: function (seriesModel, ecModel, api) {
	            var group = this.group;
	            var data = seriesModel.getData();
	            var oldData = this._data;

	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var isHorizontal = baseAxis.isHorizontal();

	            var enableAnimation = seriesModel.get('animation');

	            var barBorderWidthQuery = ['itemStyle', 'normal', 'barBorderWidth'];

	            function createRect(dataIndex, isUpdate) {
	                var layout = data.getItemLayout(dataIndex);
	                var lineWidth = data.getItemModel(dataIndex).get(barBorderWidthQuery) || 0;
	                fixLayoutWithLineWidth(layout, lineWidth);

	                var rect = new graphic.Rect({
	                    shape: zrUtil.extend({}, layout)
	                });
	                // Animation
	                if (enableAnimation) {
	                    var rectShape = rect.shape;
	                    var animateProperty = isHorizontal ? 'height' : 'width';
	                    var animateTarget = {};
	                    rectShape[animateProperty] = 0;
	                    animateTarget[animateProperty] = layout[animateProperty];
	                    graphic[isUpdate? 'updateProps' : 'initProps'](rect, {
	                        shape: animateTarget
	                    }, seriesModel);
	                }
	                return rect;
	            }
	            data.diff(oldData)
	                .add(function (dataIndex) {
	                    // 空数据
	                    if (!data.hasValue(dataIndex)) {
	                        return;
	                    }

	                    var rect = createRect(dataIndex);

	                    data.setItemGraphicEl(dataIndex, rect);

	                    group.add(rect);

	                })
	                .update(function (newIndex, oldIndex) {
	                    var rect = oldData.getItemGraphicEl(oldIndex);
	                    // 空数据
	                    if (!data.hasValue(newIndex)) {
	                        group.remove(rect);
	                        return;
	                    }
	                    if (!rect) {
	                        rect = createRect(newIndex, true);
	                    }

	                    var layout = data.getItemLayout(newIndex);
	                    var lineWidth = data.getItemModel(newIndex).get(barBorderWidthQuery) || 0;
	                    fixLayoutWithLineWidth(layout, lineWidth);

	                    graphic.updateProps(rect, {
	                        shape: layout
	                    }, seriesModel);

	                    data.setItemGraphicEl(newIndex, rect);

	                    // Add back
	                    group.add(rect);
	                })
	                .remove(function (idx) {
	                    var rect = oldData.getItemGraphicEl(idx);
	                    if (rect) {
	                        // Not show text when animating
	                        rect.style.text = '';
	                        graphic.updateProps(rect, {
	                            shape: {
	                                width: 0
	                            }
	                        }, seriesModel, function () {
	                            group.remove(rect);
	                        });
	                    }
	                })
	                .execute();

	            this._updateStyle(seriesModel, data, isHorizontal);

	            this._data = data;
	        },

	        _updateStyle: function (seriesModel, data, isHorizontal) {
	            function setLabel(style, model, color, labelText, labelPositionOutside) {
	                graphic.setText(style, model, color);
	                style.text = labelText;
	                if (style.textPosition === 'outside') {
	                    style.textPosition = labelPositionOutside;
	                }
	            }

	            data.eachItemGraphicEl(function (rect, idx) {
	                var itemModel = data.getItemModel(idx);
	                var color = data.getItemVisual(idx, 'color');
	                var opacity = data.getItemVisual(idx, 'opacity');
	                var layout = data.getItemLayout(idx);
	                var itemStyleModel = itemModel.getModel('itemStyle.normal');

	                var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();

	                rect.setShape('r', itemStyleModel.get('barBorderRadius') || 0);

	                rect.setStyle(zrUtil.defaults(
	                    {
	                        fill: color,
	                        opacity: opacity
	                    },
	                    itemStyleModel.getBarItemStyle()
	                ));

	                var labelPositionOutside = isHorizontal
	                    ? (layout.height > 0 ? 'bottom' : 'top')
	                    : (layout.width > 0 ? 'left' : 'right');

	                var labelModel = itemModel.getModel('label.normal');
	                var hoverLabelModel = itemModel.getModel('label.emphasis');
	                var rectStyle = rect.style;
	                if (labelModel.get('show')) {
	                    setLabel(
	                        rectStyle, labelModel, color,
	                        zrUtil.retrieve(
	                            seriesModel.getFormattedLabel(idx, 'normal'),
	                            seriesModel.getRawValue(idx)
	                        ),
	                        labelPositionOutside
	                    );
	                }
	                else {
	                    rectStyle.text = '';
	                }
	                if (hoverLabelModel.get('show')) {
	                    setLabel(
	                        hoverStyle, hoverLabelModel, color,
	                        zrUtil.retrieve(
	                            seriesModel.getFormattedLabel(idx, 'emphasis'),
	                            seriesModel.getRawValue(idx)
	                        ),
	                        labelPositionOutside
	                    );
	                }
	                else {
	                    hoverStyle.text = '';
	                }
	                graphic.setHoverStyle(rect, hoverStyle);
	            });
	        },

	        remove: function (ecModel, api) {
	            var group = this.group;
	            if (ecModel.get('animation')) {
	                if (this._data) {
	                    this._data.eachItemGraphicEl(function (el) {
	                        // Not show text when animating
	                        el.style.text = '';
	                        graphic.updateProps(el, {
	                            shape: {
	                                width: 0
	                            }
	                        }, ecModel, function () {
	                            group.remove(el);
	                        });
	                    });
	                }
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    });


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	
	    module.exports = {
	        getBarItemStyle: __webpack_require__(119)(
	            [
	                ['fill', 'color'],
	                ['stroke', 'borderColor'],
	                ['lineWidth', 'borderWidth'],
	                // Compatitable with 2
	                ['stroke', 'barBorderColor'],
	                ['lineWidth', 'barBorderWidth'],
	                ['opacity'],
	                ['shadowBlur'],
	                ['shadowOffsetX'],
	                ['shadowOffsetY'],
	                ['shadowColor']
	            ]
	        )
	    };


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);
	    var numberUtil = __webpack_require__(115);
	    var parsePercent = numberUtil.parsePercent;

	    function getSeriesStackId(seriesModel) {
	        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	    }

	    function calBarWidthAndOffset(barSeries, api) {
	        // Columns info on each category axis. Key is cartesian name
	        var columnsMap = {};

	        zrUtil.each(barSeries, function (seriesModel, idx) {
	            var cartesian = seriesModel.coordinateSystem;

	            var baseAxis = cartesian.getBaseAxis();

	            var columnsOnAxis = columnsMap[baseAxis.index] || {
	                remainedWidth: baseAxis.getBandWidth(),
	                autoWidthCount: 0,
	                categoryGap: '20%',
	                gap: '30%',
	                axis: baseAxis,
	                stacks: {}
	            };
	            var stacks = columnsOnAxis.stacks;
	            columnsMap[baseAxis.index] = columnsOnAxis;

	            var stackId = getSeriesStackId(seriesModel);

	            if (!stacks[stackId]) {
	                columnsOnAxis.autoWidthCount++;
	            }
	            stacks[stackId] = stacks[stackId] || {
	                width: 0,
	                maxWidth: 0
	            };

	            var barWidth = seriesModel.get('barWidth');
	            var barMaxWidth = seriesModel.get('barMaxWidth');
	            var barGap = seriesModel.get('barGap');
	            var barCategoryGap = seriesModel.get('barCategoryGap');
	            // TODO
	            if (barWidth && ! stacks[stackId].width) {
	                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	                stacks[stackId].width = barWidth;
	                columnsOnAxis.remainedWidth -= barWidth;
	            }

	            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	            (barGap != null) && (columnsOnAxis.gap = barGap);
	            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);
	        });

	        var result = {};

	        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {

	            result[coordSysName] = {};

	            var stacks = columnsOnAxis.stacks;
	            var baseAxis = columnsOnAxis.axis;
	            var bandWidth = baseAxis.getBandWidth();
	            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);

	            var remainedWidth = columnsOnAxis.remainedWidth;
	            var autoWidthCount = columnsOnAxis.autoWidthCount;
	            var autoWidth = (remainedWidth - categoryGap)
	                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);

	            // Find if any auto calculated bar exceeded maxBarWidth
	            zrUtil.each(stacks, function (column, stack) {
	                var maxWidth = column.maxWidth;
	                if (!column.width && maxWidth && maxWidth < autoWidth) {
	                    maxWidth = Math.min(maxWidth, remainedWidth);
	                    remainedWidth -= maxWidth;
	                    column.width = maxWidth;
	                    autoWidthCount--;
	                }
	            });

	            // Recalculate width again
	            autoWidth = (remainedWidth - categoryGap)
	                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);

	            var widthSum = 0;
	            var lastColumn;
	            zrUtil.each(stacks, function (column, idx) {
	                if (!column.width) {
	                    column.width = autoWidth;
	                }
	                lastColumn = column;
	                widthSum += column.width * (1 + barGapPercent);
	            });
	            if (lastColumn) {
	                widthSum -= lastColumn.width * barGapPercent;
	            }

	            var offset = -widthSum / 2;
	            zrUtil.each(stacks, function (column, stackId) {
	                result[coordSysName][stackId] = result[coordSysName][stackId] || {
	                    offset: offset,
	                    width: column.width
	                };

	                offset += column.width * (1 + barGapPercent);
	            });
	        });

	        return result;
	    }

	    /**
	     * @param {string} seriesType
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function barLayoutGrid(seriesType, ecModel, api) {

	        var barWidthAndOffset = calBarWidthAndOffset(
	            zrUtil.filter(
	                ecModel.getSeriesByType(seriesType),
	                function (seriesModel) {
	                    return !ecModel.isSeriesFiltered(seriesModel)
	                        && seriesModel.coordinateSystem
	                        && seriesModel.coordinateSystem.type === 'cartesian2d';
	                }
	            )
	        );

	        var lastStackCoords = {};

	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {

	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();

	            var stackId = getSeriesStackId(seriesModel);
	            var columnLayoutInfo = barWidthAndOffset[baseAxis.index][stackId];
	            var columnOffset = columnLayoutInfo.offset;
	            var columnWidth = columnLayoutInfo.width;
	            var valueAxis = cartesian.getOtherAxis(baseAxis);

	            var barMinHeight = seriesModel.get('barMinHeight') || 0;

	            var valueAxisStart = baseAxis.onZero
	                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))
	                : valueAxis.getGlobalExtent()[0];

	            var coords = cartesian.dataToPoints(data, true);
	            lastStackCoords[stackId] = lastStackCoords[stackId] || [];

	            data.setLayout({
	                offset: columnOffset,
	                size: columnWidth
	            });
	            data.each(valueAxis.dim, function (value, idx) {
	                // 空数据
	                if (isNaN(value)) {
	                    return;
	                }
	                if (!lastStackCoords[stackId][idx]) {
	                    lastStackCoords[stackId][idx] = {
	                        // Positive stack
	                        p: valueAxisStart,
	                        // Negative stack
	                        n: valueAxisStart
	                    };
	                }
	                var sign = value >= 0 ? 'p' : 'n';
	                var coord = coords[idx];
	                var lastCoord = lastStackCoords[stackId][idx][sign];
	                var x, y, width, height;
	                if (valueAxis.isHorizontal()) {
	                    x = lastCoord;
	                    y = coord[1] + columnOffset;
	                    width = coord[0] - lastCoord;
	                    height = columnWidth;

	                    if (Math.abs(width) < barMinHeight) {
	                        width = (width < 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += width;
	                }
	                else {
	                    x = coord[0] + columnOffset;
	                    y = lastCoord;
	                    width = columnWidth;
	                    height = coord[1] - lastCoord;
	                    if (Math.abs(height) < barMinHeight) {
	                        // Include zero to has a positive bar
	                        height = (height <= 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += height;
	                }

	                data.setItemLayout(idx, {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	            }, true);

	        }, this);
	    }

	    module.exports = barLayoutGrid;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var graphic = __webpack_require__(150);
	    var zrUtil = __webpack_require__(111);

	    __webpack_require__(211);

	    __webpack_require__(237);

	    // Grid view
	    __webpack_require__(109).extendComponentView({

	        type: 'grid',

	        render: function (gridModel, ecModel) {
	            this.group.removeAll();
	            if (gridModel.get('show')) {
	                this.group.add(new graphic.Rect({
	                    shape:gridModel.coordinateSystem.getRect(),
	                    style: zrUtil.defaults({
	                        fill: gridModel.get('backgroundColor')
	                    }, gridModel.getItemStyle()),
	                    silent: true
	                }));
	            }
	        }
	    });


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// TODO boundaryGap


	    __webpack_require__(224);

	    __webpack_require__(238);


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var graphic = __webpack_require__(150);
	    var AxisBuilder = __webpack_require__(239);
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	    var getInterval = AxisBuilder.getInterval;

	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	    var selfBuilderAttrs = [
	        'splitLine', 'splitArea'
	    ];

	    var AxisView = __webpack_require__(109).extendComponentView({

	        type: 'axis',

	        render: function (axisModel, ecModel) {

	            this.group.removeAll();

	            if (!axisModel.get('show')) {
	                return;
	            }

	            var gridModel = ecModel.getComponent('grid', axisModel.get('gridIndex'));

	            var layout = layoutAxis(gridModel, axisModel);

	            var axisBuilder = new AxisBuilder(axisModel, layout);

	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	            this.group.add(axisBuilder.getGroup());

	            zrUtil.each(selfBuilderAttrs, function (name) {
	                if (axisModel.get(name +'.show')) {
	                    this['_' + name](axisModel, gridModel, layout.labelInterval);
	                }
	            }, this);
	        },

	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @param {number|Function} labelInterval
	         * @private
	         */
	        _splitLine: function (axisModel, gridModel, labelInterval) {
	            var axis = axisModel.axis;

	            var splitLineModel = axisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineWidth = lineStyleModel.get('width');
	            var lineColors = lineStyleModel.get('color');

	            var lineInterval = getInterval(splitLineModel, labelInterval);

	            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];

	            var gridRect = gridModel.coordinateSystem.getRect();
	            var isHorizontal = axis.isHorizontal();

	            var splitLines = [];
	            var lineCount = 0;

	            var ticksCoords = axis.getTicksCoords();

	            var p1 = [];
	            var p2 = [];
	            for (var i = 0; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                    continue;
	                }

	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	                if (isHorizontal) {
	                    p1[0] = tickCoord;
	                    p1[1] = gridRect.y;
	                    p2[0] = tickCoord;
	                    p2[1] = gridRect.y + gridRect.height;
	                }
	                else {
	                    p1[0] = gridRect.x;
	                    p1[1] = tickCoord;
	                    p2[0] = gridRect.x + gridRect.width;
	                    p2[1] = tickCoord;
	                }

	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({
	                    shape: {
	                        x1: p1[0],
	                        y1: p1[1],
	                        x2: p2[0],
	                        y2: p2[1]
	                    },
	                    style: {
	                        lineWidth: lineWidth
	                    },
	                    silent: true
	                })));
	            }

	            // Simple optimization
	            // Batching the lines if color are the same
	            var lineStyle = lineStyleModel.getLineStyle();
	            for (var i = 0; i < splitLines.length; i++) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: zrUtil.defaults({
	                        stroke: lineColors[i % lineColors.length]
	                    }, lineStyle),
	                    silent: true
	                }));
	            }
	        },

	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @param {number|Function} labelInterval
	         * @private
	         */
	        _splitArea: function (axisModel, gridModel, labelInterval) {
	            var axis = axisModel.axis;

	            var splitAreaModel = axisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');

	            var gridRect = gridModel.coordinateSystem.getRect();
	            var ticksCoords = axis.getTicksCoords();

	            var prevX = axis.toGlobalCoord(ticksCoords[0]);
	            var prevY = axis.toGlobalCoord(ticksCoords[0]);

	            var splitAreaRects = [];
	            var count = 0;

	            var areaInterval = getInterval(splitAreaModel, labelInterval);

	            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];

	            for (var i = 1; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, areaInterval)) {
	                    continue;
	                }

	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	                var x;
	                var y;
	                var width;
	                var height;
	                if (axis.isHorizontal()) {
	                    x = prevX;
	                    y = gridRect.y;
	                    width = tickCoord - x;
	                    height = gridRect.height;
	                }
	                else {
	                    x = gridRect.x;
	                    y = prevY;
	                    width = gridRect.width;
	                    height = tickCoord - y;
	                }

	                var colorIndex = (count++) % areaColors.length;
	                splitAreaRects[colorIndex] = splitAreaRects[colorIndex] || [];
	                splitAreaRects[colorIndex].push(new graphic.Rect({
	                    shape: {
	                        x: x,
	                        y: y,
	                        width: width,
	                        height: height
	                    },
	                    silent: true
	                }));

	                prevX = x + width;
	                prevY = y + height;
	            }

	            // Simple optimization
	            // Batching the rects if color are the same
	            var areaStyle = areaStyleModel.getAreaStyle();
	            for (var i = 0; i < splitAreaRects.length; i++) {
	                this.group.add(graphic.mergePath(splitAreaRects[i], {
	                    style: zrUtil.defaults({
	                        fill: areaColors[i % areaColors.length]
	                    }, areaStyle),
	                    silent: true
	                }));
	            }
	        }
	    });

	    AxisView.extend({
	        type: 'xAxis'
	    });
	    AxisView.extend({
	        type: 'yAxis'
	    });

	    /**
	     * @inner
	     */
	    function layoutAxis(gridModel, axisModel) {
	        var grid = gridModel.coordinateSystem;
	        var axis = axisModel.axis;
	        var layout = {};

	        var rawAxisPosition = axis.position;
	        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	        var axisDim = axis.dim;

	        // [left, right, top, bottom]
	        var rect = grid.getRect();
	        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];

	        var posMap = {
	            x: {top: rectBound[2], bottom: rectBound[3]},
	            y: {left: rectBound[0], right: rectBound[1]}
	        };
	        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
	        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);

	        function getZero(dim, val) {
	            var theAxis = grid.getAxis(dim);
	            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
	        }

	        // Axis position
	        layout.position = [
	            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],
	            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]
	        ];

	        // Axis rotation
	        var r = {x: 0, y: 1};
	        layout.rotation = Math.PI / 2 * r[axisDim];

	        // Tick and label direction, x y is axisDim
	        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};

	        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	        if (axis.onZero) {
	            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
	        }

	        if (axisModel.getModel('axisTick').get('inside')) {
	            layout.tickDirection = -layout.tickDirection;
	        }
	        if (axisModel.getModel('axisLabel').get('inside')) {
	            layout.labelDirection = -layout.labelDirection;
	        }

	        // Special label rotation
	        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;

	        // label interval when auto mode.
	        layout.labelInterval = axis.getLabelInterval();

	        // Over splitLine and splitArea
	        layout.z2 = 1;

	        return layout;
	    }


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var graphic = __webpack_require__(150);
	    var Model = __webpack_require__(116);
	    var numberUtil = __webpack_require__(115);
	    var remRadian = numberUtil.remRadian;
	    var isRadianAroundZero = numberUtil.isRadianAroundZero;

	    var PI = Math.PI;

	    function makeAxisEventDataBase(axisModel) {
	        var eventData = {
	            componentType: axisModel.mainType
	        };
	        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	        return eventData;
	    }

	    /**
	     * A final axis is translated and rotated from a "standard axis".
	     * So opt.position and opt.rotation is required.
	     *
	     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	     * for example: (0, 0) ------------> (0, 50)
	     *
	     * nameDirection or tickDirection or labelDirection is 1 means tick
	     * or label is below the standard axis, whereas is -1 means above
	     * the standard axis. labelOffset means offset between label and axis,
	     * which is useful when 'onZero', where axisLabel is in the grid and
	     * label in outside grid.
	     *
	     * Tips: like always,
	     * positive rotation represents anticlockwise, and negative rotation
	     * represents clockwise.
	     * The direction of position coordinate is the same as the direction
	     * of screen coordinate.
	     *
	     * Do not need to consider axis 'inverse', which is auto processed by
	     * axis extent.
	     *
	     * @param {module:zrender/container/Group} group
	     * @param {Object} axisModel
	     * @param {Object} opt Standard axis parameters.
	     * @param {Array.<number>} opt.position [x, y]
	     * @param {number} opt.rotation by radian
	     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
	     * @param {number} [opt.tickDirection=1] 1 or -1
	     * @param {number} [opt.labelDirection=1] 1 or -1
	     * @param {number} [opt.labelOffset=0] Usefull when onZero.
	     * @param {string} [opt.axisName] default get from axisModel.
	     * @param {number} [opt.labelRotation] by degree, default get from axisModel.
	     * @param {number} [opt.labelInterval] Default label interval when label
	     *                                     interval from model is null or 'auto'.
	     * @param {number} [opt.strokeContainThreshold] Default label interval when label
	     * @param {number} [opt.axisLineSilent=true] If axis line is silent
	     */
	    var AxisBuilder = function (axisModel, opt) {

	        /**
	         * @readOnly
	         */
	        this.opt = opt;

	        /**
	         * @readOnly
	         */
	        this.axisModel = axisModel;

	        // Default value
	        zrUtil.defaults(
	            opt,
	            {
	                labelOffset: 0,
	                nameDirection: 1,
	                tickDirection: 1,
	                labelDirection: 1,
	                silent: true
	            }
	        );

	        /**
	         * @readOnly
	         */
	        this.group = new graphic.Group({
	            position: opt.position.slice(),
	            rotation: opt.rotation
	        });
	    };

	    AxisBuilder.prototype = {

	        constructor: AxisBuilder,

	        hasBuilder: function (name) {
	            return !!builders[name];
	        },

	        add: function (name) {
	            builders[name].call(this);
	        },

	        getGroup: function () {
	            return this.group;
	        }

	    };

	    var builders = {

	        /**
	         * @private
	         */
	        axisLine: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;

	            if (!axisModel.get('axisLine.show')) {
	                return;
	            }

	            var extent = this.axisModel.axis.getExtent();

	            this.group.add(new graphic.Line({
	                shape: {
	                    x1: extent[0],
	                    y1: 0,
	                    x2: extent[1],
	                    y2: 0
	                },
	                style: zrUtil.extend(
	                    {lineCap: 'round'},
	                    axisModel.getModel('axisLine.lineStyle').getLineStyle()
	                ),
	                strokeContainThreshold: opt.strokeContainThreshold,
	                silent: !!opt.axisLineSilent,
	                z2: 1
	            }));
	        },

	        /**
	         * @private
	         */
	        axisTick: function () {
	            var axisModel = this.axisModel;

	            if (!axisModel.get('axisTick.show')) {
	                return;
	            }

	            var axis = axisModel.axis;
	            var tickModel = axisModel.getModel('axisTick');
	            var opt = this.opt;

	            var lineStyleModel = tickModel.getModel('lineStyle');
	            var tickLen = tickModel.get('length');
	            var tickInterval = getInterval(tickModel, opt.labelInterval);
	            var ticksCoords = axis.getTicksCoords();
	            var tickLines = [];

	            for (var i = 0; i < ticksCoords.length; i++) {
	                // Only ordinal scale support tick interval
	                if (ifIgnoreOnTick(axis, i, tickInterval)) {
	                     continue;
	                }

	                var tickCoord = ticksCoords[i];

	                // Tick line
	                tickLines.push(new graphic.Line(graphic.subPixelOptimizeLine({
	                    shape: {
	                        x1: tickCoord,
	                        y1: 0,
	                        x2: tickCoord,
	                        y2: opt.tickDirection * tickLen
	                    },
	                    style: {
	                        lineWidth: lineStyleModel.get('width')
	                    },
	                    silent: true
	                })));
	            }

	            this.group.add(graphic.mergePath(tickLines, {
	                style: lineStyleModel.getLineStyle(),
	                z2: 2,
	                silent: true
	            }));
	        },

	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @private
	         */
	        axisLabel: function () {
	            var axisModel = this.axisModel;

	            if (!axisModel.get('axisLabel.show')) {
	                return;
	            }

	            var opt = this.opt;
	            var axis = axisModel.axis;
	            var labelModel = axisModel.getModel('axisLabel');
	            var textStyleModel = labelModel.getModel('textStyle');
	            var labelMargin = labelModel.get('margin');
	            var ticks = axis.scale.getTicks();
	            var labels = axisModel.getFormattedLabels();

	            // Special label rotate.
	            var labelRotation = opt.labelRotation;
	            if (labelRotation == null) {
	                labelRotation = labelModel.get('rotate') || 0;
	            }
	            // To radian.
	            labelRotation = labelRotation * PI / 180;

	            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
	            var categoryData = axisModel.get('data');

	            var textEls = [];
	            var isSilent = axisModel.get('silent');
	            for (var i = 0; i < ticks.length; i++) {
	                if (ifIgnoreOnTick(axis, i, opt.labelInterval)) {
	                     continue;
	                }

	                var itemTextStyleModel = textStyleModel;
	                if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                    itemTextStyleModel = new Model(
	                        categoryData[i].textStyle, textStyleModel, axisModel.ecModel
	                    );
	                }
	                var textColor = itemTextStyleModel.getTextColor();

	                var tickCoord = axis.dataToCoord(ticks[i]);
	                var pos = [
	                    tickCoord,
	                    opt.labelOffset + opt.labelDirection * labelMargin
	                ];
	                var labelBeforeFormat = axis.scale.getLabel(ticks[i]);

	                var textEl = new graphic.Text({
	                    style: {
	                        text: labels[i],
	                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
	                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
	                        textFont: itemTextStyleModel.getFont(),
	                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor
	                    },
	                    position: pos,
	                    rotation: labelLayout.rotation,
	                    silent: isSilent,
	                    z2: 10
	                });
	                // Pack data for mouse event
	                textEl.eventData = makeAxisEventDataBase(axisModel);
	                textEl.eventData.targetType = 'axisLabel';
	                textEl.eventData.value = labelBeforeFormat;

	                textEls.push(textEl);
	                this.group.add(textEl);
	            }

	            function isTwoLabelOverlapped(current, next) {
	                var firstRect = current && current.getBoundingRect().clone();
	                var nextRect = next && next.getBoundingRect().clone();
	                if (firstRect && nextRect) {
	                    firstRect.applyTransform(current.getLocalTransform());
	                    nextRect.applyTransform(next.getLocalTransform());
	                    return firstRect.intersect(nextRect);
	                }
	            }
	            if (axis.type !== 'category') {
	                // If min or max are user set, we need to check
	                // If the tick on min(max) are overlap on their neighbour tick
	                // If they are overlapped, we need to hide the min(max) tick label
	                if (axisModel.getMin ? axisModel.getMin() : axisModel.get('min')) {
	                    var firstLabel = textEls[0];
	                    var nextLabel = textEls[1];
	                    if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	                        firstLabel.ignore = true;
	                    }
	                }
	                if (axisModel.getMax ? axisModel.getMax() : axisModel.get('max')) {
	                    var lastLabel = textEls[textEls.length - 1];
	                    var prevLabel = textEls[textEls.length - 2];
	                    if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	                        lastLabel.ignore = true;
	                    }
	                }
	            }
	        },

	        /**
	         * @private
	         */
	        axisName: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;

	            var name = this.opt.axisName;
	            // If name is '', do not get name from axisMode.
	            if (name == null) {
	                name = axisModel.get('name');
	            }

	            if (!name) {
	                return;
	            }

	            var nameLocation = axisModel.get('nameLocation');
	            var nameDirection = opt.nameDirection;
	            var textStyleModel = axisModel.getModel('nameTextStyle');
	            var gap = axisModel.get('nameGap') || 0;

	            var extent = this.axisModel.axis.getExtent();
	            var gapSignal = extent[0] > extent[1] ? -1 : 1;
	            var pos = [
	                nameLocation === 'start'
	                    ? extent[0] - gapSignal * gap
	                    : nameLocation === 'end'
	                    ? extent[1] + gapSignal * gap
	                    : (extent[0] + extent[1]) / 2, // 'middle'
	                // Reuse labelOffset.
	                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0
	            ];

	            var labelLayout;

	            if (nameLocation === 'middle') {
	                labelLayout = innerTextLayout(opt, opt.rotation, nameDirection);
	            }
	            else {
	                labelLayout = endTextLayout(opt, nameLocation, extent);
	            }

	            var textEl = new graphic.Text({
	                style: {
	                    text: name,
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                        || axisModel.get('axisLine.lineStyle.color'),
	                    textAlign: labelLayout.textAlign,
	                    textVerticalAlign: labelLayout.verticalAlign
	                },
	                position: pos,
	                rotation: labelLayout.rotation,
	                silent: axisModel.get('silent'),
	                z2: 1
	            });

	            textEl.eventData = makeAxisEventDataBase(axisModel);
	            textEl.eventData.targetType = 'axisName';
	            textEl.eventData.name = name;

	            this.group.add(textEl);
	        }

	    };

	    /**
	     * @inner
	     */
	    function innerTextLayout(opt, textRotation, direction) {
	        var rotationDiff = remRadian(textRotation - opt.rotation);
	        var textAlign;
	        var verticalAlign;

	        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.
	            verticalAlign = direction > 0 ? 'top' : 'bottom';
	            textAlign = 'center';
	        }
	        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.
	            verticalAlign = direction > 0 ? 'bottom' : 'top';
	            textAlign = 'center';
	        }
	        else {
	            verticalAlign = 'middle';

	            if (rotationDiff > 0 && rotationDiff < PI) {
	                textAlign = direction > 0 ? 'right' : 'left';
	            }
	            else {
	                textAlign = direction > 0 ? 'left' : 'right';
	            }
	        }

	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }

	    /**
	     * @inner
	     */
	    function endTextLayout(opt, textPosition, extent) {
	        var rotationDiff = remRadian(-opt.rotation);
	        var textAlign;
	        var verticalAlign;
	        var inverse = extent[0] > extent[1];
	        var onLeft = (textPosition === 'start' && !inverse)
	            || (textPosition !== 'start' && inverse);

	        if (isRadianAroundZero(rotationDiff - PI / 2)) {
	            verticalAlign = onLeft ? 'bottom' : 'top';
	            textAlign = 'center';
	        }
	        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	            verticalAlign = onLeft ? 'top' : 'bottom';
	            textAlign = 'center';
	        }
	        else {
	            verticalAlign = 'middle';
	            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	                textAlign = onLeft ? 'left' : 'right';
	            }
	            else {
	                textAlign = onLeft ? 'right' : 'left';
	            }
	        }

	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }

	    /**
	     * @static
	     */
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
	        var rawTick;
	        var scale = axis.scale;
	        return scale.type === 'ordinal'
	            && (
	                typeof interval === 'function'
	                    ? (
	                        rawTick = scale.getTicks()[i],
	                        !interval(rawTick, scale.getLabel(rawTick))
	                    )
	                    : i % (interval + 1)
	            );
	    };

	    /**
	     * @static
	     */
	    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	        var interval = model.get('interval');
	        if (interval == null || interval == 'auto') {
	            interval = labelInterval;
	        }
	        return interval;
	    };

	    module.exports = AxisBuilder;



/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var echarts = __webpack_require__(109);

	    __webpack_require__(241);
	    __webpack_require__(242);

	    echarts.registerVisualCoding('chart', zrUtil.curry(
	        __webpack_require__(247), 'line', 'circle', 'line'
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(248), 'line'
	    ));

	    // Down sample after filter
	    echarts.registerProcessor('statistic', zrUtil.curry(
	        __webpack_require__(249), 'line'
	    ));

	    // In case developer forget to include grid component
	    __webpack_require__(236);


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var createListFromArray = __webpack_require__(229);
	    var SeriesModel = __webpack_require__(135);

	    module.exports = SeriesModel.extend({

	        type: 'series.line',

	        dependencies: ['grid', 'polar'],

	        getInitialData: function (option, ecModel) {
	            return createListFromArray(option.data, this, ecModel);
	        },

	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,

	            hoverAnimation: true,
	            // stack: null
	            xAxisIndex: 0,
	            yAxisIndex: 0,

	            polarIndex: 0,

	            // If clip the overflow value
	            clipOverflow: true,

	            label: {
	                normal: {
	                    // show: false,
	                    position: 'top'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                }
	                // emphasis: {
	                    // show: false,
	                    // position: 'top'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                // }
	            },
	            // itemStyle: {
	            //     normal: {
	            //         // color: 各异
	            //     },
	            //     emphasis: {
	            //         // color: 各异,
	            //     }
	            // },
	            lineStyle: {
	                normal: {
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            // areaStyle: {
	            // },
	            // smooth: false,
	            // smoothMonotone: null,
	            // 拐点图形类型
	            symbol: 'emptyCircle',
	            // 拐点图形大小
	            symbolSize: 4,
	            // 拐点图形旋转控制
	            // symbolRotate: null,

	            // 是否显示 symbol, 只有在 tooltip hover 的时候显示
	            showSymbol: true,
	            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	            // showAllSymbol: false
	            //
	            // 大数据过滤，'average', 'max', 'min', 'sum'
	            // sampling: 'none'

	            animationEasing: 'linear'
	        }
	    });


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(111);
	    var SymbolDraw = __webpack_require__(243);
	    var Symbol = __webpack_require__(244);
	    var lineAnimationDiff = __webpack_require__(245);
	    var graphic = __webpack_require__(150);

	    var polyHelper = __webpack_require__(246);

	    var ChartView = __webpack_require__(149);

	    function isPointsSame(points1, points2) {
	        if (points1.length !== points2.length) {
	            return;
	        }
	        for (var i = 0; i < points1.length; i++) {
	            var p1 = points1[i];
	            var p2 = points2[i];
	            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	                return;
	            }
	        }
	        return true;
	    }

	    function getSmooth(smooth) {
	        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);
	    }

	    function getAxisExtentWithGap(axis) {
	        var extent = axis.getGlobalExtent();
	        if (axis.onBand) {
	            // Remove extra 1px to avoid line miter in clipped edge
	            var halfBandWidth = axis.getBandWidth() / 2 - 1;
	            var dir = extent[1] > extent[0] ? 1 : -1;
	            extent[0] += dir * halfBandWidth;
	            extent[1] -= dir * halfBandWidth;
	        }
	        return extent;
	    }

	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }
	    /**
	     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	     * @param {module:echarts/data/List} data
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    function getStackedOnPoints(coordSys, data) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero
	            ? 0 : valueAxis.scale.getExtent()[0];

	        var valueDim = valueAxis.dim;

	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

	        return data.mapArray([valueDim], function (val, idx) {
	            var stackedOnSameSign;
	            var stackedOn = data.stackedOn;
	            // Find first stacked value with same sign
	            while (stackedOn &&
	                sign(stackedOn.get(valueDim, idx)) === sign(val)
	            ) {
	                stackedOnSameSign = stackedOn;
	                break;
	            }
	            var stackedData = [];
	            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	            stackedData[1 - baseDataOffset] = stackedOnSameSign
	                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

	            return coordSys.dataToPoint(stackedData);
	        }, true);
	    }

	    function queryDataIndex(data, payload) {
	        if (payload.dataIndex != null) {
	            return payload.dataIndex;
	        }
	        else if (payload.name != null) {
	            return data.indexOfName(payload.name);
	        }
	    }

	    function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	        var isHorizontal = cartesian.getBaseAxis().isHorizontal();

	        var x = xExtent[0];
	        var y = yExtent[0];
	        var width = xExtent[1] - x;
	        var height = yExtent[1] - y;
	        // Expand clip shape to avoid line value exceeds axis
	        if (!seriesModel.get('clipOverflow')) {
	            if (isHorizontal) {
	                y -= height;
	                height *= 3;
	            }
	            else {
	                x -= width;
	                width *= 3;
	            }
	        }
	        var clipPath = new graphic.Rect({
	            shape: {
	                x: x,
	                y: y,
	                width: width,
	                height: height
	            }
	        });

	        if (hasAnimation) {
	            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	            graphic.initProps(clipPath, {
	                shape: {
	                    width: width,
	                    height: height
	                }
	            }, seriesModel);
	        }

	        return clipPath;
	    }

	    function createPolarClipShape(polar, hasAnimation, seriesModel) {
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();

	        var radiusExtent = radiusAxis.getExtent();
	        var angleExtent = angleAxis.getExtent();

	        var RADIAN = Math.PI / 180;

	        var clipPath = new graphic.Sector({
	            shape: {
	                cx: polar.cx,
	                cy: polar.cy,
	                r0: radiusExtent[0],
	                r: radiusExtent[1],
	                startAngle: -angleExtent[0] * RADIAN,
	                endAngle: -angleExtent[1] * RADIAN,
	                clockwise: angleAxis.inverse
	            }
	        });

	        if (hasAnimation) {
	            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	            graphic.initProps(clipPath, {
	                shape: {
	                    endAngle: -angleExtent[1] * RADIAN
	                }
	            }, seriesModel);
	        }

	        return clipPath;
	    }

	    function createClipShape(coordSys, hasAnimation, seriesModel) {
	        return coordSys.type === 'polar'
	            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)
	            : createGridClipShape(coordSys, hasAnimation, seriesModel);
	    }

	    module.exports = ChartView.extend({

	        type: 'line',

	        init: function () {
	            var lineGroup = new graphic.Group();

	            var symbolDraw = new SymbolDraw();
	            this.group.add(symbolDraw.group);

	            this._symbolDraw = symbolDraw;
	            this._lineGroup = lineGroup;
	        },

	        render: function (seriesModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var group = this.group;
	            var data = seriesModel.getData();
	            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	            var areaStyleModel = seriesModel.getModel('areaStyle.normal');

	            var points = data.mapArray(data.getItemLayout, true);

	            var isCoordSysPolar = coordSys.type === 'polar';
	            var prevCoordSys = this._coordSys;

	            var symbolDraw = this._symbolDraw;
	            var polyline = this._polyline;
	            var polygon = this._polygon;

	            var lineGroup = this._lineGroup;

	            var hasAnimation = seriesModel.get('animation');

	            var isAreaChart = !areaStyleModel.isEmpty();
	            var stackedOnPoints = getStackedOnPoints(coordSys, data);

	            var showSymbol = seriesModel.get('showSymbol');

	            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')
	                && this._getSymbolIgnoreFunc(data, coordSys);

	            // Remove temporary symbols
	            var oldData = this._data;
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });

	            // Remove previous created symbols if showSymbol changed to false
	            if (!showSymbol) {
	                symbolDraw.remove();
	            }

	            group.add(lineGroup);

	            // Initialization animation or coordinate system changed
	            if (
	                !(polyline && prevCoordSys.type === coordSys.type)
	            ) {
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	                polyline = this._newPolyline(points, coordSys, hasAnimation);
	                if (isAreaChart) {
	                    polygon = this._newPolygon(
	                        points, stackedOnPoints,
	                        coordSys, hasAnimation
	                    );
	                }
	                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	            }
	            else {
	                if (isAreaChart && !polygon) {
	                    // If areaStyle is added
	                    polygon = this._newPolygon(
	                        points, stackedOnPoints,
	                        coordSys, hasAnimation
	                    );
	                }
	                else if (polygon && !isAreaChart) {
	                    // If areaStyle is removed
	                    lineGroup.remove(polygon);
	                    polygon = this._polygon = null;
	                }

	                // Update clipPath
	                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));

	                // Always update, or it is wrong in the case turning on legend
	                // because points are not changed
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	                // Stop symbol animation and sync with line points
	                // FIXME performance?
	                data.eachItemGraphicEl(function (el) {
	                    el.stopAnimation(true);
	                });

	                // In the case data zoom triggerred refreshing frequently
	                // Data may not change if line has a category axis. So it should animate nothing
	                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)
	                    || !isPointsSame(this._points, points)
	                ) {
	                    if (hasAnimation) {
	                        this._updateAnimation(
	                            data, stackedOnPoints, coordSys, api
	                        );
	                    }
	                    else {
	                        polyline.setShape({
	                            points: points
	                        });
	                        polygon && polygon.setShape({
	                            points: points,
	                            stackedOnPoints: stackedOnPoints
	                        });
	                    }
	                }
	            }

	            polyline.setStyle(zrUtil.defaults(
	                // Use color in lineStyle first
	                lineStyleModel.getLineStyle(),
	                {
	                    stroke: data.getVisual('color'),
	                    lineJoin: 'bevel'
	                }
	            ));

	            var smooth = seriesModel.get('smooth');
	            smooth = getSmooth(seriesModel.get('smooth'));
	            polyline.setShape({
	                smooth: smooth,
	                smoothMonotone: seriesModel.get('smoothMonotone')
	            });

	            if (polygon) {
	                var stackedOn = data.stackedOn;
	                var stackedOnSmooth = 0;

	                polygon.style.opacity = 0.7;
	                polygon.setStyle(zrUtil.defaults(
	                    areaStyleModel.getAreaStyle(),
	                    {
	                        fill: data.getVisual('color'),
	                        lineJoin: 'bevel'
	                    }
	                ));

	                if (stackedOn) {
	                    var stackedOnSeries = stackedOn.hostModel;
	                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	                }

	                polygon.setShape({
	                    smooth: smooth,
	                    stackedOnSmooth: stackedOnSmooth,
	                    smoothMonotone: seriesModel.get('smoothMonotone')
	                });
	            }

	            this._data = data;
	            // Save the coordinate system for transition animation when data changed
	            this._coordSys = coordSys;
	            this._stackedOnPoints = stackedOnPoints;
	            this._points = points;
	        },

	        highlight: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = queryDataIndex(data, payload);

	            if (dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (!symbol) {
	                    // Create a temporary symbol if it is not exists
	                    var pt = data.getItemLayout(dataIndex);
	                    symbol = new Symbol(data, dataIndex, api);
	                    symbol.position = pt;
	                    symbol.setZ(
	                        seriesModel.get('zlevel'),
	                        seriesModel.get('z')
	                    );
	                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	                    symbol.__temp = true;
	                    data.setItemGraphicEl(dataIndex, symbol);

	                    // Stop scale animation
	                    symbol.stopSymbolAnimation(true);

	                    this.group.add(symbol);
	                }
	                symbol.highlight();
	            }
	            else {
	                // Highlight whole series
	                ChartView.prototype.highlight.call(
	                    this, seriesModel, ecModel, api, payload
	                );
	            }
	        },

	        downplay: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = queryDataIndex(data, payload);
	            if (dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (symbol) {
	                    if (symbol.__temp) {
	                        data.setItemGraphicEl(dataIndex, null);
	                        this.group.remove(symbol);
	                    }
	                    else {
	                        symbol.downplay();
	                    }
	                }
	            }
	            else {
	                // Downplay whole series
	                ChartView.prototype.downplay.call(
	                    this, seriesModel, ecModel, api, payload
	                );
	            }
	        },

	        /**
	         * @param {module:zrender/container/Group} group
	         * @param {Array.<Array.<number>>} points
	         * @private
	         */
	        _newPolyline: function (points) {
	            var polyline = this._polyline;
	            // Remove previous created polyline
	            if (polyline) {
	                this._lineGroup.remove(polyline);
	            }

	            polyline = new polyHelper.Polyline({
	                shape: {
	                    points: points
	                },
	                silent: true,
	                z2: 10
	            });

	            this._lineGroup.add(polyline);

	            this._polyline = polyline;

	            return polyline;
	        },

	        /**
	         * @param {module:zrender/container/Group} group
	         * @param {Array.<Array.<number>>} stackedOnPoints
	         * @param {Array.<Array.<number>>} points
	         * @private
	         */
	        _newPolygon: function (points, stackedOnPoints) {
	            var polygon = this._polygon;
	            // Remove previous created polygon
	            if (polygon) {
	                this._lineGroup.remove(polygon);
	            }

	            polygon = new polyHelper.Polygon({
	                shape: {
	                    points: points,
	                    stackedOnPoints: stackedOnPoints
	                },
	                silent: true
	            });

	            this._lineGroup.add(polygon);

	            this._polygon = polygon;
	            return polygon;
	        },
	        /**
	         * @private
	         */
	        _getSymbolIgnoreFunc: function (data, coordSys) {
	            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	            // `getLabelInterval` is provided by echarts/component/axis
	            if (categoryAxis && categoryAxis.isLabelIgnored) {
	                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	            }
	        },

	        /**
	         * @private
	         */
	        // FIXME Two value axis
	        _updateAnimation: function (data, stackedOnPoints, coordSys, api) {
	            var polyline = this._polyline;
	            var polygon = this._polygon;
	            var seriesModel = data.hostModel;

	            var diff = lineAnimationDiff(
	                this._data, data,
	                this._stackedOnPoints, stackedOnPoints,
	                this._coordSys, coordSys
	            );
	            polyline.shape.points = diff.current;

	            graphic.updateProps(polyline, {
	                shape: {
	                    points: diff.next
	                }
	            }, seriesModel);

	            if (polygon) {
	                polygon.setShape({
	                    points: diff.current,
	                    stackedOnPoints: diff.stackedOnCurrent
	                });
	                graphic.updateProps(polygon, {
	                    shape: {
	                        points: diff.next,
	                        stackedOnPoints: diff.stackedOnNext
	                    }
	                }, seriesModel);
	            }

	            var updatedDataInfo = [];
	            var diffStatus = diff.status;

	            for (var i = 0; i < diffStatus.length; i++) {
	                var cmd = diffStatus[i].cmd;
	                if (cmd === '=') {
	                    var el = data.getItemGraphicEl(diffStatus[i].idx1);
	                    if (el) {
	                        updatedDataInfo.push({
	                            el: el,
	                            ptIdx: i    // Index of points
	                        });
	                    }
	                }
	            }

	            if (polyline.animators && polyline.animators.length) {
	                polyline.animators[0].during(function () {
	                    for (var i = 0; i < updatedDataInfo.length; i++) {
	                        var el = updatedDataInfo[i].el;
	                        el.attr('position', polyline.shape.points[updatedDataInfo[i].ptIdx]);
	                    }
	                });
	            }
	        },

	        remove: function (ecModel) {
	            var group = this.group;
	            var oldData = this._data;
	            this._lineGroup.removeAll();
	            this._symbolDraw.remove(true);
	            // Remove temporary created elements when highlighting
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });

	            this._polyline =
	            this._polygon =
	            this._coordSys =
	            this._points =
	            this._stackedOnPoints =
	            this._data = null;
	        }
	    });


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */


	    var graphic = __webpack_require__(150);
	    var Symbol = __webpack_require__(244);

	    /**
	     * @constructor
	     * @alias module:echarts/chart/helper/SymbolDraw
	     * @param {module:zrender/graphic/Group} [symbolCtor]
	     */
	    function SymbolDraw(symbolCtor) {
	        this.group = new graphic.Group();

	        this._symbolCtor = symbolCtor || Symbol;
	    }

	    var symbolDrawProto = SymbolDraw.prototype;

	    function symbolNeedsDraw(data, idx, isIgnore) {
	        var point = data.getItemLayout(idx);
	        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))
	                    && data.getItemVisual(idx, 'symbol') !== 'none';
	    }
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     * @param {Array.<boolean>} [isIgnore]
	     */
	    symbolDrawProto.updateData = function (data, isIgnore) {
	        var group = this.group;
	        var seriesModel = data.hostModel;
	        var oldData = this._data;

	        var SymbolCtor = this._symbolCtor;

	        data.diff(oldData)
	            .add(function (newIdx) {
	                var point = data.getItemLayout(newIdx);
	                if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	                    var symbolEl = new SymbolCtor(data, newIdx);
	                    symbolEl.attr('position', point);
	                    data.setItemGraphicEl(newIdx, symbolEl);
	                    group.add(symbolEl);
	                }
	            })
	            .update(function (newIdx, oldIdx) {
	                var symbolEl = oldData.getItemGraphicEl(oldIdx);
	                var point = data.getItemLayout(newIdx);
	                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	                    group.remove(symbolEl);
	                    return;
	                }
	                if (!symbolEl) {
	                    symbolEl = new SymbolCtor(data, newIdx);
	                    symbolEl.attr('position', point);
	                }
	                else {
	                    symbolEl.updateData(data, newIdx);
	                    graphic.updateProps(symbolEl, {
	                        position: point
	                    }, seriesModel);
	                }

	                // Add back
	                group.add(symbolEl);

	                data.setItemGraphicEl(newIdx, symbolEl);
	            })
	            .remove(function (oldIdx) {
	                var el = oldData.getItemGraphicEl(oldIdx);
	                el && el.fadeOut(function () {
	                    group.remove(el);
	                });
	            })
	            .execute();

	        this._data = data;
	    };

	    symbolDrawProto.updateLayout = function () {
	        var data = this._data;
	        if (data) {
	            // Not use animation
	            data.eachItemGraphicEl(function (el, idx) {
	                el.attr('position', data.getItemLayout(idx));
	            });
	        }
	    };

	    symbolDrawProto.remove = function (enableAnimation) {
	        var group = this.group;
	        var data = this._data;
	        if (data) {
	            if (enableAnimation) {
	                data.eachItemGraphicEl(function (el) {
	                    el.fadeOut(function () {
	                        group.remove(el);
	                    });
	                });
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    };

	    module.exports = SymbolDraw;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Symbol
	 */


	    var zrUtil = __webpack_require__(111);
	    var symbolUtil = __webpack_require__(203);
	    var graphic = __webpack_require__(150);
	    var numberUtil = __webpack_require__(115);

	    function normalizeSymbolSize(symbolSize) {
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [+symbolSize, +symbolSize];
	        }
	        return symbolSize;
	    }

	    /**
	     * @constructor
	     * @alias {module:echarts/chart/helper/Symbol}
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @extends {module:zrender/graphic/Group}
	     */
	    function Symbol(data, idx) {
	        graphic.Group.call(this);

	        this.updateData(data, idx);
	    }

	    var symbolProto = Symbol.prototype;

	    function driftSymbol(dx, dy) {
	        this.parent.drift(dx, dy);
	    }

	    symbolProto._createSymbol = function (symbolType, data, idx) {
	        // Remove paths created before
	        this.removeAll();

	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');

	        var symbolPath = symbolUtil.createSymbol(
	            symbolType, -0.5, -0.5, 1, 1, color
	        );

	        symbolPath.attr({
	            style: {
	                strokeNoScale: true
	            },
	            z2: 100,
	            culling: true,
	            scale: [0, 0]
	        });
	        // Rewrite drift method
	        symbolPath.drift = driftSymbol;

	        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));

	        graphic.initProps(symbolPath, {
	            scale: size
	        }, seriesModel);

	        this._symbolType = symbolType;

	        this.add(symbolPath);
	    };

	    /**
	     * Stop animation
	     * @param {boolean} toLastFrame
	     */
	    symbolProto.stopSymbolAnimation = function (toLastFrame) {
	        this.childAt(0).stopAnimation(toLastFrame);
	    };

	    /**
	     * Get scale(aka, current symbol size).
	     * Including the change caused by animation
	     * @param {Array.<number>} toLastFrame
	     */
	    symbolProto.getScale = function () {
	        return this.childAt(0).scale;
	    };

	    /**
	     * Highlight symbol
	     */
	    symbolProto.highlight = function () {
	        this.childAt(0).trigger('emphasis');
	    };

	    /**
	     * Downplay symbol
	     */
	    symbolProto.downplay = function () {
	        this.childAt(0).trigger('normal');
	    };

	    /**
	     * @param {number} zlevel
	     * @param {number} z
	     */
	    symbolProto.setZ = function (zlevel, z) {
	        var symbolPath = this.childAt(0);
	        symbolPath.zlevel = zlevel;
	        symbolPath.z = z;
	    };

	    symbolProto.setDraggable = function (draggable) {
	        var symbolPath = this.childAt(0);
	        symbolPath.draggable = draggable;
	        symbolPath.cursor = draggable ? 'move' : 'pointer';
	    };
	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    symbolProto.updateData = function (data, idx) {
	        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	        var seriesModel = data.hostModel;
	        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	        if (symbolType !== this._symbolType) {
	            this._createSymbol(symbolType, data, idx);
	        }
	        else {
	            var symbolPath = this.childAt(0);
	            graphic.updateProps(symbolPath, {
	                scale: symbolSize
	            }, seriesModel);
	        }
	        this._updateCommon(data, idx, symbolSize);

	        this._seriesModel = seriesModel;
	    };

	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	    var normalLabelAccessPath = ['label', 'normal'];
	    var emphasisLabelAccessPath = ['label', 'emphasis'];

	    symbolProto._updateCommon = function (data, idx, symbolSize) {
	        var symbolPath = this.childAt(0);
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	        var color = data.getItemVisual(idx, 'color');
	        var elStyle = symbolPath.style;

	        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();

	        symbolPath.rotation = itemModel.getShallow('symbolRotate') * Math.PI / 180 || 0;

	        var symbolOffset = itemModel.getShallow('symbolOffset');
	        if (symbolOffset) {
	            var pos = symbolPath.position;
	            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	        }

	        symbolPath.setColor(color);

	        zrUtil.extend(
	            elStyle,
	            // Color must be excluded.
	            // Because symbol provide setColor individually to set fill and stroke
	            normalItemStyleModel.getItemStyle(['color'])
	        );

	        var opacity = data.getItemVisual(idx, 'opacity');
	        if (opacity != null) {
	            elStyle.opacity = opacity;
	        }

	        var labelModel = itemModel.getModel(normalLabelAccessPath);
	        var hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);

	        // Get last value dim
	        var dimensions = data.dimensions.slice();
	        var valueDim = dimensions.pop();
	        var dataType;
	        while (
	            ((dataType = data.getDimensionInfo(valueDim).type) === 'ordinal')
	            || (dataType === 'time')
	        ) {
	            valueDim = dimensions.pop();
	        }

	        if (labelModel.get('show')) {
	            graphic.setText(elStyle, labelModel, color);
	            elStyle.text = zrUtil.retrieve(
	                seriesModel.getFormattedLabel(idx, 'normal'),
	                data.get(valueDim, idx)
	            );
	        }
	        else {
	            elStyle.text = '';
	        }

	        if (hoverLabelModel.getShallow('show')) {
	            graphic.setText(hoverStyle, hoverLabelModel, color);
	            hoverStyle.text = zrUtil.retrieve(
	                seriesModel.getFormattedLabel(idx, 'emphasis'),
	                data.get(valueDim, idx)
	            );
	        }
	        else {
	            hoverStyle.text = '';
	        }

	        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));

	        symbolPath.off('mouseover')
	            .off('mouseout')
	            .off('emphasis')
	            .off('normal');

	        graphic.setHoverStyle(symbolPath, hoverStyle);

	        if (itemModel.getShallow('hoverAnimation')) {
	            var onEmphasis = function() {
	                var ratio = size[1] / size[0];
	                this.animateTo({
	                    scale: [
	                        Math.max(size[0] * 1.1, size[0] + 3),
	                        Math.max(size[1] * 1.1, size[1] + 3 * ratio)
	                    ]
	                }, 400, 'elasticOut');
	            };
	            var onNormal = function() {
	                this.animateTo({
	                    scale: size
	                }, 400, 'elasticOut');
	            };
	            symbolPath.on('mouseover', onEmphasis)
	                .on('mouseout', onNormal)
	                .on('emphasis', onEmphasis)
	                .on('normal', onNormal);
	        }
	    };

	    symbolProto.fadeOut = function (cb) {
	        var symbolPath = this.childAt(0);
	        // Not show text when animating
	        symbolPath.style.text = '';
	        graphic.updateProps(symbolPath, {
	            scale: [0, 0]
	        }, this._seriesModel, cb);
	    };

	    zrUtil.inherits(Symbol, graphic.Group);

	    module.exports = Symbol;


/***/ },
/* 245 */
/***/ function(module, exports) {

	

	    // var arrayDiff = require('zrender/lib/core/arrayDiff');
	    // 'zrender/core/arrayDiff' has been used before, but it did
	    // not do well in performance when roam with fixed dataZoom window.

	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }

	    function getStackedOnPoint(coordSys, data, idx) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero
	            ? 0 : valueAxis.scale.getExtent()[0];

	        var valueDim = valueAxis.dim;
	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

	        var stackedOnSameSign;
	        var stackedOn = data.stackedOn;
	        var val = data.get(valueDim, idx);
	        // Find first stacked value with same sign
	        while (stackedOn &&
	            sign(stackedOn.get(valueDim, idx)) === sign(val)
	        ) {
	            stackedOnSameSign = stackedOn;
	            break;
	        }
	        var stackedData = [];
	        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	        stackedData[1 - baseDataOffset] = stackedOnSameSign
	            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

	        return coordSys.dataToPoint(stackedData);
	    }

	    // function convertToIntId(newIdList, oldIdList) {
	    //     // Generate int id instead of string id.
	    //     // Compare string maybe slow in score function of arrDiff

	    //     // Assume id in idList are all unique
	    //     var idIndicesMap = {};
	    //     var idx = 0;
	    //     for (var i = 0; i < newIdList.length; i++) {
	    //         idIndicesMap[newIdList[i]] = idx;
	    //         newIdList[i] = idx++;
	    //     }
	    //     for (var i = 0; i < oldIdList.length; i++) {
	    //         var oldId = oldIdList[i];
	    //         // Same with newIdList
	    //         if (idIndicesMap[oldId]) {
	    //             oldIdList[i] = idIndicesMap[oldId];
	    //         }
	    //         else {
	    //             oldIdList[i] = idx++;
	    //         }
	    //     }
	    // }

	    function diffData(oldData, newData) {
	        var diffResult = [];

	        newData.diff(oldData)
	            .add(function (idx) {
	                diffResult.push({cmd: '+', idx: idx});
	            })
	            .update(function (newIdx, oldIdx) {
	                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});
	            })
	            .remove(function (idx) {
	                diffResult.push({cmd: '-', idx: idx});
	            })
	            .execute();

	        return diffResult;
	    }

	    module.exports = function (
	        oldData, newData,
	        oldStackedOnPoints, newStackedOnPoints,
	        oldCoordSys, newCoordSys
	    ) {
	        var diff = diffData(oldData, newData);

	        // var newIdList = newData.mapArray(newData.getId);
	        // var oldIdList = oldData.mapArray(oldData.getId);

	        // convertToIntId(newIdList, oldIdList);

	        // // FIXME One data ?
	        // diff = arrayDiff(oldIdList, newIdList);

	        var currPoints = [];
	        var nextPoints = [];
	        // Points for stacking base line
	        var currStackedPoints = [];
	        var nextStackedPoints = [];

	        var status = [];
	        var sortedIndices = [];
	        var rawIndices = [];
	        var dims = newCoordSys.dimensions;
	        for (var i = 0; i < diff.length; i++) {
	            var diffItem = diff[i];
	            var pointAdded = true;

	            // FIXME, animation is not so perfect when dataZoom window moves fast
	            // Which is in case remvoing or add more than one data in the tail or head
	            switch (diffItem.cmd) {
	                case '=':
	                    var currentPt = oldData.getItemLayout(diffItem.idx);
	                    var nextPt = newData.getItemLayout(diffItem.idx1);
	                    // If previous data is NaN, use next point directly
	                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	                        currentPt = nextPt.slice();
	                    }
	                    currPoints.push(currentPt);
	                    nextPoints.push(nextPt);

	                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);

	                    rawIndices.push(newData.getRawIndex(diffItem.idx1));
	                    break;
	                case '+':
	                    var idx = diffItem.idx;
	                    currPoints.push(
	                        oldCoordSys.dataToPoint([
	                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)
	                        ])
	                    );

	                    nextPoints.push(newData.getItemLayout(idx).slice());

	                    currStackedPoints.push(
	                        getStackedOnPoint(oldCoordSys, newData, idx)
	                    );
	                    nextStackedPoints.push(newStackedOnPoints[idx]);

	                    rawIndices.push(newData.getRawIndex(idx));
	                    break;
	                case '-':
	                    var idx = diffItem.idx;
	                    var rawIndex = oldData.getRawIndex(idx);
	                    // Data is replaced. In the case of dynamic data queue
	                    // FIXME FIXME FIXME
	                    if (rawIndex !== idx) {
	                        currPoints.push(oldData.getItemLayout(idx));
	                        nextPoints.push(newCoordSys.dataToPoint([
	                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)
	                        ]));

	                        currStackedPoints.push(oldStackedOnPoints[idx]);
	                        nextStackedPoints.push(
	                            getStackedOnPoint(
	                                newCoordSys, oldData, idx
	                            )
	                        );

	                        rawIndices.push(rawIndex);
	                    }
	                    else {
	                        pointAdded = false;
	                    }
	            }

	            // Original indices
	            if (pointAdded) {
	                status.push(diffItem);
	                sortedIndices.push(sortedIndices.length);
	            }
	        }

	        // Diff result may be crossed if all items are changed
	        // Sort by data index
	        sortedIndices.sort(function (a, b) {
	            return rawIndices[a] - rawIndices[b];
	        });

	        var sortedCurrPoints = [];
	        var sortedNextPoints = [];

	        var sortedCurrStackedPoints = [];
	        var sortedNextStackedPoints = [];

	        var sortedStatus = [];
	        for (var i = 0; i < sortedIndices.length; i++) {
	            var idx = sortedIndices[i];
	            sortedCurrPoints[i] = currPoints[idx];
	            sortedNextPoints[i] = nextPoints[idx];

	            sortedCurrStackedPoints[i] = currStackedPoints[idx];
	            sortedNextStackedPoints[i] = nextStackedPoints[idx];

	            sortedStatus[i] = status[idx];
	        }

	        return {
	            current: sortedCurrPoints,
	            next: sortedNextPoints,

	            stackedOnCurrent: sortedCurrStackedPoints,
	            stackedOnNext: sortedNextStackedPoints,

	            status: sortedStatus
	        };
	    };


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// Poly path support NaN point


	    var Path = __webpack_require__(152);
	    var vec2 = __webpack_require__(124);

	    var vec2Min = vec2.min;
	    var vec2Max = vec2.max;

	    var scaleAndAdd = vec2.scaleAndAdd;
	    var v2Copy = vec2.copy;

	    // Temporary variable
	    var v = [];
	    var cp0 = [];
	    var cp1 = [];

	    function drawSegment(
	        ctx, points, start, stop, len,
	        dir, smoothMin, smoothMax, smooth, smoothMonotone
	    ) {
	        var idx = start;
	        for (var k = 0; k < len; k++) {
	            var p = points[idx];
	            if (idx >= stop || idx < 0 || isNaN(p[0]) || isNaN(p[1])) {
	                break;
	            }

	            if (idx === start) {
	                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	                v2Copy(cp0, p);
	            }
	            else {
	                if (smooth > 0) {
	                    var prevIdx = idx - dir;
	                    var nextIdx = idx + dir;

	                    var ratioNextSeg = 0.5;
	                    var prevP = points[prevIdx];
	                    var nextP = points[nextIdx];
	                    // Last point
	                    if ((dir > 0 && (idx === len - 1 || isNaN(nextP[0]) || isNaN(nextP[1])))
	                        || (dir <= 0 && (idx === 0 ||  isNaN(nextP[0]) || isNaN(nextP[1])))
	                    ) {
	                        v2Copy(cp1, p);
	                    }
	                    else {
	                        // If next data is null
	                        if (isNaN(nextP[0]) || isNaN(nextP[1])) {
	                            nextP = p;
	                        }

	                        vec2.sub(v, nextP, prevP);

	                        var lenPrevSeg;
	                        var lenNextSeg;
	                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	                            var dim = smoothMonotone === 'x' ? 0 : 1;
	                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	                        }
	                        else {
	                            lenPrevSeg = vec2.dist(p, prevP);
	                            lenNextSeg = vec2.dist(p, nextP);
	                        }

	                        // Use ratio of seg length
	                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);

	                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	                    }
	                    // Smooth constraint
	                    vec2Min(cp0, cp0, smoothMax);
	                    vec2Max(cp0, cp0, smoothMin);
	                    vec2Min(cp1, cp1, smoothMax);
	                    vec2Max(cp1, cp1, smoothMin);

	                    ctx.bezierCurveTo(
	                        cp0[0], cp0[1],
	                        cp1[0], cp1[1],
	                        p[0], p[1]
	                    );
	                    // cp0 of next segment
	                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	                }
	                else {
	                    ctx.lineTo(p[0], p[1]);
	                }
	            }

	            idx += dir;
	        }

	        return k;
	    }

	    function getBoundingBox(points, smoothConstraint) {
	        var ptMin = [Infinity, Infinity];
	        var ptMax = [-Infinity, -Infinity];
	        if (smoothConstraint) {
	            for (var i = 0; i < points.length; i++) {
	                var pt = points[i];
	                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }
	                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }
	                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }
	                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }
	            }
	        }
	        return {
	            min: smoothConstraint ? ptMin : ptMax,
	            max: smoothConstraint ? ptMax : ptMin
	        };
	    }

	    module.exports = {

	        Polyline: Path.extend({

	            type: 'ec-polyline',

	            shape: {
	                points: [],

	                smooth: 0,

	                smoothConstraint: true,

	                smoothMonotone: null
	            },

	            style: {
	                fill: null,

	                stroke: '#000'
	            },

	            buildPath: function (ctx, shape) {
	                var points = shape.points;

	                var i = 0;
	                var len = points.length;

	                var result = getBoundingBox(points, shape.smoothConstraint);

	                while (i < len) {
	                    i += drawSegment(
	                        ctx, points, i, len, len,
	                        1, result.min, result.max, shape.smooth,
	                        shape.smoothMonotone
	                    ) + 1;
	                }
	            }
	        }),

	        Polygon: Path.extend({

	            type: 'ec-polygon',

	            shape: {
	                points: [],

	                // Offset between stacked base points and points
	                stackedOnPoints: [],

	                smooth: 0,

	                stackedOnSmooth: 0,

	                smoothConstraint: true,

	                smoothMonotone: null
	            },

	            buildPath: function (ctx, shape) {
	                var points = shape.points;
	                var stackedOnPoints = shape.stackedOnPoints;

	                var i = 0;
	                var len = points.length;
	                var smoothMonotone = shape.smoothMonotone;
	                var bbox = getBoundingBox(points, shape.smoothConstraint);
	                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
	                while (i < len) {
	                    var k = drawSegment(
	                        ctx, points, i, len, len,
	                        1, bbox.min, bbox.max, shape.smooth,
	                        smoothMonotone
	                    );
	                    drawSegment(
	                        ctx, stackedOnPoints, i + k - 1, len, k,
	                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,
	                        smoothMonotone
	                    );
	                    i += k + 1;

	                    ctx.closePath();
	                }
	            }
	        })
	    };


/***/ },
/* 247 */
/***/ function(module, exports) {

	

	    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {

	        // Encoding visual for all series include which is filtered for legend drawing
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();

	            var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	            var symbolSize = seriesModel.get('symbolSize');

	            data.setVisual({
	                legendSymbol: legendSymbol || symbolType,
	                symbol: symbolType,
	                symbolSize: symbolSize
	            });

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof symbolSize === 'function') {
	                    data.each(function (idx) {
	                        var rawValue = seriesModel.getRawValue(idx);
	                        // FIXME
	                        var params = seriesModel.getDataParams(idx);
	                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                    });
	                }
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var itemSymbolType = itemModel.get('symbol', true);
	                    var itemSymbolSize = itemModel.get('symbolSize', true);
	                    // If has item symbol
	                    if (itemSymbolType != null) {
	                        data.setItemVisual(idx, 'symbol', itemSymbolType);
	                    }
	                    if (itemSymbolSize != null) {
	                        // PENDING Transform symbolSize ?
	                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 248 */
/***/ function(module, exports) {

	

	    module.exports = function (seriesType, ecModel, api) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var coordSys = seriesModel.coordinateSystem;

	            var dims = coordSys.dimensions;
	            data.each(dims, function (x, y, idx) {
	                var point;
	                if (!isNaN(x) && !isNaN(y)) {
	                    point = coordSys.dataToPoint([x, y]);
	                }
	                else {
	                    // Also {Array.<number>}, not undefined to avoid if...else... statement
	                    point = [NaN, NaN];
	                }

	                data.setItemLayout(idx, point);
	            }, true);
	        });
	    };


/***/ },
/* 249 */
/***/ function(module, exports) {

	
	    var samplers = {
	        average: function (frame) {
	            var sum = 0;
	            var count = 0;
	            for (var i = 0; i < frame.length; i++) {
	                if (!isNaN(frame[i])) {
	                    sum += frame[i];
	                    count++;
	                }
	            }
	            // Return NaN if count is 0
	            return count === 0 ? NaN : sum / count;
	        },
	        sum: function (frame) {
	            var sum = 0;
	            for (var i = 0; i < frame.length; i++) {
	                // Ignore NaN
	                sum += frame[i] || 0;
	            }
	            return sum;
	        },
	        max: function (frame) {
	            var max = -Infinity;
	            for (var i = 0; i < frame.length; i++) {
	                frame[i] > max && (max = frame[i]);
	            }
	            return max;
	        },
	        min: function (frame) {
	            var min = Infinity;
	            for (var i = 0; i < frame.length; i++) {
	                frame[i] < min && (min = frame[i]);
	            }
	            return min;
	        },
	        // TODO
	        // Median
	        nearest: function (frame) {
	            return frame[0];
	        }
	    };

	    var indexSampler = function (frame, value) {
	        return Math.round(frame.length / 2);
	    };
	    module.exports = function (seriesType, ecModel, api) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var sampling = seriesModel.get('sampling');
	            var coordSys = seriesModel.coordinateSystem;
	            // Only cartesian2d support down sampling
	            if (coordSys.type === 'cartesian2d' && sampling) {
	                var baseAxis = coordSys.getBaseAxis();
	                var valueAxis = coordSys.getOtherAxis(baseAxis);
	                var extent = baseAxis.getExtent();
	                // Coordinste system has been resized
	                var size = extent[1] - extent[0];
	                var rate = Math.round(data.count() / size);
	                if (rate > 1) {
	                    var sampler;
	                    if (typeof sampling === 'string') {
	                        sampler = samplers[sampling];
	                    }
	                    else if (typeof sampling === 'function') {
	                        sampler = sampling;
	                    }
	                    if (sampler) {
	                        data = data.downSample(
	                            valueAxis.dim, 1 / rate, sampler, indexSampler
	                        );
	                        seriesModel.setData(data);
	                    }
	                }
	            }
	        }, this);
	    };


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(111);
	    var echarts = __webpack_require__(109);

	    __webpack_require__(251);
	    __webpack_require__(253);

	    __webpack_require__(254)('pie', [{
	        type: 'pieToggleSelect',
	        event: 'pieselectchanged',
	        method: 'toggleSelected'
	    }, {
	        type: 'pieSelect',
	        event: 'pieselected',
	        method: 'select'
	    }, {
	        type: 'pieUnSelect',
	        event: 'pieunselected',
	        method: 'unSelect'
	    }]);

	    echarts.registerVisualCoding(
	        'chart',  zrUtil.curry(__webpack_require__(255), 'pie')
	    );

	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(256), 'pie'
	    ));

	    echarts.registerProcessor(
	        'filter', zrUtil.curry(__webpack_require__(258), 'pie')
	    );


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(230);
	    var zrUtil = __webpack_require__(111);
	    var modelUtil = __webpack_require__(113);
	    var completeDimensions = __webpack_require__(232);

	    var dataSelectableMixin = __webpack_require__(252);

	    var PieSeries = __webpack_require__(109).extendSeriesModel({

	        type: 'series.pie',

	        // Overwrite
	        init: function (option) {
	            PieSeries.superApply(this, 'init', arguments);

	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this._dataBeforeProcessed;
	            };

	            this.updateSelectedMap();

	            this._defaultLabelLine(option);
	        },

	        // Overwrite
	        mergeOption: function (newOption) {
	            PieSeries.superCall(this, 'mergeOption', newOption);
	            this.updateSelectedMap();
	        },

	        getInitialData: function (option, ecModel) {
	            var dimensions = completeDimensions(['value'], option.data);
	            var list = new List(dimensions, this);
	            list.initData(option.data);
	            return list;
	        },

	        // Overwrite
	        getDataParams: function (dataIndex) {
	            var data = this._data;
	            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
	            var sum = data.getSum('value');
	            // FIXME toFixed?
	            //
	            // Percent is 0 if sum is 0
	            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);

	            params.$vars.push('percent');
	            return params;
	        },

	        _defaultLabelLine: function (option) {
	            // Extend labelLine emphasis
	            modelUtil.defaultEmphasis(option.labelLine, ['show']);

	            var labelLineNormalOpt = option.labelLine.normal;
	            var labelLineEmphasisOpt = option.labelLine.emphasis;
	            // Not show label line if `label.normal.show = false`
	            labelLineNormalOpt.show = labelLineNormalOpt.show
	                && option.label.normal.show;
	            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
	                && option.label.emphasis.show;
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,

	            hoverAnimation: true,
	            // 默认全局居中
	            center: ['50%', '50%'],
	            radius: [0, '75%'],
	            // 默认顺时针
	            clockwise: true,
	            startAngle: 90,
	            // 最小角度改为0
	            minAngle: 0,
	            // 选中是扇区偏移量
	            selectedOffset: 10,

	            // If use strategy to avoid label overlapping
	            avoidLabelOverlap: true,
	            // 选择模式，默认关闭，可选single，multiple
	            // selectedMode: false,
	            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	            // roseType: null,

	            label: {
	                normal: {
	                    // If rotate around circle
	                    rotate: false,
	                    show: true,
	                    // 'outer', 'inside', 'center'
	                    position: 'outer'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数
	                },
	                emphasis: {}
	            },
	            // Enabled when label.normal.position is 'outer'
	            labelLine: {
	                normal: {
	                    show: true,
	                    // 引导线两段中的第一段长度
	                    length: 15,
	                    // 引导线两段中的第二段长度
	                    length2: 15,
	                    smooth: false,
	                    lineStyle: {
	                        // color: 各异,
	                        width: 1,
	                        type: 'solid'
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderColor: 'rgba(0,0,0,0)',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    // color: 各异,
	                    borderColor: 'rgba(0,0,0,0)',
	                    borderWidth: 1
	                }
	            },

	            animationEasing: 'cubicOut',

	            data: []
	        }
	    });

	    zrUtil.mixin(PieSeries, dataSelectableMixin);

	    module.exports = PieSeries;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 *
	 * @module echarts/chart/helper/DataSelectable
	 */


	    var zrUtil = __webpack_require__(111);

	    module.exports = {

	        updateSelectedMap: function () {
	            var option = this.option;
	            this._dataOptMap = zrUtil.reduce(option.data, function (dataOptMap, dataOpt) {
	                dataOptMap[dataOpt.name] = dataOpt;
	                return dataOptMap;
	            }, {});
	        },
	        /**
	         * @param {string} name
	         */
	        // PENGING If selectedMode is null ?
	        select: function (name) {
	            var dataOptMap = this._dataOptMap;
	            var dataOpt = dataOptMap[name];
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                zrUtil.each(dataOptMap, function (dataOpt) {
	                    dataOpt.selected = false;
	                });
	            }
	            dataOpt && (dataOpt.selected = true);
	        },

	        /**
	         * @param {string} name
	         */
	        unSelect: function (name) {
	            var dataOpt = this._dataOptMap[name];
	            // var selectedMode = this.get('selectedMode');
	            // selectedMode !== 'single' && dataOpt && (dataOpt.selected = false);
	            dataOpt && (dataOpt.selected = false);
	        },

	        /**
	         * @param {string} name
	         */
	        toggleSelected: function (name) {
	            var dataOpt = this._dataOptMap[name];
	            if (dataOpt != null) {
	                this[dataOpt.selected ? 'unSelect' : 'select'](name);
	                return dataOpt.selected;
	            }
	        },

	        /**
	         * @param {string} name
	         */
	        isSelected: function (name) {
	            var dataOpt = this._dataOptMap[name];
	            return dataOpt && dataOpt.selected;
	        }
	    };


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(150);
	    var zrUtil = __webpack_require__(111);

	    /**
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	        var data = seriesModel.getData();
	        var dataIndex = this.dataIndex;
	        var name = data.getName(dataIndex);
	        var selectedOffset = seriesModel.get('selectedOffset');

	        api.dispatchAction({
	            type: 'pieToggleSelect',
	            from: uid,
	            name: name,
	            seriesId: seriesModel.id
	        });

	        data.each(function (idx) {
	            toggleItemSelected(
	                data.getItemGraphicEl(idx),
	                data.getItemLayout(idx),
	                seriesModel.isSelected(data.getName(idx)),
	                selectedOffset,
	                hasAnimation
	            );
	        });
	    }

	    /**
	     * @param {module:zrender/graphic/Sector} el
	     * @param {Object} layout
	     * @param {boolean} isSelected
	     * @param {number} selectedOffset
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	        var midAngle = (layout.startAngle + layout.endAngle) / 2;

	        var dx = Math.cos(midAngle);
	        var dy = Math.sin(midAngle);

	        var offset = isSelected ? selectedOffset : 0;
	        var position = [dx * offset, dy * offset];

	        hasAnimation
	            // animateTo will stop revious animation like update transition
	            ? el.animate()
	                .when(200, {
	                    position: position
	                })
	                .start('bounceOut')
	            : el.attr('position', position);
	    }

	    /**
	     * Piece of pie including Sector, Label, LabelLine
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     */
	    function PiePiece(data, idx) {

	        graphic.Group.call(this);

	        var sector = new graphic.Sector({
	            z2: 2
	        });
	        var polyline = new graphic.Polyline();
	        var text = new graphic.Text();
	        this.add(sector);
	        this.add(polyline);
	        this.add(text);

	        this.updateData(data, idx, true);

	        // Hover to change label and labelLine
	        function onEmphasis() {
	            polyline.ignore = polyline.hoverIgnore;
	            text.ignore = text.hoverIgnore;
	        }
	        function onNormal() {
	            polyline.ignore = polyline.normalIgnore;
	            text.ignore = text.normalIgnore;
	        }
	        this.on('emphasis', onEmphasis)
	            .on('normal', onNormal)
	            .on('mouseover', onEmphasis)
	            .on('mouseout', onNormal);
	    }

	    var piePieceProto = PiePiece.prototype;

	    function getLabelStyle(data, idx, state, labelModel, labelPosition) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	        return {
	            fill: textStyleModel.getTextColor()
	                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	            textFont: textStyleModel.getFont(),
	            text: zrUtil.retrieve(
	                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)
	            )
	        };
	    }

	    piePieceProto.updateData = function (data, idx, firstCreate) {

	        var sector = this.childAt(0);

	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var sectorShape = zrUtil.extend({}, layout);
	        sectorShape.label = null;
	        if (firstCreate) {
	            sector.setShape(sectorShape);
	            sector.shape.endAngle = layout.startAngle;
	            graphic.updateProps(sector, {
	                shape: {
	                    endAngle: layout.endAngle
	                }
	            }, seriesModel);
	        }
	        else {
	            graphic.updateProps(sector, {
	                shape: sectorShape
	            }, seriesModel);
	        }

	        // Update common style
	        var itemStyleModel = itemModel.getModel('itemStyle');
	        var visualColor = data.getItemVisual(idx, 'color');

	        sector.setStyle(
	            zrUtil.defaults(
	                {
	                    fill: visualColor
	                },
	                itemStyleModel.getModel('normal').getItemStyle()
	            )
	        );
	        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

	        // Toggle selected
	        toggleItemSelected(
	            this,
	            data.getItemLayout(idx),
	            itemModel.get('selected'),
	            seriesModel.get('selectedOffset'),
	            seriesModel.get('animation')
	        );

	        function onEmphasis() {
	            // Sector may has animation of updating data. Force to move to the last frame
	            // Or it may stopped on the wrong shape
	            sector.stopAnimation(true);
	            sector.animateTo({
	                shape: {
	                    r: layout.r + 10
	                }
	            }, 300, 'elasticOut');
	        }
	        function onNormal() {
	            sector.stopAnimation(true);
	            sector.animateTo({
	                shape: {
	                    r: layout.r
	                }
	            }, 300, 'elasticOut');
	        }
	        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        if (itemModel.get('hoverAnimation')) {
	            sector
	                .on('mouseover', onEmphasis)
	                .on('mouseout', onNormal)
	                .on('emphasis', onEmphasis)
	                .on('normal', onNormal);
	        }

	        this._updateLabel(data, idx);

	        graphic.setHoverStyle(this);
	    };

	    piePieceProto._updateLabel = function (data, idx) {

	        var labelLine = this.childAt(1);
	        var labelText = this.childAt(2);

	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var labelLayout = layout.label;
	        var visualColor = data.getItemVisual(idx, 'color');

	        graphic.updateProps(labelLine, {
	            shape: {
	                points: labelLayout.linePoints || [
	                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]
	                ]
	            }
	        }, seriesModel);

	        graphic.updateProps(labelText, {
	            style: {
	                x: labelLayout.x,
	                y: labelLayout.y
	            }
	        }, seriesModel);
	        labelText.attr({
	            style: {
	                textVerticalAlign: labelLayout.verticalAlign,
	                textAlign: labelLayout.textAlign,
	                textFont: labelLayout.font
	            },
	            rotation: labelLayout.rotation,
	            origin: [labelLayout.x, labelLayout.y],
	            z2: 10
	        });

	        var labelModel = itemModel.getModel('label.normal');
	        var labelHoverModel = itemModel.getModel('label.emphasis');
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');

	        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));

	        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	        labelText.hoverIgnore = !labelHoverModel.get('show');

	        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	        labelLine.hoverIgnore = !labelLineHoverModel.get('show');

	        // Default use item visual color
	        labelLine.setStyle({
	            stroke: visualColor
	        });
	        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

	        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
	        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();

	        var smooth = labelLineModel.get('smooth');
	        if (smooth && smooth === true) {
	            smooth = 0.4;
	        }
	        labelLine.setShape({
	            smooth: smooth
	        });
	    };

	    zrUtil.inherits(PiePiece, graphic.Group);


	    // Pie view
	    var Pie = __webpack_require__(149).extend({

	        type: 'pie',

	        init: function () {
	            var sectorGroup = new graphic.Group();
	            this._sectorGroup = sectorGroup;
	        },

	        render: function (seriesModel, ecModel, api, payload) {
	            if (payload && (payload.from === this.uid)) {
	                return;
	            }

	            var data = seriesModel.getData();
	            var oldData = this._data;
	            var group = this.group;

	            var hasAnimation = ecModel.get('animation');
	            var isFirstRender = !oldData;

	            var onSectorClick = zrUtil.curry(
	                updateDataSelected, this.uid, seriesModel, hasAnimation, api
	            );

	            var selectedMode = seriesModel.get('selectedMode');

	            data.diff(oldData)
	                .add(function (idx) {
	                    var piePiece = new PiePiece(data, idx);
	                    if (isFirstRender) {
	                        piePiece.eachChild(function (child) {
	                            child.stopAnimation(true);
	                        });
	                    }

	                    selectedMode && piePiece.on('click', onSectorClick);

	                    data.setItemGraphicEl(idx, piePiece);

	                    group.add(piePiece);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var piePiece = oldData.getItemGraphicEl(oldIdx);

	                    piePiece.updateData(data, newIdx);

	                    piePiece.off('click');
	                    selectedMode && piePiece.on('click', onSectorClick);
	                    group.add(piePiece);
	                    data.setItemGraphicEl(newIdx, piePiece);
	                })
	                .remove(function (idx) {
	                    var piePiece = oldData.getItemGraphicEl(idx);
	                    group.remove(piePiece);
	                })
	                .execute();

	            if (hasAnimation && isFirstRender && data.count() > 0) {
	                var shape = data.getItemLayout(0);
	                var r = Math.max(api.getWidth(), api.getHeight()) / 2;

	                var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	                group.setClipPath(this._createClipPath(
	                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel
	                ));
	            }

	            this._data = data;
	        },

	        _createClipPath: function (
	            cx, cy, r, startAngle, clockwise, cb, seriesModel
	        ) {
	            var clipPath = new graphic.Sector({
	                shape: {
	                    cx: cx,
	                    cy: cy,
	                    r0: 0,
	                    r: r,
	                    startAngle: startAngle,
	                    endAngle: startAngle,
	                    clockwise: clockwise
	                }
	            });

	            graphic.initProps(clipPath, {
	                shape: {
	                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	                }
	            }, seriesModel, cb);

	            return clipPath;
	        }
	    });

	    module.exports = Pie;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	
	    var echarts = __webpack_require__(109);
	    var zrUtil = __webpack_require__(111);
	    module.exports = function (seriesType, actionInfos) {
	        zrUtil.each(actionInfos, function (actionInfo) {
	            actionInfo.update = 'updateView';
	            /**
	             * @payload
	             * @property {string} seriesName
	             * @property {string} name
	             */
	            echarts.registerAction(actionInfo, function (payload, ecModel) {
	                var selected = {};
	                ecModel.eachComponent(
	                    {mainType: 'series', subType: seriesType, query: payload},
	                    function (seriesModel) {
	                        if (seriesModel[actionInfo.method]) {
	                            seriesModel[actionInfo.method](payload.name);
	                        }
	                        var data = seriesModel.getData();
	                        // Create selected map
	                        data.each(function (idx) {
	                            var name = data.getName(idx);
	                            selected[name] = seriesModel.isSelected(name) || false;
	                        });
	                    }
	                );
	                return {
	                    name: payload.name,
	                    selected: selected
	                };
	            });
	        });
	    };


/***/ },
/* 255 */
/***/ function(module, exports) {

	// Pick color from palette for each data item


	    module.exports = function (seriesType, ecModel) {
	        var globalColorList = ecModel.get('color');
	        var offset = 0;
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var colorList = seriesModel.get('color', true);
	            var dataAll = seriesModel.getRawData();
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                var data = seriesModel.getData();
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var rawIdx = data.getRawIndex(idx);
	                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded
	                    var singleDataColor = data.getItemVisual(idx, 'color', true);
	                    if (!singleDataColor) {
	                        var paletteColor = colorList ? colorList[rawIdx % colorList.length]
	                            : globalColorList[(rawIdx + offset) % globalColorList.length];
	                        var color = itemModel.get('itemStyle.normal.color') || paletteColor;
	                        // Legend may use the visual info in data before processed
	                        dataAll.setItemVisual(rawIdx, 'color', color);
	                        data.setItemVisual(idx, 'color', color);
	                    }
	                    else {
	                        // Set data all color for legend
	                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	                    }
	                });
	            }
	            offset += dataAll.count();
	        });
	    };


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	// TODO minAngle



	    var numberUtil = __webpack_require__(115);
	    var parsePercent = numberUtil.parsePercent;
	    var labelLayout = __webpack_require__(257);
	    var zrUtil = __webpack_require__(111);

	    var PI2 = Math.PI * 2;
	    var RADIAN = Math.PI / 180;

	    module.exports = function (seriesType, ecModel, api) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var center = seriesModel.get('center');
	            var radius = seriesModel.get('radius');

	            if (!zrUtil.isArray(radius)) {
	                radius = [0, radius];
	            }
	            if (!zrUtil.isArray(center)) {
	                center = [center, center];
	            }

	            var width = api.getWidth();
	            var height = api.getHeight();
	            var size = Math.min(width, height);
	            var cx = parsePercent(center[0], width);
	            var cy = parsePercent(center[1], height);
	            var r0 = parsePercent(radius[0], size / 2);
	            var r = parsePercent(radius[1], size / 2);

	            var data = seriesModel.getData();

	            var startAngle = -seriesModel.get('startAngle') * RADIAN;

	            var minAngle = seriesModel.get('minAngle') * RADIAN;

	            var sum = data.getSum('value');
	            // Sum may be 0
	            var unitRadian = Math.PI / (sum || data.count()) * 2;

	            var clockwise = seriesModel.get('clockwise');

	            var roseType = seriesModel.get('roseType');

	            // [0...max]
	            var extent = data.getDataExtent('value');
	            extent[0] = 0;

	            // In the case some sector angle is smaller than minAngle
	            var restAngle = PI2;
	            var valueSumLargerThanMinAngle = 0;

	            var currentAngle = startAngle;

	            var dir = clockwise ? 1 : -1;
	            data.each('value', function (value, idx) {
	                var angle;
	                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
	                if (roseType !== 'area') {
	                    angle = sum === 0 ? unitRadian : (value * unitRadian);
	                }
	                else {
	                    angle = PI2 / (data.count() || 1);
	                }

	                if (angle < minAngle) {
	                    angle = minAngle;
	                    restAngle -= minAngle;
	                }
	                else {
	                    valueSumLargerThanMinAngle += value;
	                }

	                var endAngle = currentAngle + dir * angle;
	                data.setItemLayout(idx, {
	                    angle: angle,
	                    startAngle: currentAngle,
	                    endAngle: endAngle,
	                    clockwise: clockwise,
	                    cx: cx,
	                    cy: cy,
	                    r0: r0,
	                    r: roseType
	                        ? numberUtil.linearMap(value, extent, [r0, r])
	                        : r
	                });

	                currentAngle = endAngle;
	            }, true);

	            // Some sector is constrained by minAngle
	            // Rest sectors needs recalculate angle
	            if (restAngle < PI2) {
	                // Average the angle if rest angle is not enough after all angles is
	                // Constrained by minAngle
	                if (restAngle <= 1e-3) {
	                    var angle = PI2 / data.count();
	                    data.each(function (idx) {
	                        var layout = data.getItemLayout(idx);
	                        layout.startAngle = startAngle + dir * idx * angle;
	                        layout.endAngle = startAngle + dir * (idx + 1) * angle;
	                    });
	                }
	                else {
	                    unitRadian = restAngle / valueSumLargerThanMinAngle;
	                    currentAngle = startAngle;
	                    data.each('value', function (value, idx) {
	                        var layout = data.getItemLayout(idx);
	                        var angle = layout.angle === minAngle
	                            ? minAngle : value * unitRadian;
	                        layout.startAngle = currentAngle;
	                        layout.endAngle = currentAngle + dir * angle;
	                        currentAngle += angle;
	                    });
	                }
	            }

	            labelLayout(seriesModel, r, width, height);
	        });
	    };


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME emphasis label position is not same with normal label position


	    var textContain = __webpack_require__(122);

	    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	        list.sort(function (a, b) {
	            return a.y - b.y;
	        });

	        // 压
	        function shiftDown(start, end, delta, dir) {
	            for (var j = start; j < end; j++) {
	                list[j].y += delta;
	                if (j > start
	                    && j + 1 < end
	                    && list[j + 1].y > list[j].y + list[j].height
	                ) {
	                    shiftUp(j, delta / 2);
	                    return;
	                }
	            }

	            shiftUp(end - 1, delta / 2);
	        }

	        // 弹
	        function shiftUp(end, delta) {
	            for (var j = end; j >= 0; j--) {
	                list[j].y -= delta;
	                if (j > 0
	                    && list[j].y > list[j - 1].y + list[j - 1].height
	                ) {
	                    break;
	                }
	            }
	        }

	        function changeX(list, isDownList, cx, cy, r, dir) {
	            var lastDeltaX = dir > 0
	                ? isDownList                // 右侧
	                    ? Number.MAX_VALUE      // 下
	                    : 0                     // 上
	                : isDownList                // 左侧
	                    ? Number.MAX_VALUE      // 下
	                    : 0;                    // 上

	            for (var i = 0, l = list.length; i < l; i++) {
	                // Not change x for center label
	                if (list[i].position === 'center') {
	                    continue;
	                }
	                var deltaY = Math.abs(list[i].y - cy);
	                var length = list[i].len;
	                var length2 = list[i].len2;
	                var deltaX = (deltaY < r + length)
	                    ? Math.sqrt(
	                          (r + length + length2) * (r + length + length2)
	                          - deltaY * deltaY
	                      )
	                    : Math.abs(list[i].x - cx);
	                if (isDownList && deltaX >= lastDeltaX) {
	                    // 右下，左下
	                    deltaX = lastDeltaX - 10;
	                }
	                if (!isDownList && deltaX <= lastDeltaX) {
	                    // 右上，左上
	                    deltaX = lastDeltaX + 10;
	                }

	                list[i].x = cx + deltaX * dir;
	                lastDeltaX = deltaX;
	            }
	        }

	        var lastY = 0;
	        var delta;
	        var len = list.length;
	        var upList = [];
	        var downList = [];
	        for (var i = 0; i < len; i++) {
	            delta = list[i].y - lastY;
	            if (delta < 0) {
	                shiftDown(i, len, -delta, dir);
	            }
	            lastY = list[i].y + list[i].height;
	        }
	        if (viewHeight - lastY < 0) {
	            shiftUp(len - 1, lastY - viewHeight);
	        }
	        for (var i = 0; i < len; i++) {
	            if (list[i].y >= cy) {
	                downList.push(list[i]);
	            }
	            else {
	                upList.push(list[i]);
	            }
	        }
	        changeX(upList, false, cx, cy, r, dir);
	        changeX(downList, true, cx, cy, r, dir);
	    }

	    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	        var leftList = [];
	        var rightList = [];
	        for (var i = 0; i < labelLayoutList.length; i++) {
	            if (labelLayoutList[i].x < cx) {
	                leftList.push(labelLayoutList[i]);
	            }
	            else {
	                rightList.push(labelLayoutList[i]);
	            }
	        }

	        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);

	        for (var i = 0; i < labelLayoutList.length; i++) {
	            var linePoints = labelLayoutList[i].linePoints;
	            if (linePoints) {
	                var dist = linePoints[1][0] - linePoints[2][0];
	                if (labelLayoutList[i].x < cx) {
	                    linePoints[2][0] = labelLayoutList[i].x + 3;
	                }
	                else {
	                    linePoints[2][0] = labelLayoutList[i].x - 3;
	                }
	                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	                linePoints[1][0] = linePoints[2][0] + dist;
	            }
	        }
	    }

	    module.exports = function (seriesModel, r, viewWidth, viewHeight) {
	        var data = seriesModel.getData();
	        var labelLayoutList = [];
	        var cx;
	        var cy;
	        var hasLabelRotate = false;

	        data.each(function (idx) {
	            var layout = data.getItemLayout(idx);

	            var itemModel = data.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            // Use position in normal or emphasis
	            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');

	            var labelLineModel = itemModel.getModel('labelLine.normal');
	            var labelLineLen = labelLineModel.get('length');
	            var labelLineLen2 = labelLineModel.get('length2');

	            var midAngle = (layout.startAngle + layout.endAngle) / 2;
	            var dx = Math.cos(midAngle);
	            var dy = Math.sin(midAngle);

	            var textX;
	            var textY;
	            var linePoints;
	            var textAlign;

	            cx = layout.cx;
	            cy = layout.cy;

	            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	            if (labelPosition === 'center') {
	                textX = layout.cx;
	                textY = layout.cy;
	                textAlign = 'center';
	            }
	            else {
	                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;

	                textX = x1 + dx * 3;
	                textY = y1 + dy * 3;

	                if (!isLabelInside) {
	                    // For roseType
	                    var x2 = x1 + dx * (labelLineLen + r - layout.r);
	                    var y2 = y1 + dy * (labelLineLen + r - layout.r);
	                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);
	                    var y3 = y2;

	                    textX = x3 + (dx < 0 ? -5 : 5);
	                    textY = y3;
	                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	                }

	                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');
	            }
	            var font = labelModel.getModel('textStyle').getFont();

	            var labelRotate = labelModel.get('rotate')
	                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;
	            var text = seriesModel.getFormattedLabel(idx, 'normal')
	                        || data.getName(idx);
	            var textRect = textContain.getBoundingRect(
	                text, font, textAlign, 'top'
	            );
	            hasLabelRotate = !!labelRotate;
	            layout.label = {
	                x: textX,
	                y: textY,
	                position: labelPosition,
	                height: textRect.height,
	                len: labelLineLen,
	                len2: labelLineLen2,
	                linePoints: linePoints,
	                textAlign: textAlign,
	                verticalAlign: 'middle',
	                font: font,
	                rotation: labelRotate
	            };

	            // Not layout the inside label
	            if (!isLabelInside) {
	                labelLayoutList.push(layout.label);
	            }
	        });
	        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	        }
	    };


/***/ },
/* 258 */
/***/ function(module, exports) {

	
	    module.exports = function (seriesType, ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (!legendModels || !legendModels.length) {
	            return;
	        }
	        ecModel.eachSeriesByType(seriesType, function (series) {
	            var data = series.getData();
	            data.filterSelf(function (idx) {
	                var name = data.getName(idx);
	                // If in any legend component the status is not selected.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(name)) {
	                        return false;
	                    }
	                }
	                return true;
	            }, this);
	        }, this);
	    };


/***/ },
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Bootstrap v3.3.4 (http://getbootstrap.com)
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 */
	var jQuery = __webpack_require__(2);
	if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.4",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a(f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.4",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?a=!1:b.find(".active").removeClass("active")),a&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active"));a&&this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),c.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.4",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));return a>this.$items.length-1||0>a?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.4",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){b&&3===b.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=c(d),f={relatedTarget:this};e.hasClass("open")&&(e.trigger(b=a.Event("hide.bs.dropdown",f)),b.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger("hidden.bs.dropdown",f)))}))}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.4",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger("shown.bs.dropdown",h)}return!1}},g.prototype.keydown=function(b){if(/(38|40|27|32)/.test(b.which)&&!/input|textarea/i.test(b.target.tagName)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var e=c(d),g=e.hasClass("open");if(!g&&27!=b.which||g&&27==b.which)return 27==b.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find('[role="menu"]'+h+', [role="listbox"]'+h);if(i.length){var j=i.index(b.target);38==b.which&&j>0&&j--,40==b.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="menu"]',g.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="listbox"]',g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.4",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in").attr("aria-hidden",!1),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a('<div class="modal-backdrop '+e+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.init("tooltip",a,b)};c.VERSION="3.3.4",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(this.options.viewport.selector||this.options.viewport),this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c&&c.$tip&&c.$tip.is(":visible")?void(c.hoverState="in"):(c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.options.container?a(this.options.container):this.$element.parent(),p=this.getPosition(o);h="bottom"==h&&k.bottom+m>p.bottom?"top":"top"==h&&k.top-m<p.top?"bottom":"right"==h&&k.right+l>p.width?"left":"left"==h&&k.left-l<p.left?"right":h,f.removeClass(n).addClass(h)}var q=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(q,h);var r=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",r).emulateTransitionEnd(c.TRANSITION_DURATION):r()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top=b.top+g,b.left=b.left+h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);return this.$element.trigger(g),g.isDefaultPrevented()?void 0:(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=d?{top:0,left:0}:b.offset(),g={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},h=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,g,h,f)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.width&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type)})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.4",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.4",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.4",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){
	var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.4",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return c>e?"top":!1;if("bottom"==this.affixed)return null!=c?e+this.unpin<=f.top?!1:"bottom":a-d>=e+g?!1:"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&c>=e?"top":null!=d&&i+j>=a-d?"bottom":!1},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=a(document.body).height();"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * metismenu - v1.1.3
	 * Easy menu jQuery plugin for Twitter Bootstrap 3
	 * https://github.com/onokumus/metisMenu
	 *
	 * Made by Osman Nuri Okumus
	 * Under MIT License
	 */
	 var jQuery = __webpack_require__(2);
	!function(a,b,c){function d(b,c){this.element=a(b),this.settings=a.extend({},f,c),this._defaults=f,this._name=e,this.init()}var e="metisMenu",f={toggle:!0,doubleTapToGo:!1};d.prototype={init:function(){var b=this.element,d=this.settings.toggle,f=this;this.isIE()<=9?(b.find("li.active").has("ul").children("ul").collapse("show"),b.find("li").not(".active").has("ul").children("ul").collapse("hide")):(b.find("li.active").has("ul").children("ul").addClass("collapse in"),b.find("li").not(".active").has("ul").children("ul").addClass("collapse")),f.settings.doubleTapToGo&&b.find("li.active").has("ul").children("a").addClass("doubleTapToGo"),b.find("li").has("ul").children("a").on("click."+e,function(b){return b.preventDefault(),f.settings.doubleTapToGo&&f.doubleTapToGo(a(this))&&"#"!==a(this).attr("href")&&""!==a(this).attr("href")?(b.stopPropagation(),void(c.location=a(this).attr("href"))):(a(this).parent("li").toggleClass("active").children("ul").collapse("toggle"),void(d&&a(this).parent("li").siblings().removeClass("active").children("ul.in").collapse("hide")))})},isIE:function(){for(var a,b=3,d=c.createElement("div"),e=d.getElementsByTagName("i");d.innerHTML="<!--[if gt IE "+ ++b+"]><i></i><![endif]-->",e[0];)return b>4?b:a},doubleTapToGo:function(a){var b=this.element;return a.hasClass("doubleTapToGo")?(a.removeClass("doubleTapToGo"),!0):a.parent().children("ul").length?(b.find(".doubleTapToGo").removeClass("doubleTapToGo"),a.addClass("doubleTapToGo"),!1):void 0},remove:function(){this.element.off("."+e),this.element.removeData(e)}},a.fn[e]=function(b){return this.each(function(){var c=a(this);c.data(e)&&c.data(e).remove(),c.data(e,new d(this,b))}),this}}(jQuery,window,document);

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.12.0
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	!function(a,b){ true?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Zc.apply(null,arguments)}function b(a){Zc=a}function c(a){return a instanceof Array||"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ia(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow<0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a){return void 0===a}function n(a,b){var c,d,e;if(m(b._isAMomentObject)||(a._isAMomentObject=b._isAMomentObject),m(b._i)||(a._i=b._i),m(b._f)||(a._f=b._f),m(b._l)||(a._l=b._l),m(b._strict)||(a._strict=b._strict),m(b._tzm)||(a._tzm=b._tzm),m(b._isUTC)||(a._isUTC=b._isUTC),m(b._offset)||(a._offset=b._offset),m(b._pf)||(a._pf=j(b)),m(b._locale)||(a._locale=b._locale),$c.length>0)for(c in $c)d=$c[c],e=b[d],m(e)||(a[d]=e);return a}function o(b){n(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),_c===!1&&(_c=!0,a.updateOffset(this),_c=!1)}function p(a){return a instanceof o||null!=a&&null!=a._isAMomentObject}function q(a){return 0>a?Math.ceil(a):Math.floor(a)}function r(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=q(b)),c}function s(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&r(a[d])!==r(b[d]))&&g++;return g+f}function t(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn()}function u(a,b){var c=!0;return g(function(){return c&&(t(a+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function v(a,b){ad[a]||(t(b),ad[a]=!0)}function w(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}function x(a){return"[object Object]"===Object.prototype.toString.call(a)}function y(a){var b,c;for(c in a)b=a[c],w(b)?this[c]=b:this["_"+c]=b;this._config=a,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function z(a,b){var c,d=g({},a);for(c in b)f(b,c)&&(x(a[c])&&x(b[c])?(d[c]={},g(d[c],a[c]),g(d[c],b[c])):null!=b[c]?d[c]=b[c]:delete d[c]);return d}function A(a){null!=a&&this.set(a)}function B(a){return a?a.toLowerCase().replace("_","-"):a}function C(a){for(var b,c,d,e,f=0;f<a.length;){for(e=B(a[f]).split("-"),b=e.length,c=B(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=D(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&s(e,c,!0)>=b-1)break;b--}f++}return null}function D(a){var b=null;if(!cd[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=bd._abbr,!(function webpackMissingModule() { var e = new Error("Cannot find module \"./locale\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()),E(b)}catch(c){}return cd[a]}function E(a,b){var c;return a&&(c=m(b)?H(a):F(a,b),c&&(bd=c)),bd._abbr}function F(a,b){return null!==b?(b.abbr=a,null!=cd[a]?(v("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),b=z(cd[a]._config,b)):null!=b.parentLocale&&(null!=cd[b.parentLocale]?b=z(cd[b.parentLocale]._config,b):v("parentLocaleUndefined","specified parentLocale is not defined yet")),cd[a]=new A(b),E(a),cd[a]):(delete cd[a],null)}function G(a,b){if(null!=b){var c;null!=cd[a]&&(b=z(cd[a]._config,b)),c=new A(b),c.parentLocale=cd[a],cd[a]=c,E(a)}else null!=cd[a]&&(null!=cd[a].parentLocale?cd[a]=cd[a].parentLocale:null!=cd[a]&&delete cd[a]);return cd[a]}function H(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return bd;if(!c(a)){if(b=D(a))return b;a=[a]}return C(a)}function I(){return Object.keys(cd)}function J(a,b){var c=a.toLowerCase();dd[c]=dd[c+"s"]=dd[b]=a}function K(a){return"string"==typeof a?dd[a]||dd[a.toLowerCase()]:void 0}function L(a){var b,c,d={};for(c in a)f(a,c)&&(b=K(c),b&&(d[b]=a[c]));return d}function M(b,c){return function(d){return null!=d?(O(this,b,d),a.updateOffset(this,c),this):N(this,b)}}function N(a,b){return a.isValid()?a._d["get"+(a._isUTC?"UTC":"")+b]():NaN}function O(a,b,c){a.isValid()&&a._d["set"+(a._isUTC?"UTC":"")+b](c)}function P(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=K(a),w(this[a]))return this[a](b);return this}function Q(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function R(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(hd[a]=e),b&&(hd[b[0]]=function(){return Q(e.apply(this,arguments),b[1],b[2])}),c&&(hd[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function S(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function T(a){var b,c,d=a.match(ed);for(b=0,c=d.length;c>b;b++)hd[d[b]]?d[b]=hd[d[b]]:d[b]=S(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function U(a,b){return a.isValid()?(b=V(b,a.localeData()),gd[b]=gd[b]||T(b),gd[b](a)):a.localeData().invalidDate()}function V(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(fd.lastIndex=0;d>=0&&fd.test(a);)a=a.replace(fd,c),fd.lastIndex=0,d-=1;return a}function W(a,b,c){zd[a]=w(b)?b:function(a,d){return a&&c?c:b}}function X(a,b){return f(zd,a)?zd[a](b._strict,b._locale):new RegExp(Y(a))}function Y(a){return Z(a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}))}function Z(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function $(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=r(a)}),c=0;c<a.length;c++)Ad[a[c]]=d}function _(a,b){$(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function aa(a,b,c){null!=b&&f(Ad,a)&&Ad[a](b,c._a,c,a)}function ba(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function ca(a,b){return c(this._months)?this._months[a.month()]:this._months[Kd.test(b)?"format":"standalone"][a.month()]}function da(a,b){return c(this._monthsShort)?this._monthsShort[a.month()]:this._monthsShort[Kd.test(b)?"format":"standalone"][a.month()]}function ea(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function fa(a,b){var c;if(!a.isValid())return a;if("string"==typeof b)if(/^\d+$/.test(b))b=r(b);else if(b=a.localeData().monthsParse(b),"number"!=typeof b)return a;return c=Math.min(a.date(),ba(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a}function ga(b){return null!=b?(fa(this,b),a.updateOffset(this,!0),this):N(this,"Month")}function ha(){return ba(this.year(),this.month())}function ia(a){return this._monthsParseExact?(f(this,"_monthsRegex")||ka.call(this),a?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&a?this._monthsShortStrictRegex:this._monthsShortRegex}function ja(a){return this._monthsParseExact?(f(this,"_monthsRegex")||ka.call(this),a?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&a?this._monthsStrictRegex:this._monthsRegex}function ka(){function a(a,b){return b.length-a.length}var b,c,d=[],e=[],f=[];for(b=0;12>b;b++)c=h([2e3,b]),d.push(this.monthsShort(c,"")),e.push(this.months(c,"")),f.push(this.months(c,"")),f.push(this.monthsShort(c,""));for(d.sort(a),e.sort(a),f.sort(a),b=0;12>b;b++)d[b]=Z(d[b]),e[b]=Z(e[b]),f[b]=Z(f[b]);this._monthsRegex=new RegExp("^("+f.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+e.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+d.join("|")+")$","i")}function la(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[Cd]<0||c[Cd]>11?Cd:c[Dd]<1||c[Dd]>ba(c[Bd],c[Cd])?Dd:c[Ed]<0||c[Ed]>24||24===c[Ed]&&(0!==c[Fd]||0!==c[Gd]||0!==c[Hd])?Ed:c[Fd]<0||c[Fd]>59?Fd:c[Gd]<0||c[Gd]>59?Gd:c[Hd]<0||c[Hd]>999?Hd:-1,j(a)._overflowDayOfYear&&(Bd>b||b>Dd)&&(b=Dd),j(a)._overflowWeeks&&-1===b&&(b=Id),j(a)._overflowWeekday&&-1===b&&(b=Jd),j(a).overflow=b),a}function ma(a){var b,c,d,e,f,g,h=a._i,i=Pd.exec(h)||Qd.exec(h);if(i){for(j(a).iso=!0,b=0,c=Sd.length;c>b;b++)if(Sd[b][1].exec(i[1])){e=Sd[b][0],d=Sd[b][2]!==!1;break}if(null==e)return void(a._isValid=!1);if(i[3]){for(b=0,c=Td.length;c>b;b++)if(Td[b][1].exec(i[3])){f=(i[2]||" ")+Td[b][0];break}if(null==f)return void(a._isValid=!1)}if(!d&&null!=f)return void(a._isValid=!1);if(i[4]){if(!Rd.exec(i[4]))return void(a._isValid=!1);g="Z"}a._f=e+(f||"")+(g||""),Ba(a)}else a._isValid=!1}function na(b){var c=Ud.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ma(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function oa(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 100>a&&a>=0&&isFinite(h.getFullYear())&&h.setFullYear(a),h}function pa(a){var b=new Date(Date.UTC.apply(null,arguments));return 100>a&&a>=0&&isFinite(b.getUTCFullYear())&&b.setUTCFullYear(a),b}function qa(a){return ra(a)?366:365}function ra(a){return a%4===0&&a%100!==0||a%400===0}function sa(){return ra(this.year())}function ta(a,b,c){var d=7+b-c,e=(7+pa(a,0,d).getUTCDay()-b)%7;return-e+d-1}function ua(a,b,c,d,e){var f,g,h=(7+c-d)%7,i=ta(a,d,e),j=1+7*(b-1)+h+i;return 0>=j?(f=a-1,g=qa(f)+j):j>qa(a)?(f=a+1,g=j-qa(a)):(f=a,g=j),{year:f,dayOfYear:g}}function va(a,b,c){var d,e,f=ta(a.year(),b,c),g=Math.floor((a.dayOfYear()-f-1)/7)+1;return 1>g?(e=a.year()-1,d=g+wa(e,b,c)):g>wa(a.year(),b,c)?(d=g-wa(a.year(),b,c),e=a.year()+1):(e=a.year(),d=g),{week:d,year:e}}function wa(a,b,c){var d=ta(a,b,c),e=ta(a+1,b,c);return(qa(a)-d+e)/7}function xa(a,b,c){return null!=a?a:null!=b?b:c}function ya(b){var c=new Date(a.now());return b._useUTC?[c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()]:[c.getFullYear(),c.getMonth(),c.getDate()]}function za(a){var b,c,d,e,f=[];if(!a._d){for(d=ya(a),a._w&&null==a._a[Dd]&&null==a._a[Cd]&&Aa(a),a._dayOfYear&&(e=xa(a._a[Bd],d[Bd]),a._dayOfYear>qa(e)&&(j(a)._overflowDayOfYear=!0),c=pa(e,0,a._dayOfYear),a._a[Cd]=c.getUTCMonth(),a._a[Dd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[Ed]&&0===a._a[Fd]&&0===a._a[Gd]&&0===a._a[Hd]&&(a._nextDay=!0,a._a[Ed]=0),a._d=(a._useUTC?pa:oa).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[Ed]=24)}}function Aa(a){var b,c,d,e,f,g,h,i;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=xa(b.GG,a._a[Bd],va(Ja(),1,4).year),d=xa(b.W,1),e=xa(b.E,1),(1>e||e>7)&&(i=!0)):(f=a._locale._week.dow,g=a._locale._week.doy,c=xa(b.gg,a._a[Bd],va(Ja(),f,g).year),d=xa(b.w,1),null!=b.d?(e=b.d,(0>e||e>6)&&(i=!0)):null!=b.e?(e=b.e+f,(b.e<0||b.e>6)&&(i=!0)):e=f),1>d||d>wa(c,f,g)?j(a)._overflowWeeks=!0:null!=i?j(a)._overflowWeekday=!0:(h=ua(c,d,e,f,g),a._a[Bd]=h.year,a._dayOfYear=h.dayOfYear)}function Ba(b){if(b._f===a.ISO_8601)return void ma(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=V(b._f,b._locale).match(ed)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(X(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),hd[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),aa(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[Ed]<=12&&b._a[Ed]>0&&(j(b).bigHour=void 0),b._a[Ed]=Ca(b._locale,b._a[Ed],b._meridiem),za(b),la(b)}function Ca(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function Da(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=n({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],Ba(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function Ea(a){if(!a._d){var b=L(a._i);a._a=e([b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],function(a){return a&&parseInt(a,10)}),za(a)}}function Fa(a){var b=new o(la(Ga(a)));return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function Ga(a){var b=a._i,e=a._f;return a._locale=a._locale||H(a._l),null===b||void 0===e&&""===b?l({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),p(b)?new o(la(b)):(c(e)?Da(a):e?Ba(a):d(b)?a._d=b:Ha(a),k(a)||(a._d=null),a))}function Ha(b){var f=b._i;void 0===f?b._d=new Date(a.now()):d(f)?b._d=new Date(+f):"string"==typeof f?na(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),za(b)):"object"==typeof f?Ea(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ia(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,Fa(f)}function Ja(a,b,c,d){return Ia(a,b,c,d,!1)}function Ka(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Ja();for(d=b[0],e=1;e<b.length;++e)(!b[e].isValid()||b[e][a](d))&&(d=b[e]);return d}function La(){var a=[].slice.call(arguments,0);return Ka("isBefore",a)}function Ma(){var a=[].slice.call(arguments,0);return Ka("isAfter",a)}function Na(a){var b=L(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=H(),this._bubble()}function Oa(a){return a instanceof Na}function Pa(a,b){R(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+Q(~~(a/60),2)+b+Q(~~a%60,2)})}function Qa(a,b){var c=(b||"").match(a)||[],d=c[c.length-1]||[],e=(d+"").match(Zd)||["-",0,0],f=+(60*e[1])+r(e[2]);return"+"===e[0]?f:-f}function Ra(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(p(b)||d(b)?+b:+Ja(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Ja(b).local()}function Sa(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Ta(b,c){var d,e=this._offset||0;return this.isValid()?null!=b?("string"==typeof b?b=Qa(wd,b):Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Sa(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?ib(this,cb(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Sa(this):null!=b?this:NaN}function Ua(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Va(a){return this.utcOffset(0,a)}function Wa(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Sa(this),"m")),this}function Xa(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Qa(vd,this._i)),this}function Ya(a){return this.isValid()?(a=a?Ja(a).utcOffset():0,(this.utcOffset()-a)%60===0):!1}function Za(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function $a(){if(!m(this._isDSTShifted))return this._isDSTShifted;var a={};if(n(a,this),a=Ga(a),a._a){var b=a._isUTC?h(a._a):Ja(a._a);this._isDSTShifted=this.isValid()&&s(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function _a(){return this.isValid()?!this._isUTC:!1}function ab(){return this.isValid()?this._isUTC:!1}function bb(){return this.isValid()?this._isUTC&&0===this._offset:!1}function cb(a,b){var c,d,e,g=a,h=null;return Oa(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=$d.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:r(h[Dd])*c,h:r(h[Ed])*c,m:r(h[Fd])*c,s:r(h[Gd])*c,ms:r(h[Hd])*c}):(h=_d.exec(a))?(c="-"===h[1]?-1:1,g={y:db(h[2],c),M:db(h[3],c),w:db(h[4],c),d:db(h[5],c),h:db(h[6],c),m:db(h[7],c),s:db(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=fb(Ja(g.from),Ja(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Na(g),Oa(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function db(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function eb(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function fb(a,b){var c;return a.isValid()&&b.isValid()?(b=Ra(b,a),a.isBefore(b)?c=eb(a,b):(c=eb(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0}}function gb(a){return 0>a?-1*Math.round(-1*a):Math.round(a)}function hb(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(v(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=cb(c,d),ib(this,e,a),this}}function ib(b,c,d,e){var f=c._milliseconds,g=gb(c._days),h=gb(c._months);b.isValid()&&(e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&O(b,"Date",N(b,"Date")+g*d),h&&fa(b,N(b,"Month")+h*d),e&&a.updateOffset(b,g||h))}function jb(a,b){var c=a||Ja(),d=Ra(c,this).startOf("day"),e=this.diff(d,"days",!0),f=-6>e?"sameElse":-1>e?"lastWeek":0>e?"lastDay":1>e?"sameDay":2>e?"nextDay":7>e?"nextWeek":"sameElse",g=b&&(w(b[f])?b[f]():b[f]);return this.format(g||this.localeData().calendar(f,this,Ja(c)))}function kb(){return new o(this)}function lb(a,b){var c=p(a)?a:Ja(a);return this.isValid()&&c.isValid()?(b=K(m(b)?"millisecond":b),"millisecond"===b?+this>+c:+c<+this.clone().startOf(b)):!1}function mb(a,b){var c=p(a)?a:Ja(a);return this.isValid()&&c.isValid()?(b=K(m(b)?"millisecond":b),"millisecond"===b?+c>+this:+this.clone().endOf(b)<+c):!1}function nb(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function ob(a,b){var c,d=p(a)?a:Ja(a);return this.isValid()&&d.isValid()?(b=K(b||"millisecond"),"millisecond"===b?+this===+d:(c=+d,+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))):!1}function pb(a,b){return this.isSame(a,b)||this.isAfter(a,b)}function qb(a,b){return this.isSame(a,b)||this.isBefore(a,b)}function rb(a,b,c){var d,e,f,g;return this.isValid()?(d=Ra(a,this),d.isValid()?(e=6e4*(d.utcOffset()-this.utcOffset()),b=K(b),"year"===b||"month"===b||"quarter"===b?(g=sb(this,d),"quarter"===b?g/=3:"year"===b&&(g/=12)):(f=this-d,g="second"===b?f/1e3:"minute"===b?f/6e4:"hour"===b?f/36e5:"day"===b?(f-e)/864e5:"week"===b?(f-e)/6048e5:f),c?g:q(g)):NaN):NaN}function sb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function tb(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ub(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?w(Date.prototype.toISOString)?this.toDate().toISOString():U(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):U(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function vb(b){var c=U(this,b||a.defaultFormat);return this.localeData().postformat(c)}function wb(a,b){return this.isValid()&&(p(a)&&a.isValid()||Ja(a).isValid())?cb({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function xb(a){return this.from(Ja(),a)}function yb(a,b){return this.isValid()&&(p(a)&&a.isValid()||Ja(a).isValid())?cb({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function zb(a){return this.to(Ja(),a)}function Ab(a){var b;return void 0===a?this._locale._abbr:(b=H(a),null!=b&&(this._locale=b),this)}function Bb(){return this._locale}function Cb(a){switch(a=K(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function Db(a){return a=K(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function Eb(){return+this._d-6e4*(this._offset||0)}function Fb(){return Math.floor(+this/1e3)}function Gb(){return this._offset?new Date(+this):this._d}function Hb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function Ib(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Jb(){return this.isValid()?this.toISOString():null}function Kb(){return k(this)}function Lb(){return g({},j(this))}function Mb(){return j(this).overflow}function Nb(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Ob(a,b){R(0,[a,a.length],0,b)}function Pb(a){return Tb.call(this,a,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Qb(a){return Tb.call(this,a,this.isoWeek(),this.isoWeekday(),1,4)}function Rb(){return wa(this.year(),1,4)}function Sb(){var a=this.localeData()._week;return wa(this.year(),a.dow,a.doy)}function Tb(a,b,c,d,e){var f;return null==a?va(this,d,e).year:(f=wa(a,d,e),b>f&&(b=f),Ub.call(this,a,b,c,d,e))}function Ub(a,b,c,d,e){var f=ua(a,b,c,d,e),g=pa(f.year,0,f.dayOfYear);return this.year(g.getUTCFullYear()),this.month(g.getUTCMonth()),this.date(g.getUTCDate()),this}function Vb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Wb(a){return va(a,this._week.dow,this._week.doy).week}function Xb(){return this._week.dow}function Yb(){return this._week.doy}function Zb(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function $b(a){var b=va(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function _b(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function ac(a,b){return c(this._weekdays)?this._weekdays[a.day()]:this._weekdays[this._weekdays.isFormat.test(b)?"format":"standalone"][a.day()]}function bc(a){return this._weekdaysShort[a.day()]}function cc(a){return this._weekdaysMin[a.day()]}function dc(a,b,c){var d,e,f;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),d=0;7>d;d++){if(e=Ja([2e3,1]).day(d),c&&!this._fullWeekdaysParse[d]&&(this._fullWeekdaysParse[d]=new RegExp("^"+this.weekdays(e,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[d]=new RegExp("^"+this.weekdaysShort(e,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[d]=new RegExp("^"+this.weekdaysMin(e,"").replace(".",".?")+"$","i")),this._weekdaysParse[d]||(f="^"+this.weekdays(e,"")+"|^"+this.weekdaysShort(e,"")+"|^"+this.weekdaysMin(e,""),this._weekdaysParse[d]=new RegExp(f.replace(".",""),"i")),c&&"dddd"===b&&this._fullWeekdaysParse[d].test(a))return d;if(c&&"ddd"===b&&this._shortWeekdaysParse[d].test(a))return d;if(c&&"dd"===b&&this._minWeekdaysParse[d].test(a))return d;if(!c&&this._weekdaysParse[d].test(a))return d}}function ec(a){if(!this.isValid())return null!=a?this:NaN;var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=_b(a,this.localeData()),this.add(a-b,"d")):b}function fc(a){if(!this.isValid())return null!=a?this:NaN;var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function gc(a){return this.isValid()?null==a?this.day()||7:this.day(this.day()%7?a:a-7):null!=a?this:NaN}function hc(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function ic(){return this.hours()%12||12}function jc(a,b){R(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function kc(a,b){return b._meridiemParse}function lc(a){return"p"===(a+"").toLowerCase().charAt(0)}function mc(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function nc(a,b){b[Hd]=r(1e3*("0."+a))}function oc(){return this._isUTC?"UTC":""}function pc(){return this._isUTC?"Coordinated Universal Time":""}function qc(a){return Ja(1e3*a)}function rc(){return Ja.apply(null,arguments).parseZone()}function sc(a,b,c){var d=this._calendar[a];return w(d)?d.call(b,c):d}function tc(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function uc(){return this._invalidDate}function vc(a){return this._ordinal.replace("%d",a)}function wc(a){return a}function xc(a,b,c,d){var e=this._relativeTime[c];return w(e)?e(a,b,c,d):e.replace(/%d/i,a)}function yc(a,b){var c=this._relativeTime[a>0?"future":"past"];return w(c)?c(b):c.replace(/%s/i,b)}function zc(a,b,c,d){var e=H(),f=h().set(d,b);return e[c](f,a)}function Ac(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return zc(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=zc(a,f,c,e);return g}function Bc(a,b){return Ac(a,b,"months",12,"month")}function Cc(a,b){return Ac(a,b,"monthsShort",12,"month")}function Dc(a,b){return Ac(a,b,"weekdays",7,"day")}function Ec(a,b){return Ac(a,b,"weekdaysShort",7,"day")}function Fc(a,b){return Ac(a,b,"weekdaysMin",7,"day")}function Gc(){var a=this._data;return this._milliseconds=xe(this._milliseconds),this._days=xe(this._days),this._months=xe(this._months),a.milliseconds=xe(a.milliseconds),a.seconds=xe(a.seconds),a.minutes=xe(a.minutes),a.hours=xe(a.hours),a.months=xe(a.months),a.years=xe(a.years),this}function Hc(a,b,c,d){var e=cb(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function Ic(a,b){return Hc(this,a,b,1)}function Jc(a,b){return Hc(this,a,b,-1)}function Kc(a){return 0>a?Math.floor(a):Math.ceil(a)}function Lc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f>=0&&g>=0&&h>=0||0>=f&&0>=g&&0>=h||(f+=864e5*Kc(Nc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=q(f/1e3),i.seconds=a%60,b=q(a/60),i.minutes=b%60,c=q(b/60),i.hours=c%24,g+=q(c/24),e=q(Mc(g)),h+=e,g-=Kc(Nc(e)),d=q(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function Mc(a){return 4800*a/146097}function Nc(a){return 146097*a/4800}function Oc(a){var b,c,d=this._milliseconds;if(a=K(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+Mc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(Nc(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function Pc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*r(this._months/12)}function Qc(a){return function(){return this.as(a)}}function Rc(a){return a=K(a),this[a+"s"]()}function Sc(a){return function(){return this._data[a]}}function Tc(){return q(this.days()/7)}function Uc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Vc(a,b,c){var d=cb(a).abs(),e=Ne(d.as("s")),f=Ne(d.as("m")),g=Ne(d.as("h")),h=Ne(d.as("d")),i=Ne(d.as("M")),j=Ne(d.as("y")),k=e<Oe.s&&["s",e]||1>=f&&["m"]||f<Oe.m&&["mm",f]||1>=g&&["h"]||g<Oe.h&&["hh",g]||1>=h&&["d"]||h<Oe.d&&["dd",h]||1>=i&&["M"]||i<Oe.M&&["MM",i]||1>=j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,Uc.apply(null,k)}function Wc(a,b){return void 0===Oe[a]?!1:void 0===b?Oe[a]:(Oe[a]=b,!0)}function Xc(a){var b=this.localeData(),c=Vc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Yc(){var a,b,c,d=Pe(this._milliseconds)/1e3,e=Pe(this._days),f=Pe(this._months);a=q(d/60),b=q(a/60),d%=60,a%=60,c=q(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0>m?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}var Zc,$c=a.momentProperties=[],_c=!1,ad={};a.suppressDeprecationWarnings=!1;var bd,cd={},dd={},ed=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,fd=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,gd={},hd={},id=/\d/,jd=/\d\d/,kd=/\d{3}/,ld=/\d{4}/,md=/[+-]?\d{6}/,nd=/\d\d?/,od=/\d\d\d\d?/,pd=/\d\d\d\d\d\d?/,qd=/\d{1,3}/,rd=/\d{1,4}/,sd=/[+-]?\d{1,6}/,td=/\d+/,ud=/[+-]?\d+/,vd=/Z|[+-]\d\d:?\d\d/gi,wd=/Z|[+-]\d\d(?::?\d\d)?/gi,xd=/[+-]?\d+(\.\d{1,3})?/,yd=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,zd={},Ad={},Bd=0,Cd=1,Dd=2,Ed=3,Fd=4,Gd=5,Hd=6,Id=7,Jd=8;R("M",["MM",2],"Mo",function(){return this.month()+1}),R("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),R("MMMM",0,0,function(a){return this.localeData().months(this,a)}),J("month","M"),W("M",nd),W("MM",nd,jd),W("MMM",function(a,b){return b.monthsShortRegex(a)}),W("MMMM",function(a,b){return b.monthsRegex(a)}),$(["M","MM"],function(a,b){b[Cd]=r(a)-1}),$(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[Cd]=e:j(c).invalidMonth=a});var Kd=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Ld="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Md="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Nd=yd,Od=yd,Pd=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Qd=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Rd=/Z|[+-]\d\d(?::?\d\d)?/,Sd=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Td=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ud=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=u("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),R("Y",0,0,function(){var a=this.year();return 9999>=a?""+a:"+"+a}),R(0,["YY",2],0,function(){return this.year()%100}),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),J("year","y"),W("Y",ud),W("YY",nd,jd),W("YYYY",rd,ld),W("YYYYY",sd,md),W("YYYYYY",sd,md),$(["YYYYY","YYYYYY"],Bd),$("YYYY",function(b,c){c[Bd]=2===b.length?a.parseTwoDigitYear(b):r(b);
	}),$("YY",function(b,c){c[Bd]=a.parseTwoDigitYear(b)}),$("Y",function(a,b){b[Bd]=parseInt(a,10)}),a.parseTwoDigitYear=function(a){return r(a)+(r(a)>68?1900:2e3)};var Vd=M("FullYear",!1);a.ISO_8601=function(){};var Wd=u("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Ja.apply(null,arguments);return this.isValid()&&a.isValid()?this>a?this:a:l()}),Xd=u("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Ja.apply(null,arguments);return this.isValid()&&a.isValid()?a>this?this:a:l()}),Yd=function(){return Date.now?Date.now():+new Date};Pa("Z",":"),Pa("ZZ",""),W("Z",wd),W("ZZ",wd),$(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Qa(wd,a)});var Zd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var $d=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,_d=/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;cb.fn=Na.prototype;var ae=hb(1,"add"),be=hb(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var ce=u("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});R(0,["gg",2],0,function(){return this.weekYear()%100}),R(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ob("gggg","weekYear"),Ob("ggggg","weekYear"),Ob("GGGG","isoWeekYear"),Ob("GGGGG","isoWeekYear"),J("weekYear","gg"),J("isoWeekYear","GG"),W("G",ud),W("g",ud),W("GG",nd,jd),W("gg",nd,jd),W("GGGG",rd,ld),W("gggg",rd,ld),W("GGGGG",sd,md),W("ggggg",sd,md),_(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=r(a)}),_(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),R("Q",0,"Qo","quarter"),J("quarter","Q"),W("Q",id),$("Q",function(a,b){b[Cd]=3*(r(a)-1)}),R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),J("week","w"),J("isoWeek","W"),W("w",nd),W("ww",nd,jd),W("W",nd),W("WW",nd,jd),_(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=r(a)});var de={dow:0,doy:6};R("D",["DD",2],"Do","date"),J("date","D"),W("D",nd),W("DD",nd,jd),W("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),$(["D","DD"],Dd),$("Do",function(a,b){b[Dd]=r(a.match(nd)[0],10)});var ee=M("Date",!0);R("d",0,"do","day"),R("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),R("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),R("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),J("day","d"),J("weekday","e"),J("isoWeekday","E"),W("d",nd),W("e",nd),W("E",nd),W("dd",yd),W("ddd",yd),W("dddd",yd),_(["dd","ddd","dddd"],function(a,b,c,d){var e=c._locale.weekdaysParse(a,d,c._strict);null!=e?b.d=e:j(c).invalidWeekday=a}),_(["d","e","E"],function(a,b,c,d){b[d]=r(a)});var fe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ge="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),he="Su_Mo_Tu_We_Th_Fr_Sa".split("_");R("DDD",["DDDD",3],"DDDo","dayOfYear"),J("dayOfYear","DDD"),W("DDD",qd),W("DDDD",kd),$(["DDD","DDDD"],function(a,b,c){c._dayOfYear=r(a)}),R("H",["HH",2],0,"hour"),R("h",["hh",2],0,ic),R("hmm",0,0,function(){return""+ic.apply(this)+Q(this.minutes(),2)}),R("hmmss",0,0,function(){return""+ic.apply(this)+Q(this.minutes(),2)+Q(this.seconds(),2)}),R("Hmm",0,0,function(){return""+this.hours()+Q(this.minutes(),2)}),R("Hmmss",0,0,function(){return""+this.hours()+Q(this.minutes(),2)+Q(this.seconds(),2)}),jc("a",!0),jc("A",!1),J("hour","h"),W("a",kc),W("A",kc),W("H",nd),W("h",nd),W("HH",nd,jd),W("hh",nd,jd),W("hmm",od),W("hmmss",pd),W("Hmm",od),W("Hmmss",pd),$(["H","HH"],Ed),$(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),$(["h","hh"],function(a,b,c){b[Ed]=r(a),j(c).bigHour=!0}),$("hmm",function(a,b,c){var d=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d)),j(c).bigHour=!0}),$("hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d,2)),b[Gd]=r(a.substr(e)),j(c).bigHour=!0}),$("Hmm",function(a,b,c){var d=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d))}),$("Hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d,2)),b[Gd]=r(a.substr(e))});var ie=/[ap]\.?m?\.?/i,je=M("Hours",!0);R("m",["mm",2],0,"minute"),J("minute","m"),W("m",nd),W("mm",nd,jd),$(["m","mm"],Fd);var ke=M("Minutes",!1);R("s",["ss",2],0,"second"),J("second","s"),W("s",nd),W("ss",nd,jd),$(["s","ss"],Gd);var le=M("Seconds",!1);R("S",0,0,function(){return~~(this.millisecond()/100)}),R(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,function(){return 10*this.millisecond()}),R(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),R(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),R(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),R(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),R(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),J("millisecond","ms"),W("S",qd,id),W("SS",qd,jd),W("SSS",qd,kd);var me;for(me="SSSS";me.length<=9;me+="S")W(me,td);for(me="S";me.length<=9;me+="S")$(me,nc);var ne=M("Milliseconds",!1);R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var oe=o.prototype;oe.add=ae,oe.calendar=jb,oe.clone=kb,oe.diff=rb,oe.endOf=Db,oe.format=vb,oe.from=wb,oe.fromNow=xb,oe.to=yb,oe.toNow=zb,oe.get=P,oe.invalidAt=Mb,oe.isAfter=lb,oe.isBefore=mb,oe.isBetween=nb,oe.isSame=ob,oe.isSameOrAfter=pb,oe.isSameOrBefore=qb,oe.isValid=Kb,oe.lang=ce,oe.locale=Ab,oe.localeData=Bb,oe.max=Xd,oe.min=Wd,oe.parsingFlags=Lb,oe.set=P,oe.startOf=Cb,oe.subtract=be,oe.toArray=Hb,oe.toObject=Ib,oe.toDate=Gb,oe.toISOString=ub,oe.toJSON=Jb,oe.toString=tb,oe.unix=Fb,oe.valueOf=Eb,oe.creationData=Nb,oe.year=Vd,oe.isLeapYear=sa,oe.weekYear=Pb,oe.isoWeekYear=Qb,oe.quarter=oe.quarters=Vb,oe.month=ga,oe.daysInMonth=ha,oe.week=oe.weeks=Zb,oe.isoWeek=oe.isoWeeks=$b,oe.weeksInYear=Sb,oe.isoWeeksInYear=Rb,oe.date=ee,oe.day=oe.days=ec,oe.weekday=fc,oe.isoWeekday=gc,oe.dayOfYear=hc,oe.hour=oe.hours=je,oe.minute=oe.minutes=ke,oe.second=oe.seconds=le,oe.millisecond=oe.milliseconds=ne,oe.utcOffset=Ta,oe.utc=Va,oe.local=Wa,oe.parseZone=Xa,oe.hasAlignedHourOffset=Ya,oe.isDST=Za,oe.isDSTShifted=$a,oe.isLocal=_a,oe.isUtcOffset=ab,oe.isUtc=bb,oe.isUTC=bb,oe.zoneAbbr=oc,oe.zoneName=pc,oe.dates=u("dates accessor is deprecated. Use date instead.",ee),oe.months=u("months accessor is deprecated. Use month instead",ga),oe.years=u("years accessor is deprecated. Use year instead",Vd),oe.zone=u("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Ua);var pe=oe,qe={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},re={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},se="Invalid date",te="%d",ue=/\d{1,2}/,ve={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},we=A.prototype;we._calendar=qe,we.calendar=sc,we._longDateFormat=re,we.longDateFormat=tc,we._invalidDate=se,we.invalidDate=uc,we._ordinal=te,we.ordinal=vc,we._ordinalParse=ue,we.preparse=wc,we.postformat=wc,we._relativeTime=ve,we.relativeTime=xc,we.pastFuture=yc,we.set=y,we.months=ca,we._months=Ld,we.monthsShort=da,we._monthsShort=Md,we.monthsParse=ea,we._monthsRegex=Od,we.monthsRegex=ja,we._monthsShortRegex=Nd,we.monthsShortRegex=ia,we.week=Wb,we._week=de,we.firstDayOfYear=Yb,we.firstDayOfWeek=Xb,we.weekdays=ac,we._weekdays=fe,we.weekdaysMin=cc,we._weekdaysMin=he,we.weekdaysShort=bc,we._weekdaysShort=ge,we.weekdaysParse=dc,we.isPM=lc,we._meridiemParse=ie,we.meridiem=mc,E("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===r(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=u("moment.lang is deprecated. Use moment.locale instead.",E),a.langData=u("moment.langData is deprecated. Use moment.localeData instead.",H);var xe=Math.abs,ye=Qc("ms"),ze=Qc("s"),Ae=Qc("m"),Be=Qc("h"),Ce=Qc("d"),De=Qc("w"),Ee=Qc("M"),Fe=Qc("y"),Ge=Sc("milliseconds"),He=Sc("seconds"),Ie=Sc("minutes"),Je=Sc("hours"),Ke=Sc("days"),Le=Sc("months"),Me=Sc("years"),Ne=Math.round,Oe={s:45,m:45,h:22,d:26,M:11},Pe=Math.abs,Qe=Na.prototype;Qe.abs=Gc,Qe.add=Ic,Qe.subtract=Jc,Qe.as=Oc,Qe.asMilliseconds=ye,Qe.asSeconds=ze,Qe.asMinutes=Ae,Qe.asHours=Be,Qe.asDays=Ce,Qe.asWeeks=De,Qe.asMonths=Ee,Qe.asYears=Fe,Qe.valueOf=Pc,Qe._bubble=Lc,Qe.get=Rc,Qe.milliseconds=Ge,Qe.seconds=He,Qe.minutes=Ie,Qe.hours=Je,Qe.days=Ke,Qe.weeks=Tc,Qe.months=Le,Qe.years=Me,Qe.humanize=Xc,Qe.toISOString=Yc,Qe.toString=Yc,Qe.toJSON=Yc,Qe.locale=Ab,Qe.localeData=Bb,Qe.toIsoString=u("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Yc),Qe.lang=ce,R("X",0,0,"unix"),R("x",0,0,"valueOf"),W("x",ud),W("X",xd),$("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),$("x",function(a,b,c){c._d=new Date(r(a))}),a.version="2.12.0",b(Ja),a.fn=pe,a.min=La,a.max=Ma,a.now=Yd,a.utc=h,a.unix=qc,a.months=Bc,a.isDate=d,a.locale=E,a.invalid=l,a.duration=cb,a.isMoment=p,a.weekdays=Dc,a.parseZone=rc,a.localeData=H,a.isDuration=Oa,a.monthsShort=Cc,a.weekdaysMin=Fc,a.defineLocale=F,a.updateLocale=G,a.locales=I,a.weekdaysShort=Ec,a.normalizeUnits=K,a.relativeTimeThreshold=Wc,a.prototype=pe;var Re=a;return Re});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(309)(module)))

/***/ },
/* 309 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @version: 2.1.18
	* @author: Dan Grossman http://www.dangrossman.info/
	* @copyright: Copyright (c) 2012-2015 Dan Grossman. All rights reserved.
	* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
	* @website: https://www.improvely.com/
	*/

	(function(root, factory) {

	  // if (typeof define === 'function' && define.amd) {
	  //   define(['moment', 'jquery', 'exports'], function(momentjs, $, exports) {
	  //     root.daterangepicker = factory(root, exports, momentjs, $);
	  //   });

	  // } else if (typeof exports !== 'undefined') {
	  //     var momentjs = require('moment');
	  //     var jQuery = (typeof window != 'undefined') ? window.jQuery : undefined;  //isomorphic issue
	  //     if (!jQuery) {
	  //         try {
	  //             jQuery = require('jquery');
	  //             if (!jQuery.fn) jQuery.fn = {}; //isomorphic issue
	  //         } catch (err) {
	  //             if (!jQuery) throw new Error('jQuery dependency not found');
	  //         }
	  //     }
	    var momentjs = __webpack_require__(308);
	    var jQuery = __webpack_require__(2);
	    factory(root, exports, momentjs, jQuery);

	  // Finally, as a browser global.
	  // } else {
	    // root.daterangepicker = factory(root, {}, root.moment || moment, (root.jQuery || root.Zepto || root.ender || root.$));
	  // }

	}(this || {}, function(root, daterangepicker, moment, $) { // 'this' doesn't exist on a server

	    var DateRangePicker = function(element, options, cb) {

	        //default settings for options
	        this.parentEl = 'body';
	        this.element = $(element);
	        this.startDate = moment().startOf('day');
	        this.endDate = moment().endOf('day');
	        this.minDate = false;
	        this.maxDate = false;
	        this.dateLimit = false;
	        this.autoApply = false;
	        this.singleDatePicker = false;
	        this.showDropdowns = false;
	        this.showWeekNumbers = false;
	        this.showISOWeekNumbers = false;
	        this.timePicker = false;
	        this.timePicker24Hour = false;
	        this.timePickerIncrement = 1;
	        this.timePickerSeconds = false;
	        this.linkedCalendars = true;
	        this.autoUpdateInput = true;
	        this.alwaysShowCalendars = false;
	        this.ranges = {};

	        this.showDayUnit = false;
	        this.dayUnit = 1;

	        this.opens = 'right';
	        if (this.element.hasClass('pull-right'))
	            this.opens = 'left';

	        this.drops = 'down';
	        if (this.element.hasClass('dropup'))
	            this.drops = 'up';

	        this.buttonClasses = 'btn btn-sm';
	        this.applyClass = 'btn-success';
	        this.cancelClass = 'btn-default';

	        this.locale = {
	            format: 'MM/DD/YYYY',
	            separator: ' - ',
	            applyLabel: 'Apply',
	            cancelLabel: 'Cancel',
	            weekLabel: 'W',
	            customRangeLabel: 'Custom Range',
	            daysOfWeek: moment.weekdaysMin(),
	            monthNames: moment.monthsShort(),
	            firstDay: moment.localeData().firstDayOfWeek()
	        };

	        this.callback = function() { };

	        //some state information
	        this.isShowing = false;
	        this.leftCalendar = {};
	        this.rightCalendar = {};

	        //custom options from user
	        if (typeof options !== 'object' || options === null)
	            options = {};

	        //allow setting options with data attributes
	        //data-api options will be overwritten with custom javascript options
	        options = $.extend(this.element.data(), options);

	        //html template for the picker UI
	        if (typeof options.template !== 'string' && !(options.template instanceof jQuery))
	            options.template = '<div class="daterangepicker dropdown-menu">' +
	                '<div class="calendar left">' +
	                    '<div class="daterangepicker_input">' +
	                      '<input class="input-mini" type="text" name="daterangepicker_start" value="" />' +
	                      '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' +
	                      '<div class="calendar-time">' +
	                        '<div></div>' +
	                        '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' +
	                      '</div>' +
	                    '</div>' +
	                    '<div class="calendar-table"></div>' +
	                '</div>' +
	                '<div class="calendar right">' +
	                    '<div class="daterangepicker_input">' +
	                      '<input class="input-mini" type="text" name="daterangepicker_end" value="" />' +
	                      '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' +
	                      '<div class="calendar-time">' +
	                        '<div></div>' +
	                        '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' +
	                      '</div>' +
	                    '</div>' +
	                    '<div class="calendar-table"></div>' +
	                '</div>' +
	                '<div class="ranges">' +
	                    '<div class="range_inputs ranges_day_unit_btn">' +
	                        '<div style="font-size: 14px;margin-bottom: 4px;font-weight: bold;">时间单位：</div>'+
	                        '<button unit="1" class="day_unit btn btn-sm btn-default btn-primary" type="button">日</button> ' +
	                        '<button unit="2" class="day_unit btn btn-sm btn-default" type="button">周</button>' +
	                        '<button unit="3" class="day_unit btn btn-sm btn-default" style="margin-left: 3px;" type="button">月</button>' +
	                    '</div>' +
	                    '<div class="range_inputs ranges_apply_or_cancel_btn" style="margin-top: 10px;">' +
	                        '<button class="applyBtn" disabled="disabled" type="button"></button> ' +
	                        '<button class="cancelBtn" type="button"></button>' +
	                    '</div>' +
	                '</div>' +
	            '</div>';

	        this.parentEl = (options.parentEl && $(options.parentEl).length) ? $(options.parentEl) : $(this.parentEl);
	        this.container = $(options.template).appendTo(this.parentEl);

	        //
	        // handle all the possible options overriding defaults
	        //

	        if (typeof options.locale === 'object') {

	            if (typeof options.locale.format === 'string')
	                this.locale.format = options.locale.format;

	            if (typeof options.locale.separator === 'string')
	                this.locale.separator = options.locale.separator;

	            if (typeof options.locale.daysOfWeek === 'object')
	                this.locale.daysOfWeek = options.locale.daysOfWeek.slice();

	            if (typeof options.locale.monthNames === 'object')
	              this.locale.monthNames = options.locale.monthNames.slice();

	            if (typeof options.locale.firstDay === 'number')
	              this.locale.firstDay = options.locale.firstDay;

	            if (typeof options.locale.applyLabel === 'string')
	              this.locale.applyLabel = options.locale.applyLabel;

	            if (typeof options.locale.cancelLabel === 'string')
	              this.locale.cancelLabel = options.locale.cancelLabel;

	            if (typeof options.locale.weekLabel === 'string')
	              this.locale.weekLabel = options.locale.weekLabel;

	            if (typeof options.locale.customRangeLabel === 'string')
	              this.locale.customRangeLabel = options.locale.customRangeLabel;

	        }

	        if (typeof options.startDate === 'string')
	            this.startDate = moment(options.startDate, this.locale.format);

	        if (typeof options.endDate === 'string')
	            this.endDate = moment(options.endDate, this.locale.format);

	        if (typeof options.minDate === 'string')
	            this.minDate = moment(options.minDate, this.locale.format);

	        if (typeof options.maxDate === 'string')
	            this.maxDate = moment(options.maxDate, this.locale.format);

	        if (typeof options.startDate === 'object')
	            this.startDate = moment(options.startDate);

	        if (typeof options.endDate === 'object')
	            this.endDate = moment(options.endDate);

	        if (typeof options.minDate === 'object')
	            this.minDate = moment(options.minDate);

	        if (typeof options.maxDate === 'object')
	            this.maxDate = moment(options.maxDate);

	        // sanity check for bad options
	        if (this.minDate && this.startDate.isBefore(this.minDate))
	            this.startDate = this.minDate.clone();

	        // sanity check for bad options
	        if (this.maxDate && this.endDate.isAfter(this.maxDate))
	            this.endDate = this.maxDate.clone();

	        if (typeof options.applyClass === 'string')
	            this.applyClass = options.applyClass;

	        if (typeof options.cancelClass === 'string')
	            this.cancelClass = options.cancelClass;

	        if (typeof options.dateLimit === 'object')
	            this.dateLimit = options.dateLimit;

	        if (typeof options.opens === 'string')
	            this.opens = options.opens;

	        if (typeof options.drops === 'string')
	            this.drops = options.drops;

	        if (typeof options.showWeekNumbers === 'boolean')
	            this.showWeekNumbers = options.showWeekNumbers;

	        if (typeof options.showISOWeekNumbers === 'boolean')
	            this.showISOWeekNumbers = options.showISOWeekNumbers;

	        if (typeof options.buttonClasses === 'string')
	            this.buttonClasses = options.buttonClasses;

	        if (typeof options.buttonClasses === 'object')
	            this.buttonClasses = options.buttonClasses.join(' ');

	        if (typeof options.showDropdowns === 'boolean')
	            this.showDropdowns = options.showDropdowns;

	        if (typeof options.singleDatePicker === 'boolean') {
	            this.singleDatePicker = options.singleDatePicker;
	            if (this.singleDatePicker)
	                this.endDate = this.startDate.clone();
	        }

	        if (typeof options.timePicker === 'boolean')
	            this.timePicker = options.timePicker;

	        if (typeof options.timePickerSeconds === 'boolean')
	            this.timePickerSeconds = options.timePickerSeconds;

	        if (typeof options.timePickerIncrement === 'number')
	            this.timePickerIncrement = options.timePickerIncrement;

	        if (typeof options.timePicker24Hour === 'boolean')
	            this.timePicker24Hour = options.timePicker24Hour;

	        if (typeof options.autoApply === 'boolean')
	            this.autoApply = options.autoApply;

	        if (typeof options.autoUpdateInput === 'boolean')
	            this.autoUpdateInput = options.autoUpdateInput;

	        if (typeof options.linkedCalendars === 'boolean')
	            this.linkedCalendars = options.linkedCalendars;

	        if (typeof options.isInvalidDate === 'function')
	            this.isInvalidDate = options.isInvalidDate;

	        if (typeof options.alwaysShowCalendars === 'boolean')
	            this.alwaysShowCalendars = options.alwaysShowCalendars;

	        if (typeof options.showDayUnit === 'boolean'){
	            this.showDayUnit = options.showDayUnit;
	        }

	        // update day names order to firstDay
	        if (this.locale.firstDay != 0) {
	            var iterator = this.locale.firstDay;
	            while (iterator > 0) {
	                this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
	                iterator--;
	            }
	        }

	        var start, end, range;

	        //if no start/end dates set, check if an input element contains initial values
	        if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
	            if ($(this.element).is('input[type=text]')) {
	                var val = $(this.element).val(),
	                    split = val.split(this.locale.separator);

	                start = end = null;

	                if (split.length == 2) {
	                    start = moment(split[0], this.locale.format);
	                    end = moment(split[1], this.locale.format);
	                } else if (this.singleDatePicker && val !== "") {
	                    start = moment(val, this.locale.format);
	                    end = moment(val, this.locale.format);
	                }
	                if (start !== null && end !== null) {
	                    this.setStartDate(start);
	                    this.setEndDate(end);
	                }
	            }
	        }

	        if (typeof options.ranges === 'object') {
	            for (range in options.ranges) {

	                if (typeof options.ranges[range][0] === 'string')
	                    start = moment(options.ranges[range][0], this.locale.format);
	                else
	                    start = moment(options.ranges[range][0]);

	                if (typeof options.ranges[range][1] === 'string')
	                    end = moment(options.ranges[range][1], this.locale.format);
	                else
	                    end = moment(options.ranges[range][1]);

	                // If the start or end date exceed those allowed by the minDate or dateLimit
	                // options, shorten the range to the allowable period.
	                if (this.minDate && start.isBefore(this.minDate))
	                    start = this.minDate.clone();

	                var maxDate = this.maxDate;
	                if (this.dateLimit && start.clone().add(this.dateLimit).isAfter(maxDate))
	                    maxDate = start.clone().add(this.dateLimit);
	                if (maxDate && end.isAfter(maxDate))
	                    end = maxDate.clone();

	                // If the end of the range is before the minimum or the start of the range is
	                // after the maximum, don't display this range option at all.
	                if ((this.minDate && end.isBefore(this.minDate)) || (maxDate && start.isAfter(maxDate)))
	                    continue;
	                
	                //Support unicode chars in the range names.
	                var elem = document.createElement('textarea');
	                elem.innerHTML = range;
	                var rangeHtml = elem.value;

	                this.ranges[rangeHtml] = [start, end];
	            }

	            var list = '<ul class="ranges_btn">';
	            for (range in this.ranges) {
	                list += '<li>' + range + '</li>';
	            }
	            list += '<li>' + this.locale.customRangeLabel + '</li>';
	            list += '</ul>';
	            this.container.find('.ranges').prepend(list);
	        }

	        if (typeof cb === 'function') {
	            this.callback = cb;
	        }

	        if (!this.timePicker) {
	            this.startDate = this.startDate.startOf('day');
	            this.endDate = this.endDate.endOf('day');
	            this.container.find('.calendar-time').hide();
	        }

	        //can't be used together for now
	        if (this.timePicker && this.autoApply)
	            this.autoApply = false;

	        if (this.autoApply && typeof options.ranges !== 'object') {
	            this.container.find('.ranges').hide();
	        } else if (this.autoApply) {
	            this.container.find('.applyBtn, .cancelBtn').addClass('hide');
	        }

	        if (this.singleDatePicker) {
	            this.container.addClass('single');
	            this.container.find('.calendar.left').addClass('single');
	            this.container.find('.calendar.left').show();
	            this.container.find('.calendar.right').hide();
	            this.container.find('.daterangepicker_input input, .daterangepicker_input i').hide();
	            this.container.find('.ranges_btn').hide();
	            if (!this.timePicker) {
	                this.container.find('.ranges .ranges_apply_or_cancel_btn').hide();
	            }
	        }

	        if(!this.showDayUnit){
	            this.container.find('.ranges .ranges_day_unit_btn').hide();
	        }

	        if ((typeof options.ranges === 'undefined' && !this.singleDatePicker) || this.alwaysShowCalendars) {
	            this.container.addClass('show-calendar');
	        }

	        this.container.addClass('opens' + this.opens);

	        //swap the position of the predefined ranges if opens right
	        if (typeof options.ranges !== 'undefined' && this.opens == 'right') {
	            var ranges = this.container.find('.ranges');
	            var html = ranges.clone();
	            ranges.remove();
	            this.container.find('.calendar.left').parent().prepend(html);
	        }

	        //apply CSS classes and labels to buttons
	        this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);
	        if (this.applyClass.length)
	            this.container.find('.applyBtn').addClass(this.applyClass);
	        if (this.cancelClass.length)
	            this.container.find('.cancelBtn').addClass(this.cancelClass);
	        this.container.find('.applyBtn').html(this.locale.applyLabel);
	        this.container.find('.cancelBtn').html(this.locale.cancelLabel);

	        //
	        // event listeners
	        //

	        this.container.find('.calendar')
	            .on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this))
	            .on('click.daterangepicker', '.next', $.proxy(this.clickNext, this))
	            .on('click.daterangepicker', 'td.available', $.proxy(this.clickDate, this))
	            .on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this))
	            .on('mouseleave.daterangepicker', 'td.available', $.proxy(this.updateFormInputs, this))
	            .on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this))
	            .on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this))
	            .on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this))
	            .on('click.daterangepicker', '.daterangepicker_input input', $.proxy(this.showCalendars, this))
	            //.on('keyup.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsChanged, this))
	            .on('change.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsChanged, this));

	        this.container.find('.ranges')
	            .on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this))
	            .on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this))
	            .on('click.daterangepicker', 'li', $.proxy(this.clickRange, this))
	            .on('mouseenter.daterangepicker', 'li', $.proxy(this.hoverRange, this))
	            .on('mouseleave.daterangepicker', 'li', $.proxy(this.updateFormInputs, this));

	        // 点击选择时间单位
	        this.container.find('.ranges')
	            .on('click.daterangepicker', 'button.day_unit', $.proxy(this.clickUnit, this))

	        if (this.element.is('input')) {
	            this.element.on({
	                'click.daterangepicker': $.proxy(this.show, this),
	                'focus.daterangepicker': $.proxy(this.show, this),
	                'keyup.daterangepicker': $.proxy(this.elementChanged, this),
	                'keydown.daterangepicker': $.proxy(this.keydown, this)
	            });
	        } else {
	            this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
	        }

	        //
	        // if attached to a text input, set the initial value
	        //

	        if (this.element.is('input') && !this.singleDatePicker && this.autoUpdateInput) {
	            this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
	            this.element.trigger('change');
	        } else if (this.element.is('input') && this.autoUpdateInput) {
	            this.element.val(this.startDate.format(this.locale.format));
	            this.element.trigger('change');
	        }

	    };

	    DateRangePicker.prototype = {

	        constructor: DateRangePicker,

	        setStartDate: function(startDate) {
	            if (typeof startDate === 'string')
	                this.startDate = moment(startDate, this.locale.format);

	            if (typeof startDate === 'object')
	                this.startDate = moment(startDate);

	            if (!this.timePicker)
	                this.startDate = this.startDate.startOf('day');

	            if (this.timePicker && this.timePickerIncrement)
	                this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);

	            if (this.minDate && this.startDate.isBefore(this.minDate))
	                this.startDate = this.minDate;

	            if (this.maxDate && this.startDate.isAfter(this.maxDate))
	                this.startDate = this.maxDate;

	            if (!this.isShowing)
	                this.updateElement();

	            this.updateMonthsInView();
	        },

	        setEndDate: function(endDate) {
	            if (typeof endDate === 'string')
	                this.endDate = moment(endDate, this.locale.format);

	            if (typeof endDate === 'object')
	                this.endDate = moment(endDate);

	            if (!this.timePicker)
	                this.endDate = this.endDate.endOf('day');

	            if (this.timePicker && this.timePickerIncrement)
	                this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);

	            if (this.endDate.isBefore(this.startDate))
	                this.endDate = this.startDate.clone();

	            if (this.maxDate && this.endDate.isAfter(this.maxDate))
	                this.endDate = this.maxDate;

	            if (this.dateLimit && this.startDate.clone().add(this.dateLimit).isBefore(this.endDate))
	                this.endDate = this.startDate.clone().add(this.dateLimit);

	            this.previousRightTime = this.endDate.clone();

	            if (!this.isShowing)
	                this.updateElement();

	            this.updateMonthsInView();
	        },

	        isInvalidDate: function() {
	            return false;
	        },

	        updateView: function() {
	            if (this.timePicker) {
	                this.renderTimePicker('left');
	                this.renderTimePicker('right');
	                if (!this.endDate) {
	                    this.container.find('.right .calendar-time select').attr('disabled', 'disabled').addClass('disabled');
	                } else {
	                    this.container.find('.right .calendar-time select').removeAttr('disabled').removeClass('disabled');
	                }
	            }
	            if (this.endDate) {
	                this.container.find('input[name="daterangepicker_end"]').removeClass('active');
	                this.container.find('input[name="daterangepicker_start"]').addClass('active');
	            } else {
	                this.container.find('input[name="daterangepicker_end"]').addClass('active');
	                this.container.find('input[name="daterangepicker_start"]').removeClass('active');
	            }
	            this.updateMonthsInView();
	            this.updateCalendars();
	            this.updateFormInputs();
	        },

	        updateMonthsInView: function() {
	            if (this.endDate) {

	                //if both dates are visible already, do nothing
	                if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month &&
	                    (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))
	                    &&
	                    (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))
	                    ) {
	                    return;
	                }

	                this.leftCalendar.month = this.startDate.clone().date(2);
	                if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {
	                    this.rightCalendar.month = this.endDate.clone().date(2);
	                } else {
	                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
	                }
	                
	            } else {
	                if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {
	                    this.leftCalendar.month = this.startDate.clone().date(2);
	                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
	                }
	            }
	        },

	        updateCalendars: function() {

	            if (this.timePicker) {
	                var hour, minute, second;
	                if (this.endDate) {
	                    hour = parseInt(this.container.find('.left .hourselect').val(), 10);
	                    minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
	                    second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.left .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12)
	                            hour += 12;
	                        if (ampm === 'AM' && hour === 12)
	                            hour = 0;
	                    }
	                } else {
	                    hour = parseInt(this.container.find('.right .hourselect').val(), 10);
	                    minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
	                    second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.right .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12)
	                            hour += 12;
	                        if (ampm === 'AM' && hour === 12)
	                            hour = 0;
	                    }
	                }
	                this.leftCalendar.month.hour(hour).minute(minute).second(second);
	                this.rightCalendar.month.hour(hour).minute(minute).second(second);
	            }

	            this.renderCalendar('left');
	            this.renderCalendar('right');

	            //highlight any predefined range matching the current start and end dates
	            this.container.find('.ranges li').removeClass('active');
	            if (this.endDate == null) return;

	            this.calculateChosenLabel();
	        },

	        renderCalendar: function(side) {

	            //
	            // Build the matrix of dates that will populate the calendar
	            //

	            var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;
	            var month = calendar.month.month();
	            var year = calendar.month.year();
	            var hour = calendar.month.hour();
	            var minute = calendar.month.minute();
	            var second = calendar.month.second();
	            var daysInMonth = moment([year, month]).daysInMonth();
	            var firstDay = moment([year, month, 1]);
	            var lastDay = moment([year, month, daysInMonth]);
	            var lastMonth = moment(firstDay).subtract(1, 'month').month();
	            var lastYear = moment(firstDay).subtract(1, 'month').year();
	            var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();
	            var dayOfWeek = firstDay.day();

	            //initialize a 6 rows x 7 columns array for the calendar
	            var calendar = [];
	            calendar.firstDay = firstDay;
	            calendar.lastDay = lastDay;

	            for (var i = 0; i < 6; i++) {
	                calendar[i] = [];
	            }

	            //populate the calendar with date objects
	            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
	            if (startDay > daysInLastMonth)
	                startDay -= 7;

	            if (dayOfWeek == this.locale.firstDay)
	                startDay = daysInLastMonth - 6;

	            var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]);

	            var col, row;
	            for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
	                if (i > 0 && col % 7 === 0) {
	                    col = 0;
	                    row++;
	                }
	                calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
	                curDate.hour(12);

	                if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
	                    calendar[row][col] = this.minDate.clone();
	                }

	                if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
	                    calendar[row][col] = this.maxDate.clone();
	                }

	            }

	            //make the calendar object available to hoverDate/clickDate
	            if (side == 'left') {
	                this.leftCalendar.calendar = calendar;
	            } else {
	                this.rightCalendar.calendar = calendar;
	            }

	            //
	            // Display the calendar
	            //

	            var minDate = side == 'left' ? this.minDate : this.startDate;
	            var maxDate = this.maxDate;
	            var selected = side == 'left' ? this.startDate : this.endDate;

	            var html = '<table class="table-condensed">';
	            html += '<thead>';
	            html += '<tr>';

	            // add empty cell for week number
	            if (this.showWeekNumbers || this.showISOWeekNumbers)
	                html += '<th></th>';

	            if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {
	                html += '<th class="prev available"><i class="fa fa-chevron-left glyphicon glyphicon-chevron-left"></i></th>';
	            } else {
	                html += '<th></th>';
	            }

	            var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");

	            if (this.showDropdowns) {
	                var currentMonth = calendar[1][1].month();
	                var currentYear = calendar[1][1].year();
	                var maxYear = (maxDate && maxDate.year()) || (currentYear + 5);
	                var minYear = (minDate && minDate.year()) || (currentYear - 50);
	                var inMinYear = currentYear == minYear;
	                var inMaxYear = currentYear == maxYear;

	                var monthHtml = '<select class="monthselect">';
	                for (var m = 0; m < 12; m++) {
	                    if ((!inMinYear || m >= minDate.month()) && (!inMaxYear || m <= maxDate.month())) {
	                        monthHtml += "<option value='" + m + "'" +
	                            (m === currentMonth ? " selected='selected'" : "") +
	                            ">" + this.locale.monthNames[m] + "</option>";
	                    } else {
	                        monthHtml += "<option value='" + m + "'" +
	                            (m === currentMonth ? " selected='selected'" : "") +
	                            " disabled='disabled'>" + this.locale.monthNames[m] + "</option>";
	                    }
	                }
	                monthHtml += "</select>";

	                var yearHtml = '<select class="yearselect">';
	                for (var y = minYear; y <= maxYear; y++) {
	                    yearHtml += '<option value="' + y + '"' +
	                        (y === currentYear ? ' selected="selected"' : '') +
	                        '>' + y + '</option>';
	                }
	                yearHtml += '</select>';

	                dateHtml = monthHtml + yearHtml;
	            }

	            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
	            if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {
	                html += '<th class="next available"><i class="fa fa-chevron-right glyphicon glyphicon-chevron-right"></i></th>';
	            } else {
	                html += '<th></th>';
	            }

	            html += '</tr>';
	            html += '<tr>';

	            // add week number label
	            if (this.showWeekNumbers || this.showISOWeekNumbers)
	                html += '<th class="week">' + this.locale.weekLabel + '</th>';

	            $.each(this.locale.daysOfWeek, function(index, dayOfWeek) {
	                html += '<th>' + dayOfWeek + '</th>';
	            });

	            html += '</tr>';
	            html += '</thead>';
	            html += '<tbody>';

	            //adjust maxDate to reflect the dateLimit setting in order to
	            //grey out end dates beyond the dateLimit
	            if (this.endDate == null && this.dateLimit) {
	                var maxLimit = this.startDate.clone().add(this.dateLimit).endOf('day');
	                if (!maxDate || maxLimit.isBefore(maxDate)) {
	                    maxDate = maxLimit;
	                }
	            }

	            for (var row = 0; row < 6; row++) {
	                html += '<tr>';

	                // add week number
	                if (this.showWeekNumbers)
	                    html += '<td class="week">' + calendar[row][0].week() + '</td>';
	                else if (this.showISOWeekNumbers)
	                    html += '<td class="week">' + calendar[row][0].isoWeek() + '</td>';

	                for (var col = 0; col < 7; col++) {

	                    var classes = [];

	                    //highlight today's date
	                    if (calendar[row][col].isSame(new Date(), "day"))
	                        classes.push('today');

	                    //highlight weekends
	                    if (calendar[row][col].isoWeekday() > 5)
	                        classes.push('weekend');

	                    //grey out the dates in other months displayed at beginning and end of this calendar
	                    if (calendar[row][col].month() != calendar[1][1].month())
	                        classes.push('off');

	                    //don't allow selection of dates before the minimum date
	                    if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day'))
	                        classes.push('off', 'disabled');

	                    //don't allow selection of dates after the maximum date
	                    if (maxDate && calendar[row][col].isAfter(maxDate, 'day'))
	                        classes.push('off', 'disabled');

	                    //don't allow selection of date if a custom function decides it's invalid
	                    if (this.isInvalidDate(calendar[row][col]))
	                        classes.push('off', 'disabled');

	                    //highlight the currently selected start date
	                    if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD'))
	                        classes.push('active', 'start-date');

	                    //highlight the currently selected end date
	                    if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD'))
	                        classes.push('active', 'end-date');

	                    //highlight dates in-between the selected dates
	                    if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate)
	                        classes.push('in-range');

	                    var cname = '', disabled = false;
	                    for (var i = 0; i < classes.length; i++) {
	                        cname += classes[i] + ' ';
	                        if (classes[i] == 'disabled')
	                            disabled = true;
	                    }
	                    if (!disabled)
	                        cname += 'available';

	                    html += '<td class="' + cname.replace(/^\s+|\s+$/g, '') + '" data-title="' + 'r' + row + 'c' + col + '">' + calendar[row][col].date() + '</td>';

	                }
	                html += '</tr>';
	            }

	            html += '</tbody>';
	            html += '</table>';

	            this.container.find('.calendar.' + side + ' .calendar-table').html(html);

	        },

	        renderTimePicker: function(side) {

	            var html, selected, minDate, maxDate = this.maxDate;

	            if (this.dateLimit && (!this.maxDate || this.startDate.clone().add(this.dateLimit).isAfter(this.maxDate)))
	                maxDate = this.startDate.clone().add(this.dateLimit);

	            if (side == 'left') {
	                selected = this.startDate.clone();
	                minDate = this.minDate;
	            } else if (side == 'right') {
	                selected = this.endDate ? this.endDate.clone() : this.previousRightTime.clone();
	                minDate = this.startDate;

	                //Preserve the time already selected
	                var timeSelector = this.container.find('.calendar.right .calendar-time div');
	                if (timeSelector.html() != '') {

	                    selected.hour(timeSelector.find('.hourselect option:selected').val() || selected.hour());
	                    selected.minute(timeSelector.find('.minuteselect option:selected').val() || selected.minute());
	                    selected.second(timeSelector.find('.secondselect option:selected').val() || selected.second());

	                    if (!this.timePicker24Hour) {
	                        var ampm = timeSelector.find('.ampmselect option:selected').val();
	                        if (ampm === 'PM' && selected.hour() < 12)
	                            selected.hour(selected.hour() + 12);
	                        if (ampm === 'AM' && selected.hour() === 12)
	                            selected.hour(0);
	                    }

	                    if (selected.isBefore(this.startDate))
	                        selected = this.startDate.clone();

	                    if (selected.isAfter(maxDate))
	                        selected = maxDate.clone();

	                }
	            }

	            //
	            // hours
	            //

	            html = '<select class="hourselect">';

	            var start = this.timePicker24Hour ? 0 : 1;
	            var end = this.timePicker24Hour ? 23 : 12;

	            for (var i = start; i <= end; i++) {
	                var i_in_24 = i;
	                if (!this.timePicker24Hour)
	                    i_in_24 = selected.hour() >= 12 ? (i == 12 ? 12 : i + 12) : (i == 12 ? 0 : i);

	                var time = selected.clone().hour(i_in_24);
	                var disabled = false;
	                if (minDate && time.minute(59).isBefore(minDate))
	                    disabled = true;
	                if (maxDate && time.minute(0).isAfter(maxDate))
	                    disabled = true;

	                if (i_in_24 == selected.hour() && !disabled) {
	                    html += '<option value="' + i + '" selected="selected">' + i + '</option>';
	                } else if (disabled) {
	                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + '</option>';
	                } else {
	                    html += '<option value="' + i + '">' + i + '</option>';
	                }
	            }

	            html += '</select> ';

	            //
	            // minutes
	            //

	            html += ': <select class="minuteselect">';

	            for (var i = 0; i < 60; i += this.timePickerIncrement) {
	                var padded = i < 10 ? '0' + i : i;
	                var time = selected.clone().minute(i);

	                var disabled = false;
	                if (minDate && time.second(59).isBefore(minDate))
	                    disabled = true;
	                if (maxDate && time.second(0).isAfter(maxDate))
	                    disabled = true;

	                if (selected.minute() == i && !disabled) {
	                    html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
	                } else if (disabled) {
	                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
	                } else {
	                    html += '<option value="' + i + '">' + padded + '</option>';
	                }
	            }

	            html += '</select> ';

	            //
	            // seconds
	            //

	            if (this.timePickerSeconds) {
	                html += ': <select class="secondselect">';

	                for (var i = 0; i < 60; i++) {
	                    var padded = i < 10 ? '0' + i : i;
	                    var time = selected.clone().second(i);

	                    var disabled = false;
	                    if (minDate && time.isBefore(minDate))
	                        disabled = true;
	                    if (maxDate && time.isAfter(maxDate))
	                        disabled = true;

	                    if (selected.second() == i && !disabled) {
	                        html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
	                    } else if (disabled) {
	                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
	                    } else {
	                        html += '<option value="' + i + '">' + padded + '</option>';
	                    }
	                }

	                html += '</select> ';
	            }

	            //
	            // AM/PM
	            //

	            if (!this.timePicker24Hour) {
	                html += '<select class="ampmselect">';

	                var am_html = '';
	                var pm_html = '';

	                if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate))
	                    am_html = ' disabled="disabled" class="disabled"';

	                if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate))
	                    pm_html = ' disabled="disabled" class="disabled"';

	                if (selected.hour() >= 12) {
	                    html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + '>PM</option>';
	                } else {
	                    html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + '>PM</option>';
	                }

	                html += '</select>';
	            }

	            this.container.find('.calendar.' + side + ' .calendar-time div').html(html);

	        },

	        updateFormInputs: function() {

	            //ignore mouse movements while an above-calendar text input has focus
	            if (this.container.find('input[name=daterangepicker_start]').is(":focus") || this.container.find('input[name=daterangepicker_end]').is(":focus"))
	                return;

	            this.container.find('input[name=daterangepicker_start]').val(this.startDate.format(this.locale.format));
	            if (this.endDate)
	                this.container.find('input[name=daterangepicker_end]').val(this.endDate.format(this.locale.format));

	            if (this.singleDatePicker || (this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate)))) {
	                this.container.find('button.applyBtn').removeAttr('disabled');
	            } else {
	                this.container.find('button.applyBtn').attr('disabled', 'disabled');
	            }

	        },

	        move: function() {
	            var parentOffset = { top: 0, left: 0 },
	                containerTop;
	            var parentRightEdge = $(window).width();
	            if (!this.parentEl.is('body')) {
	                parentOffset = {
	                    top: this.parentEl.offset().top - this.parentEl.scrollTop(),
	                    left: this.parentEl.offset().left - this.parentEl.scrollLeft()
	                };
	                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
	            }

	            if (this.drops == 'up')
	                containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
	            else
	                containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
	            this.container[this.drops == 'up' ? 'addClass' : 'removeClass']('dropup');

	            if (this.opens == 'left') {
	                this.container.css({
	                    top: containerTop,
	                    right: parentRightEdge - this.element.offset().left - this.element.outerWidth(),
	                    left: 'auto'
	                });
	                if (this.container.offset().left < 0) {
	                    this.container.css({
	                        right: 'auto',
	                        left: 9
	                    });
	                }
	            } else if (this.opens == 'center') {
	                this.container.css({
	                    top: containerTop,
	                    left: this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2
	                            - this.container.outerWidth() / 2,
	                    right: 'auto'
	                });
	                if (this.container.offset().left < 0) {
	                    this.container.css({
	                        right: 'auto',
	                        left: 9
	                    });
	                }
	            } else {
	                this.container.css({
	                    top: containerTop,
	                    left: this.element.offset().left - parentOffset.left,
	                    right: 'auto'
	                });
	                if (this.container.offset().left + this.container.outerWidth() > $(window).width()) {
	                    this.container.css({
	                        left: 'auto',
	                        right: 0
	                    });
	                }
	            }
	        },

	        show: function(e) {
	            if (this.isShowing) return;

	            // Create a click proxy that is private to this instance of datepicker, for unbinding
	            this._outsideClickProxy = $.proxy(function(e) { this.outsideClick(e); }, this);

	            // Bind global datepicker mousedown for hiding and
	            $(document)
	              .on('mousedown.daterangepicker', this._outsideClickProxy)
	              // also support mobile devices
	              .on('touchend.daterangepicker', this._outsideClickProxy)
	              // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them
	              .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy)
	              // and also close when focus changes to outside the picker (eg. tabbing between controls)
	              .on('focusin.daterangepicker', this._outsideClickProxy);

	            // Reposition the picker if the window is resized while it's open
	            $(window).on('resize.daterangepicker', $.proxy(function(e) { this.move(e); }, this));

	            this.oldStartDate = this.startDate.clone();
	            this.oldEndDate = this.endDate.clone();
	            this.previousRightTime = this.endDate.clone();

	            this.updateView();
	            this.container.show();
	            this.move();
	            this.element.trigger('show.daterangepicker', this);
	            this.isShowing = true;
	        },

	        hide: function(e) {
	            if (!this.isShowing) return;

	            //incomplete date selection, revert to last values
	            if (!this.endDate) {
	                this.startDate = this.oldStartDate.clone();
	                this.endDate = this.oldEndDate.clone();
	            }

	            //if a new date range was selected, invoke the user callback function
	            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
	                this.callback(this.startDate, this.endDate, this.chosenLabel);

	            //if picker is attached to a text input, update it
	            this.updateElement();

	            $(document).off('.daterangepicker');
	            $(window).off('.daterangepicker');
	            this.container.hide();
	            this.element.trigger('hide.daterangepicker', this);
	            this.isShowing = false;
	        },

	        toggle: function(e) {
	            if (this.isShowing) {
	                this.hide();
	            } else {
	                this.show();
	            }
	        },

	        outsideClick: function(e) {
	            var target = $(e.target);
	            // if the page is clicked anywhere except within the daterangerpicker/button
	            // itself then call this.hide()
	            if (
	                // ie modal dialog fix
	                e.type == "focusin" ||
	                target.closest(this.element).length ||
	                target.closest(this.container).length ||
	                target.closest('.calendar-table').length
	                ) return;
	            this.hide();
	        },

	        showCalendars: function() {
	            this.container.addClass('show-calendar');
	            this.move();
	            this.element.trigger('showCalendar.daterangepicker', this);
	        },

	        hideCalendars: function() {
	            this.container.removeClass('show-calendar');
	            this.element.trigger('hideCalendar.daterangepicker', this);
	        },

	        hoverRange: function(e) {

	            //ignore mouse movements while an above-calendar text input has focus
	            if (this.container.find('input[name=daterangepicker_start]').is(":focus") || this.container.find('input[name=daterangepicker_end]').is(":focus"))
	                return;

	            var label = e.target.innerHTML;
	            if (label == this.locale.customRangeLabel) {
	                this.updateView();
	            } else {
	                var dates = this.ranges[label];
	                this.container.find('input[name=daterangepicker_start]').val(dates[0].format(this.locale.format));
	                this.container.find('input[name=daterangepicker_end]').val(dates[1].format(this.locale.format));
	            }
	            
	        },

	        clickRange: function(e) {
	            var label = e.target.innerHTML;
	            this.chosenLabel = label;
	            if (label == this.locale.customRangeLabel) {
	                this.showCalendars();
	            } else {
	                var dates = this.ranges[label];
	                this.startDate = dates[0];
	                this.endDate = dates[1];

	                if (!this.timePicker) {
	                    this.startDate.startOf('day');
	                    this.endDate.endOf('day');
	                }

	                if (!this.alwaysShowCalendars)
	                    this.hideCalendars();
	                this.clickApply();
	            }
	        },

	        clickPrev: function(e) {
	            var cal = $(e.target).parents('.calendar');
	            if (cal.hasClass('left')) {
	                this.leftCalendar.month.subtract(1, 'month');
	                if (this.linkedCalendars)
	                    this.rightCalendar.month.subtract(1, 'month');
	            } else {
	                this.rightCalendar.month.subtract(1, 'month');
	            }
	            this.updateCalendars();
	        },

	        clickNext: function(e) {
	            var cal = $(e.target).parents('.calendar');
	            if (cal.hasClass('left')) {
	                this.leftCalendar.month.add(1, 'month');
	            } else {
	                this.rightCalendar.month.add(1, 'month');
	                if (this.linkedCalendars)
	                    this.leftCalendar.month.add(1, 'month');
	            }
	            this.updateCalendars();
	        },

	        hoverDate: function(e) {

	            //ignore mouse movements while an above-calendar text input has focus
	            if (this.container.find('input[name=daterangepicker_start]').is(":focus") || this.container.find('input[name=daterangepicker_end]').is(":focus"))
	                return;

	            //ignore dates that can't be selected
	            if (!$(e.target).hasClass('available')) return;

	            //have the text inputs above calendars reflect the date being hovered over
	            var title = $(e.target).attr('data-title');
	            var row = title.substr(1, 1);
	            var col = title.substr(3, 1);
	            var cal = $(e.target).parents('.calendar');
	            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

	            if (this.endDate) {
	                this.container.find('input[name=daterangepicker_start]').val(date.format(this.locale.format));
	            } else {
	                this.container.find('input[name=daterangepicker_end]').val(date.format(this.locale.format));
	            }

	            //highlight the dates between the start date and the date being hovered as a potential end date
	            var leftCalendar = this.leftCalendar;
	            var rightCalendar = this.rightCalendar;
	            var startDate = this.startDate;
	            if (!this.endDate) {
	                this.container.find('.calendar td').each(function(index, el) {

	                    //skip week numbers, only look at dates
	                    if ($(el).hasClass('week')) return;

	                    var title = $(el).attr('data-title');
	                    var row = title.substr(1, 1);
	                    var col = title.substr(3, 1);
	                    var cal = $(el).parents('.calendar');
	                    var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];

	                    if (dt.isAfter(startDate) && dt.isBefore(date)) {
	                        $(el).addClass('in-range');
	                    } else {
	                        $(el).removeClass('in-range');
	                    }

	                });
	            }

	        },

	        clickDate: function(e) {

	            if (!$(e.target).hasClass('available')) return;

	            var title = $(e.target).attr('data-title');
	            var row = title.substr(1, 1);
	            var col = title.substr(3, 1);
	            var cal = $(e.target).parents('.calendar');
	            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

	            //
	            // this function needs to do a few things:
	            // * alternate between selecting a start and end date for the range,
	            // * if the time picker is enabled, apply the hour/minute/second from the select boxes to the clicked date
	            // * if autoapply is enabled, and an end date was chosen, apply the selection
	            // * if single date picker mode, and time picker isn't enabled, apply the selection immediately
	            //

	            if (this.endDate || date.isBefore(this.startDate, 'day')) {
	                if (this.timePicker) {
	                    var hour = parseInt(this.container.find('.left .hourselect').val(), 10);
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.left .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12)
	                            hour += 12;
	                        if (ampm === 'AM' && hour === 12)
	                            hour = 0;
	                    }
	                    var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
	                    var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
	                    date = date.clone().hour(hour).minute(minute).second(second);
	                }
	                this.endDate = null;
	                this.setStartDate(date.clone());
	            } else if (!this.endDate && date.isBefore(this.startDate)) {
	                //special case: clicking the same date for start/end, 
	                //but the time of the end date is before the start date
	                this.setEndDate(this.startDate.clone());
	            } else {
	                if (this.timePicker) {
	                    var hour = parseInt(this.container.find('.right .hourselect').val(), 10);
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.right .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12)
	                            hour += 12;
	                        if (ampm === 'AM' && hour === 12)
	                            hour = 0;
	                    }
	                    var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
	                    var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
	                    date = date.clone().hour(hour).minute(minute).second(second);
	                }
	                this.setEndDate(date.clone());
	                if (this.autoApply) {
	                  this.calculateChosenLabel();
	                  this.clickApply();
	                }
	            }

	            if (this.singleDatePicker) {
	                this.setEndDate(this.startDate);
	                if (!this.timePicker)
	                    this.clickApply();
	            }

	            this.updateView();

	        },

	        calculateChosenLabel: function() {
	          var customRange = true;
	          var i = 0;
	          for (var range in this.ranges) {
	              if (this.timePicker) {
	                  if (this.startDate.isSame(this.ranges[range][0]) && this.endDate.isSame(this.ranges[range][1])) {
	                      customRange = false;
	                      this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
	                      break;
	                  }
	              } else {
	                  //ignore times when comparing dates if time picker is not enabled
	                  if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
	                      customRange = false;
	                      this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
	                      break;
	                  }
	              }
	              i++;
	          }
	          if (customRange) {
	              this.chosenLabel = this.container.find('.ranges li:last').addClass('active').html();
	              this.showCalendars();
	          }
	        },

	        clickApply: function(e) {
	            this.hide();
	            this.element.trigger('apply.daterangepicker', this);
	        },

	        clickCancel: function(e) {
	            this.startDate = this.oldStartDate;
	            this.endDate = this.oldEndDate;
	            this.hide();
	            this.element.trigger('cancel.daterangepicker', this);
	        },

	        clickUnit: function(e) {
	            $('.day_unit').removeClass('btn-primary');
	            $(e.target).addClass('btn-primary');
	            this.dayUnit = $(e.target).attr('unit');
	        },

	        monthOrYearChanged: function(e) {
	            var isLeft = $(e.target).closest('.calendar').hasClass('left'),
	                leftOrRight = isLeft ? 'left' : 'right',
	                cal = this.container.find('.calendar.'+leftOrRight);

	            // Month must be Number for new moment versions
	            var month = parseInt(cal.find('.monthselect').val(), 10);
	            var year = cal.find('.yearselect').val();

	            if (!isLeft) {
	                if (year < this.startDate.year() || (year == this.startDate.year() && month < this.startDate.month())) {
	                    month = this.startDate.month();
	                    year = this.startDate.year();
	                }
	            }

	            if (this.minDate) {
	                if (year < this.minDate.year() || (year == this.minDate.year() && month < this.minDate.month())) {
	                    month = this.minDate.month();
	                    year = this.minDate.year();
	                }
	            }

	            if (this.maxDate) {
	                if (year > this.maxDate.year() || (year == this.maxDate.year() && month > this.maxDate.month())) {
	                    month = this.maxDate.month();
	                    year = this.maxDate.year();
	                }
	            }

	            if (isLeft) {
	                this.leftCalendar.month.month(month).year(year);
	                if (this.linkedCalendars)
	                    this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');
	            } else {
	                this.rightCalendar.month.month(month).year(year);
	                if (this.linkedCalendars)
	                    this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');
	            }
	            this.updateCalendars();
	        },

	        timeChanged: function(e) {

	            var cal = $(e.target).closest('.calendar'),
	                isLeft = cal.hasClass('left');

	            var hour = parseInt(cal.find('.hourselect').val(), 10);
	            var minute = parseInt(cal.find('.minuteselect').val(), 10);
	            var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;

	            if (!this.timePicker24Hour) {
	                var ampm = cal.find('.ampmselect').val();
	                if (ampm === 'PM' && hour < 12)
	                    hour += 12;
	                if (ampm === 'AM' && hour === 12)
	                    hour = 0;
	            }

	            if (isLeft) {
	                var start = this.startDate.clone();
	                start.hour(hour);
	                start.minute(minute);
	                start.second(second);
	                this.setStartDate(start);
	                if (this.singleDatePicker) {
	                    this.endDate = this.startDate.clone();
	                } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {
	                    this.setEndDate(start.clone());
	                }
	            } else if (this.endDate) {
	                var end = this.endDate.clone();
	                end.hour(hour);
	                end.minute(minute);
	                end.second(second);
	                this.setEndDate(end);
	            }

	            //update the calendars so all clickable dates reflect the new time component
	            this.updateCalendars();

	            //update the form inputs above the calendars with the new time
	            this.updateFormInputs();

	            //re-render the time pickers because changing one selection can affect what's enabled in another
	            this.renderTimePicker('left');
	            this.renderTimePicker('right');

	        },

	        formInputsChanged: function(e) {
	            var isRight = $(e.target).closest('.calendar').hasClass('right');
	            var start = moment(this.container.find('input[name="daterangepicker_start"]').val(), this.locale.format);
	            var end = moment(this.container.find('input[name="daterangepicker_end"]').val(), this.locale.format);

	            if (start.isValid() && end.isValid()) {

	                if (isRight && end.isBefore(start))
	                    start = end.clone();

	                this.setStartDate(start);
	                this.setEndDate(end);

	                if (isRight) {
	                    this.container.find('input[name="daterangepicker_start"]').val(this.startDate.format(this.locale.format));
	                } else {
	                    this.container.find('input[name="daterangepicker_end"]').val(this.endDate.format(this.locale.format));
	                }

	            }

	            this.updateCalendars();
	            if (this.timePicker) {
	                this.renderTimePicker('left');
	                this.renderTimePicker('right');
	            }
	        },

	        elementChanged: function() {
	            if (!this.element.is('input')) return;
	            if (!this.element.val().length) return;
	            if (this.element.val().length < this.locale.format.length) return;

	            var dateString = this.element.val().split(this.locale.separator),
	                start = null,
	                end = null;

	            if (dateString.length === 2) {
	                start = moment(dateString[0], this.locale.format);
	                end = moment(dateString[1], this.locale.format);
	            }

	            if (this.singleDatePicker || start === null || end === null) {
	                start = moment(this.element.val(), this.locale.format);
	                end = start;
	            }

	            if (!start.isValid() || !end.isValid()) return;

	            this.setStartDate(start);
	            this.setEndDate(end);
	            this.updateView();
	        },

	        keydown: function(e) {
	            //hide on tab or enter
	            if ((e.keyCode === 9) || (e.keyCode === 13)) {
	                this.hide();
	            }
	        },

	        updateElement: function() {
	            if (this.element.is('input') && !this.singleDatePicker && this.autoUpdateInput) {
	                this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
	                this.element.trigger('change');
	            } else if (this.element.is('input') && this.autoUpdateInput) {
	                this.element.val(this.startDate.format(this.locale.format));
	                this.element.trigger('change');
	            }
	        },

	        remove: function() {
	            this.container.remove();
	            this.element.off('.daterangepicker');
	            this.element.removeData();
	        }

	    };

	    $.fn.daterangepicker = function(options, callback) {
	        this.each(function() {
	            var el = $(this);
	            if (el.data('daterangepicker'))
	                el.data('daterangepicker').remove();
	            el.data('daterangepicker', new DateRangePicker(el, options, callback));
	        });
	        return this;
	    };
	    
	    return DateRangePicker;

	}));

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.10.6
	 * ©2008-2014 SpryMedia Ltd - datatables.net/license
	 */

	/**
	 * @summary     DataTables
	 * @description Paginate, search and order HTML tables
	 * @version     1.10.6
	 * @file        jquery.dataTables.js
	 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
	 * @contact     www.sprymedia.co.uk/contact
	 * @copyright   Copyright 2008-2014 SpryMedia Ltd.
	 *
	 * This source file is free software, available under the following license:
	 *   MIT license - http://datatables.net/license
	 *
	 * This source file is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
	 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
	 *
	 * For details please refer to: http://www.datatables.net
	 */

	/*jslint evil: true, undef: true, browser: true */
	/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

	(/** @lends <global> */function( window, document, undefined ) {

	(function( factory ) {
	    "use strict";
	    if ( true ) {
	        // Define as an AMD module if possible
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_0__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	    }
	     else if ( typeof exports === 'object' ) {
	        // Node/CommonJS
	        module.exports = factory( require( 'jQuery' ) );
	    }
	    else if ( jQuery && !jQuery.fn.dataTable ) {
	        // Define using browser globals otherwise
	        // Prevent multiple instantiations if the script is loaded twice
	        factory( jQuery );
	    }
	}
	(/** @lends <global> */function( $ ) {
	    "use strict";

	    /**
	     * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	     * flexible tool, based upon the foundations of progressive enhancement,
	     * which will add advanced interaction controls to any HTML table. For a
	     * full list of features please refer to
	     * [DataTables.net](href="http://datatables.net).
	     *
	     * Note that the `DataTable` object is not a global variable but is aliased
	     * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	     * be  accessed.
	     *
	     *  @class
	     *  @param {object} [init={}] Configuration object for DataTables. Options
	     *    are defined by {@link DataTable.defaults}
	     *  @requires jQuery 1.7+
	     *
	     *  @example
	     *    // Basic initialisation
	     *    $(document).ready( function {
	     *      $('#example').dataTable();
	     *    } );
	     *
	     *  @example
	     *    // Initialisation with configuration options - in this case, disable
	     *    // pagination and sorting.
	     *    $(document).ready( function {
	     *      $('#example').dataTable( {
	     *        "paginate": false,
	     *        "sort": false
	     *      } );
	     *    } );
	     */
	    var DataTable;

	    
	    /*
	     * It is useful to have variables which are scoped locally so only the
	     * DataTables functions can access them and they don't leak into global space.
	     * At the same time these functions are often useful over multiple files in the
	     * core and API, so we list, or at least document, all variables which are used
	     * by DataTables as private variables here. This also ensures that there is no
	     * clashing of variable names and that they can easily referenced for reuse.
	     */
	    
	    
	    // Defined else where
	    //  _selector_run
	    //  _selector_opts
	    //  _selector_first
	    //  _selector_row_indexes
	    
	    var _ext; // DataTable.ext
	    var _Api; // DataTable.Api
	    var _api_register; // DataTable.Api.register
	    var _api_registerPlural; // DataTable.Api.registerPlural
	    
	    var _re_dic = {};
	    var _re_new_lines = /[\r\n]/g;
	    var _re_html = /<.*?>/g;
	    var _re_date_start = /^[\w\+\-]/;
	    var _re_date_end = /[\w\+\-]$/;
	    
	    // Escape regular expression special characters
	    var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
	    
	    // http://en.wikipedia.org/wiki/Foreign_exchange_market
	    // - \u20BD - Russian ruble.
	    // - \u20a9 - South Korean Won
	    // - \u20BA - Turkish Lira
	    // - \u20B9 - Indian Rupee
	    // - R - Brazil (R$) and South Africa
	    // - fr - Swiss Franc
	    // - kr - Swedish krona, Norwegian krone and Danish krone
	    // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
	    //   standards as thousands separators.
	    var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;
	    
	    
	    var _empty = function ( d ) {
	        return !d || d === true || d === '-' ? true : false;
	    };
	    
	    
	    var _intVal = function ( s ) {
	        var integer = parseInt( s, 10 );
	        return !isNaN(integer) && isFinite(s) ? integer : null;
	    };
	    
	    // Convert from a formatted number with characters other than `.` as the
	    // decimal place, to a Javascript number
	    var _numToDecimal = function ( num, decimalPoint ) {
	        // Cache created regular expressions for speed as this function is called often
	        if ( ! _re_dic[ decimalPoint ] ) {
	            _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
	        }
	        return typeof num === 'string' && decimalPoint !== '.' ?
	            num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
	            num;
	    };
	    
	    
	    var _isNumber = function ( d, decimalPoint, formatted ) {
	        var strType = typeof d === 'string';
	    
	        // If empty return immediately so there must be a number if it is a
	        // formatted string (this stops the string "k", or "kr", etc being detected
	        // as a formatted number for currency
	        if ( _empty( d ) ) {
	            return true;
	        }
	    
	        if ( decimalPoint && strType ) {
	            d = _numToDecimal( d, decimalPoint );
	        }
	    
	        if ( formatted && strType ) {
	            d = d.replace( _re_formatted_numeric, '' );
	        }
	    
	        return !isNaN( parseFloat(d) ) && isFinite( d );
	    };
	    
	    
	    // A string without HTML in it can be considered to be HTML still
	    var _isHtml = function ( d ) {
	        return _empty( d ) || typeof d === 'string';
	    };
	    
	    
	    var _htmlNumeric = function ( d, decimalPoint, formatted ) {
	        if ( _empty( d ) ) {
	            return true;
	        }
	    
	        var html = _isHtml( d );
	        return ! html ?
	            null :
	            _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
	                true :
	                null;
	    };
	    
	    
	    var _pluck = function ( a, prop, prop2 ) {
	        var out = [];
	        var i=0, ien=a.length;
	    
	        // Could have the test in the loop for slightly smaller code, but speed
	        // is essential here
	        if ( prop2 !== undefined ) {
	            for ( ; i<ien ; i++ ) {
	                if ( a[i] && a[i][ prop ] ) {
	                    out.push( a[i][ prop ][ prop2 ] );
	                }
	            }
	        }
	        else {
	            for ( ; i<ien ; i++ ) {
	                if ( a[i] ) {
	                    out.push( a[i][ prop ] );
	                }
	            }
	        }
	    
	        return out;
	    };
	    
	    
	    // Basically the same as _pluck, but rather than looping over `a` we use `order`
	    // as the indexes to pick from `a`
	    var _pluck_order = function ( a, order, prop, prop2 )
	    {
	        var out = [];
	        var i=0, ien=order.length;
	    
	        // Could have the test in the loop for slightly smaller code, but speed
	        // is essential here
	        if ( prop2 !== undefined ) {
	            for ( ; i<ien ; i++ ) {
	                if ( a[ order[i] ][ prop ] ) {
	                    out.push( a[ order[i] ][ prop ][ prop2 ] );
	                }
	            }
	        }
	        else {
	            for ( ; i<ien ; i++ ) {
	                out.push( a[ order[i] ][ prop ] );
	            }
	        }
	    
	        return out;
	    };
	    
	    
	    var _range = function ( len, start )
	    {
	        var out = [];
	        var end;
	    
	        if ( start === undefined ) {
	            start = 0;
	            end = len;
	        }
	        else {
	            end = start;
	            start = len;
	        }
	    
	        for ( var i=start ; i<end ; i++ ) {
	            out.push( i );
	        }
	    
	        return out;
	    };
	    
	    
	    var _removeEmpty = function ( a )
	    {
	        var out = [];
	    
	        for ( var i=0, ien=a.length ; i<ien ; i++ ) {
	            if ( a[i] ) { // careful - will remove all falsy values!
	                out.push( a[i] );
	            }
	        }
	    
	        return out;
	    };
	    
	    
	    var _stripHtml = function ( d ) {
	        return d.replace( _re_html, '' );
	    };
	    
	    
	    /**
	     * Find the unique elements in a source array.
	     *
	     * @param  {array} src Source array
	     * @return {array} Array of unique items
	     * @ignore
	     */
	    var _unique = function ( src )
	    {
	        // A faster unique method is to use object keys to identify used values,
	        // but this doesn't work with arrays or objects, which we must also
	        // consider. See jsperf.com/compare-array-unique-versions/4 for more
	        // information.
	        var
	            out = [],
	            val,
	            i, ien=src.length,
	            j, k=0;
	    
	        again: for ( i=0 ; i<ien ; i++ ) {
	            val = src[i];
	    
	            for ( j=0 ; j<k ; j++ ) {
	                if ( out[j] === val ) {
	                    continue again;
	                }
	            }
	    
	            out.push( val );
	            k++;
	        }
	    
	        return out;
	    };
	    
	    
	    
	    /**
	     * Create a mapping object that allows camel case parameters to be looked up
	     * for their Hungarian counterparts. The mapping is stored in a private
	     * parameter called `_hungarianMap` which can be accessed on the source object.
	     *  @param {object} o
	     *  @memberof DataTable#oApi
	     */
	    function _fnHungarianMap ( o )
	    {
	        var
	            hungarian = 'a aa ai ao as b fn i m o s ',
	            match,
	            newKey,
	            map = {};
	    
	        $.each( o, function (key, val) {
	            match = key.match(/^([^A-Z]+?)([A-Z])/);
	    
	            if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
	            {
	                newKey = key.replace( match[0], match[2].toLowerCase() );
	                map[ newKey ] = key;
	    
	                if ( match[1] === 'o' )
	                {
	                    _fnHungarianMap( o[key] );
	                }
	            }
	        } );
	    
	        o._hungarianMap = map;
	    }
	    
	    
	    /**
	     * Convert from camel case parameters to Hungarian, based on a Hungarian map
	     * created by _fnHungarianMap.
	     *  @param {object} src The model object which holds all parameters that can be
	     *    mapped.
	     *  @param {object} user The object to convert from camel case to Hungarian.
	     *  @param {boolean} force When set to `true`, properties which already have a
	     *    Hungarian value in the `user` object will be overwritten. Otherwise they
	     *    won't be.
	     *  @memberof DataTable#oApi
	     */
	    function _fnCamelToHungarian ( src, user, force )
	    {
	        if ( ! src._hungarianMap ) {
	            _fnHungarianMap( src );
	        }
	    
	        var hungarianKey;
	    
	        $.each( user, function (key, val) {
	            hungarianKey = src._hungarianMap[ key ];
	    
	            if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
	            {
	                // For objects, we need to buzz down into the object to copy parameters
	                if ( hungarianKey.charAt(0) === 'o' )
	                {
	                    // Copy the camelCase options over to the hungarian
	                    if ( ! user[ hungarianKey ] ) {
	                        user[ hungarianKey ] = {};
	                    }
	                    $.extend( true, user[hungarianKey], user[key] );
	    
	                    _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
	                }
	                else {
	                    user[hungarianKey] = user[ key ];
	                }
	            }
	        } );
	    }
	    
	    
	    /**
	     * Language compatibility - when certain options are given, and others aren't, we
	     * need to duplicate the values over, in order to provide backwards compatibility
	     * with older language files.
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnLanguageCompat( lang )
	    {
	        var defaults = DataTable.defaults.oLanguage;
	        var zeroRecords = lang.sZeroRecords;
	    
	        /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
	         * sZeroRecords - assuming that is given.
	         */
	        if ( ! lang.sEmptyTable && zeroRecords &&
	            defaults.sEmptyTable === "No data available in table" )
	        {
	            _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
	        }
	    
	        /* Likewise with loading records */
	        if ( ! lang.sLoadingRecords && zeroRecords &&
	            defaults.sLoadingRecords === "Loading..." )
	        {
	            _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
	        }
	    
	        // Old parameter name of the thousands separator mapped onto the new
	        if ( lang.sInfoThousands ) {
	            lang.sThousands = lang.sInfoThousands;
	        }
	    
	        var decimal = lang.sDecimal;
	        if ( decimal ) {
	            _addNumericSort( decimal );
	        }
	    }
	    
	    
	    /**
	     * Map one parameter onto another
	     *  @param {object} o Object to map
	     *  @param {*} knew The new parameter name
	     *  @param {*} old The old parameter name
	     */
	    var _fnCompatMap = function ( o, knew, old ) {
	        if ( o[ knew ] !== undefined ) {
	            o[ old ] = o[ knew ];
	        }
	    };
	    
	    
	    /**
	     * Provide backwards compatibility for the main DT options. Note that the new
	     * options are mapped onto the old parameters, so this is an external interface
	     * change only.
	     *  @param {object} init Object to map
	     */
	    function _fnCompatOpts ( init )
	    {
	        _fnCompatMap( init, 'ordering',      'bSort' );
	        _fnCompatMap( init, 'orderMulti',    'bSortMulti' );
	        _fnCompatMap( init, 'orderClasses',  'bSortClasses' );
	        _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
	        _fnCompatMap( init, 'order',         'aaSorting' );
	        _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
	        _fnCompatMap( init, 'paging',        'bPaginate' );
	        _fnCompatMap( init, 'pagingType',    'sPaginationType' );
	        _fnCompatMap( init, 'pageLength',    'iDisplayLength' );
	        _fnCompatMap( init, 'searching',     'bFilter' );
	    
	        // Column search objects are in an array, so it needs to be converted
	        // element by element
	        var searchCols = init.aoSearchCols;
	    
	        if ( searchCols ) {
	            for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
	                if ( searchCols[i] ) {
	                    _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
	                }
	            }
	        }
	    }
	    
	    
	    /**
	     * Provide backwards compatibility for column options. Note that the new options
	     * are mapped onto the old parameters, so this is an external interface change
	     * only.
	     *  @param {object} init Object to map
	     */
	    function _fnCompatCols ( init )
	    {
	        _fnCompatMap( init, 'orderable',     'bSortable' );
	        _fnCompatMap( init, 'orderData',     'aDataSort' );
	        _fnCompatMap( init, 'orderSequence', 'asSorting' );
	        _fnCompatMap( init, 'orderDataType', 'sortDataType' );
	    
	        // orderData can be given as an integer
	        var dataSort = init.aDataSort;
	        if ( dataSort && ! $.isArray( dataSort ) ) {
	            init.aDataSort = [ dataSort ];
	        }
	    }
	    
	    
	    /**
	     * Browser feature detection for capabilities, quirks
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnBrowserDetect( settings )
	    {
	        var browser = settings.oBrowser;
	    
	        // Scrolling feature / quirks detection
	        var n = $('<div/>')
	            .css( {
	                position: 'absolute',
	                top: 0,
	                left: 0,
	                height: 1,
	                width: 1,
	                overflow: 'hidden'
	            } )
	            .append(
	                $('<div/>')
	                    .css( {
	                        position: 'absolute',
	                        top: 1,
	                        left: 1,
	                        width: 100,
	                        overflow: 'scroll'
	                    } )
	                    .append(
	                        $('<div class="test"/>')
	                            .css( {
	                                width: '100%',
	                                height: 10
	                            } )
	                    )
	            )
	            .appendTo( 'body' );
	    
	        var test = n.find('.test');
	    
	        // IE6/7 will oversize a width 100% element inside a scrolling element, to
	        // include the width of the scrollbar, while other browsers ensure the inner
	        // element is contained without forcing scrolling
	        browser.bScrollOversize = test[0].offsetWidth === 100;
	    
	        // In rtl text layout, some browsers (most, but not all) will place the
	        // scrollbar on the left, rather than the right.
	        browser.bScrollbarLeft = Math.round( test.offset().left ) !== 1;
	    
	        n.remove();
	    }
	    
	    
	    /**
	     * Array.prototype reduce[Right] method, used for browsers which don't support
	     * JS 1.6. Done this way to reduce code size, since we iterate either way
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnReduce ( that, fn, init, start, end, inc )
	    {
	        var
	            i = start,
	            value,
	            isSet = false;
	    
	        if ( init !== undefined ) {
	            value = init;
	            isSet = true;
	        }
	    
	        while ( i !== end ) {
	            if ( ! that.hasOwnProperty(i) ) {
	                continue;
	            }
	    
	            value = isSet ?
	                fn( value, that[i], i, that ) :
	                that[i];
	    
	            isSet = true;
	            i += inc;
	        }
	    
	        return value;
	    }
	    
	    /**
	     * Add a column to the list used for the table with default values
	     *  @param {object} oSettings dataTables settings object
	     *  @param {node} nTh The th element for this column
	     *  @memberof DataTable#oApi
	     */
	    function _fnAddColumn( oSettings, nTh )
	    {
	        // Add column to aoColumns array
	        var oDefaults = DataTable.defaults.column;
	        var iCol = oSettings.aoColumns.length;
	        var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
	            "nTh": nTh ? nTh : document.createElement('th'),
	            "sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
	            "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
	            "mData": oDefaults.mData ? oDefaults.mData : iCol,
	            idx: iCol
	        } );
	        oSettings.aoColumns.push( oCol );
	    
	        // Add search object for column specific search. Note that the `searchCols[ iCol ]`
	        // passed into extend can be undefined. This allows the user to give a default
	        // with only some of the parameters defined, and also not give a default
	        var searchCols = oSettings.aoPreSearchCols;
	        searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
	    
	        // Use the default column options function to initialise classes etc
	        _fnColumnOptions( oSettings, iCol, $(nTh).data() );
	    }
	    
	    
	    /**
	     * Apply options for a column
	     *  @param {object} oSettings dataTables settings object
	     *  @param {int} iCol column index to consider
	     *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	     *  @memberof DataTable#oApi
	     */
	    function _fnColumnOptions( oSettings, iCol, oOptions )
	    {
	        var oCol = oSettings.aoColumns[ iCol ];
	        var oClasses = oSettings.oClasses;
	        var th = $(oCol.nTh);
	    
	        // Try to get width information from the DOM. We can't get it from CSS
	        // as we'd need to parse the CSS stylesheet. `width` option can override
	        if ( ! oCol.sWidthOrig ) {
	            // Width attribute
	            oCol.sWidthOrig = th.attr('width') || null;
	    
	            // Style attribute
	            var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
	            if ( t ) {
	                oCol.sWidthOrig = t[1];
	            }
	        }
	    
	        /* User specified column options */
	        if ( oOptions !== undefined && oOptions !== null )
	        {
	            // Backwards compatibility
	            _fnCompatCols( oOptions );
	    
	            // Map camel case parameters to their Hungarian counterparts
	            _fnCamelToHungarian( DataTable.defaults.column, oOptions );
	    
	            /* Backwards compatibility for mDataProp */
	            if ( oOptions.mDataProp !== undefined && !oOptions.mData )
	            {
	                oOptions.mData = oOptions.mDataProp;
	            }
	    
	            if ( oOptions.sType )
	            {
	                oCol._sManualType = oOptions.sType;
	            }
	    
	            // `class` is a reserved word in Javascript, so we need to provide
	            // the ability to use a valid name for the camel case input
	            if ( oOptions.className && ! oOptions.sClass )
	            {
	                oOptions.sClass = oOptions.className;
	            }
	    
	            $.extend( oCol, oOptions );
	            _fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
	    
	            /* iDataSort to be applied (backwards compatibility), but aDataSort will take
	             * priority if defined
	             */
	            if ( oOptions.iDataSort !== undefined )
	            {
	                oCol.aDataSort = [ oOptions.iDataSort ];
	            }
	            _fnMap( oCol, oOptions, "aDataSort" );
	        }
	    
	        /* Cache the data get and set functions for speed */
	        var mDataSrc = oCol.mData;
	        var mData = _fnGetObjectDataFn( mDataSrc );
	        var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
	    
	        var attrTest = function( src ) {
	            return typeof src === 'string' && src.indexOf('@') !== -1;
	        };
	        oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
	            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
	        );
	    
	        oCol.fnGetData = function (rowData, type, meta) {
	            var innerData = mData( rowData, type, undefined, meta );
	    
	            return mRender && type ?
	                mRender( innerData, type, rowData, meta ) :
	                innerData;
	        };
	        oCol.fnSetData = function ( rowData, val, meta ) {
	            return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
	        };
	    
	        // Indicate if DataTables should read DOM data as an object or array
	        // Used in _fnGetRowElements
	        if ( typeof mDataSrc !== 'number' ) {
	            oSettings._rowReadObject = true;
	        }
	    
	        /* Feature sorting overrides column specific when off */
	        if ( !oSettings.oFeatures.bSort )
	        {
	            oCol.bSortable = false;
	            th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
	        }
	    
	        /* Check that the class assignment is correct for sorting */
	        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
	        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
	        if ( !oCol.bSortable || (!bAsc && !bDesc) )
	        {
	            oCol.sSortingClass = oClasses.sSortableNone;
	            oCol.sSortingClassJUI = "";
	        }
	        else if ( bAsc && !bDesc )
	        {
	            oCol.sSortingClass = oClasses.sSortableAsc;
	            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
	        }
	        else if ( !bAsc && bDesc )
	        {
	            oCol.sSortingClass = oClasses.sSortableDesc;
	            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
	        }
	        else
	        {
	            oCol.sSortingClass = oClasses.sSortable;
	            oCol.sSortingClassJUI = oClasses.sSortJUI;
	        }
	    }
	    
	    
	    /**
	     * Adjust the table column widths for new data. Note: you would probably want to
	     * do a redraw after calling this function!
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnAdjustColumnSizing ( settings )
	    {
	        /* Not interested in doing column width calculation if auto-width is disabled */
	        if ( settings.oFeatures.bAutoWidth !== false )
	        {
	            var columns = settings.aoColumns;
	    
	            _fnCalculateColumnWidths( settings );
	            for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
	            {
	                columns[i].nTh.style.width = columns[i].sWidth;
	            }
	        }
	    
	        var scroll = settings.oScroll;
	        if ( scroll.sY !== '' || scroll.sX !== '')
	        {
	            _fnScrollDraw( settings );
	        }
	    
	        _fnCallbackFire( settings, null, 'column-sizing', [settings] );
	    }
	    
	    
	    /**
	     * Covert the index of a visible column to the index in the data array (take account
	     * of hidden columns)
	     *  @param {object} oSettings dataTables settings object
	     *  @param {int} iMatch Visible column index to lookup
	     *  @returns {int} i the data index
	     *  @memberof DataTable#oApi
	     */
	    function _fnVisibleToColumnIndex( oSettings, iMatch )
	    {
	        var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	    
	        return typeof aiVis[iMatch] === 'number' ?
	            aiVis[iMatch] :
	            null;
	    }
	    
	    
	    /**
	     * Covert the index of an index in the data array and convert it to the visible
	     *   column index (take account of hidden columns)
	     *  @param {int} iMatch Column index to lookup
	     *  @param {object} oSettings dataTables settings object
	     *  @returns {int} i the data index
	     *  @memberof DataTable#oApi
	     */
	    function _fnColumnIndexToVisible( oSettings, iMatch )
	    {
	        var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	        var iPos = $.inArray( iMatch, aiVis );
	    
	        return iPos !== -1 ? iPos : null;
	    }
	    
	    
	    /**
	     * Get the number of visible columns
	     *  @param {object} oSettings dataTables settings object
	     *  @returns {int} i the number of visible columns
	     *  @memberof DataTable#oApi
	     */
	    function _fnVisbleColumns( oSettings )
	    {
	        return _fnGetColumns( oSettings, 'bVisible' ).length;
	    }
	    
	    
	    /**
	     * Get an array of column indexes that match a given property
	     *  @param {object} oSettings dataTables settings object
	     *  @param {string} sParam Parameter in aoColumns to look for - typically
	     *    bVisible or bSearchable
	     *  @returns {array} Array of indexes with matched properties
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetColumns( oSettings, sParam )
	    {
	        var a = [];
	    
	        $.map( oSettings.aoColumns, function(val, i) {
	            if ( val[sParam] ) {
	                a.push( i );
	            }
	        } );
	    
	        return a;
	    }
	    
	    
	    /**
	     * Calculate the 'type' of a column
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnColumnTypes ( settings )
	    {
	        var columns = settings.aoColumns;
	        var data = settings.aoData;
	        var types = DataTable.ext.type.detect;
	        var i, ien, j, jen, k, ken;
	        var col, cell, detectedType, cache;
	    
	        // For each column, spin over the 
	        for ( i=0, ien=columns.length ; i<ien ; i++ ) {
	            col = columns[i];
	            cache = [];
	    
	            if ( ! col.sType && col._sManualType ) {
	                col.sType = col._sManualType;
	            }
	            else if ( ! col.sType ) {
	                for ( j=0, jen=types.length ; j<jen ; j++ ) {
	                    for ( k=0, ken=data.length ; k<ken ; k++ ) {
	                        // Use a cache array so we only need to get the type data
	                        // from the formatter once (when using multiple detectors)
	                        if ( cache[k] === undefined ) {
	                            cache[k] = _fnGetCellData( settings, k, i, 'type' );
	                        }
	    
	                        detectedType = types[j]( cache[k], settings );
	    
	                        // If null, then this type can't apply to this column, so
	                        // rather than testing all cells, break out. There is an
	                        // exception for the last type which is `html`. We need to
	                        // scan all rows since it is possible to mix string and HTML
	                        // types
	                        if ( ! detectedType && j !== types.length-1 ) {
	                            break;
	                        }
	    
	                        // Only a single match is needed for html type since it is
	                        // bottom of the pile and very similar to string
	                        if ( detectedType === 'html' ) {
	                            break;
	                        }
	                    }
	    
	                    // Type is valid for all data points in the column - use this
	                    // type
	                    if ( detectedType ) {
	                        col.sType = detectedType;
	                        break;
	                    }
	                }
	    
	                // Fall back - if no type was detected, always use string
	                if ( ! col.sType ) {
	                    col.sType = 'string';
	                }
	            }
	        }
	    }
	    
	    
	    /**
	     * Take the column definitions and static columns arrays and calculate how
	     * they relate to column indexes. The callback function will then apply the
	     * definition found for a column to a suitable configuration object.
	     *  @param {object} oSettings dataTables settings object
	     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	     *  @param {array} aoCols The aoColumns array that defines columns individually
	     *  @param {function} fn Callback function - takes two parameters, the calculated
	     *    column index and the definition for that column.
	     *  @memberof DataTable#oApi
	     */
	    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
	    {
	        var i, iLen, j, jLen, k, kLen, def;
	        var columns = oSettings.aoColumns;
	    
	        // Column definitions with aTargets
	        if ( aoColDefs )
	        {
	            /* Loop over the definitions array - loop in reverse so first instance has priority */
	            for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
	            {
	                def = aoColDefs[i];
	    
	                /* Each definition can target multiple columns, as it is an array */
	                var aTargets = def.targets !== undefined ?
	                    def.targets :
	                    def.aTargets;
	    
	                if ( ! $.isArray( aTargets ) )
	                {
	                    aTargets = [ aTargets ];
	                }
	    
	                for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
	                {
	                    if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
	                    {
	                        /* Add columns that we don't yet know about */
	                        while( columns.length <= aTargets[j] )
	                        {
	                            _fnAddColumn( oSettings );
	                        }
	    
	                        /* Integer, basic index */
	                        fn( aTargets[j], def );
	                    }
	                    else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
	                    {
	                        /* Negative integer, right to left column counting */
	                        fn( columns.length+aTargets[j], def );
	                    }
	                    else if ( typeof aTargets[j] === 'string' )
	                    {
	                        /* Class name matching on TH element */
	                        for ( k=0, kLen=columns.length ; k<kLen ; k++ )
	                        {
	                            if ( aTargets[j] == "_all" ||
	                                 $(columns[k].nTh).hasClass( aTargets[j] ) )
	                            {
	                                fn( k, def );
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    
	        // Statically defined columns array
	        if ( aoCols )
	        {
	            for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
	            {
	                fn( i, aoCols[i] );
	            }
	        }
	    }
	    
	    /**
	     * Add a data array to the table, creating DOM node etc. This is the parallel to
	     * _fnGatherData, but for adding rows from a Javascript source, rather than a
	     * DOM source.
	     *  @param {object} oSettings dataTables settings object
	     *  @param {array} aData data array to be added
	     *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	     *    DataTables will create a row automatically
	     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	     *    if nTr is.
	     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	     *  @memberof DataTable#oApi
	     */
	    function _fnAddData ( oSettings, aDataIn, nTr, anTds )
	    {
	        /* Create the object for storing information about this new row */
	        var iRow = oSettings.aoData.length;
	        var oData = $.extend( true, {}, DataTable.models.oRow, {
	            src: nTr ? 'dom' : 'data'
	        } );
	    
	        oData._aData = aDataIn;
	        oSettings.aoData.push( oData );
	    
	        /* Create the cells */
	        var nTd, sThisType;
	        var columns = oSettings.aoColumns;
	        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
	        {
	            // When working with a row, the data source object must be populated. In
	            // all other cases, the data source object is already populated, so we
	            // don't overwrite it, which might break bindings etc
	            if ( nTr ) {
	                _fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );
	            }
	            columns[i].sType = null;
	        }
	    
	        /* Add to the display array */
	        oSettings.aiDisplayMaster.push( iRow );
	    
	        /* Create the DOM information, or register it if already present */
	        if ( nTr || ! oSettings.oFeatures.bDeferRender )
	        {
	            _fnCreateTr( oSettings, iRow, nTr, anTds );
	        }
	    
	        return iRow;
	    }
	    
	    
	    /**
	     * Add one or more TR elements to the table. Generally we'd expect to
	     * use this for reading data from a DOM sourced table, but it could be
	     * used for an TR element. Note that if a TR is given, it is used (i.e.
	     * it is not cloned).
	     *  @param {object} settings dataTables settings object
	     *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	     *  @returns {array} Array of indexes for the added rows
	     *  @memberof DataTable#oApi
	     */
	    function _fnAddTr( settings, trs )
	    {
	        var row;
	    
	        // Allow an individual node to be passed in
	        if ( ! (trs instanceof $) ) {
	            trs = $(trs);
	        }
	    
	        return trs.map( function (i, el) {
	            row = _fnGetRowElements( settings, el );
	            return _fnAddData( settings, row.data, el, row.cells );
	        } );
	    }
	    
	    
	    /**
	     * Take a TR element and convert it to an index in aoData
	     *  @param {object} oSettings dataTables settings object
	     *  @param {node} n the TR element to find
	     *  @returns {int} index if the node is found, null if not
	     *  @memberof DataTable#oApi
	     */
	    function _fnNodeToDataIndex( oSettings, n )
	    {
	        return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
	    }
	    
	    
	    /**
	     * Take a TD element and convert it into a column data index (not the visible index)
	     *  @param {object} oSettings dataTables settings object
	     *  @param {int} iRow The row number the TD/TH can be found in
	     *  @param {node} n The TD/TH element to find
	     *  @returns {int} index if the node is found, -1 if not
	     *  @memberof DataTable#oApi
	     */
	    function _fnNodeToColumnIndex( oSettings, iRow, n )
	    {
	        return $.inArray( n, oSettings.aoData[ iRow ].anCells );
	    }
	    
	    
	    /**
	     * Get the data for a given cell from the internal cache, taking into account data mapping
	     *  @param {object} settings dataTables settings object
	     *  @param {int} rowIdx aoData row id
	     *  @param {int} colIdx Column index
	     *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	     *  @returns {*} Cell data
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetCellData( settings, rowIdx, colIdx, type )
	    {
	        var draw           = settings.iDraw;
	        var col            = settings.aoColumns[colIdx];
	        var rowData        = settings.aoData[rowIdx]._aData;
	        var defaultContent = col.sDefaultContent;
	        var cellData       = col.fnGetData( rowData, type, {
	            settings: settings,
	            row:      rowIdx,
	            col:      colIdx
	        } );
	    
	        if ( cellData === undefined ) {
	            if ( settings.iDrawError != draw && defaultContent === null ) {
	                _fnLog( settings, 0, "Requested unknown parameter "+
	                    (typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
	                    " for row "+rowIdx, 4 );
	                settings.iDrawError = draw;
	            }
	            return defaultContent;
	        }
	    
	        /* When the data source is null, we can use default column data */
	        if ( (cellData === rowData || cellData === null) && defaultContent !== null ) {
	            cellData = defaultContent;
	        }
	        else if ( typeof cellData === 'function' ) {
	            // If the data source is a function, then we run it and use the return,
	            // executing in the scope of the data object (for instances)
	            return cellData.call( rowData );
	        }
	    
	        if ( cellData === null && type == 'display' ) {
	            return '';
	        }
	        return cellData;
	    }
	    
	    
	    /**
	     * Set the value for a specific cell, into the internal data cache
	     *  @param {object} settings dataTables settings object
	     *  @param {int} rowIdx aoData row id
	     *  @param {int} colIdx Column index
	     *  @param {*} val Value to set
	     *  @memberof DataTable#oApi
	     */
	    function _fnSetCellData( settings, rowIdx, colIdx, val )
	    {
	        var col     = settings.aoColumns[colIdx];
	        var rowData = settings.aoData[rowIdx]._aData;
	    
	        col.fnSetData( rowData, val, {
	            settings: settings,
	            row:      rowIdx,
	            col:      colIdx
	        }  );
	    }
	    
	    
	    // Private variable that is used to match action syntax in the data property object
	    var __reArray = /\[.*?\]$/;
	    var __reFn = /\(\)$/;
	    
	    /**
	     * Split string on periods, taking into account escaped periods
	     * @param  {string} str String to split
	     * @return {array} Split string
	     */
	    function _fnSplitObjNotation( str )
	    {
	        return $.map( str.match(/(\\.|[^\.])+/g), function ( s ) {
	            return s.replace(/\\./g, '.');
	        } );
	    }
	    
	    
	    /**
	     * Return a function that can be used to get data from a source object, taking
	     * into account the ability to use nested objects as a source
	     *  @param {string|int|function} mSource The data source for the object
	     *  @returns {function} Data get function
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetObjectDataFn( mSource )
	    {
	        if ( $.isPlainObject( mSource ) )
	        {
	            /* Build an object of get functions, and wrap them in a single call */
	            var o = {};
	            $.each( mSource, function (key, val) {
	                if ( val ) {
	                    o[key] = _fnGetObjectDataFn( val );
	                }
	            } );
	    
	            return function (data, type, row, meta) {
	                var t = o[type] || o._;
	                return t !== undefined ?
	                    t(data, type, row, meta) :
	                    data;
	            };
	        }
	        else if ( mSource === null )
	        {
	            /* Give an empty string for rendering / sorting etc */
	            return function (data) { // type, row and meta also passed, but not used
	                return data;
	            };
	        }
	        else if ( typeof mSource === 'function' )
	        {
	            return function (data, type, row, meta) {
	                return mSource( data, type, row, meta );
	            };
	        }
	        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
	                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
	        {
	            /* If there is a . in the source string then the data source is in a
	             * nested object so we loop over the data for each level to get the next
	             * level down. On each loop we test for undefined, and if found immediately
	             * return. This allows entire objects to be missing and sDefaultContent to
	             * be used if defined, rather than throwing an error
	             */
	            var fetchData = function (data, type, src) {
	                var arrayNotation, funcNotation, out, innerSrc;
	    
	                if ( src !== "" )
	                {
	                    var a = _fnSplitObjNotation( src );
	    
	                    for ( var i=0, iLen=a.length ; i<iLen ; i++ )
	                    {
	                        // Check if we are dealing with special notation
	                        arrayNotation = a[i].match(__reArray);
	                        funcNotation = a[i].match(__reFn);
	    
	                        if ( arrayNotation )
	                        {
	                            // Array notation
	                            a[i] = a[i].replace(__reArray, '');
	    
	                            // Condition allows simply [] to be passed in
	                            if ( a[i] !== "" ) {
	                                data = data[ a[i] ];
	                            }
	                            out = [];
	    
	                            // Get the remainder of the nested object to get
	                            a.splice( 0, i+1 );
	                            innerSrc = a.join('.');
	    
	                            // Traverse each entry in the array getting the properties requested
	                            for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
	                                out.push( fetchData( data[j], type, innerSrc ) );
	                            }
	    
	                            // If a string is given in between the array notation indicators, that
	                            // is used to join the strings together, otherwise an array is returned
	                            var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
	                            data = (join==="") ? out : out.join(join);
	    
	                            // The inner call to fetchData has already traversed through the remainder
	                            // of the source requested, so we exit from the loop
	                            break;
	                        }
	                        else if ( funcNotation )
	                        {
	                            // Function call
	                            a[i] = a[i].replace(__reFn, '');
	                            data = data[ a[i] ]();
	                            continue;
	                        }
	    
	                        if ( data === null || data[ a[i] ] === undefined )
	                        {
	                            return undefined;
	                        }
	                        data = data[ a[i] ];
	                    }
	                }
	    
	                return data;
	            };
	    
	            return function (data, type) { // row and meta also passed, but not used
	                return fetchData( data, type, mSource );
	            };
	        }
	        else
	        {
	            /* Array or flat object mapping */
	            return function (data, type) { // row and meta also passed, but not used
	                return data[mSource];
	            };
	        }
	    }
	    
	    
	    /**
	     * Return a function that can be used to set data from a source object, taking
	     * into account the ability to use nested objects as a source
	     *  @param {string|int|function} mSource The data source for the object
	     *  @returns {function} Data set function
	     *  @memberof DataTable#oApi
	     */
	    function _fnSetObjectDataFn( mSource )
	    {
	        if ( $.isPlainObject( mSource ) )
	        {
	            /* Unlike get, only the underscore (global) option is used for for
	             * setting data since we don't know the type here. This is why an object
	             * option is not documented for `mData` (which is read/write), but it is
	             * for `mRender` which is read only.
	             */
	            return _fnSetObjectDataFn( mSource._ );
	        }
	        else if ( mSource === null )
	        {
	            /* Nothing to do when the data source is null */
	            return function () {};
	        }
	        else if ( typeof mSource === 'function' )
	        {
	            return function (data, val, meta) {
	                mSource( data, 'set', val, meta );
	            };
	        }
	        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
	                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
	        {
	            /* Like the get, we need to get data from a nested object */
	            var setData = function (data, val, src) {
	                var a = _fnSplitObjNotation( src ), b;
	                var aLast = a[a.length-1];
	                var arrayNotation, funcNotation, o, innerSrc;
	    
	                for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
	                {
	                    // Check if we are dealing with an array notation request
	                    arrayNotation = a[i].match(__reArray);
	                    funcNotation = a[i].match(__reFn);
	    
	                    if ( arrayNotation )
	                    {
	                        a[i] = a[i].replace(__reArray, '');
	                        data[ a[i] ] = [];
	    
	                        // Get the remainder of the nested object to set so we can recurse
	                        b = a.slice();
	                        b.splice( 0, i+1 );
	                        innerSrc = b.join('.');
	    
	                        // Traverse each entry in the array setting the properties requested
	                        for ( var j=0, jLen=val.length ; j<jLen ; j++ )
	                        {
	                            o = {};
	                            setData( o, val[j], innerSrc );
	                            data[ a[i] ].push( o );
	                        }
	    
	                        // The inner call to setData has already traversed through the remainder
	                        // of the source and has set the data, thus we can exit here
	                        return;
	                    }
	                    else if ( funcNotation )
	                    {
	                        // Function call
	                        a[i] = a[i].replace(__reFn, '');
	                        data = data[ a[i] ]( val );
	                    }
	    
	                    // If the nested object doesn't currently exist - since we are
	                    // trying to set the value - create it
	                    if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
	                    {
	                        data[ a[i] ] = {};
	                    }
	                    data = data[ a[i] ];
	                }
	    
	                // Last item in the input - i.e, the actual set
	                if ( aLast.match(__reFn ) )
	                {
	                    // Function call
	                    data = data[ aLast.replace(__reFn, '') ]( val );
	                }
	                else
	                {
	                    // If array notation is used, we just want to strip it and use the property name
	                    // and assign the value. If it isn't used, then we get the result we want anyway
	                    data[ aLast.replace(__reArray, '') ] = val;
	                }
	            };
	    
	            return function (data, val) { // meta is also passed in, but not used
	                return setData( data, val, mSource );
	            };
	        }
	        else
	        {
	            /* Array or flat object mapping */
	            return function (data, val) { // meta is also passed in, but not used
	                data[mSource] = val;
	            };
	        }
	    }
	    
	    
	    /**
	     * Return an array with the full table data
	     *  @param {object} oSettings dataTables settings object
	     *  @returns array {array} aData Master data array
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetDataMaster ( settings )
	    {
	        return _pluck( settings.aoData, '_aData' );
	    }
	    
	    
	    /**
	     * Nuke the table
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnClearTable( settings )
	    {
	        settings.aoData.length = 0;
	        settings.aiDisplayMaster.length = 0;
	        settings.aiDisplay.length = 0;
	    }
	    
	    
	     /**
	     * Take an array of integers (index array) and remove a target integer (value - not
	     * the key!)
	     *  @param {array} a Index array to target
	     *  @param {int} iTarget value to find
	     *  @memberof DataTable#oApi
	     */
	    function _fnDeleteIndex( a, iTarget, splice )
	    {
	        var iTargetIndex = -1;
	    
	        for ( var i=0, iLen=a.length ; i<iLen ; i++ )
	        {
	            if ( a[i] == iTarget )
	            {
	                iTargetIndex = i;
	            }
	            else if ( a[i] > iTarget )
	            {
	                a[i]--;
	            }
	        }
	    
	        if ( iTargetIndex != -1 && splice === undefined )
	        {
	            a.splice( iTargetIndex, 1 );
	        }
	    }
	    
	    
	    /**
	     * Mark cached data as invalid such that a re-read of the data will occur when
	     * the cached data is next requested. Also update from the data source object.
	     *
	     * @param {object} settings DataTables settings object
	     * @param {int}    rowIdx   Row index to invalidate
	     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	     *     or 'data'
	     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	     *     row will be invalidated
	     * @memberof DataTable#oApi
	     *
	     * @todo For the modularisation of v1.11 this will need to become a callback, so
	     *   the sort and filter methods can subscribe to it. That will required
	     *   initialisation options for sorting, which is why it is not already baked in
	     */
	    function _fnInvalidate( settings, rowIdx, src, colIdx )
	    {
	        var row = settings.aoData[ rowIdx ];
	        var i, ien;
	        var cellWrite = function ( cell, col ) {
	            // This is very frustrating, but in IE if you just write directly
	            // to innerHTML, and elements that are overwritten are GC'ed,
	            // even if there is a reference to them elsewhere
	            while ( cell.childNodes.length ) {
	                cell.removeChild( cell.firstChild );
	            }
	    
	            cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
	        };
	    
	        // Are we reading last data from DOM or the data object?
	        if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
	            // Read the data from the DOM
	            row._aData = _fnGetRowElements(
	                    settings, row, colIdx, colIdx === undefined ? undefined : row._aData
	                )
	                .data;
	        }
	        else {
	            // Reading from data object, update the DOM
	            var cells = row.anCells;
	    
	            if ( cells ) {
	                if ( colIdx !== undefined ) {
	                    cellWrite( cells[colIdx], colIdx );
	                }
	                else {
	                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {
	                        cellWrite( cells[i], i );
	                    }
	                }
	            }
	        }
	    
	        // For both row and cell invalidation, the cached data for sorting and
	        // filtering is nulled out
	        row._aSortData = null;
	        row._aFilterData = null;
	    
	        // Invalidate the type for a specific column (if given) or all columns since
	        // the data might have changed
	        var cols = settings.aoColumns;
	        if ( colIdx !== undefined ) {
	            cols[ colIdx ].sType = null;
	        }
	        else {
	            for ( i=0, ien=cols.length ; i<ien ; i++ ) {
	                cols[i].sType = null;
	            }
	    
	            // Update DataTables special `DT_*` attributes for the row
	            _fnRowAttributes( row );
	        }
	    }
	    
	    
	    /**
	     * Build a data source object from an HTML row, reading the contents of the
	     * cells that are in the row.
	     *
	     * @param {object} settings DataTables settings object
	     * @param {node|object} TR element from which to read data or existing row
	     *   object from which to re-read the data from the cells
	     * @param {int} [colIdx] Optional column index
	     * @param {array|object} [d] Data source object. If `colIdx` is given then this
	     *   parameter should also be given and will be used to write the data into.
	     *   Only the column in question will be written
	     * @returns {object} Object with two parameters: `data` the data read, in
	     *   document order, and `cells` and array of nodes (they can be useful to the
	     *   caller, so rather than needing a second traversal to get them, just return
	     *   them from here).
	     * @memberof DataTable#oApi
	     */
	    function _fnGetRowElements( settings, row, colIdx, d )
	    {
	        var
	            tds = [],
	            td = row.firstChild,
	            name, col, o, i=0, contents,
	            columns = settings.aoColumns,
	            objectRead = settings._rowReadObject;
	    
	        // Allow the data object to be passed in, or construct
	        d = d || objectRead ? {} : [];
	    
	        var attr = function ( str, td  ) {
	            if ( typeof str === 'string' ) {
	                var idx = str.indexOf('@');
	    
	                if ( idx !== -1 ) {
	                    var attr = str.substring( idx+1 );
	                    var setter = _fnSetObjectDataFn( str );
	                    setter( d, td.getAttribute( attr ) );
	                }
	            }
	        };
	    
	        // Read data from a cell and store into the data object
	        var cellProcess = function ( cell ) {
	            if ( colIdx === undefined || colIdx === i ) {
	                col = columns[i];
	                contents = $.trim(cell.innerHTML);
	    
	                if ( col && col._bAttrSrc ) {
	                    var setter = _fnSetObjectDataFn( col.mData._ );
	                    setter( d, contents );
	    
	                    attr( col.mData.sort, cell );
	                    attr( col.mData.type, cell );
	                    attr( col.mData.filter, cell );
	                }
	                else {
	                    // Depending on the `data` option for the columns the data can
	                    // be read to either an object or an array.
	                    if ( objectRead ) {
	                        if ( ! col._setter ) {
	                            // Cache the setter function
	                            col._setter = _fnSetObjectDataFn( col.mData );
	                        }
	                        col._setter( d, contents );
	                    }
	                    else {
	                        d[i] = contents;
	                    }
	                }
	            }
	    
	            i++;
	        };
	    
	        if ( td ) {
	            // `tr` element was passed in
	            while ( td ) {
	                name = td.nodeName.toUpperCase();
	    
	                if ( name == "TD" || name == "TH" ) {
	                    cellProcess( td );
	                    tds.push( td );
	                }
	    
	                td = td.nextSibling;
	            }
	        }
	        else {
	            // Existing row object passed in
	            tds = row.anCells;
	            
	            for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
	                cellProcess( tds[j] );
	            }
	        }
	    
	        return {
	            data: d,
	            cells: tds
	        };
	    }
	    /**
	     * Create a new TR element (and it's TD children) for a row
	     *  @param {object} oSettings dataTables settings object
	     *  @param {int} iRow Row to consider
	     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	     *    DataTables will create a row automatically
	     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	     *    if nTr is.
	     *  @memberof DataTable#oApi
	     */
	    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
	    {
	        var
	            row = oSettings.aoData[iRow],
	            rowData = row._aData,
	            cells = [],
	            nTr, nTd, oCol,
	            i, iLen;
	    
	        if ( row.nTr === null )
	        {
	            nTr = nTrIn || document.createElement('tr');
	    
	            row.nTr = nTr;
	            row.anCells = cells;
	    
	            /* Use a private property on the node to allow reserve mapping from the node
	             * to the aoData array for fast look up
	             */
	            nTr._DT_RowIndex = iRow;
	    
	            /* Special parameters can be given by the data source to be used on the row */
	            _fnRowAttributes( row );
	    
	            /* Process each column */
	            for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
	            {
	                oCol = oSettings.aoColumns[i];
	    
	                nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
	                cells.push( nTd );
	    
	                // Need to create the HTML if new, or if a rendering function is defined
	                if ( !nTrIn || oCol.mRender || oCol.mData !== i )
	                {
	                    nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
	                }
	    
	                /* Add user defined class */
	                if ( oCol.sClass )
	                {
	                    nTd.className += ' '+oCol.sClass;
	                }
	    
	                // Visibility - add or remove as required
	                if ( oCol.bVisible && ! nTrIn )
	                {
	                    nTr.appendChild( nTd );
	                }
	                else if ( ! oCol.bVisible && nTrIn )
	                {
	                    nTd.parentNode.removeChild( nTd );
	                }
	    
	                if ( oCol.fnCreatedCell )
	                {
	                    oCol.fnCreatedCell.call( oSettings.oInstance,
	                        nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
	                    );
	                }
	            }
	    
	            _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );
	        }
	    
	        // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
	        // and deployed
	        row.nTr.setAttribute( 'role', 'row' );
	    }
	    
	    
	    /**
	     * Add attributes to a row based on the special `DT_*` parameters in a data
	     * source object.
	     *  @param {object} DataTables row object for the row to be modified
	     *  @memberof DataTable#oApi
	     */
	    function _fnRowAttributes( row )
	    {
	        var tr = row.nTr;
	        var data = row._aData;
	    
	        if ( tr ) {
	            if ( data.DT_RowId ) {
	                tr.id = data.DT_RowId;
	            }
	    
	            if ( data.DT_RowClass ) {
	                // Remove any classes added by DT_RowClass before
	                var a = data.DT_RowClass.split(' ');
	                row.__rowc = row.__rowc ?
	                    _unique( row.__rowc.concat( a ) ) :
	                    a;
	    
	                $(tr)
	                    .removeClass( row.__rowc.join(' ') )
	                    .addClass( data.DT_RowClass );
	            }
	    
	            if ( data.DT_RowAttr ) {
	                $(tr).attr( data.DT_RowAttr );
	            }
	    
	            if ( data.DT_RowData ) {
	                $(tr).data( data.DT_RowData );
	            }
	        }
	    }
	    
	    
	    /**
	     * Create the HTML header for the table
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnBuildHead( oSettings )
	    {
	        var i, ien, cell, row, column;
	        var thead = oSettings.nTHead;
	        var tfoot = oSettings.nTFoot;
	        var createHeader = $('th, td', thead).length === 0;
	        var classes = oSettings.oClasses;
	        var columns = oSettings.aoColumns;
	    
	        if ( createHeader ) {
	            row = $('<tr/>').appendTo( thead );
	        }
	    
	        for ( i=0, ien=columns.length ; i<ien ; i++ ) {
	            column = columns[i];
	            cell = $( column.nTh ).addClass( column.sClass );
	    
	            if ( createHeader ) {
	                cell.appendTo( row );
	            }
	    
	            // 1.11 move into sorting
	            if ( oSettings.oFeatures.bSort ) {
	                cell.addClass( column.sSortingClass );
	    
	                if ( column.bSortable !== false ) {
	                    cell
	                        .attr( 'tabindex', oSettings.iTabIndex )
	                        .attr( 'aria-controls', oSettings.sTableId );
	    
	                    _fnSortAttachListener( oSettings, column.nTh, i );
	                }
	            }
	    
	            if ( column.sTitle != cell.html() ) {
	                cell.html( column.sTitle );
	            }
	    
	            _fnRenderer( oSettings, 'header' )(
	                oSettings, cell, column, classes
	            );
	        }
	    
	        if ( createHeader ) {
	            _fnDetectHeader( oSettings.aoHeader, thead );
	        }
	        
	        /* ARIA role for the rows */
	        $(thead).find('>tr').attr('role', 'row');
	    
	        /* Deal with the footer - add classes if required */
	        $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
	        $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
	    
	        // Cache the footer cells. Note that we only take the cells from the first
	        // row in the footer. If there is more than one row the user wants to
	        // interact with, they need to use the table().foot() method. Note also this
	        // allows cells to be used for multiple columns using colspan
	        if ( tfoot !== null ) {
	            var cells = oSettings.aoFooter[0];
	    
	            for ( i=0, ien=cells.length ; i<ien ; i++ ) {
	                column = columns[i];
	                column.nTf = cells[i].cell;
	    
	                if ( column.sClass ) {
	                    $(column.nTf).addClass( column.sClass );
	                }
	            }
	        }
	    }
	    
	    
	    /**
	     * Draw the header (or footer) element based on the column visibility states. The
	     * methodology here is to use the layout array from _fnDetectHeader, modified for
	     * the instantaneous column visibility, to construct the new layout. The grid is
	     * traversed over cell at a time in a rows x columns grid fashion, although each
	     * cell insert can cover multiple elements in the grid - which is tracks using the
	     * aApplied array. Cell inserts in the grid will only occur where there isn't
	     * already a cell in that position.
	     *  @param {object} oSettings dataTables settings object
	     *  @param array {objects} aoSource Layout array from _fnDetectHeader
	     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	     *  @memberof DataTable#oApi
	     */
	    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
	    {
	        var i, iLen, j, jLen, k, kLen, n, nLocalTr;
	        var aoLocal = [];
	        var aApplied = [];
	        var iColumns = oSettings.aoColumns.length;
	        var iRowspan, iColspan;
	    
	        if ( ! aoSource )
	        {
	            return;
	        }
	    
	        if (  bIncludeHidden === undefined )
	        {
	            bIncludeHidden = false;
	        }
	    
	        /* Make a copy of the master layout array, but without the visible columns in it */
	        for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
	        {
	            aoLocal[i] = aoSource[i].slice();
	            aoLocal[i].nTr = aoSource[i].nTr;
	    
	            /* Remove any columns which are currently hidden */
	            for ( j=iColumns-1 ; j>=0 ; j-- )
	            {
	                if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
	                {
	                    aoLocal[i].splice( j, 1 );
	                }
	            }
	    
	            /* Prep the applied array - it needs an element for each row */
	            aApplied.push( [] );
	        }
	    
	        for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
	        {
	            nLocalTr = aoLocal[i].nTr;
	    
	            /* All cells are going to be replaced, so empty out the row */
	            if ( nLocalTr )
	            {
	                while( (n = nLocalTr.firstChild) )
	                {
	                    nLocalTr.removeChild( n );
	                }
	            }
	    
	            for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
	            {
	                iRowspan = 1;
	                iColspan = 1;
	    
	                /* Check to see if there is already a cell (row/colspan) covering our target
	                 * insert point. If there is, then there is nothing to do.
	                 */
	                if ( aApplied[i][j] === undefined )
	                {
	                    nLocalTr.appendChild( aoLocal[i][j].cell );
	                    aApplied[i][j] = 1;
	    
	                    /* Expand the cell to cover as many rows as needed */
	                    while ( aoLocal[i+iRowspan] !== undefined &&
	                            aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
	                    {
	                        aApplied[i+iRowspan][j] = 1;
	                        iRowspan++;
	                    }
	    
	                    /* Expand the cell to cover as many columns as needed */
	                    while ( aoLocal[i][j+iColspan] !== undefined &&
	                            aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
	                    {
	                        /* Must update the applied array over the rows for the columns */
	                        for ( k=0 ; k<iRowspan ; k++ )
	                        {
	                            aApplied[i+k][j+iColspan] = 1;
	                        }
	                        iColspan++;
	                    }
	    
	                    /* Do the actual expansion in the DOM */
	                    $(aoLocal[i][j].cell)
	                        .attr('rowspan', iRowspan)
	                        .attr('colspan', iColspan);
	                }
	            }
	        }
	    }
	    
	    
	    /**
	     * Insert the required TR nodes into the table for display
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnDraw( oSettings )
	    {
	        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
	        var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
	        if ( $.inArray( false, aPreDraw ) !== -1 )
	        {
	            _fnProcessingDisplay( oSettings, false );
	            return;
	        }
	    
	        var i, iLen, n;
	        var anRows = [];
	        var iRowCount = 0;
	        var asStripeClasses = oSettings.asStripeClasses;
	        var iStripes = asStripeClasses.length;
	        var iOpenRows = oSettings.aoOpenRows.length;
	        var oLang = oSettings.oLanguage;
	        var iInitDisplayStart = oSettings.iInitDisplayStart;
	        var bServerSide = _fnDataSource( oSettings ) == 'ssp';
	        var aiDisplay = oSettings.aiDisplay;
	    
	        oSettings.bDrawing = true;
	    
	        /* Check and see if we have an initial draw position from state saving */
	        if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
	        {
	            oSettings._iDisplayStart = bServerSide ?
	                iInitDisplayStart :
	                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
	                    0 :
	                    iInitDisplayStart;
	    
	            oSettings.iInitDisplayStart = -1;
	        }
	    
	        var iDisplayStart = oSettings._iDisplayStart;
	        var iDisplayEnd = oSettings.fnDisplayEnd();
	    
	        /* Server-side processing draw intercept */
	        if ( oSettings.bDeferLoading )
	        {
	            oSettings.bDeferLoading = false;
	            oSettings.iDraw++;
	            _fnProcessingDisplay( oSettings, false );
	        }
	        else if ( !bServerSide )
	        {
	            oSettings.iDraw++;
	        }
	        else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
	        {
	            return;
	        }
	    
	        if ( aiDisplay.length !== 0 )
	        {
	            var iStart = bServerSide ? 0 : iDisplayStart;
	            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
	    
	            for ( var j=iStart ; j<iEnd ; j++ )
	            {
	                var iDataIndex = aiDisplay[j];
	                var aoData = oSettings.aoData[ iDataIndex ];
	                if ( aoData.nTr === null )
	                {
	                    _fnCreateTr( oSettings, iDataIndex );
	                }
	    
	                var nRow = aoData.nTr;
	    
	                /* Remove the old striping classes and then add the new one */
	                if ( iStripes !== 0 )
	                {
	                    var sStripe = asStripeClasses[ iRowCount % iStripes ];
	                    if ( aoData._sRowStripe != sStripe )
	                    {
	                        $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
	                        aoData._sRowStripe = sStripe;
	                    }
	                }
	    
	                // Row callback functions - might want to manipulate the row
	                // iRowCount and j are not currently documented. Are they at all
	                // useful?
	                _fnCallbackFire( oSettings, 'aoRowCallback', null,
	                    [nRow, aoData._aData, iRowCount, j] );
	    
	                anRows.push( nRow );
	                iRowCount++;
	            }
	        }
	        else
	        {
	            /* Table is empty - create a row with an empty message in it */
	            var sZero = oLang.sZeroRecords;
	            if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
	            {
	                sZero = oLang.sLoadingRecords;
	            }
	            else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
	            {
	                sZero = oLang.sEmptyTable;
	            }
	    
	            anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
	                .append( $('<td />', {
	                    'valign':  'top',
	                    'colSpan': _fnVisbleColumns( oSettings ),
	                    'class':   oSettings.oClasses.sRowEmpty
	                } ).html( sZero ) )[0];
	        }
	    
	        /* Header and footer callbacks */
	        _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
	            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	    
	        _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
	            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	    
	        var body = $(oSettings.nTBody);
	    
	        body.children().detach();
	        body.append( $(anRows) );
	    
	        /* Call all required callback functions for the end of a draw */
	        _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
	    
	        /* Draw is complete, sorting and filtering must be as well */
	        oSettings.bSorted = false;
	        oSettings.bFiltered = false;
	        oSettings.bDrawing = false;
	    }
	    
	    
	    /**
	     * Redraw the table - taking account of the various features which are enabled
	     *  @param {object} oSettings dataTables settings object
	     *  @param {boolean} [holdPosition] Keep the current paging position. By default
	     *    the paging is reset to the first page
	     *  @memberof DataTable#oApi
	     */
	    function _fnReDraw( settings, holdPosition )
	    {
	        var
	            features = settings.oFeatures,
	            sort     = features.bSort,
	            filter   = features.bFilter;
	    
	        if ( sort ) {
	            _fnSort( settings );
	        }
	    
	        if ( filter ) {
	            _fnFilterComplete( settings, settings.oPreviousSearch );
	        }
	        else {
	            // No filtering, so we want to just use the display master
	            settings.aiDisplay = settings.aiDisplayMaster.slice();
	        }
	    
	        if ( holdPosition !== true ) {
	            settings._iDisplayStart = 0;
	        }
	    
	        // Let any modules know about the draw hold position state (used by
	        // scrolling internally)
	        settings._drawHold = holdPosition;
	    
	        _fnDraw( settings );
	    
	        settings._drawHold = false;
	    }
	    
	    
	    /**
	     * Add the options to the page HTML for the table
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnAddOptionsHtml ( oSettings )
	    {
	        var classes = oSettings.oClasses;
	        var table = $(oSettings.nTable);
	        var holding = $('<div/>').insertBefore( table ); // Holding element for speed
	        var features = oSettings.oFeatures;
	    
	        // All DataTables are wrapped in a div
	        var insert = $('<div/>', {
	            id:      oSettings.sTableId+'_wrapper',
	            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
	        } );
	    
	        oSettings.nHolding = holding[0];
	        oSettings.nTableWrapper = insert[0];
	        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
	    
	        /* Loop over the user set positioning and place the elements as needed */
	        var aDom = oSettings.sDom.split('');
	        var featureNode, cOption, nNewNode, cNext, sAttr, j;
	        for ( var i=0 ; i<aDom.length ; i++ )
	        {
	            featureNode = null;
	            cOption = aDom[i];
	    
	            if ( cOption == '<' )
	            {
	                /* New container div */
	                nNewNode = $('<div/>')[0];
	    
	                /* Check to see if we should append an id and/or a class name to the container */
	                cNext = aDom[i+1];
	                if ( cNext == "'" || cNext == '"' )
	                {
	                    sAttr = "";
	                    j = 2;
	                    while ( aDom[i+j] != cNext )
	                    {
	                        sAttr += aDom[i+j];
	                        j++;
	                    }
	    
	                    /* Replace jQuery UI constants @todo depreciated */
	                    if ( sAttr == "H" )
	                    {
	                        sAttr = classes.sJUIHeader;
	                    }
	                    else if ( sAttr == "F" )
	                    {
	                        sAttr = classes.sJUIFooter;
	                    }
	    
	                    /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
	                     * breaks the string into parts and applies them as needed
	                     */
	                    if ( sAttr.indexOf('.') != -1 )
	                    {
	                        var aSplit = sAttr.split('.');
	                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
	                        nNewNode.className = aSplit[1];
	                    }
	                    else if ( sAttr.charAt(0) == "#" )
	                    {
	                        nNewNode.id = sAttr.substr(1, sAttr.length-1);
	                    }
	                    else
	                    {
	                        nNewNode.className = sAttr;
	                    }
	    
	                    i += j; /* Move along the position array */
	                }
	    
	                insert.append( nNewNode );
	                insert = $(nNewNode);
	            }
	            else if ( cOption == '>' )
	            {
	                /* End container div */
	                insert = insert.parent();
	            }
	            // @todo Move options into their own plugins?
	            else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
	            {
	                /* Length */
	                featureNode = _fnFeatureHtmlLength( oSettings );
	            }
	            else if ( cOption == 'f' && features.bFilter )
	            {
	                /* Filter */
	                featureNode = _fnFeatureHtmlFilter( oSettings );
	            }
	            else if ( cOption == 'r' && features.bProcessing )
	            {
	                /* pRocessing */
	                featureNode = _fnFeatureHtmlProcessing( oSettings );
	            }
	            else if ( cOption == 't' )
	            {
	                /* Table */
	                featureNode = _fnFeatureHtmlTable( oSettings );
	            }
	            else if ( cOption ==  'i' && features.bInfo )
	            {
	                /* Info */
	                featureNode = _fnFeatureHtmlInfo( oSettings );
	            }
	            else if ( cOption == 'p' && features.bPaginate )
	            {
	                /* Pagination */
	                featureNode = _fnFeatureHtmlPaginate( oSettings );
	            }
	            else if ( DataTable.ext.feature.length !== 0 )
	            {
	                /* Plug-in features */
	                var aoFeatures = DataTable.ext.feature;
	                for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
	                {
	                    if ( cOption == aoFeatures[k].cFeature )
	                    {
	                        featureNode = aoFeatures[k].fnInit( oSettings );
	                        break;
	                    }
	                }
	            }
	    
	            /* Add to the 2D features array */
	            if ( featureNode )
	            {
	                var aanFeatures = oSettings.aanFeatures;
	    
	                if ( ! aanFeatures[cOption] )
	                {
	                    aanFeatures[cOption] = [];
	                }
	    
	                aanFeatures[cOption].push( featureNode );
	                insert.append( featureNode );
	            }
	        }
	    
	        /* Built our DOM structure - replace the holding div with what we want */
	        holding.replaceWith( insert );
	    }
	    
	    
	    /**
	     * Use the DOM source to create up an array of header cells. The idea here is to
	     * create a layout grid (array) of rows x columns, which contains a reference
	     * to the cell that that point in the grid (regardless of col/rowspan), such that
	     * any column / row could be removed and the new grid constructed
	     *  @param array {object} aLayout Array to store the calculated layout in
	     *  @param {node} nThead The header/footer element for the table
	     *  @memberof DataTable#oApi
	     */
	    function _fnDetectHeader ( aLayout, nThead )
	    {
	        var nTrs = $(nThead).children('tr');
	        var nTr, nCell;
	        var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
	        var bUnique;
	        var fnShiftCol = function ( a, i, j ) {
	            var k = a[i];
	                    while ( k[j] ) {
	                j++;
	            }
	            return j;
	        };
	    
	        aLayout.splice( 0, aLayout.length );
	    
	        /* We know how many rows there are in the layout - so prep it */
	        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
	        {
	            aLayout.push( [] );
	        }
	    
	        /* Calculate a layout array */
	        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
	        {
	            nTr = nTrs[i];
	            iColumn = 0;
	    
	            /* For every cell in the row... */
	            nCell = nTr.firstChild;
	            while ( nCell ) {
	                if ( nCell.nodeName.toUpperCase() == "TD" ||
	                     nCell.nodeName.toUpperCase() == "TH" )
	                {
	                    /* Get the col and rowspan attributes from the DOM and sanitise them */
	                    iColspan = nCell.getAttribute('colspan') * 1;
	                    iRowspan = nCell.getAttribute('rowspan') * 1;
	                    iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
	                    iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
	    
	                    /* There might be colspan cells already in this row, so shift our target
	                     * accordingly
	                     */
	                    iColShifted = fnShiftCol( aLayout, i, iColumn );
	    
	                    /* Cache calculation for unique columns */
	                    bUnique = iColspan === 1 ? true : false;
	    
	                    /* If there is col / rowspan, copy the information into the layout grid */
	                    for ( l=0 ; l<iColspan ; l++ )
	                    {
	                        for ( k=0 ; k<iRowspan ; k++ )
	                        {
	                            aLayout[i+k][iColShifted+l] = {
	                                "cell": nCell,
	                                "unique": bUnique
	                            };
	                            aLayout[i+k].nTr = nTr;
	                        }
	                    }
	                }
	                nCell = nCell.nextSibling;
	            }
	        }
	    }
	    
	    
	    /**
	     * Get an array of unique th elements, one for each column
	     *  @param {object} oSettings dataTables settings object
	     *  @param {node} nHeader automatically detect the layout from this node - optional
	     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	     *  @returns array {node} aReturn list of unique th's
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
	    {
	        var aReturn = [];
	        if ( !aLayout )
	        {
	            aLayout = oSettings.aoHeader;
	            if ( nHeader )
	            {
	                aLayout = [];
	                _fnDetectHeader( aLayout, nHeader );
	            }
	        }
	    
	        for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
	        {
	            for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
	            {
	                if ( aLayout[i][j].unique &&
	                     (!aReturn[j] || !oSettings.bSortCellsTop) )
	                {
	                    aReturn[j] = aLayout[i][j].cell;
	                }
	            }
	        }
	    
	        return aReturn;
	    }
	    
	    /**
	     * Create an Ajax call based on the table's settings, taking into account that
	     * parameters can have multiple forms, and backwards compatibility.
	     *
	     * @param {object} oSettings dataTables settings object
	     * @param {array} data Data to send to the server, required by
	     *     DataTables - may be augmented by developer callbacks
	     * @param {function} fn Callback function to run when data is obtained
	     */
	    function _fnBuildAjax( oSettings, data, fn )
	    {
	        // Compatibility with 1.9-, allow fnServerData and event to manipulate
	        _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
	    
	        // Convert to object based for 1.10+ if using the old array scheme which can
	        // come from server-side processing or serverParams
	        if ( data && $.isArray(data) ) {
	            var tmp = {};
	            var rbracket = /(.*?)\[\]$/;
	    
	            $.each( data, function (key, val) {
	                var match = val.name.match(rbracket);
	    
	                if ( match ) {
	                    // Support for arrays
	                    var name = match[0];
	    
	                    if ( ! tmp[ name ] ) {
	                        tmp[ name ] = [];
	                    }
	                    tmp[ name ].push( val.value );
	                }
	                else {
	                    tmp[val.name] = val.value;
	                }
	            } );
	            data = tmp;
	        }
	    
	        var ajaxData;
	        var ajax = oSettings.ajax;
	        var instance = oSettings.oInstance;
	        var callback = function ( json ) {
	            _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json] );
	            fn( json );
	        };
	    
	        if ( $.isPlainObject( ajax ) && ajax.data )
	        {
	            ajaxData = ajax.data;
	    
	            var newData = $.isFunction( ajaxData ) ?
	                ajaxData( data, oSettings ) :  // fn can manipulate data or return
	                ajaxData;                      // an object object or array to merge
	    
	            // If the function returned something, use that alone
	            data = $.isFunction( ajaxData ) && newData ?
	                newData :
	                $.extend( true, data, newData );
	    
	            // Remove the data property as we've resolved it already and don't want
	            // jQuery to do it again (it is restored at the end of the function)
	            delete ajax.data;
	        }
	    
	        var baseAjax = {
	            "data": data,
	            "success": function (json) {
	                var error = json.error || json.sError;
	                if ( error ) {
	                    oSettings.oApi._fnLog( oSettings, 0, error );
	                }
	    
	                oSettings.json = json;
	                callback( json );
	            },
	            "dataType": "json",
	            "cache": false,
	            "type": oSettings.sServerMethod,
	            "error": function (xhr, error, thrown) {
	                var log = oSettings.oApi._fnLog;
	    
	                if ( error == "parsererror" ) {
	                    log( oSettings, 0, 'Invalid JSON response', 1 );
	                }
	                else if ( xhr.readyState === 4 ) {
	                    log( oSettings, 0, 'Ajax error', 7 );
	                }
	    
	                _fnProcessingDisplay( oSettings, false );
	            }
	        };
	    
	        // Store the data submitted for the API
	        oSettings.oAjaxData = data;
	    
	        // Allow plug-ins and external processes to modify the data
	        _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
	    
	        if ( oSettings.fnServerData )
	        {
	            // DataTables 1.9- compatibility
	            oSettings.fnServerData.call( instance,
	                oSettings.sAjaxSource,
	                $.map( data, function (val, key) { // Need to convert back to 1.9 trad format
	                    return { name: key, value: val };
	                } ),
	                callback,
	                oSettings
	            );
	        }
	        else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
	        {
	            // DataTables 1.9- compatibility
	            oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
	                url: ajax || oSettings.sAjaxSource
	            } ) );
	        }
	        else if ( $.isFunction( ajax ) )
	        {
	            // Is a function - let the caller define what needs to be done
	            oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
	        }
	        else
	        {
	            // Object to extend the base settings
	            oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
	    
	            // Restore for next time around
	            ajax.data = ajaxData;
	        }
	    }
	    
	    
	    /**
	     * Update the table using an Ajax call
	     *  @param {object} settings dataTables settings object
	     *  @returns {boolean} Block the table drawing or not
	     *  @memberof DataTable#oApi
	     */
	    function _fnAjaxUpdate( settings )
	    {
	        if ( settings.bAjaxDataGet ) {
	            settings.iDraw++;
	            _fnProcessingDisplay( settings, true );
	    
	            _fnBuildAjax(
	                settings,
	                _fnAjaxParameters( settings ),
	                function(json) {
	                    _fnAjaxUpdateDraw( settings, json );
	                }
	            );
	    
	            return false;
	        }
	        return true;
	    }
	    
	    
	    /**
	     * Build up the parameters in an object needed for a server-side processing
	     * request. Note that this is basically done twice, is different ways - a modern
	     * method which is used by default in DataTables 1.10 which uses objects and
	     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	     * the sAjaxSource option is used in the initialisation, or the legacyAjax
	     * option is set.
	     *  @param {object} oSettings dataTables settings object
	     *  @returns {bool} block the table drawing or not
	     *  @memberof DataTable#oApi
	     */
	    function _fnAjaxParameters( settings )
	    {
	        var
	            columns = settings.aoColumns,
	            columnCount = columns.length,
	            features = settings.oFeatures,
	            preSearch = settings.oPreviousSearch,
	            preColSearch = settings.aoPreSearchCols,
	            i, data = [], dataProp, column, columnSearch,
	            sort = _fnSortFlatten( settings ),
	            displayStart = settings._iDisplayStart,
	            displayLength = features.bPaginate !== false ?
	                settings._iDisplayLength :
	                -1;
	    
	        var param = function ( name, value ) {
	            data.push( { 'name': name, 'value': value } );
	        };
	    
	        // DataTables 1.9- compatible method
	        param( 'sEcho',          settings.iDraw );
	        param( 'iColumns',       columnCount );
	        param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
	        param( 'iDisplayStart',  displayStart );
	        param( 'iDisplayLength', displayLength );
	    
	        // DataTables 1.10+ method
	        var d = {
	            draw:    settings.iDraw,
	            columns: [],
	            order:   [],
	            start:   displayStart,
	            length:  displayLength,
	            search:  {
	                value: preSearch.sSearch,
	                regex: preSearch.bRegex
	            }
	        };
	    
	        for ( i=0 ; i<columnCount ; i++ ) {
	            column = columns[i];
	            columnSearch = preColSearch[i];
	            dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
	    
	            d.columns.push( {
	                data:       dataProp,
	                name:       column.sName,
	                searchable: column.bSearchable,
	                orderable:  column.bSortable,
	                search:     {
	                    value: columnSearch.sSearch,
	                    regex: columnSearch.bRegex
	                }
	            } );
	    
	            param( "mDataProp_"+i, dataProp );
	    
	            if ( features.bFilter ) {
	                param( 'sSearch_'+i,     columnSearch.sSearch );
	                param( 'bRegex_'+i,      columnSearch.bRegex );
	                param( 'bSearchable_'+i, column.bSearchable );
	            }
	    
	            if ( features.bSort ) {
	                param( 'bSortable_'+i, column.bSortable );
	            }
	        }
	    
	        if ( features.bFilter ) {
	            param( 'sSearch', preSearch.sSearch );
	            param( 'bRegex', preSearch.bRegex );
	        }
	    
	        if ( features.bSort ) {
	            $.each( sort, function ( i, val ) {
	                d.order.push( { column: val.col, dir: val.dir } );
	    
	                param( 'iSortCol_'+i, val.col );
	                param( 'sSortDir_'+i, val.dir );
	            } );
	    
	            param( 'iSortingCols', sort.length );
	        }
	    
	        // If the legacy.ajax parameter is null, then we automatically decide which
	        // form to use, based on sAjaxSource
	        var legacy = DataTable.ext.legacy.ajax;
	        if ( legacy === null ) {
	            return settings.sAjaxSource ? data : d;
	        }
	    
	        // Otherwise, if legacy has been specified then we use that to decide on the
	        // form
	        return legacy ? data : d;
	    }
	    
	    
	    /**
	     * Data the data from the server (nuking the old) and redraw the table
	     *  @param {object} oSettings dataTables settings object
	     *  @param {object} json json data return from the server.
	     *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	     *  @param {array} json.aaData The data to display on this page
	     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	     *  @memberof DataTable#oApi
	     */
	    function _fnAjaxUpdateDraw ( settings, json )
	    {
	        // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
	        // Support both
	        var compat = function ( old, modern ) {
	            return json[old] !== undefined ? json[old] : json[modern];
	        };
	    
	        var data = _fnAjaxDataSrc( settings, json );
	        var draw            = compat( 'sEcho',                'draw' );
	        var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
	        var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
	    
	        if ( draw ) {
	            // Protect against out of sequence returns
	            if ( draw*1 < settings.iDraw ) {
	                return;
	            }
	            settings.iDraw = draw * 1;
	        }
	    
	        _fnClearTable( settings );
	        settings._iRecordsTotal   = parseInt(recordsTotal, 10);
	        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
	    
	        for ( var i=0, ien=data.length ; i<ien ; i++ ) {
	            _fnAddData( settings, data[i] );
	        }
	        settings.aiDisplay = settings.aiDisplayMaster.slice();
	    
	        settings.bAjaxDataGet = false;
	        _fnDraw( settings );
	    
	        if ( ! settings._bInitComplete ) {
	            _fnInitComplete( settings, json );
	        }
	    
	        settings.bAjaxDataGet = true;
	        _fnProcessingDisplay( settings, false );
	    }
	    
	    
	    /**
	     * Get the data from the JSON data source to use for drawing a table. Using
	     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	     * source object, or from a processing function.
	     *  @param {object} oSettings dataTables settings object
	     *  @param  {object} json Data source object / array from the server
	     *  @return {array} Array of data to use
	     */
	    function _fnAjaxDataSrc ( oSettings, json )
	    {
	        var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
	            oSettings.ajax.dataSrc :
	            oSettings.sAjaxDataProp; // Compatibility with 1.9-.
	    
	        // Compatibility with 1.9-. In order to read from aaData, check if the
	        // default has been changed, if not, check for aaData
	        if ( dataSrc === 'data' ) {
	            return json.aaData || json[dataSrc];
	        }
	    
	        return dataSrc !== "" ?
	            _fnGetObjectDataFn( dataSrc )( json ) :
	            json;
	    }
	    
	    /**
	     * Generate the node required for filtering text
	     *  @returns {node} Filter control element
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnFeatureHtmlFilter ( settings )
	    {
	        var classes = settings.oClasses;
	        var tableId = settings.sTableId;
	        var language = settings.oLanguage;
	        var previousSearch = settings.oPreviousSearch;
	        var features = settings.aanFeatures;
	        var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
	    
	        var str = language.sSearch;
	        str = str.match(/_INPUT_/) ?
	            str.replace('_INPUT_', input) :
	            str+input;
	    
	        var filter = $('<div/>', {
	                'id': ! features.f ? tableId+'_filter' : null,
	                'class': classes.sFilter
	            } )
	            .append( $('<label/>' ).append( str ) );
	    
	        var searchFn = function() {
	            /* Update all other filter input elements for the new display */
	            var n = features.f;
	            var val = !this.value ? "" : this.value; // mental IE8 fix :-(
	    
	            /* Now do the filter */
	            if ( val != previousSearch.sSearch ) {
	                _fnFilterComplete( settings, {
	                    "sSearch": val,
	                    "bRegex": previousSearch.bRegex,
	                    "bSmart": previousSearch.bSmart ,
	                    "bCaseInsensitive": previousSearch.bCaseInsensitive
	                } );
	    
	                // Need to redraw, without resorting
	                settings._iDisplayStart = 0;
	                _fnDraw( settings );
	            }
	        };
	    
	        var searchDelay = settings.searchDelay !== null ?
	            settings.searchDelay :
	            _fnDataSource( settings ) === 'ssp' ?
	                400 :
	                0;
	    
	        var jqFilter = $('input', filter)
	            .val( previousSearch.sSearch )
	            .attr( 'placeholder', language.sSearchPlaceholder )
	            .bind(
	                'keyup.DT search.DT input.DT paste.DT cut.DT',
	                searchDelay ?
	                    _fnThrottle( searchFn, searchDelay ) :
	                    searchFn
	            )
	            .bind( 'keypress.DT', function(e) {
	                /* Prevent form submission */
	                if ( e.keyCode == 13 ) {
	                    return false;
	                }
	            } )
	            .attr('aria-controls', tableId);
	    
	        // Update the input elements whenever the table is filtered
	        $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
	            if ( settings === s ) {
	                // IE9 throws an 'unknown error' if document.activeElement is used
	                // inside an iframe or frame...
	                try {
	                    if ( jqFilter[0] !== document.activeElement ) {
	                        jqFilter.val( previousSearch.sSearch );
	                    }
	                }
	                catch ( e ) {}
	            }
	        } );
	    
	        return filter[0];
	    }
	    
	    
	    /**
	     * Filter the table using both the global filter and column based filtering
	     *  @param {object} oSettings dataTables settings object
	     *  @param {object} oSearch search information
	     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	     *  @memberof DataTable#oApi
	     */
	    function _fnFilterComplete ( oSettings, oInput, iForce )
	    {
	        var oPrevSearch = oSettings.oPreviousSearch;
	        var aoPrevSearch = oSettings.aoPreSearchCols;
	        var fnSaveFilter = function ( oFilter ) {
	            /* Save the filtering values */
	            oPrevSearch.sSearch = oFilter.sSearch;
	            oPrevSearch.bRegex = oFilter.bRegex;
	            oPrevSearch.bSmart = oFilter.bSmart;
	            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
	        };
	        var fnRegex = function ( o ) {
	            // Backwards compatibility with the bEscapeRegex option
	            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
	        };
	    
	        // Resolve any column types that are unknown due to addition or invalidation
	        // @todo As per sort - can this be moved into an event handler?
	        _fnColumnTypes( oSettings );
	    
	        /* In server-side processing all filtering is done by the server, so no point hanging around here */
	        if ( _fnDataSource( oSettings ) != 'ssp' )
	        {
	            /* Global filter */
	            _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
	            fnSaveFilter( oInput );
	    
	            /* Now do the individual column filter */
	            for ( var i=0 ; i<aoPrevSearch.length ; i++ )
	            {
	                _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
	                    aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
	            }
	    
	            /* Custom filtering */
	            _fnFilterCustom( oSettings );
	        }
	        else
	        {
	            fnSaveFilter( oInput );
	        }
	    
	        /* Tell the draw function we have been filtering */
	        oSettings.bFiltered = true;
	        _fnCallbackFire( oSettings, null, 'search', [oSettings] );
	    }
	    
	    
	    /**
	     * Apply custom filtering functions
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnFilterCustom( settings )
	    {
	        var filters = DataTable.ext.search;
	        var displayRows = settings.aiDisplay;
	        var row, rowIdx;
	    
	        for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
	            var rows = [];
	    
	            // Loop over each row and see if it should be included
	            for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
	                rowIdx = displayRows[ j ];
	                row = settings.aoData[ rowIdx ];
	    
	                if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
	                    rows.push( rowIdx );
	                }
	            }
	    
	            // So the array reference doesn't break set the results into the
	            // existing array
	            displayRows.length = 0;
	            displayRows.push.apply( displayRows, rows );
	        }
	    }
	    
	    
	    /**
	     * Filter the table on a per-column basis
	     *  @param {object} oSettings dataTables settings object
	     *  @param {string} sInput string to filter on
	     *  @param {int} iColumn column to filter
	     *  @param {bool} bRegex treat search string as a regular expression or not
	     *  @param {bool} bSmart use smart filtering or not
	     *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	     *  @memberof DataTable#oApi
	     */
	    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
	    {
	        if ( searchStr === '' ) {
	            return;
	        }
	    
	        var data;
	        var display = settings.aiDisplay;
	        var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
	    
	        for ( var i=display.length-1 ; i>=0 ; i-- ) {
	            data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
	    
	            if ( ! rpSearch.test( data ) ) {
	                display.splice( i, 1 );
	            }
	        }
	    }
	    
	    
	    /**
	     * Filter the data table based on user input and draw the table
	     *  @param {object} settings dataTables settings object
	     *  @param {string} input string to filter on
	     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	     *  @param {bool} regex treat as a regular expression or not
	     *  @param {bool} smart perform smart filtering or not
	     *  @param {bool} caseInsensitive Do case insenstive matching or not
	     *  @memberof DataTable#oApi
	     */
	    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
	    {
	        var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
	        var prevSearch = settings.oPreviousSearch.sSearch;
	        var displayMaster = settings.aiDisplayMaster;
	        var display, invalidated, i;
	    
	        // Need to take account of custom filtering functions - always filter
	        if ( DataTable.ext.search.length !== 0 ) {
	            force = true;
	        }
	    
	        // Check if any of the rows were invalidated
	        invalidated = _fnFilterData( settings );
	    
	        // If the input is blank - we just want the full data set
	        if ( input.length <= 0 ) {
	            settings.aiDisplay = displayMaster.slice();
	        }
	        else {
	            // New search - start from the master array
	            if ( invalidated ||
	                 force ||
	                 prevSearch.length > input.length ||
	                 input.indexOf(prevSearch) !== 0 ||
	                 settings.bSorted // On resort, the display master needs to be
	                                  // re-filtered since indexes will have changed
	            ) {
	                settings.aiDisplay = displayMaster.slice();
	            }
	    
	            // Search the display array
	            display = settings.aiDisplay;
	    
	            for ( i=display.length-1 ; i>=0 ; i-- ) {
	                if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
	                    display.splice( i, 1 );
	                }
	            }
	        }
	    }
	    
	    
	    /**
	     * Build a regular expression object suitable for searching a table
	     *  @param {string} sSearch string to search for
	     *  @param {bool} bRegex treat as a regular expression or not
	     *  @param {bool} bSmart perform smart filtering or not
	     *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	     *  @returns {RegExp} constructed object
	     *  @memberof DataTable#oApi
	     */
	    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
	    {
	        search = regex ?
	            search :
	            _fnEscapeRegex( search );
	        
	        if ( smart ) {
	            /* For smart filtering we want to allow the search to work regardless of
	             * word order. We also want double quoted text to be preserved, so word
	             * order is important - a la google. So this is what we want to
	             * generate:
	             * 
	             * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
	             */
	            var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || '', function ( word ) {
	                if ( word.charAt(0) === '"' ) {
	                    var m = word.match( /^"(.*)"$/ );
	                    word = m ? m[1] : word;
	                }
	    
	                return word.replace('"', '');
	            } );
	    
	            search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
	        }
	    
	        return new RegExp( search, caseInsensitive ? 'i' : '' );
	    }
	    
	    
	    /**
	     * Escape a string such that it can be used in a regular expression
	     *  @param {string} sVal string to escape
	     *  @returns {string} escaped string
	     *  @memberof DataTable#oApi
	     */
	    function _fnEscapeRegex ( sVal )
	    {
	        return sVal.replace( _re_escape_regex, '\\$1' );
	    }
	    
	    
	    
	    var __filter_div = $('<div>')[0];
	    var __filter_div_textContent = __filter_div.textContent !== undefined;
	    
	    // Update the filtering data for each row if needed (by invalidation or first run)
	    function _fnFilterData ( settings )
	    {
	        var columns = settings.aoColumns;
	        var column;
	        var i, j, ien, jen, filterData, cellData, row;
	        var fomatters = DataTable.ext.type.search;
	        var wasInvalidated = false;
	    
	        for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
	            row = settings.aoData[i];
	    
	            if ( ! row._aFilterData ) {
	                filterData = [];
	    
	                for ( j=0, jen=columns.length ; j<jen ; j++ ) {
	                    column = columns[j];
	    
	                    if ( column.bSearchable ) {
	                        cellData = _fnGetCellData( settings, i, j, 'filter' );
	    
	                        if ( fomatters[ column.sType ] ) {
	                            cellData = fomatters[ column.sType ]( cellData );
	                        }
	    
	                        // Search in DataTables 1.10 is string based. In 1.11 this
	                        // should be altered to also allow strict type checking.
	                        if ( cellData === null ) {
	                            cellData = '';
	                        }
	    
	                        if ( typeof cellData !== 'string' && cellData.toString ) {
	                            cellData = cellData.toString();
	                        }
	                    }
	                    else {
	                        cellData = '';
	                    }
	    
	                    // If it looks like there is an HTML entity in the string,
	                    // attempt to decode it so sorting works as expected. Note that
	                    // we could use a single line of jQuery to do this, but the DOM
	                    // method used here is much faster http://jsperf.com/html-decode
	                    if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
	                        __filter_div.innerHTML = cellData;
	                        cellData = __filter_div_textContent ?
	                            __filter_div.textContent :
	                            __filter_div.innerText;
	                    }
	    
	                    if ( cellData.replace ) {
	                        cellData = cellData.replace(/[\r\n]/g, '');
	                    }
	    
	                    filterData.push( cellData );
	                }
	    
	                row._aFilterData = filterData;
	                row._sFilterRow = filterData.join('  ');
	                wasInvalidated = true;
	            }
	        }
	    
	        return wasInvalidated;
	    }
	    
	    
	    /**
	     * Convert from the internal Hungarian notation to camelCase for external
	     * interaction
	     *  @param {object} obj Object to convert
	     *  @returns {object} Inverted object
	     *  @memberof DataTable#oApi
	     */
	    function _fnSearchToCamel ( obj )
	    {
	        return {
	            search:          obj.sSearch,
	            smart:           obj.bSmart,
	            regex:           obj.bRegex,
	            caseInsensitive: obj.bCaseInsensitive
	        };
	    }
	    
	    
	    
	    /**
	     * Convert from camelCase notation to the internal Hungarian. We could use the
	     * Hungarian convert function here, but this is cleaner
	     *  @param {object} obj Object to convert
	     *  @returns {object} Inverted object
	     *  @memberof DataTable#oApi
	     */
	    function _fnSearchToHung ( obj )
	    {
	        return {
	            sSearch:          obj.search,
	            bSmart:           obj.smart,
	            bRegex:           obj.regex,
	            bCaseInsensitive: obj.caseInsensitive
	        };
	    }
	    
	    /**
	     * Generate the node required for the info display
	     *  @param {object} oSettings dataTables settings object
	     *  @returns {node} Information element
	     *  @memberof DataTable#oApi
	     */
	    function _fnFeatureHtmlInfo ( settings )
	    {
	        var
	            tid = settings.sTableId,
	            nodes = settings.aanFeatures.i,
	            n = $('<div/>', {
	                'class': settings.oClasses.sInfo,
	                'id': ! nodes ? tid+'_info' : null
	            } );
	    
	        if ( ! nodes ) {
	            // Update display on each draw
	            settings.aoDrawCallback.push( {
	                "fn": _fnUpdateInfo,
	                "sName": "information"
	            } );
	    
	            n
	                .attr( 'role', 'status' )
	                .attr( 'aria-live', 'polite' );
	    
	            // Table is described by our info div
	            $(settings.nTable).attr( 'aria-describedby', tid+'_info' );
	        }
	    
	        return n[0];
	    }
	    
	    
	    /**
	     * Update the information elements in the display
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnUpdateInfo ( settings )
	    {
	        /* Show information about the table */
	        var nodes = settings.aanFeatures.i;
	        if ( nodes.length === 0 ) {
	            return;
	        }
	    
	        var
	            lang  = settings.oLanguage,
	            start = settings._iDisplayStart+1,
	            end   = settings.fnDisplayEnd(),
	            max   = settings.fnRecordsTotal(),
	            total = settings.fnRecordsDisplay(),
	            out   = total ?
	                lang.sInfo :
	                lang.sInfoEmpty;
	    
	        if ( total !== max ) {
	            /* Record set after filtering */
	            out += ' ' + lang.sInfoFiltered;
	        }
	    
	        // Convert the macros
	        out += lang.sInfoPostFix;
	        out = _fnInfoMacros( settings, out );
	    
	        var callback = lang.fnInfoCallback;
	        if ( callback !== null ) {
	            out = callback.call( settings.oInstance,
	                settings, start, end, max, total, out
	            );
	        }
	    
	        $(nodes).html( out );
	    }
	    
	    
	    function _fnInfoMacros ( settings, str )
	    {
	        // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
	        // internally
	        var
	            formatter  = settings.fnFormatNumber,
	            start      = settings._iDisplayStart+1,
	            len        = settings._iDisplayLength,
	            vis        = settings.fnRecordsDisplay(),
	            all        = len === -1;
	    
	        return str.
	            replace(/_START_/g, formatter.call( settings, start ) ).
	            replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
	            replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
	            replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
	            replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
	            replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
	    }
	    
	    
	    
	    /**
	     * Draw the table for the first time, adding all required features
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnInitialise ( settings )
	    {
	        var i, iLen, iAjaxStart=settings.iInitDisplayStart;
	        var columns = settings.aoColumns, column;
	        var features = settings.oFeatures;
	    
	        /* Ensure that the table data is fully initialised */
	        if ( ! settings.bInitialised ) {
	            setTimeout( function(){ _fnInitialise( settings ); }, 200 );
	            return;
	        }
	    
	        /* Show the display HTML options */
	        _fnAddOptionsHtml( settings );
	    
	        /* Build and draw the header / footer for the table */
	        _fnBuildHead( settings );
	        _fnDrawHead( settings, settings.aoHeader );
	        _fnDrawHead( settings, settings.aoFooter );
	    
	        /* Okay to show that something is going on now */
	        _fnProcessingDisplay( settings, true );
	    
	        /* Calculate sizes for columns */
	        if ( features.bAutoWidth ) {
	            _fnCalculateColumnWidths( settings );
	        }
	    
	        for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
	            column = columns[i];
	    
	            if ( column.sWidth ) {
	                column.nTh.style.width = _fnStringToCss( column.sWidth );
	            }
	        }
	    
	        // If there is default sorting required - let's do it. The sort function
	        // will do the drawing for us. Otherwise we draw the table regardless of the
	        // Ajax source - this allows the table to look initialised for Ajax sourcing
	        // data (show 'loading' message possibly)
	        _fnReDraw( settings );
	    
	        // Server-side processing init complete is done by _fnAjaxUpdateDraw
	        var dataSrc = _fnDataSource( settings );
	        if ( dataSrc != 'ssp' ) {
	            // if there is an ajax source load the data
	            if ( dataSrc == 'ajax' ) {
	                _fnBuildAjax( settings, [], function(json) {
	                    var aData = _fnAjaxDataSrc( settings, json );
	    
	                    // Got the data - add it to the table
	                    for ( i=0 ; i<aData.length ; i++ ) {
	                        _fnAddData( settings, aData[i] );
	                    }
	    
	                    // Reset the init display for cookie saving. We've already done
	                    // a filter, and therefore cleared it before. So we need to make
	                    // it appear 'fresh'
	                    settings.iInitDisplayStart = iAjaxStart;
	    
	                    _fnReDraw( settings );
	    
	                    _fnProcessingDisplay( settings, false );
	                    _fnInitComplete( settings, json );
	                }, settings );
	            }
	            else {
	                _fnProcessingDisplay( settings, false );
	                _fnInitComplete( settings );
	            }
	        }
	    }
	    
	    
	    /**
	     * Draw the table for the first time, adding all required features
	     *  @param {object} oSettings dataTables settings object
	     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	     *    with client-side processing (optional)
	     *  @memberof DataTable#oApi
	     */
	    function _fnInitComplete ( settings, json )
	    {
	        settings._bInitComplete = true;
	    
	        // On an Ajax load we now have data and therefore want to apply the column
	        // sizing
	        if ( json ) {
	            _fnAdjustColumnSizing( settings );
	        }
	    
	        _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
	    }
	    
	    
	    function _fnLengthChange ( settings, val )
	    {
	        var len = parseInt( val, 10 );
	        settings._iDisplayLength = len;
	    
	        _fnLengthOverflow( settings );
	    
	        // Fire length change event
	        _fnCallbackFire( settings, null, 'length', [settings, len] );
	    }
	    
	    
	    /**
	     * Generate the node required for user display length changing
	     *  @param {object} settings dataTables settings object
	     *  @returns {node} Display length feature node
	     *  @memberof DataTable#oApi
	     */
	    function _fnFeatureHtmlLength ( settings )
	    {
	        var
	            classes  = settings.oClasses,
	            tableId  = settings.sTableId,
	            menu     = settings.aLengthMenu,
	            d2       = $.isArray( menu[0] ),
	            lengths  = d2 ? menu[0] : menu,
	            language = d2 ? menu[1] : menu;
	    
	        var select = $('<select/>', {
	            'name':          tableId+'_length',
	            'aria-controls': tableId,
	            'class':         classes.sLengthSelect
	        } );
	    
	        for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
	            select[0][ i ] = new Option( language[i], lengths[i] );
	        }
	    
	        var div = $('<div><label/></div>').addClass( classes.sLength );
	        if ( ! settings.aanFeatures.l ) {
	            div[0].id = tableId+'_length';
	        }
	    
	        div.children().append(
	            settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
	        );
	    
	        // Can't use `select` variable as user might provide their own and the
	        // reference is broken by the use of outerHTML
	        $('select', div)
	            .val( settings._iDisplayLength )
	            .bind( 'change.DT', function(e) {
	                _fnLengthChange( settings, $(this).val() );
	                _fnDraw( settings );
	            } );
	    
	        // Update node value whenever anything changes the table's length
	        $(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {
	            if ( settings === s ) {
	                $('select', div).val( len );
	            }
	        } );
	    
	        return div[0];
	    }
	    
	    
	    
	    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	     * Note that most of the paging logic is done in
	     * DataTable.ext.pager
	     */
	    
	    /**
	     * Generate the node required for default pagination
	     *  @param {object} oSettings dataTables settings object
	     *  @returns {node} Pagination feature node
	     *  @memberof DataTable#oApi
	     */
	    function _fnFeatureHtmlPaginate ( settings )
	    {
	        var
	            type   = settings.sPaginationType,
	            plugin = DataTable.ext.pager[ type ],
	            modern = typeof plugin === 'function',
	            redraw = function( settings ) {
	                _fnDraw( settings );
	            },
	            node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
	            features = settings.aanFeatures;
	    
	        if ( ! modern ) {
	            plugin.fnInit( settings, node, redraw );
	        }
	    
	        /* Add a draw callback for the pagination on first instance, to update the paging display */
	        if ( ! features.p )
	        {
	            node.id = settings.sTableId+'_paginate';
	    
	            settings.aoDrawCallback.push( {
	                "fn": function( settings ) {
	                    if ( modern ) {
	                        var
	                            start      = settings._iDisplayStart,
	                            len        = settings._iDisplayLength,
	                            visRecords = settings.fnRecordsDisplay(),
	                            all        = len === -1,
	                            page = all ? 0 : Math.ceil( start / len ),
	                            pages = all ? 1 : Math.ceil( visRecords / len ),
	                            buttons = plugin(page, pages),
	                            i, ien;
	    
	                        for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
	                            _fnRenderer( settings, 'pageButton' )(
	                                settings, features.p[i], i, buttons, page, pages
	                            );
	                        }
	                    }
	                    else {
	                        plugin.fnUpdate( settings, redraw );
	                    }
	                },
	                "sName": "pagination"
	            } );
	        }
	    
	        return node;
	    }
	    
	    
	    /**
	     * Alter the display settings to change the page
	     *  @param {object} settings DataTables settings object
	     *  @param {string|int} action Paging action to take: "first", "previous",
	     *    "next" or "last" or page number to jump to (integer)
	     *  @param [bool] redraw Automatically draw the update or not
	     *  @returns {bool} true page has changed, false - no change
	     *  @memberof DataTable#oApi
	     */
	    function _fnPageChange ( settings, action, redraw )
	    {
	        var
	            start     = settings._iDisplayStart,
	            len       = settings._iDisplayLength,
	            records   = settings.fnRecordsDisplay();
	    
	        if ( records === 0 || len === -1 )
	        {
	            start = 0;
	        }
	        else if ( typeof action === "number" )
	        {
	            start = action * len;
	    
	            if ( start > records )
	            {
	                start = 0;
	            }
	        }
	        else if ( action == "first" )
	        {
	            start = 0;
	        }
	        else if ( action == "previous" )
	        {
	            start = len >= 0 ?
	                start - len :
	                0;
	    
	            if ( start < 0 )
	            {
	              start = 0;
	            }
	        }
	        else if ( action == "next" )
	        {
	            if ( start + len < records )
	            {
	                start += len;
	            }
	        }
	        else if ( action == "last" )
	        {
	            start = Math.floor( (records-1) / len) * len;
	        }
	        else
	        {
	            _fnLog( settings, 0, "Unknown paging action: "+action, 5 );
	        }
	    
	        var changed = settings._iDisplayStart !== start;
	        settings._iDisplayStart = start;
	    
	        if ( changed ) {
	            _fnCallbackFire( settings, null, 'page', [settings] );
	    
	            if ( redraw ) {
	                _fnDraw( settings );
	            }
	        }
	    
	        return changed;
	    }
	    
	    
	    
	    /**
	     * Generate the node required for the processing node
	     *  @param {object} settings dataTables settings object
	     *  @returns {node} Processing element
	     *  @memberof DataTable#oApi
	     */
	    function _fnFeatureHtmlProcessing ( settings )
	    {
	        return $('<div/>', {
	                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
	                'class': settings.oClasses.sProcessing
	            } )
	            .html( settings.oLanguage.sProcessing )
	            .insertBefore( settings.nTable )[0];
	    }
	    
	    
	    /**
	     * Display or hide the processing indicator
	     *  @param {object} settings dataTables settings object
	     *  @param {bool} show Show the processing indicator (true) or not (false)
	     *  @memberof DataTable#oApi
	     */
	    function _fnProcessingDisplay ( settings, show )
	    {
	        if ( settings.oFeatures.bProcessing ) {
	            $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
	        }
	    
	        _fnCallbackFire( settings, null, 'processing', [settings, show] );
	    }
	    
	    /**
	     * Add any control elements for the table - specifically scrolling
	     *  @param {object} settings dataTables settings object
	     *  @returns {node} Node to add to the DOM
	     *  @memberof DataTable#oApi
	     */
	    function _fnFeatureHtmlTable ( settings )
	    {
	        var table = $(settings.nTable);
	    
	        // Add the ARIA grid role to the table
	        table.attr( 'role', 'grid' );
	    
	        // Scrolling from here on in
	        var scroll = settings.oScroll;
	    
	        if ( scroll.sX === '' && scroll.sY === '' ) {
	            return settings.nTable;
	        }
	    
	        var scrollX = scroll.sX;
	        var scrollY = scroll.sY;
	        var classes = settings.oClasses;
	        var caption = table.children('caption');
	        var captionSide = caption.length ? caption[0]._captionSide : null;
	        var headerClone = $( table[0].cloneNode(false) );
	        var footerClone = $( table[0].cloneNode(false) );
	        var footer = table.children('tfoot');
	        var _div = '<div/>';
	        var size = function ( s ) {
	            return !s ? null : _fnStringToCss( s );
	        };
	    
	        // This is fairly messy, but with x scrolling enabled, if the table has a
	        // width attribute, regardless of any width applied using the column width
	        // options, the browser will shrink or grow the table as needed to fit into
	        // that 100%. That would make the width options useless. So we remove it.
	        // This is okay, under the assumption that width:100% is applied to the
	        // table in CSS (it is in the default stylesheet) which will set the table
	        // width as appropriate (the attribute and css behave differently...)
	        if ( scroll.sX && table.attr('width') === '100%' ) {
	            table.removeAttr('width');
	        }
	    
	        if ( ! footer.length ) {
	            footer = null;
	        }
	    
	        /*
	         * The HTML structure that we want to generate in this function is:
	         *  div - scroller
	         *    div - scroll head
	         *      div - scroll head inner
	         *        table - scroll head table
	         *          thead - thead
	         *    div - scroll body
	         *      table - table (master table)
	         *        thead - thead clone for sizing
	         *        tbody - tbody
	         *    div - scroll foot
	         *      div - scroll foot inner
	         *        table - scroll foot table
	         *          tfoot - tfoot
	         */
	        var scroller = $( _div, { 'class': classes.sScrollWrapper } )
	            .append(
	                $(_div, { 'class': classes.sScrollHead } )
	                    .css( {
	                        overflow: 'hidden',
	                        position: 'relative',
	                        border: 0,
	                        width: scrollX ? size(scrollX) : '100%'
	                    } )
	                    .append(
	                        $(_div, { 'class': classes.sScrollHeadInner } )
	                            .css( {
	                                'box-sizing': 'content-box',
	                                width: scroll.sXInner || '100%'
	                            } )
	                            .append(
	                                headerClone
	                                    .removeAttr('id')
	                                    .css( 'margin-left', 0 )
	                                    .append( captionSide === 'top' ? caption : null )
	                                    .append(
	                                        table.children('thead')
	                                    )
	                            )
	                    )
	            )
	            .append(
	                $(_div, { 'class': classes.sScrollBody } )
	                    .css( {
	                        overflow: 'auto',
	                        height: size( scrollY ),
	                        width: size( scrollX )
	                    } )
	                    .append( table )
	            );
	    
	        if ( footer ) {
	            scroller.append(
	                $(_div, { 'class': classes.sScrollFoot } )
	                    .css( {
	                        overflow: 'hidden',
	                        border: 0,
	                        width: scrollX ? size(scrollX) : '100%'
	                    } )
	                    .append(
	                        $(_div, { 'class': classes.sScrollFootInner } )
	                            .append(
	                                footerClone
	                                    .removeAttr('id')
	                                    .css( 'margin-left', 0 )
	                                    .append( captionSide === 'bottom' ? caption : null )
	                                    .append(
	                                        table.children('tfoot')
	                                    )
	                            )
	                    )
	            );
	        }
	    
	        var children = scroller.children();
	        var scrollHead = children[0];
	        var scrollBody = children[1];
	        var scrollFoot = footer ? children[2] : null;
	    
	        // When the body is scrolled, then we also want to scroll the headers
	        if ( scrollX ) {
	            $(scrollBody).on( 'scroll.DT', function (e) {
	                var scrollLeft = this.scrollLeft;
	    
	                scrollHead.scrollLeft = scrollLeft;
	    
	                if ( footer ) {
	                    scrollFoot.scrollLeft = scrollLeft;
	                }
	            } );
	        }
	    
	        settings.nScrollHead = scrollHead;
	        settings.nScrollBody = scrollBody;
	        settings.nScrollFoot = scrollFoot;
	    
	        // On redraw - align columns
	        settings.aoDrawCallback.push( {
	            "fn": _fnScrollDraw,
	            "sName": "scrolling"
	        } );
	    
	        return scroller[0];
	    }
	    
	    
	    
	    /**
	     * Update the header, footer and body tables for resizing - i.e. column
	     * alignment.
	     *
	     * Welcome to the most horrible function DataTables. The process that this
	     * function follows is basically:
	     *   1. Re-create the table inside the scrolling div
	     *   2. Take live measurements from the DOM
	     *   3. Apply the measurements to align the columns
	     *   4. Clean up
	     *
	     *  @param {object} settings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnScrollDraw ( settings )
	    {
	        // Given that this is such a monster function, a lot of variables are use
	        // to try and keep the minimised size as small as possible
	        var
	            scroll         = settings.oScroll,
	            scrollX        = scroll.sX,
	            scrollXInner   = scroll.sXInner,
	            scrollY        = scroll.sY,
	            barWidth       = scroll.iBarWidth,
	            divHeader      = $(settings.nScrollHead),
	            divHeaderStyle = divHeader[0].style,
	            divHeaderInner = divHeader.children('div'),
	            divHeaderInnerStyle = divHeaderInner[0].style,
	            divHeaderTable = divHeaderInner.children('table'),
	            divBodyEl      = settings.nScrollBody,
	            divBody        = $(divBodyEl),
	            divBodyStyle   = divBodyEl.style,
	            divFooter      = $(settings.nScrollFoot),
	            divFooterInner = divFooter.children('div'),
	            divFooterTable = divFooterInner.children('table'),
	            header         = $(settings.nTHead),
	            table          = $(settings.nTable),
	            tableEl        = table[0],
	            tableStyle     = tableEl.style,
	            footer         = settings.nTFoot ? $(settings.nTFoot) : null,
	            browser        = settings.oBrowser,
	            ie67           = browser.bScrollOversize,
	            headerTrgEls, footerTrgEls,
	            headerSrcEls, footerSrcEls,
	            headerCopy, footerCopy,
	            headerWidths=[], footerWidths=[],
	            headerContent=[],
	            idx, correction, sanityWidth,
	            zeroOut = function(nSizer) {
	                var style = nSizer.style;
	                style.paddingTop = "0";
	                style.paddingBottom = "0";
	                style.borderTopWidth = "0";
	                style.borderBottomWidth = "0";
	                style.height = 0;
	            };
	    
	        /*
	         * 1. Re-create the table inside the scrolling div
	         */
	    
	        // Remove the old minimised thead and tfoot elements in the inner table
	        table.children('thead, tfoot').remove();
	    
	        // Clone the current header and footer elements and then place it into the inner table
	        headerCopy = header.clone().prependTo( table );
	        headerTrgEls = header.find('tr'); // original header is in its own table
	        headerSrcEls = headerCopy.find('tr');
	        headerCopy.find('th, td').removeAttr('tabindex');
	    
	        if ( footer ) {
	            footerCopy = footer.clone().prependTo( table );
	            footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
	            footerSrcEls = footerCopy.find('tr');
	        }
	    
	    
	        /*
	         * 2. Take live measurements from the DOM - do not alter the DOM itself!
	         */
	    
	        // Remove old sizing and apply the calculated column widths
	        // Get the unique column headers in the newly created (cloned) header. We want to apply the
	        // calculated sizes to this header
	        if ( ! scrollX )
	        {
	            divBodyStyle.width = '100%';
	            divHeader[0].style.width = '100%';
	        }
	    
	        $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
	            idx = _fnVisibleToColumnIndex( settings, i );
	            el.style.width = settings.aoColumns[idx].sWidth;
	        } );
	    
	        if ( footer ) {
	            _fnApplyToChildren( function(n) {
	                n.style.width = "";
	            }, footerSrcEls );
	        }
	    
	        // If scroll collapse is enabled, when we put the headers back into the body for sizing, we
	        // will end up forcing the scrollbar to appear, making our measurements wrong for when we
	        // then hide it (end of this function), so add the header height to the body scroller.
	        if ( scroll.bCollapse && scrollY !== "" ) {
	            divBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+"px";
	        }
	    
	        // Size the table as a whole
	        sanityWidth = table.outerWidth();
	        if ( scrollX === "" ) {
	            // No x scrolling
	            tableStyle.width = "100%";
	    
	            // IE7 will make the width of the table when 100% include the scrollbar
	            // - which is shouldn't. When there is a scrollbar we need to take this
	            // into account.
	            if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
	                divBody.css('overflow-y') == "scroll")
	            ) {
	                tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
	            }
	        }
	        else
	        {
	            // x scrolling
	            if ( scrollXInner !== "" ) {
	                // x scroll inner has been given - use it
	                tableStyle.width = _fnStringToCss(scrollXInner);
	            }
	            else if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {
	                // There is y-scrolling - try to take account of the y scroll bar
	                tableStyle.width = _fnStringToCss( sanityWidth-barWidth );
	                if ( table.outerWidth() > sanityWidth-barWidth ) {
	                    // Not possible to take account of it
	                    tableStyle.width = _fnStringToCss( sanityWidth );
	                }
	            }
	            else {
	                // When all else fails
	                tableStyle.width = _fnStringToCss( sanityWidth );
	            }
	        }
	    
	        // Recalculate the sanity width - now that we've applied the required width,
	        // before it was a temporary variable. This is required because the column
	        // width calculation is done before this table DOM is created.
	        sanityWidth = table.outerWidth();
	    
	        // Hidden header should have zero height, so remove padding and borders. Then
	        // set the width based on the real headers
	    
	        // Apply all styles in one pass
	        _fnApplyToChildren( zeroOut, headerSrcEls );
	    
	        // Read all widths in next pass
	        _fnApplyToChildren( function(nSizer) {
	            headerContent.push( nSizer.innerHTML );
	            headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
	        }, headerSrcEls );
	    
	        // Apply all widths in final pass
	        _fnApplyToChildren( function(nToSize, i) {
	            nToSize.style.width = headerWidths[i];
	        }, headerTrgEls );
	    
	        $(headerSrcEls).height(0);
	    
	        /* Same again with the footer if we have one */
	        if ( footer )
	        {
	            _fnApplyToChildren( zeroOut, footerSrcEls );
	    
	            _fnApplyToChildren( function(nSizer) {
	                footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
	            }, footerSrcEls );
	    
	            _fnApplyToChildren( function(nToSize, i) {
	                nToSize.style.width = footerWidths[i];
	            }, footerTrgEls );
	    
	            $(footerSrcEls).height(0);
	        }
	    
	    
	        /*
	         * 3. Apply the measurements
	         */
	    
	        // "Hide" the header and footer that we used for the sizing. We need to keep
	        // the content of the cell so that the width applied to the header and body
	        // both match, but we want to hide it completely. We want to also fix their
	        // width to what they currently are
	        _fnApplyToChildren( function(nSizer, i) {
	            nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+headerContent[i]+'</div>';
	            nSizer.style.width = headerWidths[i];
	        }, headerSrcEls );
	    
	        if ( footer )
	        {
	            _fnApplyToChildren( function(nSizer, i) {
	                nSizer.innerHTML = "";
	                nSizer.style.width = footerWidths[i];
	            }, footerSrcEls );
	        }
	    
	        // Sanity check that the table is of a sensible width. If not then we are going to get
	        // misalignment - try to prevent this by not allowing the table to shrink below its min width
	        if ( table.outerWidth() < sanityWidth )
	        {
	            // The min width depends upon if we have a vertical scrollbar visible or not */
	            correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
	                divBody.css('overflow-y') == "scroll")) ?
	                    sanityWidth+barWidth :
	                    sanityWidth;
	    
	            // IE6/7 are a law unto themselves...
	            if ( ie67 && (divBodyEl.scrollHeight >
	                divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
	            ) {
	                tableStyle.width = _fnStringToCss( correction-barWidth );
	            }
	    
	            // And give the user a warning that we've stopped the table getting too small
	            if ( scrollX === "" || scrollXInner !== "" ) {
	                _fnLog( settings, 1, 'Possible column misalignment', 6 );
	            }
	        }
	        else
	        {
	            correction = '100%';
	        }
	    
	        // Apply to the container elements
	        divBodyStyle.width = _fnStringToCss( correction );
	        divHeaderStyle.width = _fnStringToCss( correction );
	    
	        if ( footer ) {
	            settings.nScrollFoot.style.width = _fnStringToCss( correction );
	        }
	    
	    
	        /*
	         * 4. Clean up
	         */
	        if ( ! scrollY ) {
	            /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
	             * the scrollbar height from the visible display, rather than adding it on. We need to
	             * set the height in order to sort this. Don't want to do it in any other browsers.
	             */
	            if ( ie67 ) {
	                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
	            }
	        }
	    
	        if ( scrollY && scroll.bCollapse ) {
	            divBodyStyle.height = _fnStringToCss( scrollY );
	    
	            var iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?
	                barWidth :
	                0;
	    
	            if ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {
	                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );
	            }
	        }
	    
	        /* Finally set the width's of the header and footer tables */
	        var iOuterWidth = table.outerWidth();
	        divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
	        divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
	    
	        // Figure out if there are scrollbar present - if so then we need a the header and footer to
	        // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
	        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
	        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
	        divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
	    
	        if ( footer ) {
	            divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
	            divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
	            divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
	        }
	    
	        /* Adjust the position of the header in case we loose the y-scrollbar */
	        divBody.scroll();
	    
	        // If sorting or filtering has occurred, jump the scrolling back to the top
	        // only if we aren't holding the position
	        if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
	            divBodyEl.scrollTop = 0;
	        }
	    }
	    
	    
	    
	    /**
	     * Apply a given function to the display child nodes of an element array (typically
	     * TD children of TR rows
	     *  @param {function} fn Method to apply to the objects
	     *  @param array {nodes} an1 List of elements to look through for display children
	     *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	     *  @memberof DataTable#oApi
	     */
	    function _fnApplyToChildren( fn, an1, an2 )
	    {
	        var index=0, i=0, iLen=an1.length;
	        var nNode1, nNode2;
	    
	        while ( i < iLen ) {
	            nNode1 = an1[i].firstChild;
	            nNode2 = an2 ? an2[i].firstChild : null;
	    
	            while ( nNode1 ) {
	                if ( nNode1.nodeType === 1 ) {
	                    if ( an2 ) {
	                        fn( nNode1, nNode2, index );
	                    }
	                    else {
	                        fn( nNode1, index );
	                    }
	    
	                    index++;
	                }
	    
	                nNode1 = nNode1.nextSibling;
	                nNode2 = an2 ? nNode2.nextSibling : null;
	            }
	    
	            i++;
	        }
	    }
	    
	    
	    
	    var __re_html_remove = /<.*?>/g;
	    
	    
	    /**
	     * Calculate the width of columns for the table
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnCalculateColumnWidths ( oSettings )
	    {
	        var
	            table = oSettings.nTable,
	            columns = oSettings.aoColumns,
	            scroll = oSettings.oScroll,
	            scrollY = scroll.sY,
	            scrollX = scroll.sX,
	            scrollXInner = scroll.sXInner,
	            columnCount = columns.length,
	            visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
	            headerCells = $('th', oSettings.nTHead),
	            tableWidthAttr = table.getAttribute('width'), // from DOM element
	            tableContainer = table.parentNode,
	            userInputs = false,
	            i, column, columnIdx, width, outerWidth;
	    
	        var styleWidth = table.style.width;
	        if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
	            tableWidthAttr = styleWidth;
	        }
	    
	        /* Convert any user input sizes into pixel sizes */
	        for ( i=0 ; i<visibleColumns.length ; i++ ) {
	            column = columns[ visibleColumns[i] ];
	    
	            if ( column.sWidth !== null ) {
	                column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
	    
	                userInputs = true;
	            }
	        }
	    
	        /* If the number of columns in the DOM equals the number that we have to
	         * process in DataTables, then we can use the offsets that are created by
	         * the web- browser. No custom sizes can be set in order for this to happen,
	         * nor scrolling used
	         */
	        if ( ! userInputs && ! scrollX && ! scrollY &&
	            columnCount == _fnVisbleColumns( oSettings ) &&
	            columnCount == headerCells.length
	        ) {
	            for ( i=0 ; i<columnCount ; i++ ) {
	                columns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );
	            }
	        }
	        else
	        {
	            // Otherwise construct a single row table with the widest node in the
	            // data, assign any user defined widths, then insert it into the DOM and
	            // allow the browser to do all the hard work of calculating table widths
	            var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
	                .empty()
	                .css( 'visibility', 'hidden' )
	                .removeAttr( 'id' )
	                .append( $(oSettings.nTHead).clone( false ) )
	                .append( $(oSettings.nTFoot).clone( false ) )
	                .append( $('<tbody><tr/></tbody>') );
	    
	            // Remove any assigned widths from the footer (from scrolling)
	            tmpTable.find('tfoot th, tfoot td').css('width', '');
	    
	            var tr = tmpTable.find( 'tbody tr' );
	    
	            // Apply custom sizing to the cloned header
	            headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
	    
	            for ( i=0 ; i<visibleColumns.length ; i++ ) {
	                column = columns[ visibleColumns[i] ];
	    
	                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
	                    _fnStringToCss( column.sWidthOrig ) :
	                    '';
	            }
	    
	            // Find the widest cell for each column and put it into the table
	            if ( oSettings.aoData.length ) {
	                for ( i=0 ; i<visibleColumns.length ; i++ ) {
	                    columnIdx = visibleColumns[i];
	                    column = columns[ columnIdx ];
	    
	                    $( _fnGetWidestNode( oSettings, columnIdx ) )
	                        .clone( false )
	                        .append( column.sContentPadding )
	                        .appendTo( tr );
	                }
	            }
	    
	            // Table has been built, attach to the document so we can work with it
	            tmpTable.appendTo( tableContainer );
	    
	            // When scrolling (X or Y) we want to set the width of the table as 
	            // appropriate. However, when not scrolling leave the table width as it
	            // is. This results in slightly different, but I think correct behaviour
	            if ( scrollX && scrollXInner ) {
	                tmpTable.width( scrollXInner );
	            }
	            else if ( scrollX ) {
	                tmpTable.css( 'width', 'auto' );
	    
	                if ( tmpTable.width() < tableContainer.offsetWidth ) {
	                    tmpTable.width( tableContainer.offsetWidth );
	                }
	            }
	            else if ( scrollY ) {
	                tmpTable.width( tableContainer.offsetWidth );
	            }
	            else if ( tableWidthAttr ) {
	                tmpTable.width( tableWidthAttr );
	            }
	    
	            // Take into account the y scrollbar
	            _fnScrollingWidthAdjust( oSettings, tmpTable[0] );
	    
	            // Browsers need a bit of a hand when a width is assigned to any columns
	            // when x-scrolling as they tend to collapse the table to the min-width,
	            // even if we sent the column widths. So we need to keep track of what
	            // the table width should be by summing the user given values, and the
	            // automatic values
	            if ( scrollX )
	            {
	                var total = 0;
	    
	                for ( i=0 ; i<visibleColumns.length ; i++ ) {
	                    column = columns[ visibleColumns[i] ];
	                    outerWidth = $(headerCells[i]).outerWidth();
	    
	                    total += column.sWidthOrig === null ?
	                        outerWidth :
	                        parseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();
	                }
	    
	                tmpTable.width( _fnStringToCss( total ) );
	                table.style.width = _fnStringToCss( total );
	            }
	    
	            // Get the width of each column in the constructed table
	            for ( i=0 ; i<visibleColumns.length ; i++ ) {
	                column = columns[ visibleColumns[i] ];
	                width = $(headerCells[i]).width();
	    
	                if ( width ) {
	                    column.sWidth = _fnStringToCss( width );
	                }
	            }
	    
	            table.style.width = _fnStringToCss( tmpTable.css('width') );
	    
	            // Finished with the table - ditch it
	            tmpTable.remove();
	        }
	    
	        // If there is a width attr, we want to attach an event listener which
	        // allows the table sizing to automatically adjust when the window is
	        // resized. Use the width attr rather than CSS, since we can't know if the
	        // CSS is a relative value or absolute - DOM read is always px.
	        if ( tableWidthAttr ) {
	            table.style.width = _fnStringToCss( tableWidthAttr );
	        }
	    
	        if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
	            $(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
	                _fnAdjustColumnSizing( oSettings );
	            } ) );
	    
	            oSettings._reszEvt = true;
	        }
	    }
	    
	    
	    /**
	     * Throttle the calls to a function. Arguments and context are maintained for
	     * the throttled function
	     *  @param {function} fn Function to be called
	     *  @param {int} [freq=200] call frequency in mS
	     *  @returns {function} wrapped function
	     *  @memberof DataTable#oApi
	     */
	    function _fnThrottle( fn, freq ) {
	        var
	            frequency = freq !== undefined ? freq : 200,
	            last,
	            timer;
	    
	        return function () {
	            var
	                that = this,
	                now  = +new Date(),
	                args = arguments;
	    
	            if ( last && now < last + frequency ) {
	                clearTimeout( timer );
	    
	                timer = setTimeout( function () {
	                    last = undefined;
	                    fn.apply( that, args );
	                }, frequency );
	            }
	            else {
	                last = now;
	                fn.apply( that, args );
	            }
	        };
	    }
	    
	    
	    /**
	     * Convert a CSS unit width to pixels (e.g. 2em)
	     *  @param {string} width width to be converted
	     *  @param {node} parent parent to get the with for (required for relative widths) - optional
	     *  @returns {int} width in pixels
	     *  @memberof DataTable#oApi
	     */
	    function _fnConvertToWidth ( width, parent )
	    {
	        if ( ! width ) {
	            return 0;
	        }
	    
	        var n = $('<div/>')
	            .css( 'width', _fnStringToCss( width ) )
	            .appendTo( parent || document.body );
	    
	        var val = n[0].offsetWidth;
	        n.remove();
	    
	        return val;
	    }
	    
	    
	    /**
	     * Adjust a table's width to take account of vertical scroll bar
	     *  @param {object} oSettings dataTables settings object
	     *  @param {node} n table node
	     *  @memberof DataTable#oApi
	     */
	    
	    function _fnScrollingWidthAdjust ( settings, n )
	    {
	        var scroll = settings.oScroll;
	    
	        if ( scroll.sX || scroll.sY ) {
	            // When y-scrolling only, we want to remove the width of the scroll bar
	            // so the table + scroll bar will fit into the area available, otherwise
	            // we fix the table at its current size with no adjustment
	            var correction = ! scroll.sX ? scroll.iBarWidth : 0;
	            n.style.width = _fnStringToCss( $(n).outerWidth() - correction );
	        }
	    }
	    
	    
	    /**
	     * Get the widest node
	     *  @param {object} settings dataTables settings object
	     *  @param {int} colIdx column of interest
	     *  @returns {node} widest table node
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetWidestNode( settings, colIdx )
	    {
	        var idx = _fnGetMaxLenString( settings, colIdx );
	        if ( idx < 0 ) {
	            return null;
	        }
	    
	        var data = settings.aoData[ idx ];
	        return ! data.nTr ? // Might not have been created when deferred rendering
	            $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
	            data.anCells[ colIdx ];
	    }
	    
	    
	    /**
	     * Get the maximum strlen for each data column
	     *  @param {object} settings dataTables settings object
	     *  @param {int} colIdx column of interest
	     *  @returns {string} max string length for each column
	     *  @memberof DataTable#oApi
	     */
	    function _fnGetMaxLenString( settings, colIdx )
	    {
	        var s, max=-1, maxIdx = -1;
	    
	        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
	            s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
	            s = s.replace( __re_html_remove, '' );
	    
	            if ( s.length > max ) {
	                max = s.length;
	                maxIdx = i;
	            }
	        }
	    
	        return maxIdx;
	    }
	    
	    
	    /**
	     * Append a CSS unit (only if required) to a string
	     *  @param {string} value to css-ify
	     *  @returns {string} value with css unit
	     *  @memberof DataTable#oApi
	     */
	    function _fnStringToCss( s )
	    {
	        if ( s === null ) {
	            return '0px';
	        }
	    
	        if ( typeof s == 'number' ) {
	            return s < 0 ?
	                '0px' :
	                s+'px';
	        }
	    
	        // Check it has a unit character already
	        return s.match(/\d$/) ?
	            s+'px' :
	            s;
	    }
	    
	    
	    /**
	     * Get the width of a scroll bar in this browser being used
	     *  @returns {int} width in pixels
	     *  @memberof DataTable#oApi
	     */
	    function _fnScrollBarWidth ()
	    {
	        // On first run a static variable is set, since this is only needed once.
	        // Subsequent runs will just use the previously calculated value
	        var width = DataTable.__scrollbarWidth;
	    
	        if ( width === undefined ) {
	            var sizer = $('<p/>').css( {
	                    position: 'absolute',
	                    top: 0,
	                    left: 0,
	                    width: '100%',
	                    height: 150,
	                    padding: 0,
	                    overflow: 'scroll',
	                    visibility: 'hidden'
	                } )
	                .appendTo('body');
	    
	            width = sizer[0].offsetWidth - sizer[0].clientWidth;
	            DataTable.__scrollbarWidth = width;
	    
	            sizer.remove();
	        }
	    
	        return width;
	    }
	    
	    
	    
	    function _fnSortFlatten ( settings )
	    {
	        var
	            i, iLen, k, kLen,
	            aSort = [],
	            aiOrig = [],
	            aoColumns = settings.aoColumns,
	            aDataSort, iCol, sType, srcCol,
	            fixed = settings.aaSortingFixed,
	            fixedObj = $.isPlainObject( fixed ),
	            nestedSort = [],
	            add = function ( a ) {
	                if ( a.length && ! $.isArray( a[0] ) ) {
	                    // 1D array
	                    nestedSort.push( a );
	                }
	                else {
	                    // 2D array
	                    nestedSort.push.apply( nestedSort, a );
	                }
	            };
	    
	        // Build the sort array, with pre-fix and post-fix options if they have been
	        // specified
	        if ( $.isArray( fixed ) ) {
	            add( fixed );
	        }
	    
	        if ( fixedObj && fixed.pre ) {
	            add( fixed.pre );
	        }
	    
	        add( settings.aaSorting );
	    
	        if (fixedObj && fixed.post ) {
	            add( fixed.post );
	        }
	    
	        for ( i=0 ; i<nestedSort.length ; i++ )
	        {
	            srcCol = nestedSort[i][0];
	            aDataSort = aoColumns[ srcCol ].aDataSort;
	    
	            for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
	            {
	                iCol = aDataSort[k];
	                sType = aoColumns[ iCol ].sType || 'string';
	    
	                if ( nestedSort[i]._idx === undefined ) {
	                    nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
	                }
	    
	                aSort.push( {
	                    src:       srcCol,
	                    col:       iCol,
	                    dir:       nestedSort[i][1],
	                    index:     nestedSort[i]._idx,
	                    type:      sType,
	                    formatter: DataTable.ext.type.order[ sType+"-pre" ]
	                } );
	            }
	        }
	    
	        return aSort;
	    }
	    
	    /**
	     * Change the order of the table
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     *  @todo This really needs split up!
	     */
	    function _fnSort ( oSettings )
	    {
	        var
	            i, ien, iLen, j, jLen, k, kLen,
	            sDataType, nTh,
	            aiOrig = [],
	            oExtSort = DataTable.ext.type.order,
	            aoData = oSettings.aoData,
	            aoColumns = oSettings.aoColumns,
	            aDataSort, data, iCol, sType, oSort,
	            formatters = 0,
	            sortCol,
	            displayMaster = oSettings.aiDisplayMaster,
	            aSort;
	    
	        // Resolve any column types that are unknown due to addition or invalidation
	        // @todo Can this be moved into a 'data-ready' handler which is called when
	        //   data is going to be used in the table?
	        _fnColumnTypes( oSettings );
	    
	        aSort = _fnSortFlatten( oSettings );
	    
	        for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
	            sortCol = aSort[i];
	    
	            // Track if we can use the fast sort algorithm
	            if ( sortCol.formatter ) {
	                formatters++;
	            }
	    
	            // Load the data needed for the sort, for each cell
	            _fnSortData( oSettings, sortCol.col );
	        }
	    
	        /* No sorting required if server-side or no sorting array */
	        if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
	        {
	            // Create a value - key array of the current row positions such that we can use their
	            // current position during the sort, if values match, in order to perform stable sorting
	            for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
	                aiOrig[ displayMaster[i] ] = i;
	            }
	    
	            /* Do the sort - here we want multi-column sorting based on a given data source (column)
	             * and sorting function (from oSort) in a certain direction. It's reasonably complex to
	             * follow on it's own, but this is what we want (example two column sorting):
	             *  fnLocalSorting = function(a,b){
	             *    var iTest;
	             *    iTest = oSort['string-asc']('data11', 'data12');
	             *      if (iTest !== 0)
	             *        return iTest;
	             *    iTest = oSort['numeric-desc']('data21', 'data22');
	             *    if (iTest !== 0)
	             *      return iTest;
	             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
	             *  }
	             * Basically we have a test for each sorting column, if the data in that column is equal,
	             * test the next column. If all columns match, then we use a numeric sort on the row
	             * positions in the original data array to provide a stable sort.
	             *
	             * Note - I know it seems excessive to have two sorting methods, but the first is around
	             * 15% faster, so the second is only maintained for backwards compatibility with sorting
	             * methods which do not have a pre-sort formatting function.
	             */
	            if ( formatters === aSort.length ) {
	                // All sort types have formatting functions
	                displayMaster.sort( function ( a, b ) {
	                    var
	                        x, y, k, test, sort,
	                        len=aSort.length,
	                        dataA = aoData[a]._aSortData,
	                        dataB = aoData[b]._aSortData;
	    
	                    for ( k=0 ; k<len ; k++ ) {
	                        sort = aSort[k];
	    
	                        x = dataA[ sort.col ];
	                        y = dataB[ sort.col ];
	    
	                        test = x<y ? -1 : x>y ? 1 : 0;
	                        if ( test !== 0 ) {
	                            return sort.dir === 'asc' ? test : -test;
	                        }
	                    }
	    
	                    x = aiOrig[a];
	                    y = aiOrig[b];
	                    return x<y ? -1 : x>y ? 1 : 0;
	                } );
	            }
	            else {
	                // Depreciated - remove in 1.11 (providing a plug-in option)
	                // Not all sort types have formatting methods, so we have to call their sorting
	                // methods.
	                displayMaster.sort( function ( a, b ) {
	                    var
	                        x, y, k, l, test, sort, fn,
	                        len=aSort.length,
	                        dataA = aoData[a]._aSortData,
	                        dataB = aoData[b]._aSortData;
	    
	                    for ( k=0 ; k<len ; k++ ) {
	                        sort = aSort[k];
	    
	                        x = dataA[ sort.col ];
	                        y = dataB[ sort.col ];
	    
	                        fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
	                        test = fn( x, y );
	                        if ( test !== 0 ) {
	                            return test;
	                        }
	                    }
	    
	                    x = aiOrig[a];
	                    y = aiOrig[b];
	                    return x<y ? -1 : x>y ? 1 : 0;
	                } );
	            }
	        }
	    
	        /* Tell the draw function that we have sorted the data */
	        oSettings.bSorted = true;
	    }
	    
	    
	    function _fnSortAria ( settings )
	    {
	        var label;
	        var nextSort;
	        var columns = settings.aoColumns;
	        var aSort = _fnSortFlatten( settings );
	        var oAria = settings.oLanguage.oAria;
	    
	        // ARIA attributes - need to loop all columns, to update all (removing old
	        // attributes as needed)
	        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
	        {
	            var col = columns[i];
	            var asSorting = col.asSorting;
	            var sTitle = col.sTitle.replace( /<.*?>/g, "" );
	            var th = col.nTh;
	    
	            // IE7 is throwing an error when setting these properties with jQuery's
	            // attr() and removeAttr() methods...
	            th.removeAttribute('aria-sort');
	    
	            /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
	            if ( col.bSortable ) {
	                if ( aSort.length > 0 && aSort[0].col == i ) {
	                    th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
	                    nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
	                }
	                else {
	                    nextSort = asSorting[0];
	                }
	    
	                label = sTitle + ( nextSort === "asc" ?
	                    oAria.sSortAscending :
	                    oAria.sSortDescending
	                );
	            }
	            else {
	                label = sTitle;
	            }
	    
	            th.setAttribute('aria-label', label);
	        }
	    }
	    
	    
	    /**
	     * Function to run on user sort request
	     *  @param {object} settings dataTables settings object
	     *  @param {node} attachTo node to attach the handler to
	     *  @param {int} colIdx column sorting index
	     *  @param {boolean} [append=false] Append the requested sort to the existing
	     *    sort if true (i.e. multi-column sort)
	     *  @param {function} [callback] callback function
	     *  @memberof DataTable#oApi
	     */
	    function _fnSortListener ( settings, colIdx, append, callback )
	    {
	        var col = settings.aoColumns[ colIdx ];
	        var sorting = settings.aaSorting;
	        var asSorting = col.asSorting;
	        var nextSortIdx;
	        var next = function ( a, overflow ) {
	            var idx = a._idx;
	            if ( idx === undefined ) {
	                idx = $.inArray( a[1], asSorting );
	            }
	    
	            return idx+1 < asSorting.length ?
	                idx+1 :
	                overflow ?
	                    null :
	                    0;
	        };
	    
	        // Convert to 2D array if needed
	        if ( typeof sorting[0] === 'number' ) {
	            sorting = settings.aaSorting = [ sorting ];
	        }
	    
	        // If appending the sort then we are multi-column sorting
	        if ( append && settings.oFeatures.bSortMulti ) {
	            // Are we already doing some kind of sort on this column?
	            var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
	    
	            if ( sortIdx !== -1 ) {
	                // Yes, modify the sort
	                nextSortIdx = next( sorting[sortIdx], true );
	    
	                if ( nextSortIdx === null && sorting.length === 1 ) {
	                    nextSortIdx = 0; // can't remove sorting completely
	                }
	    
	                if ( nextSortIdx === null ) {
	                    sorting.splice( sortIdx, 1 );
	                }
	                else {
	                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];
	                    sorting[sortIdx]._idx = nextSortIdx;
	                }
	            }
	            else {
	                // No sort on this column yet
	                sorting.push( [ colIdx, asSorting[0], 0 ] );
	                sorting[sorting.length-1]._idx = 0;
	            }
	        }
	        else if ( sorting.length && sorting[0][0] == colIdx ) {
	            // Single column - already sorting on this column, modify the sort
	            nextSortIdx = next( sorting[0] );
	    
	            sorting.length = 1;
	            sorting[0][1] = asSorting[ nextSortIdx ];
	            sorting[0]._idx = nextSortIdx;
	        }
	        else {
	            // Single column - sort only on this column
	            sorting.length = 0;
	            sorting.push( [ colIdx, asSorting[0] ] );
	            sorting[0]._idx = 0;
	        }
	    
	        // Run the sort by calling a full redraw
	        _fnReDraw( settings );
	    
	        // callback used for async user interaction
	        if ( typeof callback == 'function' ) {
	            callback( settings );
	        }
	    }
	    
	    
	    /**
	     * Attach a sort handler (click) to a node
	     *  @param {object} settings dataTables settings object
	     *  @param {node} attachTo node to attach the handler to
	     *  @param {int} colIdx column sorting index
	     *  @param {function} [callback] callback function
	     *  @memberof DataTable#oApi
	     */
	    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
	    {
	        var col = settings.aoColumns[ colIdx ];
	    
	        _fnBindAction( attachTo, {}, function (e) {
	            /* If the column is not sortable - don't to anything */
	            if ( col.bSortable === false ) {
	                return;
	            }
	    
	            // If processing is enabled use a timeout to allow the processing
	            // display to be shown - otherwise to it synchronously
	            if ( settings.oFeatures.bProcessing ) {
	                _fnProcessingDisplay( settings, true );
	    
	                setTimeout( function() {
	                    _fnSortListener( settings, colIdx, e.shiftKey, callback );
	    
	                    // In server-side processing, the draw callback will remove the
	                    // processing display
	                    if ( _fnDataSource( settings ) !== 'ssp' ) {
	                        _fnProcessingDisplay( settings, false );
	                    }
	                }, 0 );
	            }
	            else {
	                _fnSortListener( settings, colIdx, e.shiftKey, callback );
	            }
	        } );
	    }
	    
	    
	    /**
	     * Set the sorting classes on table's body, Note: it is safe to call this function
	     * when bSort and bSortClasses are false
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnSortingClasses( settings )
	    {
	        var oldSort = settings.aLastSort;
	        var sortClass = settings.oClasses.sSortColumn;
	        var sort = _fnSortFlatten( settings );
	        var features = settings.oFeatures;
	        var i, ien, colIdx;
	    
	        if ( features.bSort && features.bSortClasses ) {
	            // Remove old sorting classes
	            for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
	                colIdx = oldSort[i].src;
	    
	                // Remove column sorting
	                $( _pluck( settings.aoData, 'anCells', colIdx ) )
	                    .removeClass( sortClass + (i<2 ? i+1 : 3) );
	            }
	    
	            // Add new column sorting
	            for ( i=0, ien=sort.length ; i<ien ; i++ ) {
	                colIdx = sort[i].src;
	    
	                $( _pluck( settings.aoData, 'anCells', colIdx ) )
	                    .addClass( sortClass + (i<2 ? i+1 : 3) );
	            }
	        }
	    
	        settings.aLastSort = sort;
	    }
	    
	    
	    // Get the data to sort a column, be it from cache, fresh (populating the
	    // cache), or from a sort formatter
	    function _fnSortData( settings, idx )
	    {
	        // Custom sorting function - provided by the sort data type
	        var column = settings.aoColumns[ idx ];
	        var customSort = DataTable.ext.order[ column.sSortDataType ];
	        var customData;
	    
	        if ( customSort ) {
	            customData = customSort.call( settings.oInstance, settings, idx,
	                _fnColumnIndexToVisible( settings, idx )
	            );
	        }
	    
	        // Use / populate cache
	        var row, cellData;
	        var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
	    
	        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
	            row = settings.aoData[i];
	    
	            if ( ! row._aSortData ) {
	                row._aSortData = [];
	            }
	    
	            if ( ! row._aSortData[idx] || customSort ) {
	                cellData = customSort ?
	                    customData[i] : // If there was a custom sort function, use data from there
	                    _fnGetCellData( settings, i, idx, 'sort' );
	    
	                row._aSortData[ idx ] = formatter ?
	                    formatter( cellData ) :
	                    cellData;
	            }
	        }
	    }
	    
	    
	    
	    /**
	     * Save the state of a table
	     *  @param {object} oSettings dataTables settings object
	     *  @memberof DataTable#oApi
	     */
	    function _fnSaveState ( settings )
	    {
	        if ( !settings.oFeatures.bStateSave || settings.bDestroying )
	        {
	            return;
	        }
	    
	        /* Store the interesting variables */
	        var state = {
	            time:    +new Date(),
	            start:   settings._iDisplayStart,
	            length:  settings._iDisplayLength,
	            order:   $.extend( true, [], settings.aaSorting ),
	            search:  _fnSearchToCamel( settings.oPreviousSearch ),
	            columns: $.map( settings.aoColumns, function ( col, i ) {
	                return {
	                    visible: col.bVisible,
	                    search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
	                };
	            } )
	        };
	    
	        _fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
	    
	        settings.oSavedState = state;
	        settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	    }
	    
	    
	    /**
	     * Attempt to load a saved table state
	     *  @param {object} oSettings dataTables settings object
	     *  @param {object} oInit DataTables init object so we can override settings
	     *  @memberof DataTable#oApi
	     */
	    function _fnLoadState ( settings, oInit )
	    {
	        var i, ien;
	        var columns = settings.aoColumns;
	    
	        if ( ! settings.oFeatures.bStateSave ) {
	            return;
	        }
	    
	        var state = settings.fnStateLoadCallback.call( settings.oInstance, settings );
	        if ( ! state || ! state.time ) {
	            return;
	        }
	    
	        /* Allow custom and plug-in manipulation functions to alter the saved data set and
	         * cancelling of loading by returning false
	         */
	        var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );
	        if ( $.inArray( false, abStateLoad ) !== -1 ) {
	            return;
	        }
	    
	        /* Reject old data */
	        var duration = settings.iStateDuration;
	        if ( duration > 0 && state.time < +new Date() - (duration*1000) ) {
	            return;
	        }
	    
	        // Number of columns have changed - all bets are off, no restore of settings
	        if ( columns.length !== state.columns.length ) {
	            return;
	        }
	    
	        // Store the saved state so it might be accessed at any time
	        settings.oLoadedState = $.extend( true, {}, state );
	    
	        // Restore key features - todo - for 1.11 this needs to be done by
	        // subscribed events
	        if ( state.start !== undefined ) {
	            settings._iDisplayStart    = state.start;
	            settings.iInitDisplayStart = state.start;
	        }
	        if ( state.length !== undefined ) {
	            settings._iDisplayLength   = state.length;
	        }
	    
	        // Order
	        if ( state.order !== undefined ) {
	            settings.aaSorting = [];
	            $.each( state.order, function ( i, col ) {
	                settings.aaSorting.push( col[0] >= columns.length ?
	                    [ 0, col[1] ] :
	                    col
	                );
	            } );
	        }
	    
	        // Search
	        if ( state.search !== undefined ) {
	            $.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );
	        }
	    
	        // Columns
	        for ( i=0, ien=state.columns.length ; i<ien ; i++ ) {
	            var col = state.columns[i];
	    
	            // Visibility
	            if ( col.visible !== undefined ) {
	                columns[i].bVisible = col.visible;
	            }
	    
	            // Search
	            if ( col.search !== undefined ) {
	                $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
	            }
	        }
	    
	        _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );
	    }
	    
	    
	    /**
	     * Return the settings object for a particular table
	     *  @param {node} table table we are using as a dataTable
	     *  @returns {object} Settings object - or null if not found
	     *  @memberof DataTable#oApi
	     */
	    function _fnSettingsFromNode ( table )
	    {
	        var settings = DataTable.settings;
	        var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
	    
	        return idx !== -1 ?
	            settings[ idx ] :
	            null;
	    }
	    
	    
	    /**
	     * Log an error message
	     *  @param {object} settings dataTables settings object
	     *  @param {int} level log error messages, or display them to the user
	     *  @param {string} msg error message
	     *  @param {int} tn Technical note id to get more information about the error.
	     *  @memberof DataTable#oApi
	     */
	    function _fnLog( settings, level, msg, tn )
	    {
	        msg = 'DataTables warning: '+
	            (settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;
	    
	        if ( tn ) {
	            msg += '. For more information about this error, please see '+
	            'http://datatables.net/tn/'+tn;
	        }
	    
	        if ( ! level  ) {
	            // Backwards compatibility pre 1.10
	            var ext = DataTable.ext;
	            var type = ext.sErrMode || ext.errMode;
	    
	            _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
	    
	            if ( type == 'alert' ) {
	                alert( msg );
	            }
	            else if ( type == 'throw' ) {
	                throw new Error(msg);
	            }
	            else if ( typeof type == 'function' ) {
	                type( settings, tn, msg );
	            }
	        }
	        else if ( window.console && console.log ) {
	            console.log( msg );
	        }
	    }
	    
	    
	    /**
	     * See if a property is defined on one object, if so assign it to the other object
	     *  @param {object} ret target object
	     *  @param {object} src source object
	     *  @param {string} name property
	     *  @param {string} [mappedName] name to map too - optional, name used if not given
	     *  @memberof DataTable#oApi
	     */
	    function _fnMap( ret, src, name, mappedName )
	    {
	        if ( $.isArray( name ) ) {
	            $.each( name, function (i, val) {
	                if ( $.isArray( val ) ) {
	                    _fnMap( ret, src, val[0], val[1] );
	                }
	                else {
	                    _fnMap( ret, src, val );
	                }
	            } );
	    
	            return;
	        }
	    
	        if ( mappedName === undefined ) {
	            mappedName = name;
	        }
	    
	        if ( src[name] !== undefined ) {
	            ret[mappedName] = src[name];
	        }
	    }
	    
	    
	    /**
	     * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	     * shallow copy arrays. The reason we need to do this, is that we don't want to
	     * deep copy array init values (such as aaSorting) since the dev wouldn't be
	     * able to override them, but we do want to deep copy arrays.
	     *  @param {object} out Object to extend
	     *  @param {object} extender Object from which the properties will be applied to
	     *      out
	     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	     *      independent copy with the exception of the `data` or `aaData` parameters
	     *      if they are present. This is so you can pass in a collection to
	     *      DataTables and have that used as your data source without breaking the
	     *      references
	     *  @returns {object} out Reference, just for convenience - out === the return.
	     *  @memberof DataTable#oApi
	     *  @todo This doesn't take account of arrays inside the deep copied objects.
	     */
	    function _fnExtend( out, extender, breakRefs )
	    {
	        var val;
	    
	        for ( var prop in extender ) {
	            if ( extender.hasOwnProperty(prop) ) {
	                val = extender[prop];
	    
	                if ( $.isPlainObject( val ) ) {
	                    if ( ! $.isPlainObject( out[prop] ) ) {
	                        out[prop] = {};
	                    }
	                    $.extend( true, out[prop], val );
	                }
	                else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
	                    out[prop] = val.slice();
	                }
	                else {
	                    out[prop] = val;
	                }
	            }
	        }
	    
	        return out;
	    }
	    
	    
	    /**
	     * Bind an event handers to allow a click or return key to activate the callback.
	     * This is good for accessibility since a return on the keyboard will have the
	     * same effect as a click, if the element has focus.
	     *  @param {element} n Element to bind the action to
	     *  @param {object} oData Data object to pass to the triggered function
	     *  @param {function} fn Callback function for when the event is triggered
	     *  @memberof DataTable#oApi
	     */
	    function _fnBindAction( n, oData, fn )
	    {
	        $(n)
	            .bind( 'click.DT', oData, function (e) {
	                    n.blur(); // Remove focus outline for mouse users
	                    fn(e);
	                } )
	            .bind( 'keypress.DT', oData, function (e){
	                    if ( e.which === 13 ) {
	                        e.preventDefault();
	                        fn(e);
	                    }
	                } )
	            .bind( 'selectstart.DT', function () {
	                    /* Take the brutal approach to cancelling text selection */
	                    return false;
	                } );
	    }
	    
	    
	    /**
	     * Register a callback function. Easily allows a callback function to be added to
	     * an array store of callback functions that can then all be called together.
	     *  @param {object} oSettings dataTables settings object
	     *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	     *  @param {function} fn Function to be called back
	     *  @param {string} sName Identifying name for the callback (i.e. a label)
	     *  @memberof DataTable#oApi
	     */
	    function _fnCallbackReg( oSettings, sStore, fn, sName )
	    {
	        if ( fn )
	        {
	            oSettings[sStore].push( {
	                "fn": fn,
	                "sName": sName
	            } );
	        }
	    }
	    
	    
	    /**
	     * Fire callback functions and trigger events. Note that the loop over the
	     * callback array store is done backwards! Further note that you do not want to
	     * fire off triggers in time sensitive applications (for example cell creation)
	     * as its slow.
	     *  @param {object} settings dataTables settings object
	     *  @param {string} callbackArr Name of the array storage for the callbacks in
	     *      oSettings
	     *  @param {string} event Name of the jQuery custom event to trigger. If null no
	     *      trigger is fired
	     *  @param {array} args Array of arguments to pass to the callback function /
	     *      trigger
	     *  @memberof DataTable#oApi
	     */
	    function _fnCallbackFire( settings, callbackArr, e, args )
	    {
	        var ret = [];
	    
	        if ( callbackArr ) {
	            ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
	                return val.fn.apply( settings.oInstance, args );
	            } );
	        }
	    
	        if ( e !== null ) {
	            $(settings.nTable).trigger( e+'.dt', args );
	        }
	    
	        return ret;
	    }
	    
	    
	    function _fnLengthOverflow ( settings )
	    {
	        var
	            start = settings._iDisplayStart,
	            end = settings.fnDisplayEnd(),
	            len = settings._iDisplayLength;
	    
	        /* If we have space to show extra rows (backing up from the end point - then do so */
	        if ( start >= end )
	        {
	            start = end - len;
	        }
	    
	        // Keep the start record on the current page
	        start -= (start % len);
	    
	        if ( len === -1 || start < 0 )
	        {
	            start = 0;
	        }
	    
	        settings._iDisplayStart = start;
	    }
	    
	    
	    function _fnRenderer( settings, type )
	    {
	        var renderer = settings.renderer;
	        var host = DataTable.ext.renderer[type];
	    
	        if ( $.isPlainObject( renderer ) && renderer[type] ) {
	            // Specific renderer for this type. If available use it, otherwise use
	            // the default.
	            return host[renderer[type]] || host._;
	        }
	        else if ( typeof renderer === 'string' ) {
	            // Common renderer - if there is one available for this type use it,
	            // otherwise use the default
	            return host[renderer] || host._;
	        }
	    
	        // Use the default
	        return host._;
	    }
	    
	    
	    /**
	     * Detect the data source being used for the table. Used to simplify the code
	     * a little (ajax) and to make it compress a little smaller.
	     *
	     *  @param {object} settings dataTables settings object
	     *  @returns {string} Data source
	     *  @memberof DataTable#oApi
	     */
	    function _fnDataSource ( settings )
	    {
	        if ( settings.oFeatures.bServerSide ) {
	            return 'ssp';
	        }
	        else if ( settings.ajax || settings.sAjaxSource ) {
	            return 'ajax';
	        }
	        return 'dom';
	    }
	    

	    DataTable = function( options )
	    {
	        /**
	         * Perform a jQuery selector action on the table's TR elements (from the tbody) and
	         * return the resulting jQuery object.
	         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	         *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
	         *    criterion ("applied") or all TR elements (i.e. no filter).
	         *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
	         *    Can be either 'current', whereby the current sorting of the table is used, or
	         *    'original' whereby the original order the data was read into the table is used.
	         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	         *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	         *    'current' and filter is 'applied', regardless of what they might be given as.
	         *  @returns {object} jQuery object, filtered by the given selector.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Highlight every second row
	         *      oTable.$('tr:odd').css('backgroundColor', 'blue');
	         *    } );
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Filter to rows with 'Webkit' in them, add a background colour and then
	         *      // remove the filter, thus highlighting the 'Webkit' rows only.
	         *      oTable.fnFilter('Webkit');
	         *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
	         *      oTable.fnFilter('');
	         *    } );
	         */
	        this.$ = function ( sSelector, oOpts )
	        {
	            return this.api(true).$( sSelector, oOpts );
	        };
	        
	        
	        /**
	         * Almost identical to $ in operation, but in this case returns the data for the matched
	         * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
	         * rather than any descendants, so the data can be obtained for the row/cell. If matching
	         * rows are found, the data returned is the original data array/object that was used to
	         * create the row (or a generated array if from a DOM source).
	         *
	         * This method is often useful in-combination with $ where both functions are given the
	         * same parameters and the array indexes will match identically.
	         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	         *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
	         *    criterion ("applied") or all elements (i.e. no filter).
	         *  @param {string} [oOpts.order=current] Order of the data in the processed array.
	         *    Can be either 'current', whereby the current sorting of the table is used, or
	         *    'original' whereby the original order the data was read into the table is used.
	         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	         *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	         *    'current' and filter is 'applied', regardless of what they might be given as.
	         *  @returns {array} Data for the matched elements. If any elements, as a result of the
	         *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
	         *    entry in the array.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Get the data from the first row in the table
	         *      var data = oTable._('tr:first');
	         *
	         *      // Do something useful with the data
	         *      alert( "First cell is: "+data[0] );
	         *    } );
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Filter to 'Webkit' and get all data for
	         *      oTable.fnFilter('Webkit');
	         *      var data = oTable._('tr', {"search": "applied"});
	         *
	         *      // Do something with the data
	         *      alert( data.length+" rows matched the search" );
	         *    } );
	         */
	        this._ = function ( sSelector, oOpts )
	        {
	            return this.api(true).rows( sSelector, oOpts ).data();
	        };
	        
	        
	        /**
	         * Create a DataTables Api instance, with the currently selected tables for
	         * the Api's context.
	         * @param {boolean} [traditional=false] Set the API instance's context to be
	         *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
	         *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
	         *   or if all tables captured in the jQuery object should be used.
	         * @return {DataTables.Api}
	         */
	        this.api = function ( traditional )
	        {
	            return traditional ?
	                new _Api(
	                    _fnSettingsFromNode( this[ _ext.iApiIndex ] )
	                ) :
	                new _Api( this );
	        };
	        
	        
	        /**
	         * Add a single new row or multiple rows of data to the table. Please note
	         * that this is suitable for client-side processing only - if you are using
	         * server-side processing (i.e. "bServerSide": true), then to add data, you
	         * must add it to the data source, i.e. the server-side, through an Ajax call.
	         *  @param {array|object} data The data to be added to the table. This can be:
	         *    <ul>
	         *      <li>1D array of data - add a single row with the data provided</li>
	         *      <li>2D array of arrays - add multiple rows in a single call</li>
	         *      <li>object - data object when using <i>mData</i></li>
	         *      <li>array of objects - multiple data objects when using <i>mData</i></li>
	         *    </ul>
	         *  @param {bool} [redraw=true] redraw the table or not
	         *  @returns {array} An array of integers, representing the list of indexes in
	         *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
	         *    the table.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    // Global var for counter
	         *    var giCount = 2;
	         *
	         *    $(document).ready(function() {
	         *      $('#example').dataTable();
	         *    } );
	         *
	         *    function fnClickAddRow() {
	         *      $('#example').dataTable().fnAddData( [
	         *        giCount+".1",
	         *        giCount+".2",
	         *        giCount+".3",
	         *        giCount+".4" ]
	         *      );
	         *
	         *      giCount++;
	         *    }
	         */
	        this.fnAddData = function( data, redraw )
	        {
	            var api = this.api( true );
	        
	            /* Check if we want to add multiple rows or not */
	            var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
	                api.rows.add( data ) :
	                api.row.add( data );
	        
	            if ( redraw === undefined || redraw ) {
	                api.draw();
	            }
	        
	            return rows.flatten().toArray();
	        };
	        
	        
	        /**
	         * This function will make DataTables recalculate the column sizes, based on the data
	         * contained in the table and the sizes applied to the columns (in the DOM, CSS or
	         * through the sWidth parameter). This can be useful when the width of the table's
	         * parent element changes (for example a window resize).
	         *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable( {
	         *        "sScrollY": "200px",
	         *        "bPaginate": false
	         *      } );
	         *
	         *      $(window).bind('resize', function () {
	         *        oTable.fnAdjustColumnSizing();
	         *      } );
	         *    } );
	         */
	        this.fnAdjustColumnSizing = function ( bRedraw )
	        {
	            var api = this.api( true ).columns.adjust();
	            var settings = api.settings()[0];
	            var scroll = settings.oScroll;
	        
	            if ( bRedraw === undefined || bRedraw ) {
	                api.draw( false );
	            }
	            else if ( scroll.sX !== "" || scroll.sY !== "" ) {
	                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
	                _fnScrollDraw( settings );
	            }
	        };
	        
	        
	        /**
	         * Quickly and simply clear a table
	         *  @param {bool} [bRedraw=true] redraw the table or not
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
	         *      oTable.fnClearTable();
	         *    } );
	         */
	        this.fnClearTable = function( bRedraw )
	        {
	            var api = this.api( true ).clear();
	        
	            if ( bRedraw === undefined || bRedraw ) {
	                api.draw();
	            }
	        };
	        
	        
	        /**
	         * The exact opposite of 'opening' a row, this function will close any rows which
	         * are currently 'open'.
	         *  @param {node} nTr the table row to 'close'
	         *  @returns {int} 0 on success, or 1 if failed (can't find the row)
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable;
	         *
	         *      // 'open' an information row when a row is clicked on
	         *      $('#example tbody tr').click( function () {
	         *        if ( oTable.fnIsOpen(this) ) {
	         *          oTable.fnClose( this );
	         *        } else {
	         *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	         *        }
	         *      } );
	         *
	         *      oTable = $('#example').dataTable();
	         *    } );
	         */
	        this.fnClose = function( nTr )
	        {
	            this.api( true ).row( nTr ).child.hide();
	        };
	        
	        
	        /**
	         * Remove a row for the table
	         *  @param {mixed} target The index of the row from aoData to be deleted, or
	         *    the TR element you want to delete
	         *  @param {function|null} [callBack] Callback function
	         *  @param {bool} [redraw=true] Redraw the table or not
	         *  @returns {array} The row that was deleted
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Immediately remove the first row
	         *      oTable.fnDeleteRow( 0 );
	         *    } );
	         */
	        this.fnDeleteRow = function( target, callback, redraw )
	        {
	            var api = this.api( true );
	            var rows = api.rows( target );
	            var settings = rows.settings()[0];
	            var data = settings.aoData[ rows[0][0] ];
	        
	            rows.remove();
	        
	            if ( callback ) {
	                callback.call( this, settings, data );
	            }
	        
	            if ( redraw === undefined || redraw ) {
	                api.draw();
	            }
	        
	            return data;
	        };
	        
	        
	        /**
	         * Restore the table to it's original state in the DOM by removing all of DataTables
	         * enhancements, alterations to the DOM structure of the table and event listeners.
	         *  @param {boolean} [remove=false] Completely remove the table from the DOM
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
	         *      var oTable = $('#example').dataTable();
	         *      oTable.fnDestroy();
	         *    } );
	         */
	        this.fnDestroy = function ( remove )
	        {
	            this.api( true ).destroy( remove );
	        };
	        
	        
	        /**
	         * Redraw the table
	         *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
	         *      oTable.fnDraw();
	         *    } );
	         */
	        this.fnDraw = function( complete )
	        {
	            // Note that this isn't an exact match to the old call to _fnDraw - it takes
	            // into account the new data, but can hold position.
	            this.api( true ).draw( complete );
	        };
	        
	        
	        /**
	         * Filter the input based on data
	         *  @param {string} sInput String to filter the table on
	         *  @param {int|null} [iColumn] Column to limit filtering to
	         *  @param {bool} [bRegex=false] Treat as regular expression or not
	         *  @param {bool} [bSmart=true] Perform smart filtering or not
	         *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
	         *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Sometime later - filter...
	         *      oTable.fnFilter( 'test string' );
	         *    } );
	         */
	        this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
	        {
	            var api = this.api( true );
	        
	            if ( iColumn === null || iColumn === undefined ) {
	                api.search( sInput, bRegex, bSmart, bCaseInsensitive );
	            }
	            else {
	                api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
	            }
	        
	            api.draw();
	        };
	        
	        
	        /**
	         * Get the data for the whole table, an individual row or an individual cell based on the
	         * provided parameters.
	         *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
	         *    a TR node then the data source for the whole row will be returned. If given as a
	         *    TD/TH cell node then iCol will be automatically calculated and the data for the
	         *    cell returned. If given as an integer, then this is treated as the aoData internal
	         *    data index for the row (see fnGetPosition) and the data for that row used.
	         *  @param {int} [col] Optional column index that you want the data of.
	         *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
	         *    returned. If mRow is defined, just data for that row, and is iCol is
	         *    defined, only data for the designated cell is returned.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    // Row data
	         *    $(document).ready(function() {
	         *      oTable = $('#example').dataTable();
	         *
	         *      oTable.$('tr').click( function () {
	         *        var data = oTable.fnGetData( this );
	         *        // ... do something with the array / object of data for the row
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Individual cell data
	         *    $(document).ready(function() {
	         *      oTable = $('#example').dataTable();
	         *
	         *      oTable.$('td').click( function () {
	         *        var sData = oTable.fnGetData( this );
	         *        alert( 'The cell clicked on had the value of '+sData );
	         *      } );
	         *    } );
	         */
	        this.fnGetData = function( src, col )
	        {
	            var api = this.api( true );
	        
	            if ( src !== undefined ) {
	                var type = src.nodeName ? src.nodeName.toLowerCase() : '';
	        
	                return col !== undefined || type == 'td' || type == 'th' ?
	                    api.cell( src, col ).data() :
	                    api.row( src ).data() || null;
	            }
	        
	            return api.data().toArray();
	        };
	        
	        
	        /**
	         * Get an array of the TR nodes that are used in the table's body. Note that you will
	         * typically want to use the '$' API method in preference to this as it is more
	         * flexible.
	         *  @param {int} [iRow] Optional row index for the TR element you want
	         *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
	         *    in the table's body, or iRow is defined, just the TR element requested.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Get the nodes from the table
	         *      var nNodes = oTable.fnGetNodes( );
	         *    } );
	         */
	        this.fnGetNodes = function( iRow )
	        {
	            var api = this.api( true );
	        
	            return iRow !== undefined ?
	                api.row( iRow ).node() :
	                api.rows().nodes().flatten().toArray();
	        };
	        
	        
	        /**
	         * Get the array indexes of a particular cell from it's DOM element
	         * and column index including hidden columns
	         *  @param {node} node this can either be a TR, TD or TH in the table's body
	         *  @returns {int} If nNode is given as a TR, then a single index is returned, or
	         *    if given as a cell, an array of [row index, column index (visible),
	         *    column index (all)] is given.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      $('#example tbody td').click( function () {
	         *        // Get the position of the current data from the node
	         *        var aPos = oTable.fnGetPosition( this );
	         *
	         *        // Get the data array for this row
	         *        var aData = oTable.fnGetData( aPos[0] );
	         *
	         *        // Update the data array and return the value
	         *        aData[ aPos[1] ] = 'clicked';
	         *        this.innerHTML = 'clicked';
	         *      } );
	         *
	         *      // Init DataTables
	         *      oTable = $('#example').dataTable();
	         *    } );
	         */
	        this.fnGetPosition = function( node )
	        {
	            var api = this.api( true );
	            var nodeName = node.nodeName.toUpperCase();
	        
	            if ( nodeName == 'TR' ) {
	                return api.row( node ).index();
	            }
	            else if ( nodeName == 'TD' || nodeName == 'TH' ) {
	                var cell = api.cell( node ).index();
	        
	                return [
	                    cell.row,
	                    cell.columnVisible,
	                    cell.column
	                ];
	            }
	            return null;
	        };
	        
	        
	        /**
	         * Check to see if a row is 'open' or not.
	         *  @param {node} nTr the table row to check
	         *  @returns {boolean} true if the row is currently open, false otherwise
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable;
	         *
	         *      // 'open' an information row when a row is clicked on
	         *      $('#example tbody tr').click( function () {
	         *        if ( oTable.fnIsOpen(this) ) {
	         *          oTable.fnClose( this );
	         *        } else {
	         *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	         *        }
	         *      } );
	         *
	         *      oTable = $('#example').dataTable();
	         *    } );
	         */
	        this.fnIsOpen = function( nTr )
	        {
	            return this.api( true ).row( nTr ).child.isShown();
	        };
	        
	        
	        /**
	         * This function will place a new row directly after a row which is currently
	         * on display on the page, with the HTML contents that is passed into the
	         * function. This can be used, for example, to ask for confirmation that a
	         * particular record should be deleted.
	         *  @param {node} nTr The table row to 'open'
	         *  @param {string|node|jQuery} mHtml The HTML to put into the row
	         *  @param {string} sClass Class to give the new TD cell
	         *  @returns {node} The row opened. Note that if the table row passed in as the
	         *    first parameter, is not found in the table, this method will silently
	         *    return.
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable;
	         *
	         *      // 'open' an information row when a row is clicked on
	         *      $('#example tbody tr').click( function () {
	         *        if ( oTable.fnIsOpen(this) ) {
	         *          oTable.fnClose( this );
	         *        } else {
	         *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	         *        }
	         *      } );
	         *
	         *      oTable = $('#example').dataTable();
	         *    } );
	         */
	        this.fnOpen = function( nTr, mHtml, sClass )
	        {
	            return this.api( true )
	                .row( nTr )
	                .child( mHtml, sClass )
	                .show()
	                .child()[0];
	        };
	        
	        
	        /**
	         * Change the pagination - provides the internal logic for pagination in a simple API
	         * function. With this function you can have a DataTables table go to the next,
	         * previous, first or last pages.
	         *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
	         *    or page number to jump to (integer), note that page 0 is the first page.
	         *  @param {bool} [bRedraw=true] Redraw the table or not
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *      oTable.fnPageChange( 'next' );
	         *    } );
	         */
	        this.fnPageChange = function ( mAction, bRedraw )
	        {
	            var api = this.api( true ).page( mAction );
	        
	            if ( bRedraw === undefined || bRedraw ) {
	                api.draw(false);
	            }
	        };
	        
	        
	        /**
	         * Show a particular column
	         *  @param {int} iCol The column whose display should be changed
	         *  @param {bool} bShow Show (true) or hide (false) the column
	         *  @param {bool} [bRedraw=true] Redraw the table or not
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Hide the second column after initialisation
	         *      oTable.fnSetColumnVis( 1, false );
	         *    } );
	         */
	        this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
	        {
	            var api = this.api( true ).column( iCol ).visible( bShow );
	        
	            if ( bRedraw === undefined || bRedraw ) {
	                api.columns.adjust().draw();
	            }
	        };
	        
	        
	        /**
	         * Get the settings for a particular table for external manipulation
	         *  @returns {object} DataTables settings object. See
	         *    {@link DataTable.models.oSettings}
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *      var oSettings = oTable.fnSettings();
	         *
	         *      // Show an example parameter from the settings
	         *      alert( oSettings._iDisplayStart );
	         *    } );
	         */
	        this.fnSettings = function()
	        {
	            return _fnSettingsFromNode( this[_ext.iApiIndex] );
	        };
	        
	        
	        /**
	         * Sort the table by a particular column
	         *  @param {int} iCol the data index to sort on. Note that this will not match the
	         *    'display index' if you have hidden data entries
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Sort immediately with columns 0 and 1
	         *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
	         *    } );
	         */
	        this.fnSort = function( aaSort )
	        {
	            this.api( true ).order( aaSort ).draw();
	        };
	        
	        
	        /**
	         * Attach a sort listener to an element for a given column
	         *  @param {node} nNode the element to attach the sort listener to
	         *  @param {int} iColumn the column that a click on this node will sort on
	         *  @param {function} [fnCallback] callback function when sort is run
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *
	         *      // Sort on column 1, when 'sorter' is clicked on
	         *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
	         *    } );
	         */
	        this.fnSortListener = function( nNode, iColumn, fnCallback )
	        {
	            this.api( true ).order.listener( nNode, iColumn, fnCallback );
	        };
	        
	        
	        /**
	         * Update a table cell or row - this method will accept either a single value to
	         * update the cell with, an array of values with one element for each column or
	         * an object in the same format as the original data source. The function is
	         * self-referencing in order to make the multi column updates easier.
	         *  @param {object|array|string} mData Data to update the cell/row with
	         *  @param {node|int} mRow TR element you want to update or the aoData index
	         *  @param {int} [iColumn] The column to update, give as null or undefined to
	         *    update a whole row.
	         *  @param {bool} [bRedraw=true] Redraw the table or not
	         *  @param {bool} [bAction=true] Perform pre-draw actions or not
	         *  @returns {int} 0 on success, 1 on error
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
	         *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
	         *    } );
	         */
	        this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
	        {
	            var api = this.api( true );
	        
	            if ( iColumn === undefined || iColumn === null ) {
	                api.row( mRow ).data( mData );
	            }
	            else {
	                api.cell( mRow, iColumn ).data( mData );
	            }
	        
	            if ( bAction === undefined || bAction ) {
	                api.columns.adjust();
	            }
	        
	            if ( bRedraw === undefined || bRedraw ) {
	                api.draw();
	            }
	            return 0;
	        };
	        
	        
	        /**
	         * Provide a common method for plug-ins to check the version of DataTables being used, in order
	         * to ensure compatibility.
	         *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
	         *    formats "X" and "X.Y" are also acceptable.
	         *  @returns {boolean} true if this version of DataTables is greater or equal to the required
	         *    version, or false if this version of DataTales is not suitable
	         *  @method
	         *  @dtopt API
	         *  @deprecated Since v1.10
	         *
	         *  @example
	         *    $(document).ready(function() {
	         *      var oTable = $('#example').dataTable();
	         *      alert( oTable.fnVersionCheck( '1.9.0' ) );
	         *    } );
	         */
	        this.fnVersionCheck = _ext.fnVersionCheck;
	        

	        var _that = this;
	        var emptyInit = options === undefined;
	        var len = this.length;

	        if ( emptyInit ) {
	            options = {};
	        }

	        this.oApi = this.internal = _ext.internal;

	        // Extend with old style plug-in API methods
	        for ( var fn in DataTable.ext.internal ) {
	            if ( fn ) {
	                this[fn] = _fnExternApiFunc(fn);
	            }
	        }

	        this.each(function() {
	            // For each initialisation we want to give it a clean initialisation
	            // object that can be bashed around
	            var o = {};
	            var oInit = len > 1 ? // optimisation for single table case
	                _fnExtend( o, options, true ) :
	                options;

	            /*global oInit,_that,emptyInit*/
	            var i=0, iLen, j, jLen, k, kLen;
	            var sId = this.getAttribute( 'id' );
	            var bInitHandedOff = false;
	            var defaults = DataTable.defaults;
	            var $this = $(this);
	            
	            
	            /* Sanity check */
	            if ( this.nodeName.toLowerCase() != 'table' )
	            {
	                _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
	                return;
	            }
	            
	            /* Backwards compatibility for the defaults */
	            _fnCompatOpts( defaults );
	            _fnCompatCols( defaults.column );
	            
	            /* Convert the camel-case defaults to Hungarian */
	            _fnCamelToHungarian( defaults, defaults, true );
	            _fnCamelToHungarian( defaults.column, defaults.column, true );
	            
	            /* Setting up the initialisation object */
	            _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );
	            
	            
	            
	            /* Check to see if we are re-initialising a table */
	            var allSettings = DataTable.settings;
	            for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
	            {
	                var s = allSettings[i];
	            
	                /* Base check on table node */
	                if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )
	                {
	                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
	                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
	            
	                    if ( emptyInit || bRetrieve )
	                    {
	                        return s.oInstance;
	                    }
	                    else if ( bDestroy )
	                    {
	                        s.oInstance.fnDestroy();
	                        break;
	                    }
	                    else
	                    {
	                        _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
	                        return;
	                    }
	                }
	            
	                /* If the element we are initialising has the same ID as a table which was previously
	                 * initialised, but the table nodes don't match (from before) then we destroy the old
	                 * instance by simply deleting it. This is under the assumption that the table has been
	                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
	                 */
	                if ( s.sTableId == this.id )
	                {
	                    allSettings.splice( i, 1 );
	                    break;
	                }
	            }
	            
	            /* Ensure the table has an ID - required for accessibility */
	            if ( sId === null || sId === "" )
	            {
	                sId = "DataTables_Table_"+(DataTable.ext._unique++);
	                this.id = sId;
	            }
	            
	            /* Create the settings object for this table and set some of the default parameters */
	            var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
	                "sDestroyWidth": $this[0].style.width,
	                "sInstance":     sId,
	                "sTableId":      sId
	            } );
	            oSettings.nTable = this;
	            oSettings.oApi   = _that.internal;
	            oSettings.oInit  = oInit;
	            
	            allSettings.push( oSettings );
	            
	            // Need to add the instance after the instance after the settings object has been added
	            // to the settings array, so we can self reference the table instance if more than one
	            oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
	            
	            // Backwards compatibility, before we apply all the defaults
	            _fnCompatOpts( oInit );
	            
	            if ( oInit.oLanguage )
	            {
	                _fnLanguageCompat( oInit.oLanguage );
	            }
	            
	            // If the length menu is given, but the init display length is not, use the length menu
	            if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
	            {
	                oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
	                    oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
	            }
	            
	            // Apply the defaults and init options to make a single init object will all
	            // options defined from defaults and instance options.
	            oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
	            
	            
	            // Map the initialisation options onto the settings object
	            _fnMap( oSettings.oFeatures, oInit, [
	                "bPaginate",
	                "bLengthChange",
	                "bFilter",
	                "bSort",
	                "bSortMulti",
	                "bInfo",
	                "bProcessing",
	                "bAutoWidth",
	                "bSortClasses",
	                "bServerSide",
	                "bDeferRender"
	            ] );
	            _fnMap( oSettings, oInit, [
	                "asStripeClasses",
	                "ajax",
	                "fnServerData",
	                "fnFormatNumber",
	                "sServerMethod",
	                "aaSorting",
	                "aaSortingFixed",
	                "aLengthMenu",
	                "sPaginationType",
	                "sAjaxSource",
	                "sAjaxDataProp",
	                "iStateDuration",
	                "sDom",
	                "bSortCellsTop",
	                "iTabIndex",
	                "fnStateLoadCallback",
	                "fnStateSaveCallback",
	                "renderer",
	                "searchDelay",
	                [ "iCookieDuration", "iStateDuration" ], // backwards compat
	                [ "oSearch", "oPreviousSearch" ],
	                [ "aoSearchCols", "aoPreSearchCols" ],
	                [ "iDisplayLength", "_iDisplayLength" ],
	                [ "bJQueryUI", "bJUI" ]
	            ] );
	            _fnMap( oSettings.oScroll, oInit, [
	                [ "sScrollX", "sX" ],
	                [ "sScrollXInner", "sXInner" ],
	                [ "sScrollY", "sY" ],
	                [ "bScrollCollapse", "bCollapse" ]
	            ] );
	            _fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
	            
	            /* Callback functions which are array driven */
	            _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
	            _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
	            _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
	            _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
	            _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
	            _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
	            _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
	            _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
	            _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
	            _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
	            _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
	            
	            var oClasses = oSettings.oClasses;
	            
	            // @todo Remove in 1.11
	            if ( oInit.bJQueryUI )
	            {
	                /* Use the JUI classes object for display. You could clone the oStdClasses object if
	                 * you want to have multiple tables with multiple independent classes
	                 */
	                $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );
	            
	                if ( oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip" )
	                {
	                    /* Set the DOM to use a layout suitable for jQuery UI's theming */
	                    oSettings.sDom = '<"H"lfr>t<"F"ip>';
	                }
	            
	                if ( ! oSettings.renderer ) {
	                    oSettings.renderer = 'jqueryui';
	                }
	                else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {
	                    oSettings.renderer.header = 'jqueryui';
	                }
	            }
	            else
	            {
	                $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
	            }
	            $this.addClass( oClasses.sTable );
	            
	            /* Calculate the scroll bar width and cache it for use later on */
	            if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )
	            {
	                oSettings.oScroll.iBarWidth = _fnScrollBarWidth();
	            }
	            if ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling
	                oSettings.oScroll.sX = '100%';
	            }
	            
	            if ( oSettings.iInitDisplayStart === undefined )
	            {
	                /* Display start point, taking into account the save saving */
	                oSettings.iInitDisplayStart = oInit.iDisplayStart;
	                oSettings._iDisplayStart = oInit.iDisplayStart;
	            }
	            
	            if ( oInit.iDeferLoading !== null )
	            {
	                oSettings.bDeferLoading = true;
	                var tmp = $.isArray( oInit.iDeferLoading );
	                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
	                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
	            }
	            
	            /* Language definitions */
	            var oLanguage = oSettings.oLanguage;
	            $.extend( true, oLanguage, oInit.oLanguage );
	            
	            if ( oLanguage.sUrl !== "" )
	            {
	                /* Get the language definitions from a file - because this Ajax call makes the language
	                 * get async to the remainder of this function we use bInitHandedOff to indicate that
	                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
	                 */
	                $.ajax( {
	                    dataType: 'json',
	                    url: oLanguage.sUrl,
	                    success: function ( json ) {
	                        _fnLanguageCompat( json );
	                        _fnCamelToHungarian( defaults.oLanguage, json );
	                        $.extend( true, oLanguage, json );
	                        _fnInitialise( oSettings );
	                    },
	                    error: function () {
	                        // Error occurred loading language file, continue on as best we can
	                        _fnInitialise( oSettings );
	                    }
	                } );
	                bInitHandedOff = true;
	            }
	            
	            /*
	             * Stripes
	             */
	            if ( oInit.asStripeClasses === null )
	            {
	                oSettings.asStripeClasses =[
	                    oClasses.sStripeOdd,
	                    oClasses.sStripeEven
	                ];
	            }
	            
	            /* Remove row stripe classes if they are already on the table row */
	            var stripeClasses = oSettings.asStripeClasses;
	            var rowOne = $this.children('tbody').find('tr').eq(0);
	            if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
	                return rowOne.hasClass(el);
	            } ) ) !== -1 ) {
	                $('tbody tr', this).removeClass( stripeClasses.join(' ') );
	                oSettings.asDestroyStripes = stripeClasses.slice();
	            }
	            
	            /*
	             * Columns
	             * See if we should load columns automatically or use defined ones
	             */
	            var anThs = [];
	            var aoColumnsInit;
	            var nThead = this.getElementsByTagName('thead');
	            if ( nThead.length !== 0 )
	            {
	                _fnDetectHeader( oSettings.aoHeader, nThead[0] );
	                anThs = _fnGetUniqueThs( oSettings );
	            }
	            
	            /* If not given a column array, generate one with nulls */
	            if ( oInit.aoColumns === null )
	            {
	                aoColumnsInit = [];
	                for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
	                {
	                    aoColumnsInit.push( null );
	                }
	            }
	            else
	            {
	                aoColumnsInit = oInit.aoColumns;
	            }
	            
	            /* Add the columns */
	            for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
	            {
	                _fnAddColumn( oSettings, anThs ? anThs[i] : null );
	            }
	            
	            /* Apply the column definitions */
	            _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
	                _fnColumnOptions( oSettings, iCol, oDef );
	            } );
	            
	            /* HTML5 attribute detection - build an mData object automatically if the
	             * attributes are found
	             */
	            if ( rowOne.length ) {
	                var a = function ( cell, name ) {
	                    return cell.getAttribute( 'data-'+name ) !== null ? name : null;
	                };
	            
	                $.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {
	                    var col = oSettings.aoColumns[i];
	            
	                    if ( col.mData === i ) {
	                        var sort = a( cell, 'sort' ) || a( cell, 'order' );
	                        var filter = a( cell, 'filter' ) || a( cell, 'search' );
	            
	                        if ( sort !== null || filter !== null ) {
	                            col.mData = {
	                                _:      i+'.display',
	                                sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
	                                type:   sort !== null   ? i+'.@data-'+sort   : undefined,
	                                filter: filter !== null ? i+'.@data-'+filter : undefined
	                            };
	            
	                            _fnColumnOptions( oSettings, i );
	                        }
	                    }
	                } );
	            }
	            
	            var features = oSettings.oFeatures;
	            
	            /* Must be done after everything which can be overridden by the state saving! */
	            if ( oInit.bStateSave )
	            {
	                features.bStateSave = true;
	                _fnLoadState( oSettings, oInit );
	                _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
	            }
	            
	            
	            /*
	             * Sorting
	             * @todo For modularisation (1.11) this needs to do into a sort start up handler
	             */
	            
	            // If aaSorting is not defined, then we use the first indicator in asSorting
	            // in case that has been altered, so the default sort reflects that option
	            if ( oInit.aaSorting === undefined )
	            {
	                var sorting = oSettings.aaSorting;
	                for ( i=0, iLen=sorting.length ; i<iLen ; i++ )
	                {
	                    sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
	                }
	            }
	            
	            /* Do a first pass on the sorting classes (allows any size changes to be taken into
	             * account, and also will apply sorting disabled classes if disabled
	             */
	            _fnSortingClasses( oSettings );
	            
	            if ( features.bSort )
	            {
	                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {
	                    if ( oSettings.bSorted ) {
	                        var aSort = _fnSortFlatten( oSettings );
	                        var sortedColumns = {};
	            
	                        $.each( aSort, function (i, val) {
	                            sortedColumns[ val.src ] = val.dir;
	                        } );
	            
	                        _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
	                        _fnSortAria( oSettings );
	                    }
	                } );
	            }
	            
	            _fnCallbackReg( oSettings, 'aoDrawCallback', function () {
	                if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
	                    _fnSortingClasses( oSettings );
	                }
	            }, 'sc' );
	            
	            
	            /*
	             * Final init
	             * Cache the header, body and footer as required, creating them if needed
	             */
	            
	            /* Browser support detection */
	            _fnBrowserDetect( oSettings );
	            
	            // Work around for Webkit bug 83867 - store the caption-side before removing from doc
	            var captions = $this.children('caption').each( function () {
	                this._captionSide = $this.css('caption-side');
	            } );
	            
	            var thead = $this.children('thead');
	            if ( thead.length === 0 )
	            {
	                thead = $('<thead/>').appendTo(this);
	            }
	            oSettings.nTHead = thead[0];
	            
	            var tbody = $this.children('tbody');
	            if ( tbody.length === 0 )
	            {
	                tbody = $('<tbody/>').appendTo(this);
	            }
	            oSettings.nTBody = tbody[0];
	            
	            var tfoot = $this.children('tfoot');
	            if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") )
	            {
	                // If we are a scrolling table, and no footer has been given, then we need to create
	                // a tfoot element for the caption element to be appended to
	                tfoot = $('<tfoot/>').appendTo(this);
	            }
	            
	            if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
	                $this.addClass( oClasses.sNoFooter );
	            }
	            else if ( tfoot.length > 0 ) {
	                oSettings.nTFoot = tfoot[0];
	                _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
	            }
	            
	            /* Check if there is data passing into the constructor */
	            if ( oInit.aaData )
	            {
	                for ( i=0 ; i<oInit.aaData.length ; i++ )
	                {
	                    _fnAddData( oSettings, oInit.aaData[ i ] );
	                }
	            }
	            else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )
	            {
	                /* Grab the data from the page - only do this when deferred loading or no Ajax
	                 * source since there is no point in reading the DOM data if we are then going
	                 * to replace it with Ajax data
	                 */
	                _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
	            }
	            
	            /* Copy the data index array */
	            oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
	            
	            /* Initialisation complete - table can be drawn */
	            oSettings.bInitialised = true;
	            
	            /* Check if we need to initialise the table (it might not have been handed off to the
	             * language processor)
	             */
	            if ( bInitHandedOff === false )
	            {
	                _fnInitialise( oSettings );
	            }
	        } );
	        _that = null;
	        return this;
	    };

	    
	    
	    /**
	     * Computed structure of the DataTables API, defined by the options passed to
	     * `DataTable.Api.register()` when building the API.
	     *
	     * The structure is built in order to speed creation and extension of the Api
	     * objects since the extensions are effectively pre-parsed.
	     *
	     * The array is an array of objects with the following structure, where this
	     * base array represents the Api prototype base:
	     *
	     *     [
	     *       {
	     *         name:      'data'                -- string   - Property name
	     *         val:       function () {},       -- function - Api method (or undefined if just an object
	     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	     *       },
	     *       {
	     *         name:     'row'
	     *         val:       {},
	     *         methodExt: [ ... ],
	     *         propExt:   [
	     *           {
	     *             name:      'data'
	     *             val:       function () {},
	     *             methodExt: [ ... ],
	     *             propExt:   [ ... ]
	     *           },
	     *           ...
	     *         ]
	     *       }
	     *     ]
	     *
	     * @type {Array}
	     * @ignore
	     */
	    var __apiStruct = [];
	    
	    
	    /**
	     * `Array.prototype` reference.
	     *
	     * @type object
	     * @ignore
	     */
	    var __arrayProto = Array.prototype;
	    
	    
	    /**
	     * Abstraction for `context` parameter of the `Api` constructor to allow it to
	     * take several different forms for ease of use.
	     *
	     * Each of the input parameter types will be converted to a DataTables settings
	     * object where possible.
	     *
	     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	     *   of:
	     *
	     *   * `string` - jQuery selector. Any DataTables' matching the given selector
	     *     with be found and used.
	     *   * `node` - `TABLE` node which has already been formed into a DataTable.
	     *   * `jQuery` - A jQuery object of `TABLE` nodes.
	     *   * `object` - DataTables settings object
	     *   * `DataTables.Api` - API instance
	     * @return {array|null} Matching DataTables settings objects. `null` or
	     *   `undefined` is returned if no matching DataTable is found.
	     * @ignore
	     */
	    var _toSettings = function ( mixed )
	    {
	        var idx, jq;
	        var settings = DataTable.settings;
	        var tables = $.map( settings, function (el, i) {
	            return el.nTable;
	        } );
	    
	        if ( ! mixed ) {
	            return [];
	        }
	        else if ( mixed.nTable && mixed.oApi ) {
	            // DataTables settings object
	            return [ mixed ];
	        }
	        else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
	            // Table node
	            idx = $.inArray( mixed, tables );
	            return idx !== -1 ? [ settings[idx] ] : null;
	        }
	        else if ( mixed && typeof mixed.settings === 'function' ) {
	            return mixed.settings().toArray();
	        }
	        else if ( typeof mixed === 'string' ) {
	            // jQuery selector
	            jq = $(mixed);
	        }
	        else if ( mixed instanceof $ ) {
	            // jQuery object (also DataTables instance)
	            jq = mixed;
	        }
	    
	        if ( jq ) {
	            return jq.map( function(i) {
	                idx = $.inArray( this, tables );
	                return idx !== -1 ? settings[idx] : null;
	            } ).toArray();
	        }
	    };
	    
	    
	    /**
	     * DataTables API class - used to control and interface with  one or more
	     * DataTables enhanced tables.
	     *
	     * The API class is heavily based on jQuery, presenting a chainable interface
	     * that you can use to interact with tables. Each instance of the API class has
	     * a "context" - i.e. the tables that it will operate on. This could be a single
	     * table, all tables on a page or a sub-set thereof.
	     *
	     * Additionally the API is designed to allow you to easily work with the data in
	     * the tables, retrieving and manipulating it as required. This is done by
	     * presenting the API class as an array like interface. The contents of the
	     * array depend upon the actions requested by each method (for example
	     * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	     * return an array of objects or arrays depending upon your table's
	     * configuration). The API object has a number of array like methods (`push`,
	     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	     * `unique` etc) to assist your working with the data held in a table.
	     *
	     * Most methods (those which return an Api instance) are chainable, which means
	     * the return from a method call also has all of the methods available that the
	     * top level object had. For example, these two calls are equivalent:
	     *
	     *     // Not chained
	     *     api.row.add( {...} );
	     *     api.draw();
	     *
	     *     // Chained
	     *     api.row.add( {...} ).draw();
	     *
	     * @class DataTable.Api
	     * @param {array|object|string|jQuery} context DataTable identifier. This is
	     *   used to define which DataTables enhanced tables this API will operate on.
	     *   Can be one of:
	     *
	     *   * `string` - jQuery selector. Any DataTables' matching the given selector
	     *     with be found and used.
	     *   * `node` - `TABLE` node which has already been formed into a DataTable.
	     *   * `jQuery` - A jQuery object of `TABLE` nodes.
	     *   * `object` - DataTables settings object
	     * @param {array} [data] Data to initialise the Api instance with.
	     *
	     * @example
	     *   // Direct initialisation during DataTables construction
	     *   var api = $('#example').DataTable();
	     *
	     * @example
	     *   // Initialisation using a DataTables jQuery object
	     *   var api = $('#example').dataTable().api();
	     *
	     * @example
	     *   // Initialisation as a constructor
	     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	     */
	    _Api = function ( context, data )
	    {
	        if ( ! this instanceof _Api ) {
	            throw 'DT API must be constructed as a new object';
	            // or should it do the 'new' for the caller?
	            // return new _Api.apply( this, arguments );
	        }
	    
	        var settings = [];
	        var ctxSettings = function ( o ) {
	            var a = _toSettings( o );
	            if ( a ) {
	                settings.push.apply( settings, a );
	            }
	        };
	    
	        if ( $.isArray( context ) ) {
	            for ( var i=0, ien=context.length ; i<ien ; i++ ) {
	                ctxSettings( context[i] );
	            }
	        }
	        else {
	            ctxSettings( context );
	        }
	    
	        // Remove duplicates
	        this.context = _unique( settings );
	    
	        // Initial data
	        if ( data ) {
	            this.push.apply( this, data.toArray ? data.toArray() : data );
	        }
	    
	        // selector
	        this.selector = {
	            rows: null,
	            cols: null,
	            opts: null
	        };
	    
	        _Api.extend( this, this, __apiStruct );
	    };
	    
	    DataTable.Api = _Api;
	    
	    _Api.prototype = /** @lends DataTables.Api */{
	        /**
	         * Return a new Api instance, comprised of the data held in the current
	         * instance, join with the other array(s) and/or value(s).
	         *
	         * An alias for `Array.prototype.concat`.
	         *
	         * @type method
	         * @param {*} value1 Arrays and/or values to concatenate.
	         * @param {*} [...] Additional arrays and/or values to concatenate.
	         * @returns {DataTables.Api} New API instance, comprising of the combined
	         *   array.
	         */
	        concat:  __arrayProto.concat,
	    
	    
	        context: [], // array of table settings objects
	    
	    
	        each: function ( fn )
	        {
	            for ( var i=0, ien=this.length ; i<ien; i++ ) {
	                fn.call( this, this[i], i, this );
	            }
	    
	            return this;
	        },
	    
	    
	        eq: function ( idx )
	        {
	            var ctx = this.context;
	    
	            return ctx.length > idx ?
	                new _Api( ctx[idx], this[idx] ) :
	                null;
	        },
	    
	    
	        filter: function ( fn )
	        {
	            var a = [];
	    
	            if ( __arrayProto.filter ) {
	                a = __arrayProto.filter.call( this, fn, this );
	            }
	            else {
	                // Compatibility for browsers without EMCA-252-5 (JS 1.6)
	                for ( var i=0, ien=this.length ; i<ien ; i++ ) {
	                    if ( fn.call( this, this[i], i, this ) ) {
	                        a.push( this[i] );
	                    }
	                }
	            }
	    
	            return new _Api( this.context, a );
	        },
	    
	    
	        flatten: function ()
	        {
	            var a = [];
	            return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
	        },
	    
	    
	        join:    __arrayProto.join,
	    
	    
	        indexOf: __arrayProto.indexOf || function (obj, start)
	        {
	            for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
	                if ( this[i] === obj ) {
	                    return i;
	                }
	            }
	            return -1;
	        },
	    
	        // Note that `alwaysNew` is internal - use iteratorNew externally
	        iterator: function ( flatten, type, fn, alwaysNew ) {
	            var
	                a = [], ret,
	                i, ien, j, jen,
	                context = this.context,
	                rows, items, item,
	                selector = this.selector;
	    
	            // Argument shifting
	            if ( typeof flatten === 'string' ) {
	                alwaysNew = fn;
	                fn = type;
	                type = flatten;
	                flatten = false;
	            }
	    
	            for ( i=0, ien=context.length ; i<ien ; i++ ) {
	                var apiInst = new _Api( context[i] );
	    
	                if ( type === 'table' ) {
	                    ret = fn.call( apiInst, context[i], i );
	    
	                    if ( ret !== undefined ) {
	                        a.push( ret );
	                    }
	                }
	                else if ( type === 'columns' || type === 'rows' ) {
	                    // this has same length as context - one entry for each table
	                    ret = fn.call( apiInst, context[i], this[i], i );
	    
	                    if ( ret !== undefined ) {
	                        a.push( ret );
	                    }
	                }
	                else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
	                    // columns and rows share the same structure.
	                    // 'this' is an array of column indexes for each context
	                    items = this[i];
	    
	                    if ( type === 'column-rows' ) {
	                        rows = _selector_row_indexes( context[i], selector.opts );
	                    }
	    
	                    for ( j=0, jen=items.length ; j<jen ; j++ ) {
	                        item = items[j];
	    
	                        if ( type === 'cell' ) {
	                            ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
	                        }
	                        else {
	                            ret = fn.call( apiInst, context[i], item, i, j, rows );
	                        }
	    
	                        if ( ret !== undefined ) {
	                            a.push( ret );
	                        }
	                    }
	                }
	            }
	    
	            if ( a.length || alwaysNew ) {
	                var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
	                var apiSelector = api.selector;
	                apiSelector.rows = selector.rows;
	                apiSelector.cols = selector.cols;
	                apiSelector.opts = selector.opts;
	                return api;
	            }
	            return this;
	        },
	    
	    
	        lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
	        {
	            // Bit cheeky...
	            return this.indexOf.apply( this.toArray.reverse(), arguments );
	        },
	    
	    
	        length:  0,
	    
	    
	        map: function ( fn )
	        {
	            var a = [];
	    
	            if ( __arrayProto.map ) {
	                a = __arrayProto.map.call( this, fn, this );
	            }
	            else {
	                // Compatibility for browsers without EMCA-252-5 (JS 1.6)
	                for ( var i=0, ien=this.length ; i<ien ; i++ ) {
	                    a.push( fn.call( this, this[i], i ) );
	                }
	            }
	    
	            return new _Api( this.context, a );
	        },
	    
	    
	        pluck: function ( prop )
	        {
	            return this.map( function ( el ) {
	                return el[ prop ];
	            } );
	        },
	    
	        pop:     __arrayProto.pop,
	    
	    
	        push:    __arrayProto.push,
	    
	    
	        // Does not return an API instance
	        reduce: __arrayProto.reduce || function ( fn, init )
	        {
	            return _fnReduce( this, fn, init, 0, this.length, 1 );
	        },
	    
	    
	        reduceRight: __arrayProto.reduceRight || function ( fn, init )
	        {
	            return _fnReduce( this, fn, init, this.length-1, -1, -1 );
	        },
	    
	    
	        reverse: __arrayProto.reverse,
	    
	    
	        // Object with rows, columns and opts
	        selector: null,
	    
	    
	        shift:   __arrayProto.shift,
	    
	    
	        sort:    __arrayProto.sort, // ? name - order?
	    
	    
	        splice:  __arrayProto.splice,
	    
	    
	        toArray: function ()
	        {
	            return __arrayProto.slice.call( this );
	        },
	    
	    
	        to$: function ()
	        {
	            return $( this );
	        },
	    
	    
	        toJQuery: function ()
	        {
	            return $( this );
	        },
	    
	    
	        unique: function ()
	        {
	            return new _Api( this.context, _unique(this) );
	        },
	    
	    
	        unshift: __arrayProto.unshift
	    };
	    
	    
	    _Api.extend = function ( scope, obj, ext )
	    {
	        // Only extend API instances and static properties of the API
	        if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
	            return;
	        }
	    
	        var
	            i, ien,
	            j, jen,
	            struct, inner,
	            methodScoping = function ( scope, fn, struc ) {
	                return function () {
	                    var ret = fn.apply( scope, arguments );
	    
	                    // Method extension
	                    _Api.extend( ret, ret, struc.methodExt );
	                    return ret;
	                };
	            };
	    
	        for ( i=0, ien=ext.length ; i<ien ; i++ ) {
	            struct = ext[i];
	    
	            // Value
	            obj[ struct.name ] = typeof struct.val === 'function' ?
	                methodScoping( scope, struct.val, struct ) :
	                $.isPlainObject( struct.val ) ?
	                    {} :
	                    struct.val;
	    
	            obj[ struct.name ].__dt_wrapper = true;
	    
	            // Property extension
	            _Api.extend( scope, obj[ struct.name ], struct.propExt );
	        }
	    };
	    
	    
	    // @todo - Is there need for an augment function?
	    // _Api.augment = function ( inst, name )
	    // {
	    //  // Find src object in the structure from the name
	    //  var parts = name.split('.');
	    
	    //  _Api.extend( inst, obj );
	    // };
	    
	    
	    //     [
	    //       {
	    //         name:      'data'                -- string   - Property name
	    //         val:       function () {},       -- function - Api method (or undefined if just an object
	    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	    //       },
	    //       {
	    //         name:     'row'
	    //         val:       {},
	    //         methodExt: [ ... ],
	    //         propExt:   [
	    //           {
	    //             name:      'data'
	    //             val:       function () {},
	    //             methodExt: [ ... ],
	    //             propExt:   [ ... ]
	    //           },
	    //           ...
	    //         ]
	    //       }
	    //     ]
	    
	    _Api.register = _api_register = function ( name, val )
	    {
	        if ( $.isArray( name ) ) {
	            for ( var j=0, jen=name.length ; j<jen ; j++ ) {
	                _Api.register( name[j], val );
	            }
	            return;
	        }
	    
	        var
	            i, ien,
	            heir = name.split('.'),
	            struct = __apiStruct,
	            key, method;
	    
	        var find = function ( src, name ) {
	            for ( var i=0, ien=src.length ; i<ien ; i++ ) {
	                if ( src[i].name === name ) {
	                    return src[i];
	                }
	            }
	            return null;
	        };
	    
	        for ( i=0, ien=heir.length ; i<ien ; i++ ) {
	            method = heir[i].indexOf('()') !== -1;
	            key = method ?
	                heir[i].replace('()', '') :
	                heir[i];
	    
	            var src = find( struct, key );
	            if ( ! src ) {
	                src = {
	                    name:      key,
	                    val:       {},
	                    methodExt: [],
	                    propExt:   []
	                };
	                struct.push( src );
	            }
	    
	            if ( i === ien-1 ) {
	                src.val = val;
	            }
	            else {
	                struct = method ?
	                    src.methodExt :
	                    src.propExt;
	            }
	        }
	    };
	    
	    
	    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
	        _Api.register( pluralName, val );
	    
	        _Api.register( singularName, function () {
	            var ret = val.apply( this, arguments );
	    
	            if ( ret === this ) {
	                // Returned item is the API instance that was passed in, return it
	                return this;
	            }
	            else if ( ret instanceof _Api ) {
	                // New API instance returned, want the value from the first item
	                // in the returned array for the singular result.
	                return ret.length ?
	                    $.isArray( ret[0] ) ?
	                        new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
	                        ret[0] :
	                    undefined;
	            }
	    
	            // Non-API return - just fire it back
	            return ret;
	        } );
	    };
	    
	    
	    /**
	     * Selector for HTML tables. Apply the given selector to the give array of
	     * DataTables settings objects.
	     *
	     * @param {string|integer} [selector] jQuery selector string or integer
	     * @param  {array} Array of DataTables settings objects to be filtered
	     * @return {array}
	     * @ignore
	     */
	    var __table_selector = function ( selector, a )
	    {
	        // Integer is used to pick out a table by index
	        if ( typeof selector === 'number' ) {
	            return [ a[ selector ] ];
	        }
	    
	        // Perform a jQuery selector on the table nodes
	        var nodes = $.map( a, function (el, i) {
	            return el.nTable;
	        } );
	    
	        return $(nodes)
	            .filter( selector )
	            .map( function (i) {
	                // Need to translate back from the table node to the settings
	                var idx = $.inArray( this, nodes );
	                return a[ idx ];
	            } )
	            .toArray();
	    };
	    
	    
	    
	    /**
	     * Context selector for the API's context (i.e. the tables the API instance
	     * refers to.
	     *
	     * @name    DataTable.Api#tables
	     * @param {string|integer} [selector] Selector to pick which tables the iterator
	     *   should operate on. If not given, all tables in the current context are
	     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	     *   select multiple tables or as an integer to select a single table.
	     * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	     */
	    _api_register( 'tables()', function ( selector ) {
	        // A new instance is created if there was a selector specified
	        return selector ?
	            new _Api( __table_selector( selector, this.context ) ) :
	            this;
	    } );
	    
	    
	    _api_register( 'table()', function ( selector ) {
	        var tables = this.tables( selector );
	        var ctx = tables.context;
	    
	        // Truncate to the first matched table
	        return ctx.length ?
	            new _Api( ctx[0] ) :
	            tables;
	    } );
	    
	    
	    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
	        return this.iterator( 'table', function ( ctx ) {
	            return ctx.nTable;
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'tables().body()', 'table().body()' , function () {
	        return this.iterator( 'table', function ( ctx ) {
	            return ctx.nTBody;
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'tables().header()', 'table().header()' , function () {
	        return this.iterator( 'table', function ( ctx ) {
	            return ctx.nTHead;
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
	        return this.iterator( 'table', function ( ctx ) {
	            return ctx.nTFoot;
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {
	        return this.iterator( 'table', function ( ctx ) {
	            return ctx.nTableWrapper;
	        }, 1 );
	    } );
	    
	    
	    
	    /**
	     * Redraw the tables in the current context.
	     *
	     * @param {boolean} [reset=true] Reset (default) or hold the current paging
	     *   position. A full re-sort and re-filter is performed when this method is
	     *   called, which is why the pagination reset is the default action.
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'draw()', function ( resetPaging ) {
	        return this.iterator( 'table', function ( settings ) {
	            _fnReDraw( settings, resetPaging===false );
	        } );
	    } );
	    
	    
	    
	    /**
	     * Get the current page index.
	     *
	     * @return {integer} Current page index (zero based)
	     *//**
	     * Set the current page.
	     *
	     * Note that if you attempt to show a page which does not exist, DataTables will
	     * not throw an error, but rather reset the paging.
	     *
	     * @param {integer|string} action The paging action to take. This can be one of:
	     *  * `integer` - The page index to jump to
	     *  * `string` - An action to take:
	     *    * `first` - Jump to first page.
	     *    * `next` - Jump to the next page
	     *    * `previous` - Jump to previous page
	     *    * `last` - Jump to the last page.
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'page()', function ( action ) {
	        if ( action === undefined ) {
	            return this.page.info().page; // not an expensive call
	        }
	    
	        // else, have an action to take on all tables
	        return this.iterator( 'table', function ( settings ) {
	            _fnPageChange( settings, action );
	        } );
	    } );
	    
	    
	    /**
	     * Paging information for the first table in the current context.
	     *
	     * If you require paging information for another table, use the `table()` method
	     * with a suitable selector.
	     *
	     * @return {object} Object with the following properties set:
	     *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	     *  * `pages` - Total number of pages
	     *  * `start` - Display index for the first record shown on the current page
	     *  * `end` - Display index for the last record shown on the current page
	     *  * `length` - Display length (number of records). Note that generally `start
	     *    + length = end`, but this is not always true, for example if there are
	     *    only 2 records to show on the final page, with a length of 10.
	     *  * `recordsTotal` - Full data set length
	     *  * `recordsDisplay` - Data set length once the current filtering criterion
	     *    are applied.
	     */
	    _api_register( 'page.info()', function ( action ) {
	        if ( this.context.length === 0 ) {
	            return undefined;
	        }
	    
	        var
	            settings   = this.context[0],
	            start      = settings._iDisplayStart,
	            len        = settings._iDisplayLength,
	            visRecords = settings.fnRecordsDisplay(),
	            all        = len === -1;
	    
	        return {
	            "page":           all ? 0 : Math.floor( start / len ),
	            "pages":          all ? 1 : Math.ceil( visRecords / len ),
	            "start":          start,
	            "end":            settings.fnDisplayEnd(),
	            "length":         len,
	            "recordsTotal":   settings.fnRecordsTotal(),
	            "recordsDisplay": visRecords
	        };
	    } );
	    
	    
	    /**
	     * Get the current page length.
	     *
	     * @return {integer} Current page length. Note `-1` indicates that all records
	     *   are to be shown.
	     *//**
	     * Set the current page length.
	     *
	     * @param {integer} Page length to set. Use `-1` to show all records.
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'page.len()', function ( len ) {
	        // Note that we can't call this function 'length()' because `length`
	        // is a Javascript property of functions which defines how many arguments
	        // the function expects.
	        if ( len === undefined ) {
	            return this.context.length !== 0 ?
	                this.context[0]._iDisplayLength :
	                undefined;
	        }
	    
	        // else, set the page length
	        return this.iterator( 'table', function ( settings ) {
	            _fnLengthChange( settings, len );
	        } );
	    } );
	    
	    
	    
	    var __reload = function ( settings, holdPosition, callback ) {
	        // Use the draw event to trigger a callback
	        if ( callback ) {
	            var api = new _Api( settings );
	    
	            api.one( 'draw', function () {
	                callback( api.ajax.json() );
	            } );
	        }
	    
	        if ( _fnDataSource( settings ) == 'ssp' ) {
	            _fnReDraw( settings, holdPosition );
	        }
	        else {
	            // Trigger xhr
	            _fnProcessingDisplay( settings, true );
	    
	            _fnBuildAjax( settings, [], function( json ) {
	                _fnClearTable( settings );
	    
	                var data = _fnAjaxDataSrc( settings, json );
	                for ( var i=0, ien=data.length ; i<ien ; i++ ) {
	                    _fnAddData( settings, data[i] );
	                }
	    
	                _fnReDraw( settings, holdPosition );
	                _fnProcessingDisplay( settings, false );
	            } );
	        }
	    };
	    
	    
	    /**
	     * Get the JSON response from the last Ajax request that DataTables made to the
	     * server. Note that this returns the JSON from the first table in the current
	     * context.
	     *
	     * @return {object} JSON received from the server.
	     */
	    _api_register( 'ajax.json()', function () {
	        var ctx = this.context;
	    
	        if ( ctx.length > 0 ) {
	            return ctx[0].json;
	        }
	    
	        // else return undefined;
	    } );
	    
	    
	    /**
	     * Get the data submitted in the last Ajax request
	     */
	    _api_register( 'ajax.params()', function () {
	        var ctx = this.context;
	    
	        if ( ctx.length > 0 ) {
	            return ctx[0].oAjaxData;
	        }
	    
	        // else return undefined;
	    } );
	    
	    
	    /**
	     * Reload tables from the Ajax data source. Note that this function will
	     * automatically re-draw the table when the remote data has been loaded.
	     *
	     * @param {boolean} [reset=true] Reset (default) or hold the current paging
	     *   position. A full re-sort and re-filter is performed when this method is
	     *   called, which is why the pagination reset is the default action.
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {
	        return this.iterator( 'table', function (settings) {
	            __reload( settings, resetPaging===false, callback );
	        } );
	    } );
	    
	    
	    /**
	     * Get the current Ajax URL. Note that this returns the URL from the first
	     * table in the current context.
	     *
	     * @return {string} Current Ajax source URL
	     *//**
	     * Set the Ajax URL. Note that this will set the URL for all tables in the
	     * current context.
	     *
	     * @param {string} url URL to set.
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'ajax.url()', function ( url ) {
	        var ctx = this.context;
	    
	        if ( url === undefined ) {
	            // get
	            if ( ctx.length === 0 ) {
	                return undefined;
	            }
	            ctx = ctx[0];
	    
	            return ctx.ajax ?
	                $.isPlainObject( ctx.ajax ) ?
	                    ctx.ajax.url :
	                    ctx.ajax :
	                ctx.sAjaxSource;
	        }
	    
	        // set
	        return this.iterator( 'table', function ( settings ) {
	            if ( $.isPlainObject( settings.ajax ) ) {
	                settings.ajax.url = url;
	            }
	            else {
	                settings.ajax = url;
	            }
	            // No need to consider sAjaxSource here since DataTables gives priority
	            // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
	            // value of `sAjaxSource` redundant.
	        } );
	    } );
	    
	    
	    /**
	     * Load data from the newly set Ajax URL. Note that this method is only
	     * available when `ajax.url()` is used to set a URL. Additionally, this method
	     * has the same effect as calling `ajax.reload()` but is provided for
	     * convenience when setting a new URL. Like `ajax.reload()` it will
	     * automatically redraw the table once the remote data has been loaded.
	     *
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
	        // Same as a reload, but makes sense to present it for easy access after a
	        // url change
	        return this.iterator( 'table', function ( ctx ) {
	            __reload( ctx, resetPaging===false, callback );
	        } );
	    } );
	    
	    
	    
	    
	    var _selector_run = function ( selector, select )
	    {
	        var
	            out = [], res,
	            a, i, ien, j, jen,
	            selectorType = typeof selector;
	    
	        // Can't just check for isArray here, as an API or jQuery instance might be
	        // given with their array like look
	        if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
	            selector = [ selector ];
	        }
	    
	        for ( i=0, ien=selector.length ; i<ien ; i++ ) {
	            a = selector[i] && selector[i].split ?
	                selector[i].split(',') :
	                [ selector[i] ];
	    
	            for ( j=0, jen=a.length ; j<jen ; j++ ) {
	                res = select( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
	    
	                if ( res && res.length ) {
	                    out.push.apply( out, res );
	                }
	            }
	        }
	    
	        return out;
	    };
	    
	    
	    var _selector_opts = function ( opts )
	    {
	        if ( ! opts ) {
	            opts = {};
	        }
	    
	        // Backwards compatibility for 1.9- which used the terminology filter rather
	        // than search
	        if ( opts.filter && ! opts.search ) {
	            opts.search = opts.filter;
	        }
	    
	        return {
	            search: opts.search || 'none',
	            order:  opts.order  || 'current',
	            page:   opts.page   || 'all'
	        };
	    };
	    
	    
	    var _selector_first = function ( inst )
	    {
	        // Reduce the API instance to the first item found
	        for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
	            if ( inst[i].length > 0 ) {
	                // Assign the first element to the first item in the instance
	                // and truncate the instance and context
	                inst[0] = inst[i];
	                inst.length = 1;
	                inst.context = [ inst.context[i] ];
	    
	                return inst;
	            }
	        }
	    
	        // Not found - return an empty instance
	        inst.length = 0;
	        return inst;
	    };
	    
	    
	    var _selector_row_indexes = function ( settings, opts )
	    {
	        var
	            i, ien, tmp, a=[],
	            displayFiltered = settings.aiDisplay,
	            displayMaster = settings.aiDisplayMaster;
	    
	        var
	            search = opts.search,  // none, applied, removed
	            order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
	            page   = opts.page;    // all, current
	    
	        if ( _fnDataSource( settings ) == 'ssp' ) {
	            // In server-side processing mode, most options are irrelevant since
	            // rows not shown don't exist and the index order is the applied order
	            // Removed is a special case - for consistency just return an empty
	            // array
	            return search === 'removed' ?
	                [] :
	                _range( 0, displayMaster.length );
	        }
	        else if ( page == 'current' ) {
	            // Current page implies that order=current and fitler=applied, since it is
	            // fairly senseless otherwise, regardless of what order and search actually
	            // are
	            for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
	                a.push( displayFiltered[i] );
	            }
	        }
	        else if ( order == 'current' || order == 'applied' ) {
	            a = search == 'none' ?
	                displayMaster.slice() :                      // no search
	                search == 'applied' ?
	                    displayFiltered.slice() :                // applied search
	                    $.map( displayMaster, function (el, i) { // removed search
	                        return $.inArray( el, displayFiltered ) === -1 ? el : null;
	                    } );
	        }
	        else if ( order == 'index' || order == 'original' ) {
	            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
	                if ( search == 'none' ) {
	                    a.push( i );
	                }
	                else { // applied | removed
	                    tmp = $.inArray( i, displayFiltered );
	    
	                    if ((tmp === -1 && search == 'removed') ||
	                        (tmp >= 0   && search == 'applied') )
	                    {
	                        a.push( i );
	                    }
	                }
	            }
	        }
	    
	        return a;
	    };
	    
	    
	    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	     * Rows
	     *
	     * {}          - no selector - use all available rows
	     * {integer}   - row aoData index
	     * {node}      - TR node
	     * {string}    - jQuery selector to apply to the TR elements
	     * {array}     - jQuery array of nodes, or simply an array of TR nodes
	     *
	     */
	    
	    
	    var __row_selector = function ( settings, selector, opts )
	    {
	        return _selector_run( selector, function ( sel ) {
	            var selInt = _intVal( sel );
	            var i, ien;
	    
	            // Short cut - selector is a number and no options provided (default is
	            // all records, so no need to check if the index is in there, since it
	            // must be - dev error if the index doesn't exist).
	            if ( selInt !== null && ! opts ) {
	                return [ selInt ];
	            }
	    
	            var rows = _selector_row_indexes( settings, opts );
	    
	            if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
	                // Selector - integer
	                return [ selInt ];
	            }
	            else if ( ! sel ) {
	                // Selector - none
	                return rows;
	            }
	    
	            // Selector - function
	            if ( typeof sel === 'function' ) {
	                return $.map( rows, function (idx) {
	                    var row = settings.aoData[ idx ];
	                    return sel( idx, row._aData, row.nTr ) ? idx : null;
	                } );
	            }
	    
	            // Get nodes in the order from the `rows` array with null values removed
	            var nodes = _removeEmpty(
	                _pluck_order( settings.aoData, rows, 'nTr' )
	            );
	    
	            // Selector - node
	            if ( sel.nodeName ) {
	                if ( $.inArray( sel, nodes ) !== -1 ) {
	                    return [ sel._DT_RowIndex ]; // sel is a TR node that is in the table
	                                                 // and DataTables adds a prop for fast lookup
	                }
	            }
	    
	            // Selector - jQuery selector string, array of nodes or jQuery object/
	            // As jQuery's .filter() allows jQuery objects to be passed in filter,
	            // it also allows arrays, so this will cope with all three options
	            return $(nodes)
	                .filter( sel )
	                .map( function () {
	                    return this._DT_RowIndex;
	                } )
	                .toArray();
	        } );
	    };
	    
	    
	    _api_register( 'rows()', function ( selector, opts ) {
	        // argument shifting
	        if ( selector === undefined ) {
	            selector = '';
	        }
	        else if ( $.isPlainObject( selector ) ) {
	            opts = selector;
	            selector = '';
	        }
	    
	        opts = _selector_opts( opts );
	    
	        var inst = this.iterator( 'table', function ( settings ) {
	            return __row_selector( settings, selector, opts );
	        }, 1 );
	    
	        // Want argument shifting here and in __row_selector?
	        inst.selector.rows = selector;
	        inst.selector.opts = opts;
	    
	        return inst;
	    } );
	    
	    _api_register( 'rows().nodes()', function () {
	        return this.iterator( 'row', function ( settings, row ) {
	            return settings.aoData[ row ].nTr || undefined;
	        }, 1 );
	    } );
	    
	    _api_register( 'rows().data()', function () {
	        return this.iterator( true, 'rows', function ( settings, rows ) {
	            return _pluck_order( settings.aoData, rows, '_aData' );
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
	        return this.iterator( 'row', function ( settings, row ) {
	            var r = settings.aoData[ row ];
	            return type === 'search' ? r._aFilterData : r._aSortData;
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
	        return this.iterator( 'row', function ( settings, row ) {
	            _fnInvalidate( settings, row, src );
	        } );
	    } );
	    
	    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {
	        return this.iterator( 'row', function ( settings, row ) {
	            return row;
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {
	        var that = this;
	    
	        return this.iterator( 'row', function ( settings, row, thatIdx ) {
	            var data = settings.aoData;
	    
	            data.splice( row, 1 );
	    
	            // Update the _DT_RowIndex parameter on all rows in the table
	            for ( var i=0, ien=data.length ; i<ien ; i++ ) {
	                if ( data[i].nTr !== null ) {
	                    data[i].nTr._DT_RowIndex = i;
	                }
	            }
	    
	            // Remove the target row from the search array
	            var displayIndex = $.inArray( row, settings.aiDisplay );
	    
	            // Delete from the display arrays
	            _fnDeleteIndex( settings.aiDisplayMaster, row );
	            _fnDeleteIndex( settings.aiDisplay, row );
	            _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
	    
	            // Check for an 'overflow' they case for displaying the table
	            _fnLengthOverflow( settings );
	        } );
	    } );
	    
	    
	    _api_register( 'rows.add()', function ( rows ) {
	        var newRows = this.iterator( 'table', function ( settings ) {
	                var row, i, ien;
	                var out = [];
	    
	                for ( i=0, ien=rows.length ; i<ien ; i++ ) {
	                    row = rows[i];
	    
	                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
	                        out.push( _fnAddTr( settings, row )[0] );
	                    }
	                    else {
	                        out.push( _fnAddData( settings, row ) );
	                    }
	                }
	    
	                return out;
	            }, 1 );
	    
	        // Return an Api.rows() extended instance, so rows().nodes() etc can be used
	        var modRows = this.rows( -1 );
	        modRows.pop();
	        modRows.push.apply( modRows, newRows.toArray() );
	    
	        return modRows;
	    } );
	    
	    
	    
	    
	    
	    /**
	     *
	     */
	    _api_register( 'row()', function ( selector, opts ) {
	        return _selector_first( this.rows( selector, opts ) );
	    } );
	    
	    
	    _api_register( 'row().data()', function ( data ) {
	        var ctx = this.context;
	    
	        if ( data === undefined ) {
	            // Get
	            return ctx.length && this.length ?
	                ctx[0].aoData[ this[0] ]._aData :
	                undefined;
	        }
	    
	        // Set
	        ctx[0].aoData[ this[0] ]._aData = data;
	    
	        // Automatically invalidate
	        _fnInvalidate( ctx[0], this[0], 'data' );
	    
	        return this;
	    } );
	    
	    
	    _api_register( 'row().node()', function () {
	        var ctx = this.context;
	    
	        return ctx.length && this.length ?
	            ctx[0].aoData[ this[0] ].nTr || null :
	            null;
	    } );
	    
	    
	    _api_register( 'row.add()', function ( row ) {
	        // Allow a jQuery object to be passed in - only a single row is added from
	        // it though - the first element in the set
	        if ( row instanceof $ && row.length ) {
	            row = row[0];
	        }
	    
	        var rows = this.iterator( 'table', function ( settings ) {
	            if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
	                return _fnAddTr( settings, row )[0];
	            }
	            return _fnAddData( settings, row );
	        } );
	    
	        // Return an Api.rows() extended instance, with the newly added row selected
	        return this.row( rows[0] );
	    } );
	    
	    
	    
	    var __details_add = function ( ctx, row, data, klass )
	    {
	        // Convert to array of TR elements
	        var rows = [];
	        var addRow = function ( r, k ) {
	            // Recursion to allow for arrays of jQuery objects
	            if ( $.isArray( r ) || r instanceof $ ) {
	                for ( var i=0, ien=r.length ; i<ien ; i++ ) {
	                    addRow( r[i], k );
	                }
	                return;
	            }
	    
	            // If we get a TR element, then just add it directly - up to the dev
	            // to add the correct number of columns etc
	            if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
	                rows.push( r );
	            }
	            else {
	                // Otherwise create a row with a wrapper
	                var created = $('<tr><td/></tr>').addClass( k );
	                $('td', created)
	                    .addClass( k )
	                    .html( r )
	                    [0].colSpan = _fnVisbleColumns( ctx );
	    
	                rows.push( created[0] );
	            }
	        };
	    
	        addRow( data, klass );
	    
	        if ( row._details ) {
	            row._details.remove();
	        }
	    
	        row._details = $(rows);
	    
	        // If the children were already shown, that state should be retained
	        if ( row._detailsShow ) {
	            row._details.insertAfter( row.nTr );
	        }
	    };
	    
	    
	    var __details_remove = function ( api, idx )
	    {
	        var ctx = api.context;
	    
	        if ( ctx.length ) {
	            var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
	    
	            if ( row._details ) {
	                row._details.remove();
	    
	                row._detailsShow = undefined;
	                row._details = undefined;
	            }
	        }
	    };
	    
	    
	    var __details_display = function ( api, show ) {
	        var ctx = api.context;
	    
	        if ( ctx.length && api.length ) {
	            var row = ctx[0].aoData[ api[0] ];
	    
	            if ( row._details ) {
	                row._detailsShow = show;
	    
	                if ( show ) {
	                    row._details.insertAfter( row.nTr );
	                }
	                else {
	                    row._details.detach();
	                }
	    
	                __details_events( ctx[0] );
	            }
	        }
	    };
	    
	    
	    var __details_events = function ( settings )
	    {
	        var api = new _Api( settings );
	        var namespace = '.dt.DT_details';
	        var drawEvent = 'draw'+namespace;
	        var colvisEvent = 'column-visibility'+namespace;
	        var destroyEvent = 'destroy'+namespace;
	        var data = settings.aoData;
	    
	        api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
	    
	        if ( _pluck( data, '_details' ).length > 0 ) {
	            // On each draw, insert the required elements into the document
	            api.on( drawEvent, function ( e, ctx ) {
	                if ( settings !== ctx ) {
	                    return;
	                }
	    
	                api.rows( {page:'current'} ).eq(0).each( function (idx) {
	                    // Internal data grab
	                    var row = data[ idx ];
	    
	                    if ( row._detailsShow ) {
	                        row._details.insertAfter( row.nTr );
	                    }
	                } );
	            } );
	    
	            // Column visibility change - update the colspan
	            api.on( colvisEvent, function ( e, ctx, idx, vis ) {
	                if ( settings !== ctx ) {
	                    return;
	                }
	    
	                // Update the colspan for the details rows (note, only if it already has
	                // a colspan)
	                var row, visible = _fnVisbleColumns( ctx );
	    
	                for ( var i=0, ien=data.length ; i<ien ; i++ ) {
	                    row = data[i];
	    
	                    if ( row._details ) {
	                        row._details.children('td[colspan]').attr('colspan', visible );
	                    }
	                }
	            } );
	    
	            // Table destroyed - nuke any child rows
	            api.on( destroyEvent, function ( e, ctx ) {
	                if ( settings !== ctx ) {
	                    return;
	                }
	    
	                for ( var i=0, ien=data.length ; i<ien ; i++ ) {
	                    if ( data[i]._details ) {
	                        __details_remove( api, i );
	                    }
	                }
	            } );
	        }
	    };
	    
	    // Strings for the method names to help minification
	    var _emp = '';
	    var _child_obj = _emp+'row().child';
	    var _child_mth = _child_obj+'()';
	    
	    // data can be:
	    //  tr
	    //  string
	    //  jQuery or array of any of the above
	    _api_register( _child_mth, function ( data, klass ) {
	        var ctx = this.context;
	    
	        if ( data === undefined ) {
	            // get
	            return ctx.length && this.length ?
	                ctx[0].aoData[ this[0] ]._details :
	                undefined;
	        }
	        else if ( data === true ) {
	            // show
	            this.child.show();
	        }
	        else if ( data === false ) {
	            // remove
	            __details_remove( this );
	        }
	        else if ( ctx.length && this.length ) {
	            // set
	            __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
	        }
	    
	        return this;
	    } );
	    
	    
	    _api_register( [
	        _child_obj+'.show()',
	        _child_mth+'.show()' // only when `child()` was called with parameters (without
	    ], function ( show ) {   // it returns an object and this method is not executed)
	        __details_display( this, true );
	        return this;
	    } );
	    
	    
	    _api_register( [
	        _child_obj+'.hide()',
	        _child_mth+'.hide()' // only when `child()` was called with parameters (without
	    ], function () {         // it returns an object and this method is not executed)
	        __details_display( this, false );
	        return this;
	    } );
	    
	    
	    _api_register( [
	        _child_obj+'.remove()',
	        _child_mth+'.remove()' // only when `child()` was called with parameters (without
	    ], function () {           // it returns an object and this method is not executed)
	        __details_remove( this );
	        return this;
	    } );
	    
	    
	    _api_register( _child_obj+'.isShown()', function () {
	        var ctx = this.context;
	    
	        if ( ctx.length && this.length ) {
	            // _detailsShown as false or undefined will fall through to return false
	            return ctx[0].aoData[ this[0] ]._detailsShow || false;
	        }
	        return false;
	    } );
	    
	    
	    
	    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	     * Columns
	     *
	     * {integer}           - column index (>=0 count from left, <0 count from right)
	     * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	     * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	     * "{string}:name"     - column name
	     * "{string}"          - jQuery selector on column header nodes
	     *
	     */
	    
	    // can be an array of these items, comma separated list, or an array of comma
	    // separated lists
	    
	    var __re_column_selector = /^(.+):(name|visIdx|visible)$/;
	    
	    
	    // r1 and r2 are redundant - but it means that the parameters match for the
	    // iterator callback in columns().data()
	    var __columnData = function ( settings, column, r1, r2, rows ) {
	        var a = [];
	        for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
	            a.push( _fnGetCellData( settings, rows[row], column ) );
	        }
	        return a;
	    };
	    
	    
	    var __column_selector = function ( settings, selector, opts )
	    {
	        var
	            columns = settings.aoColumns,
	            names = _pluck( columns, 'sName' ),
	            nodes = _pluck( columns, 'nTh' );
	    
	        return _selector_run( selector, function ( s ) {
	            var selInt = _intVal( s );
	    
	            // Selector - all
	            if ( s === '' ) {
	                return _range( columns.length );
	            }
	            
	            // Selector - index
	            if ( selInt !== null ) {
	                return [ selInt >= 0 ?
	                    selInt : // Count from left
	                    columns.length + selInt // Count from right (+ because its a negative value)
	                ];
	            }
	            
	            // Selector = function
	            if ( typeof s === 'function' ) {
	                var rows = _selector_row_indexes( settings, opts );
	    
	                return $.map( columns, function (col, idx) {
	                    return s(
	                            idx,
	                            __columnData( settings, idx, 0, 0, rows ),
	                            nodes[ idx ]
	                        ) ? idx : null;
	                } );
	            }
	    
	            // jQuery or string selector
	            var match = typeof s === 'string' ?
	                s.match( __re_column_selector ) :
	                '';
	    
	            if ( match ) {
	                switch( match[2] ) {
	                    case 'visIdx':
	                    case 'visible':
	                        var idx = parseInt( match[1], 10 );
	                        // Visible index given, convert to column index
	                        if ( idx < 0 ) {
	                            // Counting from the right
	                            var visColumns = $.map( columns, function (col,i) {
	                                return col.bVisible ? i : null;
	                            } );
	                            return [ visColumns[ visColumns.length + idx ] ];
	                        }
	                        // Counting from the left
	                        return [ _fnVisibleToColumnIndex( settings, idx ) ];
	    
	                    case 'name':
	                        // match by name. `names` is column index complete and in order
	                        return $.map( names, function (name, i) {
	                            return name === match[1] ? i : null;
	                        } );
	                }
	            }
	            else {
	                // jQuery selector on the TH elements for the columns
	                return $( nodes )
	                    .filter( s )
	                    .map( function () {
	                        return $.inArray( this, nodes ); // `nodes` is column index complete and in order
	                    } )
	                    .toArray();
	            }
	        } );
	    };
	    
	    
	    var __setColumnVis = function ( settings, column, vis, recalc ) {
	        var
	            cols = settings.aoColumns,
	            col  = cols[ column ],
	            data = settings.aoData,
	            row, cells, i, ien, tr;
	    
	        // Get
	        if ( vis === undefined ) {
	            return col.bVisible;
	        }
	    
	        // Set
	        // No change
	        if ( col.bVisible === vis ) {
	            return;
	        }
	    
	        if ( vis ) {
	            // Insert column
	            // Need to decide if we should use appendChild or insertBefore
	            var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
	    
	            for ( i=0, ien=data.length ; i<ien ; i++ ) {
	                tr = data[i].nTr;
	                cells = data[i].anCells;
	    
	                if ( tr ) {
	                    // insertBefore can act like appendChild if 2nd arg is null
	                    tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
	                }
	            }
	        }
	        else {
	            // Remove column
	            $( _pluck( settings.aoData, 'anCells', column ) ).detach();
	        }
	    
	        // Common actions
	        col.bVisible = vis;
	        _fnDrawHead( settings, settings.aoHeader );
	        _fnDrawHead( settings, settings.aoFooter );
	    
	        if ( recalc === undefined || recalc ) {
	            // Automatically adjust column sizing
	            _fnAdjustColumnSizing( settings );
	    
	            // Realign columns for scrolling
	            if ( settings.oScroll.sX || settings.oScroll.sY ) {
	                _fnScrollDraw( settings );
	            }
	        }
	    
	        _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );
	    
	        _fnSaveState( settings );
	    };
	    
	    
	    _api_register( 'columns()', function ( selector, opts ) {
	        // argument shifting
	        if ( selector === undefined ) {
	            selector = '';
	        }
	        else if ( $.isPlainObject( selector ) ) {
	            opts = selector;
	            selector = '';
	        }
	    
	        opts = _selector_opts( opts );
	    
	        var inst = this.iterator( 'table', function ( settings ) {
	            return __column_selector( settings, selector, opts );
	        }, 1 );
	    
	        // Want argument shifting here and in _row_selector?
	        inst.selector.cols = selector;
	        inst.selector.opts = opts;
	    
	        return inst;
	    } );
	    
	    _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
	        return this.iterator( 'column', function ( settings, column ) {
	            return settings.aoColumns[column].nTh;
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
	        return this.iterator( 'column', function ( settings, column ) {
	            return settings.aoColumns[column].nTf;
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'columns().data()', 'column().data()', function () {
	        return this.iterator( 'column-rows', __columnData, 1 );
	    } );
	    
	    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
	        return this.iterator( 'column', function ( settings, column ) {
	            return settings.aoColumns[column].mData;
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
	        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
	            return _pluck_order( settings.aoData, rows,
	                type === 'search' ? '_aFilterData' : '_aSortData', column
	            );
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
	        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
	            return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
	        }, 1 );
	    } );
	    
	    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
	        return this.iterator( 'column', function ( settings, column ) {
	            if ( vis === undefined ) {
	                return settings.aoColumns[ column ].bVisible;
	            } // else
	            __setColumnVis( settings, column, vis, calc );
	        } );
	    } );
	    
	    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
	        return this.iterator( 'column', function ( settings, column ) {
	            return type === 'visible' ?
	                _fnColumnIndexToVisible( settings, column ) :
	                column;
	        }, 1 );
	    } );
	    
	    _api_register( 'columns.adjust()', function () {
	        return this.iterator( 'table', function ( settings ) {
	            _fnAdjustColumnSizing( settings );
	        }, 1 );
	    } );
	    
	    _api_register( 'column.index()', function ( type, idx ) {
	        if ( this.context.length !== 0 ) {
	            var ctx = this.context[0];
	    
	            if ( type === 'fromVisible' || type === 'toData' ) {
	                return _fnVisibleToColumnIndex( ctx, idx );
	            }
	            else if ( type === 'fromData' || type === 'toVisible' ) {
	                return _fnColumnIndexToVisible( ctx, idx );
	            }
	        }
	    } );
	    
	    _api_register( 'column()', function ( selector, opts ) {
	        return _selector_first( this.columns( selector, opts ) );
	    } );
	    
	    
	    
	    
	    var __cell_selector = function ( settings, selector, opts )
	    {
	        var data = settings.aoData;
	        var rows = _selector_row_indexes( settings, opts );
	        var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
	        var allCells = $( [].concat.apply([], cells) );
	        var row;
	        var columns = settings.aoColumns.length;
	        var a, i, ien, j, o, host;
	    
	        return _selector_run( selector, function ( s ) {
	            var fnSelector = typeof s === 'function';
	    
	            if ( s === null || s === undefined || fnSelector ) {
	                // All cells and function selectors
	                a = [];
	    
	                for ( i=0, ien=rows.length ; i<ien ; i++ ) {
	                    row = rows[i];
	    
	                    for ( j=0 ; j<columns ; j++ ) {
	                        o = {
	                            row: row,
	                            column: j
	                        };
	    
	                        if ( fnSelector ) {
	                            // Selector - function
	                            host = settings.aoData[ row ];
	    
	                            if ( s( o, _fnGetCellData(settings, row, j), host.anCells[j] ) ) {
	                                a.push( o );
	                            }
	                        }
	                        else {
	                            // Selector - all
	                            a.push( o );
	                        }
	                    }
	                }
	    
	                return a;
	            }
	            
	            // Selector - index
	            if ( $.isPlainObject( s ) ) {
	                return [s];
	            }
	    
	            // Selector - jQuery filtered cells
	            return allCells
	                .filter( s )
	                .map( function (i, el) {
	                    row = el.parentNode._DT_RowIndex;
	    
	                    return {
	                        row: row,
	                        column: $.inArray( el, data[ row ].anCells )
	                    };
	                } )
	                .toArray();
	        } );
	    };
	    
	    
	    
	    
	    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
	        // Argument shifting
	        if ( $.isPlainObject( rowSelector ) ) {
	            // Indexes
	            if ( rowSelector.row === undefined ) {
	                // Selector options in first parameter
	                opts = rowSelector;
	                rowSelector = null;
	            }
	            else {
	                // Cell index objects in first parameter
	                opts = columnSelector;
	                columnSelector = null;
	            }
	        }
	        if ( $.isPlainObject( columnSelector ) ) {
	            opts = columnSelector;
	            columnSelector = null;
	        }
	    
	        // Cell selector
	        if ( columnSelector === null || columnSelector === undefined ) {
	            return this.iterator( 'table', function ( settings ) {
	                return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
	            } );
	        }
	    
	        // Row + column selector
	        var columns = this.columns( columnSelector, opts );
	        var rows = this.rows( rowSelector, opts );
	        var a, i, ien, j, jen;
	    
	        var cells = this.iterator( 'table', function ( settings, idx ) {
	            a = [];
	    
	            for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
	                for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
	                    a.push( {
	                        row:    rows[idx][i],
	                        column: columns[idx][j]
	                    } );
	                }
	            }
	    
	            return a;
	        }, 1 );
	    
	        $.extend( cells.selector, {
	            cols: columnSelector,
	            rows: rowSelector,
	            opts: opts
	        } );
	    
	        return cells;
	    } );
	    
	    
	    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
	        return this.iterator( 'cell', function ( settings, row, column ) {
	            var cells = settings.aoData[ row ].anCells;
	            return cells ?
	                cells[ column ] :
	                undefined;
	        }, 1 );
	    } );
	    
	    
	    _api_register( 'cells().data()', function () {
	        return this.iterator( 'cell', function ( settings, row, column ) {
	            return _fnGetCellData( settings, row, column );
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
	        type = type === 'search' ? '_aFilterData' : '_aSortData';
	    
	        return this.iterator( 'cell', function ( settings, row, column ) {
	            return settings.aoData[ row ][ type ][ column ];
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
	        return this.iterator( 'cell', function ( settings, row, column ) {
	            return _fnGetCellData( settings, row, column, type );
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
	        return this.iterator( 'cell', function ( settings, row, column ) {
	            return {
	                row: row,
	                column: column,
	                columnVisible: _fnColumnIndexToVisible( settings, column )
	            };
	        }, 1 );
	    } );
	    
	    
	    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
	        return this.iterator( 'cell', function ( settings, row, column ) {
	            _fnInvalidate( settings, row, src, column );
	        } );
	    } );
	    
	    
	    
	    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
	        return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
	    } );
	    
	    
	    _api_register( 'cell().data()', function ( data ) {
	        var ctx = this.context;
	        var cell = this[0];
	    
	        if ( data === undefined ) {
	            // Get
	            return ctx.length && cell.length ?
	                _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
	                undefined;
	        }
	    
	        // Set
	        _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
	        _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
	    
	        return this;
	    } );
	    
	    
	    
	    /**
	     * Get current ordering (sorting) that has been applied to the table.
	     *
	     * @returns {array} 2D array containing the sorting information for the first
	     *   table in the current context. Each element in the parent array represents
	     *   a column being sorted upon (i.e. multi-sorting with two columns would have
	     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	     *   the column index that the sorting condition applies to, the second is the
	     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	     *   index of the sorting order from the `column.sorting` initialisation array.
	     *//**
	     * Set the ordering for the table.
	     *
	     * @param {integer} order Column index to sort upon.
	     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	     * @returns {DataTables.Api} this
	     *//**
	     * Set the ordering for the table.
	     *
	     * @param {array} order 1D array of sorting information to be applied.
	     * @param {array} [...] Optional additional sorting conditions
	     * @returns {DataTables.Api} this
	     *//**
	     * Set the ordering for the table.
	     *
	     * @param {array} order 2D array of sorting information to be applied.
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'order()', function ( order, dir ) {
	        var ctx = this.context;
	    
	        if ( order === undefined ) {
	            // get
	            return ctx.length !== 0 ?
	                ctx[0].aaSorting :
	                undefined;
	        }
	    
	        // set
	        if ( typeof order === 'number' ) {
	            // Simple column / direction passed in
	            order = [ [ order, dir ] ];
	        }
	        else if ( ! $.isArray( order[0] ) ) {
	            // Arguments passed in (list of 1D arrays)
	            order = Array.prototype.slice.call( arguments );
	        }
	        // otherwise a 2D array was passed in
	    
	        return this.iterator( 'table', function ( settings ) {
	            settings.aaSorting = order.slice();
	        } );
	    } );
	    
	    
	    /**
	     * Attach a sort listener to an element for a given column
	     *
	     * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	     *   listener to. This can take the form of a single DOM node, a jQuery
	     *   collection of nodes or a jQuery selector which will identify the node(s).
	     * @param {integer} column the column that a click on this node will sort on
	     * @param {function} [callback] callback function when sort is run
	     * @returns {DataTables.Api} this
	     */
	    _api_register( 'order.listener()', function ( node, column, callback ) {
	        return this.iterator( 'table', function ( settings ) {
	            _fnSortAttachListener( settings, node, column, callback );
	        } );
	    } );
	    
	    
	    // Order by the selected column(s)
	    _api_register( [
	        'columns().order()',
	        'column().order()'
	    ], function ( dir ) {
	        var that = this;
	    
	        return this.iterator( 'table', function ( settings, i ) {
	            var sort = [];
	    
	            $.each( that[i], function (j, col) {
	                sort.push( [ col, dir ] );
	            } );
	    
	            settings.aaSorting = sort;
	        } );
	    } );
	    
	    
	    
	    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {
	        var ctx = this.context;
	    
	        if ( input === undefined ) {
	            // get
	            return ctx.length !== 0 ?
	                ctx[0].oPreviousSearch.sSearch :
	                undefined;
	        }
	    
	        // set
	        return this.iterator( 'table', function ( settings ) {
	            if ( ! settings.oFeatures.bFilter ) {
	                return;
	            }
	    
	            _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
	                "sSearch": input+"",
	                "bRegex":  regex === null ? false : regex,
	                "bSmart":  smart === null ? true  : smart,
	                "bCaseInsensitive": caseInsen === null ? true : caseInsen
	            } ), 1 );
	        } );
	    } );
	    
	    
	    _api_registerPlural(
	        'columns().search()',
	        'column().search()',
	        function ( input, regex, smart, caseInsen ) {
	            return this.iterator( 'column', function ( settings, column ) {
	                var preSearch = settings.aoPreSearchCols;
	    
	                if ( input === undefined ) {
	                    // get
	                    return preSearch[ column ].sSearch;
	                }
	    
	                // set
	                if ( ! settings.oFeatures.bFilter ) {
	                    return;
	                }
	    
	                $.extend( preSearch[ column ], {
	                    "sSearch": input+"",
	                    "bRegex":  regex === null ? false : regex,
	                    "bSmart":  smart === null ? true  : smart,
	                    "bCaseInsensitive": caseInsen === null ? true : caseInsen
	                } );
	    
	                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );
	            } );
	        }
	    );
	    
	    /*
	     * State API methods
	     */
	    
	    _api_register( 'state()', function () {
	        return this.context.length ?
	            this.context[0].oSavedState :
	            null;
	    } );
	    
	    
	    _api_register( 'state.clear()', function () {
	        return this.iterator( 'table', function ( settings ) {
	            // Save an empty object
	            settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
	        } );
	    } );
	    
	    
	    _api_register( 'state.loaded()', function () {
	        return this.context.length ?
	            this.context[0].oLoadedState :
	            null;
	    } );
	    
	    
	    _api_register( 'state.save()', function () {
	        return this.iterator( 'table', function ( settings ) {
	            _fnSaveState( settings );
	        } );
	    } );
	    
	    
	    
	    /**
	     * Provide a common method for plug-ins to check the version of DataTables being
	     * used, in order to ensure compatibility.
	     *
	     *  @param {string} version Version string to check for, in the format "X.Y.Z".
	     *    Note that the formats "X" and "X.Y" are also acceptable.
	     *  @returns {boolean} true if this version of DataTables is greater or equal to
	     *    the required version, or false if this version of DataTales is not
	     *    suitable
	     *  @static
	     *  @dtopt API-Static
	     *
	     *  @example
	     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	     */
	    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
	    {
	        var aThis = DataTable.version.split('.');
	        var aThat = version.split('.');
	        var iThis, iThat;
	    
	        for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
	            iThis = parseInt( aThis[i], 10 ) || 0;
	            iThat = parseInt( aThat[i], 10 ) || 0;
	    
	            // Parts are the same, keep comparing
	            if (iThis === iThat) {
	                continue;
	            }
	    
	            // Parts are different, return immediately
	            return iThis > iThat;
	        }
	    
	        return true;
	    };
	    
	    
	    /**
	     * Check if a `<table>` node is a DataTable table already or not.
	     *
	     *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	     *      selector for the table to test. Note that if more than more than one
	     *      table is passed on, only the first will be checked
	     *  @returns {boolean} true the table given is a DataTable, or false otherwise
	     *  @static
	     *  @dtopt API-Static
	     *
	     *  @example
	     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	     *      $('#example').dataTable();
	     *    }
	     */
	    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
	    {
	        var t = $(table).get(0);
	        var is = false;
	    
	        $.each( DataTable.settings, function (i, o) {
	            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
	            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
	    
	            if ( o.nTable === t || head === t || foot === t ) {
	                is = true;
	            }
	        } );
	    
	        return is;
	    };
	    
	    
	    /**
	     * Get all DataTable tables that have been initialised - optionally you can
	     * select to get only currently visible tables.
	     *
	     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	     *    or visible tables only.
	     *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	     *    DataTables
	     *  @static
	     *  @dtopt API-Static
	     *
	     *  @example
	     *    $.each( $.fn.dataTable.tables(true), function () {
	     *      $(table).DataTable().columns.adjust();
	     *    } );
	     */
	    DataTable.tables = DataTable.fnTables = function ( visible )
	    {
	        return $.map( DataTable.settings, function (o) {
	            if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
	                return o.nTable;
	            }
	        } );
	    };
	    
	    
	    /**
	     * DataTables utility methods
	     * 
	     * This namespace provides helper methods that DataTables uses internally to
	     * create a DataTable, but which are not exclusively used only for DataTables.
	     * These methods can be used by extension authors to save the duplication of
	     * code.
	     *
	     *  @namespace
	     */
	    DataTable.util = {
	        /**
	         * Throttle the calls to a function. Arguments and context are maintained
	         * for the throttled function.
	         *
	         * @param {function} fn Function to be called
	         * @param {integer} freq Call frequency in mS
	         * @return {function} Wrapped function
	         */
	        throttle: _fnThrottle,
	    
	    
	        /**
	         * Escape a string such that it can be used in a regular expression
	         *
	         *  @param {string} sVal string to escape
	         *  @returns {string} escaped string
	         */
	        escapeRegex: _fnEscapeRegex
	    };
	    
	    
	    /**
	     * Convert from camel case parameters to Hungarian notation. This is made public
	     * for the extensions to provide the same ability as DataTables core to accept
	     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	     * parameters.
	     *
	     *  @param {object} src The model object which holds all parameters that can be
	     *    mapped.
	     *  @param {object} user The object to convert from camel case to Hungarian.
	     *  @param {boolean} force When set to `true`, properties which already have a
	     *    Hungarian value in the `user` object will be overwritten. Otherwise they
	     *    won't be.
	     */
	    DataTable.camelToHungarian = _fnCamelToHungarian;
	    
	    
	    
	    /**
	     *
	     */
	    _api_register( '$()', function ( selector, opts ) {
	        var
	            rows   = this.rows( opts ).nodes(), // Get all rows
	            jqRows = $(rows);
	    
	        return $( [].concat(
	            jqRows.filter( selector ).toArray(),
	            jqRows.find( selector ).toArray()
	        ) );
	    } );
	    
	    
	    // jQuery functions to operate on the tables
	    $.each( [ 'on', 'one', 'off' ], function (i, key) {
	        _api_register( key+'()', function ( /* event, handler */ ) {
	            var args = Array.prototype.slice.call(arguments);
	    
	            // Add the `dt` namespace automatically if it isn't already present
	            if ( ! args[0].match(/\.dt\b/) ) {
	                args[0] += '.dt';
	            }
	    
	            var inst = $( this.tables().nodes() );
	            inst[key].apply( inst, args );
	            return this;
	        } );
	    } );
	    
	    
	    _api_register( 'clear()', function () {
	        return this.iterator( 'table', function ( settings ) {
	            _fnClearTable( settings );
	        } );
	    } );
	    
	    
	    _api_register( 'settings()', function () {
	        return new _Api( this.context, this.context );
	    } );
	    
	    
	    _api_register( 'init()', function () {
	        var ctx = this.context;
	        return ctx.length ? ctx[0].oInit : null;
	    } );
	    
	    
	    _api_register( 'data()', function () {
	        return this.iterator( 'table', function ( settings ) {
	            return _pluck( settings.aoData, '_aData' );
	        } ).flatten();
	    } );
	    
	    
	    _api_register( 'destroy()', function ( remove ) {
	        remove = remove || false;
	    
	        return this.iterator( 'table', function ( settings ) {
	            var orig      = settings.nTableWrapper.parentNode;
	            var classes   = settings.oClasses;
	            var table     = settings.nTable;
	            var tbody     = settings.nTBody;
	            var thead     = settings.nTHead;
	            var tfoot     = settings.nTFoot;
	            var jqTable   = $(table);
	            var jqTbody   = $(tbody);
	            var jqWrapper = $(settings.nTableWrapper);
	            var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
	            var i, ien;
	    
	            // Flag to note that the table is currently being destroyed - no action
	            // should be taken
	            settings.bDestroying = true;
	    
	            // Fire off the destroy callbacks for plug-ins etc
	            _fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
	    
	            // If not being removed from the document, make all columns visible
	            if ( ! remove ) {
	                new _Api( settings ).columns().visible( true );
	            }
	    
	            // Blitz all `DT` namespaced events (these are internal events, the
	            // lowercase, `dt` events are user subscribed and they are responsible
	            // for removing them
	            jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
	            $(window).unbind('.DT-'+settings.sInstance);
	    
	            // When scrolling we had to break the table up - restore it
	            if ( table != thead.parentNode ) {
	                jqTable.children('thead').detach();
	                jqTable.append( thead );
	            }
	    
	            if ( tfoot && table != tfoot.parentNode ) {
	                jqTable.children('tfoot').detach();
	                jqTable.append( tfoot );
	            }
	    
	            // Remove the DataTables generated nodes, events and classes
	            jqTable.detach();
	            jqWrapper.detach();
	    
	            settings.aaSorting = [];
	            settings.aaSortingFixed = [];
	            _fnSortingClasses( settings );
	    
	            $( rows ).removeClass( settings.asStripeClasses.join(' ') );
	    
	            $('th, td', thead).removeClass( classes.sSortable+' '+
	                classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
	            );
	    
	            if ( settings.bJUI ) {
	                $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();
	                $('th, td', thead).each( function () {
	                    var wrapper = $('div.'+classes.sSortJUIWrapper, this);
	                    $(this).append( wrapper.contents() );
	                    wrapper.detach();
	                } );
	            }
	    
	            if ( ! remove && orig ) {
	                // insertBefore acts like appendChild if !arg[1]
	                orig.insertBefore( table, settings.nTableReinsertBefore );
	            }
	    
	            // Add the TR elements back into the table in their original order
	            jqTbody.children().detach();
	            jqTbody.append( rows );
	    
	            // Restore the width of the original table - was read from the style property,
	            // so we can restore directly to that
	            jqTable
	                .css( 'width', settings.sDestroyWidth )
	                .removeClass( classes.sTable );
	    
	            // If the were originally stripe classes - then we add them back here.
	            // Note this is not fool proof (for example if not all rows had stripe
	            // classes - but it's a good effort without getting carried away
	            ien = settings.asDestroyStripes.length;
	    
	            if ( ien ) {
	                jqTbody.children().each( function (i) {
	                    $(this).addClass( settings.asDestroyStripes[i % ien] );
	                } );
	            }
	    
	            /* Remove the settings object from the settings array */
	            var idx = $.inArray( settings, DataTable.settings );
	            if ( idx !== -1 ) {
	                DataTable.settings.splice( idx, 1 );
	            }
	        } );
	    } );
	    
	    
	    // Add the `every()` method for rows, columns and cells in a compact form
	    $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
	        _api_register( type+'s().every()', function ( fn ) {
	            return this.iterator( type, function ( settings, idx, idx2 ) {
	                // idx2 is undefined for rows and columns.
	                fn.call( new _Api( settings )[ type ]( idx, idx2 ) );
	            } );
	        } );
	    } );
	    

	    /**
	     * Version string for plug-ins to check compatibility. Allowed format is
	     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	     * only for non-release builds. See http://semver.org/ for more information.
	     *  @member
	     *  @type string
	     *  @default Version number
	     */
	    DataTable.version = "1.10.6";

	    /**
	     * Private data store, containing all of the settings objects that are
	     * created for the tables on a given page.
	     *
	     * Note that the `DataTable.settings` object is aliased to
	     * `jQuery.fn.dataTableExt` through which it may be accessed and
	     * manipulated, or `jQuery.fn.dataTable.settings`.
	     *  @member
	     *  @type array
	     *  @default []
	     *  @private
	     */
	    DataTable.settings = [];

	    /**
	     * Object models container, for the various models that DataTables has
	     * available to it. These models define the objects that are used to hold
	     * the active state and configuration of the table.
	     *  @namespace
	     */
	    DataTable.models = {};
	    
	    
	    
	    /**
	     * Template object for the way in which DataTables holds information about
	     * search information for the global filter and individual column filters.
	     *  @namespace
	     */
	    DataTable.models.oSearch = {
	        /**
	         * Flag to indicate if the filtering should be case insensitive or not
	         *  @type boolean
	         *  @default true
	         */
	        "bCaseInsensitive": true,
	    
	        /**
	         * Applied search term
	         *  @type string
	         *  @default <i>Empty string</i>
	         */
	        "sSearch": "",
	    
	        /**
	         * Flag to indicate if the search term should be interpreted as a
	         * regular expression (true) or not (false) and therefore and special
	         * regex characters escaped.
	         *  @type boolean
	         *  @default false
	         */
	        "bRegex": false,
	    
	        /**
	         * Flag to indicate if DataTables is to use its smart filtering or not.
	         *  @type boolean
	         *  @default true
	         */
	        "bSmart": true
	    };
	    
	    
	    
	    
	    /**
	     * Template object for the way in which DataTables holds information about
	     * each individual row. This is the object format used for the settings
	     * aoData array.
	     *  @namespace
	     */
	    DataTable.models.oRow = {
	        /**
	         * TR element for the row
	         *  @type node
	         *  @default null
	         */
	        "nTr": null,
	    
	        /**
	         * Array of TD elements for each row. This is null until the row has been
	         * created.
	         *  @type array nodes
	         *  @default []
	         */
	        "anCells": null,
	    
	        /**
	         * Data object from the original data source for the row. This is either
	         * an array if using the traditional form of DataTables, or an object if
	         * using mData options. The exact type will depend on the passed in
	         * data from the data source, or will be an array if using DOM a data
	         * source.
	         *  @type array|object
	         *  @default []
	         */
	        "_aData": [],
	    
	        /**
	         * Sorting data cache - this array is ostensibly the same length as the
	         * number of columns (although each index is generated only as it is
	         * needed), and holds the data that is used for sorting each column in the
	         * row. We do this cache generation at the start of the sort in order that
	         * the formatting of the sort data need be done only once for each cell
	         * per sort. This array should not be read from or written to by anything
	         * other than the master sorting methods.
	         *  @type array
	         *  @default null
	         *  @private
	         */
	        "_aSortData": null,
	    
	        /**
	         * Per cell filtering data cache. As per the sort data cache, used to
	         * increase the performance of the filtering in DataTables
	         *  @type array
	         *  @default null
	         *  @private
	         */
	        "_aFilterData": null,
	    
	        /**
	         * Filtering data cache. This is the same as the cell filtering cache, but
	         * in this case a string rather than an array. This is easily computed with
	         * a join on `_aFilterData`, but is provided as a cache so the join isn't
	         * needed on every search (memory traded for performance)
	         *  @type array
	         *  @default null
	         *  @private
	         */
	        "_sFilterRow": null,
	    
	        /**
	         * Cache of the class name that DataTables has applied to the row, so we
	         * can quickly look at this variable rather than needing to do a DOM check
	         * on className for the nTr property.
	         *  @type string
	         *  @default <i>Empty string</i>
	         *  @private
	         */
	        "_sRowStripe": "",
	    
	        /**
	         * Denote if the original data source was from the DOM, or the data source
	         * object. This is used for invalidating data, so DataTables can
	         * automatically read data from the original source, unless uninstructed
	         * otherwise.
	         *  @type string
	         *  @default null
	         *  @private
	         */
	        "src": null
	    };
	    
	    
	    /**
	     * Template object for the column information object in DataTables. This object
	     * is held in the settings aoColumns array and contains all the information that
	     * DataTables needs about each individual column.
	     *
	     * Note that this object is related to {@link DataTable.defaults.column}
	     * but this one is the internal data store for DataTables's cache of columns.
	     * It should NOT be manipulated outside of DataTables. Any configuration should
	     * be done through the initialisation options.
	     *  @namespace
	     */
	    DataTable.models.oColumn = {
	        /**
	         * Column index. This could be worked out on-the-fly with $.inArray, but it
	         * is faster to just hold it as a variable
	         *  @type integer
	         *  @default null
	         */
	        "idx": null,
	    
	        /**
	         * A list of the columns that sorting should occur on when this column
	         * is sorted. That this property is an array allows multi-column sorting
	         * to be defined for a column (for example first name / last name columns
	         * would benefit from this). The values are integers pointing to the
	         * columns to be sorted on (typically it will be a single integer pointing
	         * at itself, but that doesn't need to be the case).
	         *  @type array
	         */
	        "aDataSort": null,
	    
	        /**
	         * Define the sorting directions that are applied to the column, in sequence
	         * as the column is repeatedly sorted upon - i.e. the first value is used
	         * as the sorting direction when the column if first sorted (clicked on).
	         * Sort it again (click again) and it will move on to the next index.
	         * Repeat until loop.
	         *  @type array
	         */
	        "asSorting": null,
	    
	        /**
	         * Flag to indicate if the column is searchable, and thus should be included
	         * in the filtering or not.
	         *  @type boolean
	         */
	        "bSearchable": null,
	    
	        /**
	         * Flag to indicate if the column is sortable or not.
	         *  @type boolean
	         */
	        "bSortable": null,
	    
	        /**
	         * Flag to indicate if the column is currently visible in the table or not
	         *  @type boolean
	         */
	        "bVisible": null,
	    
	        /**
	         * Store for manual type assignment using the `column.type` option. This
	         * is held in store so we can manipulate the column's `sType` property.
	         *  @type string
	         *  @default null
	         *  @private
	         */
	        "_sManualType": null,
	    
	        /**
	         * Flag to indicate if HTML5 data attributes should be used as the data
	         * source for filtering or sorting. True is either are.
	         *  @type boolean
	         *  @default false
	         *  @private
	         */
	        "_bAttrSrc": false,
	    
	        /**
	         * Developer definable function that is called whenever a cell is created (Ajax source,
	         * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	         * allowing you to modify the DOM element (add background colour for example) when the
	         * element is available.
	         *  @type function
	         *  @param {element} nTd The TD node that has been created
	         *  @param {*} sData The Data for the cell
	         *  @param {array|object} oData The data for the whole row
	         *  @param {int} iRow The row index for the aoData data store
	         *  @default null
	         */
	        "fnCreatedCell": null,
	    
	        /**
	         * Function to get data from a cell in a column. You should <b>never</b>
	         * access data directly through _aData internally in DataTables - always use
	         * the method attached to this property. It allows mData to function as
	         * required. This function is automatically assigned by the column
	         * initialisation method
	         *  @type function
	         *  @param {array|object} oData The data array/object for the array
	         *    (i.e. aoData[]._aData)
	         *  @param {string} sSpecific The specific data type you want to get -
	         *    'display', 'type' 'filter' 'sort'
	         *  @returns {*} The data for the cell from the given row's data
	         *  @default null
	         */
	        "fnGetData": null,
	    
	        /**
	         * Function to set data for a cell in the column. You should <b>never</b>
	         * set the data directly to _aData internally in DataTables - always use
	         * this method. It allows mData to function as required. This function
	         * is automatically assigned by the column initialisation method
	         *  @type function
	         *  @param {array|object} oData The data array/object for the array
	         *    (i.e. aoData[]._aData)
	         *  @param {*} sValue Value to set
	         *  @default null
	         */
	        "fnSetData": null,
	    
	        /**
	         * Property to read the value for the cells in the column from the data
	         * source array / object. If null, then the default content is used, if a
	         * function is given then the return from the function is used.
	         *  @type function|int|string|null
	         *  @default null
	         */
	        "mData": null,
	    
	        /**
	         * Partner property to mData which is used (only when defined) to get
	         * the data - i.e. it is basically the same as mData, but without the
	         * 'set' option, and also the data fed to it is the result from mData.
	         * This is the rendering method to match the data method of mData.
	         *  @type function|int|string|null
	         *  @default null
	         */
	        "mRender": null,
	    
	        /**
	         * Unique header TH/TD element for this column - this is what the sorting
	         * listener is attached to (if sorting is enabled.)
	         *  @type node
	         *  @default null
	         */
	        "nTh": null,
	    
	        /**
	         * Unique footer TH/TD element for this column (if there is one). Not used
	         * in DataTables as such, but can be used for plug-ins to reference the
	         * footer for each column.
	         *  @type node
	         *  @default null
	         */
	        "nTf": null,
	    
	        /**
	         * The class to apply to all TD elements in the table's TBODY for the column
	         *  @type string
	         *  @default null
	         */
	        "sClass": null,
	    
	        /**
	         * When DataTables calculates the column widths to assign to each column,
	         * it finds the longest string in each column and then constructs a
	         * temporary table and reads the widths from that. The problem with this
	         * is that "mmm" is much wider then "iiii", but the latter is a longer
	         * string - thus the calculation can go wrong (doing it properly and putting
	         * it into an DOM object and measuring that is horribly(!) slow). Thus as
	         * a "work around" we provide this option. It will append its value to the
	         * text that is found to be the longest string for the column - i.e. padding.
	         *  @type string
	         */
	        "sContentPadding": null,
	    
	        /**
	         * Allows a default value to be given for a column's data, and will be used
	         * whenever a null data source is encountered (this can be because mData
	         * is set to null, or because the data source itself is null).
	         *  @type string
	         *  @default null
	         */
	        "sDefaultContent": null,
	    
	        /**
	         * Name for the column, allowing reference to the column by name as well as
	         * by index (needs a lookup to work by name).
	         *  @type string
	         */
	        "sName": null,
	    
	        /**
	         * Custom sorting data type - defines which of the available plug-ins in
	         * afnSortData the custom sorting will use - if any is defined.
	         *  @type string
	         *  @default std
	         */
	        "sSortDataType": 'std',
	    
	        /**
	         * Class to be applied to the header element when sorting on this column
	         *  @type string
	         *  @default null
	         */
	        "sSortingClass": null,
	    
	        /**
	         * Class to be applied to the header element when sorting on this column -
	         * when jQuery UI theming is used.
	         *  @type string
	         *  @default null
	         */
	        "sSortingClassJUI": null,
	    
	        /**
	         * Title of the column - what is seen in the TH element (nTh).
	         *  @type string
	         */
	        "sTitle": null,
	    
	        /**
	         * Column sorting and filtering type
	         *  @type string
	         *  @default null
	         */
	        "sType": null,
	    
	        /**
	         * Width of the column
	         *  @type string
	         *  @default null
	         */
	        "sWidth": null,
	    
	        /**
	         * Width of the column when it was first "encountered"
	         *  @type string
	         *  @default null
	         */
	        "sWidthOrig": null
	    };
	    
	    
	    /*
	     * Developer note: The properties of the object below are given in Hungarian
	     * notation, that was used as the interface for DataTables prior to v1.10, however
	     * from v1.10 onwards the primary interface is camel case. In order to avoid
	     * breaking backwards compatibility utterly with this change, the Hungarian
	     * version is still, internally the primary interface, but is is not documented
	     * - hence the @name tags in each doc comment. This allows a Javascript function
	     * to create a map from Hungarian notation to camel case (going the other direction
	     * would require each property to be listed, which would at around 3K to the size
	     * of DataTables, while this method is about a 0.5K hit.
	     *
	     * Ultimately this does pave the way for Hungarian notation to be dropped
	     * completely, but that is a massive amount of work and will break current
	     * installs (therefore is on-hold until v2).
	     */
	    
	    /**
	     * Initialisation options that can be given to DataTables at initialisation
	     * time.
	     *  @namespace
	     */
	    DataTable.defaults = {
	        /**
	         * An array of data to use for the table, passed in at initialisation which
	         * will be used in preference to any data which is already in the DOM. This is
	         * particularly useful for constructing tables purely in Javascript, for
	         * example with a custom Ajax call.
	         *  @type array
	         *  @default null
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.data
	         *
	         *  @example
	         *    // Using a 2D array data source
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "data": [
	         *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
	         *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
	         *        ],
	         *        "columns": [
	         *          { "title": "Engine" },
	         *          { "title": "Browser" },
	         *          { "title": "Platform" },
	         *          { "title": "Version" },
	         *          { "title": "Grade" }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using an array of objects as a data source (`data`)
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "data": [
	         *          {
	         *            "engine":   "Trident",
	         *            "browser":  "Internet Explorer 4.0",
	         *            "platform": "Win 95+",
	         *            "version":  4,
	         *            "grade":    "X"
	         *          },
	         *          {
	         *            "engine":   "Trident",
	         *            "browser":  "Internet Explorer 5.0",
	         *            "platform": "Win 95+",
	         *            "version":  5,
	         *            "grade":    "C"
	         *          }
	         *        ],
	         *        "columns": [
	         *          { "title": "Engine",   "data": "engine" },
	         *          { "title": "Browser",  "data": "browser" },
	         *          { "title": "Platform", "data": "platform" },
	         *          { "title": "Version",  "data": "version" },
	         *          { "title": "Grade",    "data": "grade" }
	         *        ]
	         *      } );
	         *    } );
	         */
	        "aaData": null,
	    
	    
	        /**
	         * If ordering is enabled, then DataTables will perform a first pass sort on
	         * initialisation. You can define which column(s) the sort is performed
	         * upon, and the sorting direction, with this variable. The `sorting` array
	         * should contain an array for each column to be sorted initially containing
	         * the column's index and a direction string ('asc' or 'desc').
	         *  @type array
	         *  @default [[0,'asc']]
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.order
	         *
	         *  @example
	         *    // Sort by 3rd column first, and then 4th column
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "order": [[2,'asc'], [3,'desc']]
	         *      } );
	         *    } );
	         *
	         *    // No initial sorting
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "order": []
	         *      } );
	         *    } );
	         */
	        "aaSorting": [[0,'asc']],
	    
	    
	        /**
	         * This parameter is basically identical to the `sorting` parameter, but
	         * cannot be overridden by user interaction with the table. What this means
	         * is that you could have a column (visible or hidden) which the sorting
	         * will always be forced on first - any sorting after that (from the user)
	         * will then be performed as required. This can be useful for grouping rows
	         * together.
	         *  @type array
	         *  @default null
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.orderFixed
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "orderFixed": [[0,'asc']]
	         *      } );
	         *    } )
	         */
	        "aaSortingFixed": [],
	    
	    
	        /**
	         * DataTables can be instructed to load data to display in the table from a
	         * Ajax source. This option defines how that Ajax call is made and where to.
	         *
	         * The `ajax` property has three different modes of operation, depending on
	         * how it is defined. These are:
	         *
	         * * `string` - Set the URL from where the data should be loaded from.
	         * * `object` - Define properties for `jQuery.ajax`.
	         * * `function` - Custom data get function
	         *
	         * `string`
	         * --------
	         *
	         * As a string, the `ajax` property simply defines the URL from which
	         * DataTables will load data.
	         *
	         * `object`
	         * --------
	         *
	         * As an object, the parameters in the object are passed to
	         * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
	         * of the Ajax request. DataTables has a number of default parameters which
	         * you can override using this option. Please refer to the jQuery
	         * documentation for a full description of the options available, although
	         * the following parameters provide additional options in DataTables or
	         * require special consideration:
	         *
	         * * `data` - As with jQuery, `data` can be provided as an object, but it
	         *   can also be used as a function to manipulate the data DataTables sends
	         *   to the server. The function takes a single parameter, an object of
	         *   parameters with the values that DataTables has readied for sending. An
	         *   object may be returned which will be merged into the DataTables
	         *   defaults, or you can add the items to the object that was passed in and
	         *   not return anything from the function. This supersedes `fnServerParams`
	         *   from DataTables 1.9-.
	         *
	         * * `dataSrc` - By default DataTables will look for the property `data` (or
	         *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
	         *   from an Ajax source or for server-side processing - this parameter
	         *   allows that property to be changed. You can use Javascript dotted
	         *   object notation to get a data source for multiple levels of nesting, or
	         *   it my be used as a function. As a function it takes a single parameter,
	         *   the JSON returned from the server, which can be manipulated as
	         *   required, with the returned value being that used by DataTables as the
	         *   data source for the table. This supersedes `sAjaxDataProp` from
	         *   DataTables 1.9-.
	         *
	         * * `success` - Should not be overridden it is used internally in
	         *   DataTables. To manipulate / transform the data returned by the server
	         *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
	         *
	         * `function`
	         * ----------
	         *
	         * As a function, making the Ajax call is left up to yourself allowing
	         * complete control of the Ajax request. Indeed, if desired, a method other
	         * than Ajax could be used to obtain the required data, such as Web storage
	         * or an AIR database.
	         *
	         * The function is given four parameters and no return is required. The
	         * parameters are:
	         *
	         * 1. _object_ - Data to send to the server
	         * 2. _function_ - Callback function that must be executed when the required
	         *    data has been obtained. That data should be passed into the callback
	         *    as the only parameter
	         * 3. _object_ - DataTables settings object for the table
	         *
	         * Note that this supersedes `fnServerData` from DataTables 1.9-.
	         *
	         *  @type string|object|function
	         *  @default null
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.ajax
	         *  @since 1.10.0
	         *
	         * @example
	         *   // Get JSON data from a file via Ajax.
	         *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
	         *   $('#example').dataTable( {
	         *     "ajax": "data.json"
	         *   } );
	         *
	         * @example
	         *   // Get JSON data from a file via Ajax, using `dataSrc` to change
	         *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
	         *   $('#example').dataTable( {
	         *     "ajax": {
	         *       "url": "data.json",
	         *       "dataSrc": "tableData"
	         *     }
	         *   } );
	         *
	         * @example
	         *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
	         *   // from a plain array rather than an array in an object
	         *   $('#example').dataTable( {
	         *     "ajax": {
	         *       "url": "data.json",
	         *       "dataSrc": ""
	         *     }
	         *   } );
	         *
	         * @example
	         *   // Manipulate the data returned from the server - add a link to data
	         *   // (note this can, should, be done using `render` for the column - this
	         *   // is just a simple example of how the data can be manipulated).
	         *   $('#example').dataTable( {
	         *     "ajax": {
	         *       "url": "data.json",
	         *       "dataSrc": function ( json ) {
	         *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
	         *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
	         *         }
	         *         return json;
	         *       }
	         *     }
	         *   } );
	         *
	         * @example
	         *   // Add data to the request
	         *   $('#example').dataTable( {
	         *     "ajax": {
	         *       "url": "data.json",
	         *       "data": function ( d ) {
	         *         return {
	         *           "extra_search": $('#extra').val()
	         *         };
	         *       }
	         *     }
	         *   } );
	         *
	         * @example
	         *   // Send request as POST
	         *   $('#example').dataTable( {
	         *     "ajax": {
	         *       "url": "data.json",
	         *       "type": "POST"
	         *     }
	         *   } );
	         *
	         * @example
	         *   // Get the data from localStorage (could interface with a form for
	         *   // adding, editing and removing rows).
	         *   $('#example').dataTable( {
	         *     "ajax": function (data, callback, settings) {
	         *       callback(
	         *         JSON.parse( localStorage.getItem('dataTablesData') )
	         *       );
	         *     }
	         *   } );
	         */
	        "ajax": null,
	    
	    
	        /**
	         * This parameter allows you to readily specify the entries in the length drop
	         * down menu that DataTables shows when pagination is enabled. It can be
	         * either a 1D array of options which will be used for both the displayed
	         * option and the value, or a 2D array which will use the array in the first
	         * position as the value, and the array in the second position as the
	         * displayed options (useful for language strings such as 'All').
	         *
	         * Note that the `pageLength` property will be automatically set to the
	         * first value given in this array, unless `pageLength` is also provided.
	         *  @type array
	         *  @default [ 10, 25, 50, 100 ]
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.lengthMenu
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
	         *      } );
	         *    } );
	         */
	        "aLengthMenu": [ 10, 25, 50, 100 ],
	    
	    
	        /**
	         * The `columns` option in the initialisation parameter allows you to define
	         * details about the way individual columns behave. For a full list of
	         * column options that can be set, please see
	         * {@link DataTable.defaults.column}. Note that if you use `columns` to
	         * define your columns, you must have an entry in the array for every single
	         * column that you have in your table (these can be null if you don't which
	         * to specify any options).
	         *  @member
	         *
	         *  @name DataTable.defaults.column
	         */
	        "aoColumns": null,
	    
	        /**
	         * Very similar to `columns`, `columnDefs` allows you to target a specific
	         * column, multiple columns, or all columns, using the `targets` property of
	         * each object in the array. This allows great flexibility when creating
	         * tables, as the `columnDefs` arrays can be of any length, targeting the
	         * columns you specifically want. `columnDefs` may use any of the column
	         * options available: {@link DataTable.defaults.column}, but it _must_
	         * have `targets` defined in each object in the array. Values in the `targets`
	         * array may be:
	         *   <ul>
	         *     <li>a string - class name will be matched on the TH for the column</li>
	         *     <li>0 or a positive integer - column index counting from the left</li>
	         *     <li>a negative integer - column index counting from the right</li>
	         *     <li>the string "_all" - all columns (i.e. assign a default)</li>
	         *   </ul>
	         *  @member
	         *
	         *  @name DataTable.defaults.columnDefs
	         */
	        "aoColumnDefs": null,
	    
	    
	        /**
	         * Basically the same as `search`, this parameter defines the individual column
	         * filtering state at initialisation time. The array must be of the same size
	         * as the number of columns, and each element be an object with the parameters
	         * `search` and `escapeRegex` (the latter is optional). 'null' is also
	         * accepted and the default will be used.
	         *  @type array
	         *  @default []
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.searchCols
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "searchCols": [
	         *          null,
	         *          { "search": "My filter" },
	         *          null,
	         *          { "search": "^[0-9]", "escapeRegex": false }
	         *        ]
	         *      } );
	         *    } )
	         */
	        "aoSearchCols": [],
	    
	    
	        /**
	         * An array of CSS classes that should be applied to displayed rows. This
	         * array may be of any length, and DataTables will apply each class
	         * sequentially, looping when required.
	         *  @type array
	         *  @default null <i>Will take the values determined by the `oClasses.stripe*`
	         *    options</i>
	         *
	         *  @dtopt Option
	         *  @name DataTable.defaults.stripeClasses
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
	         *      } );
	         *    } )
	         */
	        "asStripeClasses": null,
	    
	    
	        /**
	         * Enable or disable automatic column width calculation. This can be disabled
	         * as an optimisation (it takes some time to calculate the widths) if the
	         * tables widths are passed in using `columns`.
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.autoWidth
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "autoWidth": false
	         *      } );
	         *    } );
	         */
	        "bAutoWidth": true,
	    
	    
	        /**
	         * Deferred rendering can provide DataTables with a huge speed boost when you
	         * are using an Ajax or JS data source for the table. This option, when set to
	         * true, will cause DataTables to defer the creation of the table elements for
	         * each row until they are needed for a draw - saving a significant amount of
	         * time.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.deferRender
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "ajax": "sources/arrays.txt",
	         *        "deferRender": true
	         *      } );
	         *    } );
	         */
	        "bDeferRender": false,
	    
	    
	        /**
	         * Replace a DataTable which matches the given selector and replace it with
	         * one which has the properties of the new initialisation object passed. If no
	         * table matches the selector, then the new DataTable will be constructed as
	         * per normal.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.destroy
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "srollY": "200px",
	         *        "paginate": false
	         *      } );
	         *
	         *      // Some time later....
	         *      $('#example').dataTable( {
	         *        "filter": false,
	         *        "destroy": true
	         *      } );
	         *    } );
	         */
	        "bDestroy": false,
	    
	    
	        /**
	         * Enable or disable filtering of data. Filtering in DataTables is "smart" in
	         * that it allows the end user to input multiple words (space separated) and
	         * will match a row containing those words, even if not in the order that was
	         * specified (this allow matching across multiple columns). Note that if you
	         * wish to use filtering in DataTables this must remain 'true' - to remove the
	         * default filtering input box and retain filtering abilities, please use
	         * {@link DataTable.defaults.dom}.
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.searching
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "searching": false
	         *      } );
	         *    } );
	         */
	        "bFilter": true,
	    
	    
	        /**
	         * Enable or disable the table information display. This shows information
	         * about the data that is currently visible on the page, including information
	         * about filtered data if that action is being performed.
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.info
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "info": false
	         *      } );
	         *    } );
	         */
	        "bInfo": true,
	    
	    
	        /**
	         * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
	         * slightly different and additional mark-up from what DataTables has
	         * traditionally used).
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.jQueryUI
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "jQueryUI": true
	         *      } );
	         *    } );
	         */
	        "bJQueryUI": false,
	    
	    
	        /**
	         * Allows the end user to select the size of a formatted page from a select
	         * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.lengthChange
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "lengthChange": false
	         *      } );
	         *    } );
	         */
	        "bLengthChange": true,
	    
	    
	        /**
	         * Enable or disable pagination.
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.paging
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "paging": false
	         *      } );
	         *    } );
	         */
	        "bPaginate": true,
	    
	    
	        /**
	         * Enable or disable the display of a 'processing' indicator when the table is
	         * being processed (e.g. a sort). This is particularly useful for tables with
	         * large amounts of data where it can take a noticeable amount of time to sort
	         * the entries.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.processing
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "processing": true
	         *      } );
	         *    } );
	         */
	        "bProcessing": false,
	    
	    
	        /**
	         * Retrieve the DataTables object for the given selector. Note that if the
	         * table has already been initialised, this parameter will cause DataTables
	         * to simply return the object that has already been set up - it will not take
	         * account of any changes you might have made to the initialisation object
	         * passed to DataTables (setting this parameter to true is an acknowledgement
	         * that you understand this). `destroy` can be used to reinitialise a table if
	         * you need.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.retrieve
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      initTable();
	         *      tableActions();
	         *    } );
	         *
	         *    function initTable ()
	         *    {
	         *      return $('#example').dataTable( {
	         *        "scrollY": "200px",
	         *        "paginate": false,
	         *        "retrieve": true
	         *      } );
	         *    }
	         *
	         *    function tableActions ()
	         *    {
	         *      var table = initTable();
	         *      // perform API operations with oTable
	         *    }
	         */
	        "bRetrieve": false,
	    
	    
	        /**
	         * When vertical (y) scrolling is enabled, DataTables will force the height of
	         * the table's viewport to the given height at all times (useful for layout).
	         * However, this can look odd when filtering data down to a small data set,
	         * and the footer is left "floating" further down. This parameter (when
	         * enabled) will cause DataTables to collapse the table's viewport down when
	         * the result set will fit within the given Y height.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.scrollCollapse
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "scrollY": "200",
	         *        "scrollCollapse": true
	         *      } );
	         *    } );
	         */
	        "bScrollCollapse": false,
	    
	    
	        /**
	         * Configure DataTables to use server-side processing. Note that the
	         * `ajax` parameter must also be given in order to give DataTables a
	         * source to obtain the required data for each draw.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Features
	         *  @dtopt Server-side
	         *  @name DataTable.defaults.serverSide
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "serverSide": true,
	         *        "ajax": "xhr.php"
	         *      } );
	         *    } );
	         */
	        "bServerSide": false,
	    
	    
	        /**
	         * Enable or disable sorting of columns. Sorting of individual columns can be
	         * disabled by the `sortable` option for each column.
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.ordering
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "ordering": false
	         *      } );
	         *    } );
	         */
	        "bSort": true,
	    
	    
	        /**
	         * Enable or display DataTables' ability to sort multiple columns at the
	         * same time (activated by shift-click by the user).
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.orderMulti
	         *
	         *  @example
	         *    // Disable multiple column sorting ability
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "orderMulti": false
	         *      } );
	         *    } );
	         */
	        "bSortMulti": true,
	    
	    
	        /**
	         * Allows control over whether DataTables should use the top (true) unique
	         * cell that is found for a single column, or the bottom (false - default).
	         * This is useful when using complex headers.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.orderCellsTop
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "orderCellsTop": true
	         *      } );
	         *    } );
	         */
	        "bSortCellsTop": false,
	    
	    
	        /**
	         * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
	         * `sorting\_3` to the columns which are currently being sorted on. This is
	         * presented as a feature switch as it can increase processing time (while
	         * classes are removed and added) so for large data sets you might want to
	         * turn this off.
	         *  @type boolean
	         *  @default true
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.orderClasses
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "orderClasses": false
	         *      } );
	         *    } );
	         */
	        "bSortClasses": true,
	    
	    
	        /**
	         * Enable or disable state saving. When enabled HTML5 `localStorage` will be
	         * used to save table display information such as pagination information,
	         * display length, filtering and sorting. As such when the end user reloads
	         * the page the display display will match what thy had previously set up.
	         *
	         * Due to the use of `localStorage` the default state saving is not supported
	         * in IE6 or 7. If state saving is required in those browsers, use
	         * `stateSaveCallback` to provide a storage solution such as cookies.
	         *  @type boolean
	         *  @default false
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.stateSave
	         *
	         *  @example
	         *    $(document).ready( function () {
	         *      $('#example').dataTable( {
	         *        "stateSave": true
	         *      } );
	         *    } );
	         */
	        "bStateSave": false,
	    
	    
	        /**
	         * This function is called when a TR element is created (and all TD child
	         * elements have been inserted), or registered if using a DOM source, allowing
	         * manipulation of the TR element (adding classes etc).
	         *  @type function
	         *  @param {node} row "TR" element for the current row
	         *  @param {array} data Raw data array for this row
	         *  @param {int} dataIndex The index of this row in the internal aoData array
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.createdRow
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "createdRow": function( row, data, dataIndex ) {
	         *          // Bold the grade for all 'A' grade browsers
	         *          if ( data[4] == "A" )
	         *          {
	         *            $('td:eq(4)', row).html( '<b>A</b>' );
	         *          }
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnCreatedRow": null,
	    
	    
	        /**
	         * This function is called on every 'draw' event, and allows you to
	         * dynamically modify any aspect you want about the created DOM.
	         *  @type function
	         *  @param {object} settings DataTables settings object
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.drawCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "drawCallback": function( settings ) {
	         *          alert( 'DataTables has redrawn the table' );
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnDrawCallback": null,
	    
	    
	        /**
	         * Identical to fnHeaderCallback() but for the table footer this function
	         * allows you to modify the table footer on every 'draw' event.
	         *  @type function
	         *  @param {node} foot "TR" element for the footer
	         *  @param {array} data Full table data (as derived from the original HTML)
	         *  @param {int} start Index for the current display starting point in the
	         *    display array
	         *  @param {int} end Index for the current display ending point in the
	         *    display array
	         *  @param {array int} display Index array to translate the visual position
	         *    to the full data array
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.footerCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "footerCallback": function( tfoot, data, start, end, display ) {
	         *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
	         *        }
	         *      } );
	         *    } )
	         */
	        "fnFooterCallback": null,
	    
	    
	        /**
	         * When rendering large numbers in the information element for the table
	         * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
	         * to have a comma separator for the 'thousands' units (e.g. 1 million is
	         * rendered as "1,000,000") to help readability for the end user. This
	         * function will override the default method DataTables uses.
	         *  @type function
	         *  @member
	         *  @param {int} toFormat number to be formatted
	         *  @returns {string} formatted string for DataTables to show the number
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.formatNumber
	         *
	         *  @example
	         *    // Format a number using a single quote for the separator (note that
	         *    // this can also be done with the language.thousands option)
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "formatNumber": function ( toFormat ) {
	         *          return toFormat.toString().replace(
	         *            /\B(?=(\d{3})+(?!\d))/g, "'"
	         *          );
	         *        };
	         *      } );
	         *    } );
	         */
	        "fnFormatNumber": function ( toFormat ) {
	            return toFormat.toString().replace(
	                /\B(?=(\d{3})+(?!\d))/g,
	                this.oLanguage.sThousands
	            );
	        },
	    
	    
	        /**
	         * This function is called on every 'draw' event, and allows you to
	         * dynamically modify the header row. This can be used to calculate and
	         * display useful information about the table.
	         *  @type function
	         *  @param {node} head "TR" element for the header
	         *  @param {array} data Full table data (as derived from the original HTML)
	         *  @param {int} start Index for the current display starting point in the
	         *    display array
	         *  @param {int} end Index for the current display ending point in the
	         *    display array
	         *  @param {array int} display Index array to translate the visual position
	         *    to the full data array
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.headerCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "fheaderCallback": function( head, data, start, end, display ) {
	         *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
	         *        }
	         *      } );
	         *    } )
	         */
	        "fnHeaderCallback": null,
	    
	    
	        /**
	         * The information element can be used to convey information about the current
	         * state of the table. Although the internationalisation options presented by
	         * DataTables are quite capable of dealing with most customisations, there may
	         * be times where you wish to customise the string further. This callback
	         * allows you to do exactly that.
	         *  @type function
	         *  @param {object} oSettings DataTables settings object
	         *  @param {int} start Starting position in data for the draw
	         *  @param {int} end End position in data for the draw
	         *  @param {int} max Total number of rows in the table (regardless of
	         *    filtering)
	         *  @param {int} total Total number of rows in the data set, after filtering
	         *  @param {string} pre The string that DataTables has formatted using it's
	         *    own rules
	         *  @returns {string} The string to be displayed in the information element.
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.infoCallback
	         *
	         *  @example
	         *    $('#example').dataTable( {
	         *      "infoCallback": function( settings, start, end, max, total, pre ) {
	         *        return start +" to "+ end;
	         *      }
	         *    } );
	         */
	        "fnInfoCallback": null,
	    
	    
	        /**
	         * Called when the table has been initialised. Normally DataTables will
	         * initialise sequentially and there will be no need for this function,
	         * however, this does not hold true when using external language information
	         * since that is obtained using an async XHR call.
	         *  @type function
	         *  @param {object} settings DataTables settings object
	         *  @param {object} json The JSON object request from the server - only
	         *    present if client-side Ajax sourced data is used
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.initComplete
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "initComplete": function(settings, json) {
	         *          alert( 'DataTables has finished its initialisation.' );
	         *        }
	         *      } );
	         *    } )
	         */
	        "fnInitComplete": null,
	    
	    
	        /**
	         * Called at the very start of each table draw and can be used to cancel the
	         * draw by returning false, any other return (including undefined) results in
	         * the full draw occurring).
	         *  @type function
	         *  @param {object} settings DataTables settings object
	         *  @returns {boolean} False will cancel the draw, anything else (including no
	         *    return) will allow it to complete.
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.preDrawCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "preDrawCallback": function( settings ) {
	         *          if ( $('#test').val() == 1 ) {
	         *            return false;
	         *          }
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnPreDrawCallback": null,
	    
	    
	        /**
	         * This function allows you to 'post process' each row after it have been
	         * generated for each table draw, but before it is rendered on screen. This
	         * function might be used for setting the row class name etc.
	         *  @type function
	         *  @param {node} row "TR" element for the current row
	         *  @param {array} data Raw data array for this row
	         *  @param {int} displayIndex The display index for the current table draw
	         *  @param {int} displayIndexFull The index of the data in the full list of
	         *    rows (after filtering)
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.rowCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
	         *          // Bold the grade for all 'A' grade browsers
	         *          if ( data[4] == "A" ) {
	         *            $('td:eq(4)', row).html( '<b>A</b>' );
	         *          }
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnRowCallback": null,
	    
	    
	        /**
	         * __Deprecated__ The functionality provided by this parameter has now been
	         * superseded by that provided through `ajax`, which should be used instead.
	         *
	         * This parameter allows you to override the default function which obtains
	         * the data from the server so something more suitable for your application.
	         * For example you could use POST data, or pull information from a Gears or
	         * AIR database.
	         *  @type function
	         *  @member
	         *  @param {string} source HTTP source to obtain the data from (`ajax`)
	         *  @param {array} data A key/value pair object containing the data to send
	         *    to the server
	         *  @param {function} callback to be called on completion of the data get
	         *    process that will draw the data on the page.
	         *  @param {object} settings DataTables settings object
	         *
	         *  @dtopt Callbacks
	         *  @dtopt Server-side
	         *  @name DataTable.defaults.serverData
	         *
	         *  @deprecated 1.10. Please use `ajax` for this functionality now.
	         */
	        "fnServerData": null,
	    
	    
	        /**
	         * __Deprecated__ The functionality provided by this parameter has now been
	         * superseded by that provided through `ajax`, which should be used instead.
	         *
	         *  It is often useful to send extra data to the server when making an Ajax
	         * request - for example custom filtering information, and this callback
	         * function makes it trivial to send extra information to the server. The
	         * passed in parameter is the data set that has been constructed by
	         * DataTables, and you can add to this or modify it as you require.
	         *  @type function
	         *  @param {array} data Data array (array of objects which are name/value
	         *    pairs) that has been constructed by DataTables and will be sent to the
	         *    server. In the case of Ajax sourced data with server-side processing
	         *    this will be an empty array, for server-side processing there will be a
	         *    significant number of parameters!
	         *  @returns {undefined} Ensure that you modify the data array passed in,
	         *    as this is passed by reference.
	         *
	         *  @dtopt Callbacks
	         *  @dtopt Server-side
	         *  @name DataTable.defaults.serverParams
	         *
	         *  @deprecated 1.10. Please use `ajax` for this functionality now.
	         */
	        "fnServerParams": null,
	    
	    
	        /**
	         * Load the table state. With this function you can define from where, and how, the
	         * state of a table is loaded. By default DataTables will load from `localStorage`
	         * but you might wish to use a server-side database or cookies.
	         *  @type function
	         *  @member
	         *  @param {object} settings DataTables settings object
	         *  @return {object} The DataTables state object to be loaded
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.stateLoadCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateSave": true,
	         *        "stateLoadCallback": function (settings) {
	         *          var o;
	         *
	         *          // Send an Ajax request to the server to get the data. Note that
	         *          // this is a synchronous request.
	         *          $.ajax( {
	         *            "url": "/state_load",
	         *            "async": false,
	         *            "dataType": "json",
	         *            "success": function (json) {
	         *              o = json;
	         *            }
	         *          } );
	         *
	         *          return o;
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnStateLoadCallback": function ( settings ) {
	            try {
	                return JSON.parse(
	                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
	                        'DataTables_'+settings.sInstance+'_'+location.pathname
	                    )
	                );
	            } catch (e) {}
	        },
	    
	    
	        /**
	         * Callback which allows modification of the saved state prior to loading that state.
	         * This callback is called when the table is loading state from the stored data, but
	         * prior to the settings object being modified by the saved state. Note that for
	         * plug-in authors, you should use the `stateLoadParams` event to load parameters for
	         * a plug-in.
	         *  @type function
	         *  @param {object} settings DataTables settings object
	         *  @param {object} data The state object that is to be loaded
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.stateLoadParams
	         *
	         *  @example
	         *    // Remove a saved filter, so filtering is never loaded
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateSave": true,
	         *        "stateLoadParams": function (settings, data) {
	         *          data.oSearch.sSearch = "";
	         *        }
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Disallow state loading by returning false
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateSave": true,
	         *        "stateLoadParams": function (settings, data) {
	         *          return false;
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnStateLoadParams": null,
	    
	    
	        /**
	         * Callback that is called when the state has been loaded from the state saving method
	         * and the DataTables settings object has been modified as a result of the loaded state.
	         *  @type function
	         *  @param {object} settings DataTables settings object
	         *  @param {object} data The state object that was loaded
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.stateLoaded
	         *
	         *  @example
	         *    // Show an alert with the filtering value that was saved
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateSave": true,
	         *        "stateLoaded": function (settings, data) {
	         *          alert( 'Saved filter was: '+data.oSearch.sSearch );
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnStateLoaded": null,
	    
	    
	        /**
	         * Save the table state. This function allows you to define where and how the state
	         * information for the table is stored By default DataTables will use `localStorage`
	         * but you might wish to use a server-side database or cookies.
	         *  @type function
	         *  @member
	         *  @param {object} settings DataTables settings object
	         *  @param {object} data The state object to be saved
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.stateSaveCallback
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateSave": true,
	         *        "stateSaveCallback": function (settings, data) {
	         *          // Send an Ajax request to the server with the state object
	         *          $.ajax( {
	         *            "url": "/state_save",
	         *            "data": data,
	         *            "dataType": "json",
	         *            "method": "POST"
	         *            "success": function () {}
	         *          } );
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnStateSaveCallback": function ( settings, data ) {
	            try {
	                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
	                    'DataTables_'+settings.sInstance+'_'+location.pathname,
	                    JSON.stringify( data )
	                );
	            } catch (e) {}
	        },
	    
	    
	        /**
	         * Callback which allows modification of the state to be saved. Called when the table
	         * has changed state a new state save is required. This method allows modification of
	         * the state saving object prior to actually doing the save, including addition or
	         * other state properties or modification. Note that for plug-in authors, you should
	         * use the `stateSaveParams` event to save parameters for a plug-in.
	         *  @type function
	         *  @param {object} settings DataTables settings object
	         *  @param {object} data The state object to be saved
	         *
	         *  @dtopt Callbacks
	         *  @name DataTable.defaults.stateSaveParams
	         *
	         *  @example
	         *    // Remove a saved filter, so filtering is never saved
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateSave": true,
	         *        "stateSaveParams": function (settings, data) {
	         *          data.oSearch.sSearch = "";
	         *        }
	         *      } );
	         *    } );
	         */
	        "fnStateSaveParams": null,
	    
	    
	        /**
	         * Duration for which the saved state information is considered valid. After this period
	         * has elapsed the state will be returned to the default.
	         * Value is given in seconds.
	         *  @type int
	         *  @default 7200 <i>(2 hours)</i>
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.stateDuration
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "stateDuration": 60*60*24; // 1 day
	         *      } );
	         *    } )
	         */
	        "iStateDuration": 7200,
	    
	    
	        /**
	         * When enabled DataTables will not make a request to the server for the first
	         * page draw - rather it will use the data already on the page (no sorting etc
	         * will be applied to it), thus saving on an XHR at load time. `deferLoading`
	         * is used to indicate that deferred loading is required, but it is also used
	         * to tell DataTables how many records there are in the full table (allowing
	         * the information element and pagination to be displayed correctly). In the case
	         * where a filtering is applied to the table on initial load, this can be
	         * indicated by giving the parameter as an array, where the first element is
	         * the number of records available after filtering and the second element is the
	         * number of records without filtering (allowing the table information element
	         * to be shown correctly).
	         *  @type int | array
	         *  @default null
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.deferLoading
	         *
	         *  @example
	         *    // 57 records available in the table, no filtering applied
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "serverSide": true,
	         *        "ajax": "scripts/server_processing.php",
	         *        "deferLoading": 57
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // 57 records after filtering, 100 without filtering (an initial filter applied)
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "serverSide": true,
	         *        "ajax": "scripts/server_processing.php",
	         *        "deferLoading": [ 57, 100 ],
	         *        "search": {
	         *          "search": "my_filter"
	         *        }
	         *      } );
	         *    } );
	         */
	        "iDeferLoading": null,
	    
	    
	        /**
	         * Number of rows to display on a single page when using pagination. If
	         * feature enabled (`lengthChange`) then the end user will be able to override
	         * this to a custom setting using a pop-up menu.
	         *  @type int
	         *  @default 10
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.pageLength
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "pageLength": 50
	         *      } );
	         *    } )
	         */
	        "iDisplayLength": 10,
	    
	    
	        /**
	         * Define the starting point for data display when using DataTables with
	         * pagination. Note that this parameter is the number of records, rather than
	         * the page number, so if you have 10 records per page and want to start on
	         * the third page, it should be "20".
	         *  @type int
	         *  @default 0
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.displayStart
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "displayStart": 20
	         *      } );
	         *    } )
	         */
	        "iDisplayStart": 0,
	    
	    
	        /**
	         * By default DataTables allows keyboard navigation of the table (sorting, paging,
	         * and filtering) by adding a `tabindex` attribute to the required elements. This
	         * allows you to tab through the controls and press the enter key to activate them.
	         * The tabindex is default 0, meaning that the tab follows the flow of the document.
	         * You can overrule this using this parameter if you wish. Use a value of -1 to
	         * disable built-in keyboard navigation.
	         *  @type int
	         *  @default 0
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.tabIndex
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "tabIndex": 1
	         *      } );
	         *    } );
	         */
	        "iTabIndex": 0,
	    
	    
	        /**
	         * Classes that DataTables assigns to the various components and features
	         * that it adds to the HTML table. This allows classes to be configured
	         * during initialisation in addition to through the static
	         * {@link DataTable.ext.oStdClasses} object).
	         *  @namespace
	         *  @name DataTable.defaults.classes
	         */
	        "oClasses": {},
	    
	    
	        /**
	         * All strings that DataTables uses in the user interface that it creates
	         * are defined in this object, allowing you to modified them individually or
	         * completely replace them all as required.
	         *  @namespace
	         *  @name DataTable.defaults.language
	         */
	        "oLanguage": {
	            /**
	             * Strings that are used for WAI-ARIA labels and controls only (these are not
	             * actually visible on the page, but will be read by screenreaders, and thus
	             * must be internationalised as well).
	             *  @namespace
	             *  @name DataTable.defaults.language.aria
	             */
	            "oAria": {
	                /**
	                 * ARIA label that is added to the table headers when the column may be
	                 * sorted ascending by activing the column (click or return when focused).
	                 * Note that the column header is prefixed to this string.
	                 *  @type string
	                 *  @default : activate to sort column ascending
	                 *
	                 *  @dtopt Language
	                 *  @name DataTable.defaults.language.aria.sortAscending
	                 *
	                 *  @example
	                 *    $(document).ready( function() {
	                 *      $('#example').dataTable( {
	                 *        "language": {
	                 *          "aria": {
	                 *            "sortAscending": " - click/return to sort ascending"
	                 *          }
	                 *        }
	                 *      } );
	                 *    } );
	                 */
	                "sSortAscending": ": activate to sort column ascending",
	    
	                /**
	                 * ARIA label that is added to the table headers when the column may be
	                 * sorted descending by activing the column (click or return when focused).
	                 * Note that the column header is prefixed to this string.
	                 *  @type string
	                 *  @default : activate to sort column ascending
	                 *
	                 *  @dtopt Language
	                 *  @name DataTable.defaults.language.aria.sortDescending
	                 *
	                 *  @example
	                 *    $(document).ready( function() {
	                 *      $('#example').dataTable( {
	                 *        "language": {
	                 *          "aria": {
	                 *            "sortDescending": " - click/return to sort descending"
	                 *          }
	                 *        }
	                 *      } );
	                 *    } );
	                 */
	                "sSortDescending": ": activate to sort column descending"
	            },
	    
	            /**
	             * Pagination string used by DataTables for the built-in pagination
	             * control types.
	             *  @namespace
	             *  @name DataTable.defaults.language.paginate
	             */
	            "oPaginate": {
	                /**
	                 * Text to use when using the 'full_numbers' type of pagination for the
	                 * button to take the user to the first page.
	                 *  @type string
	                 *  @default First
	                 *
	                 *  @dtopt Language
	                 *  @name DataTable.defaults.language.paginate.first
	                 *
	                 *  @example
	                 *    $(document).ready( function() {
	                 *      $('#example').dataTable( {
	                 *        "language": {
	                 *          "paginate": {
	                 *            "first": "First page"
	                 *          }
	                 *        }
	                 *      } );
	                 *    } );
	                 */
	                "sFirst": "First",
	    
	    
	                /**
	                 * Text to use when using the 'full_numbers' type of pagination for the
	                 * button to take the user to the last page.
	                 *  @type string
	                 *  @default Last
	                 *
	                 *  @dtopt Language
	                 *  @name DataTable.defaults.language.paginate.last
	                 *
	                 *  @example
	                 *    $(document).ready( function() {
	                 *      $('#example').dataTable( {
	                 *        "language": {
	                 *          "paginate": {
	                 *            "last": "Last page"
	                 *          }
	                 *        }
	                 *      } );
	                 *    } );
	                 */
	                "sLast": "Last",
	    
	    
	                /**
	                 * Text to use for the 'next' pagination button (to take the user to the
	                 * next page).
	                 *  @type string
	                 *  @default Next
	                 *
	                 *  @dtopt Language
	                 *  @name DataTable.defaults.language.paginate.next
	                 *
	                 *  @example
	                 *    $(document).ready( function() {
	                 *      $('#example').dataTable( {
	                 *        "language": {
	                 *          "paginate": {
	                 *            "next": "Next page"
	                 *          }
	                 *        }
	                 *      } );
	                 *    } );
	                 */
	                "sNext": "Next",
	    
	    
	                /**
	                 * Text to use for the 'previous' pagination button (to take the user to
	                 * the previous page).
	                 *  @type string
	                 *  @default Previous
	                 *
	                 *  @dtopt Language
	                 *  @name DataTable.defaults.language.paginate.previous
	                 *
	                 *  @example
	                 *    $(document).ready( function() {
	                 *      $('#example').dataTable( {
	                 *        "language": {
	                 *          "paginate": {
	                 *            "previous": "Previous page"
	                 *          }
	                 *        }
	                 *      } );
	                 *    } );
	                 */
	                "sPrevious": "Previous"
	            },
	    
	            /**
	             * This string is shown in preference to `zeroRecords` when the table is
	             * empty of data (regardless of filtering). Note that this is an optional
	             * parameter - if it is not given, the value of `zeroRecords` will be used
	             * instead (either the default or given value).
	             *  @type string
	             *  @default No data available in table
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.emptyTable
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "emptyTable": "No data available in table"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sEmptyTable": "No data available in table",
	    
	    
	            /**
	             * This string gives information to the end user about the information
	             * that is current on display on the page. The following tokens can be
	             * used in the string and will be dynamically replaced as the table
	             * display updates. This tokens can be placed anywhere in the string, or
	             * removed as needed by the language requires:
	             *
	             * * `\_START\_` - Display index of the first record on the current page
	             * * `\_END\_` - Display index of the last record on the current page
	             * * `\_TOTAL\_` - Number of records in the table after filtering
	             * * `\_MAX\_` - Number of records in the table without filtering
	             * * `\_PAGE\_` - Current page number
	             * * `\_PAGES\_` - Total number of pages of data in the table
	             *
	             *  @type string
	             *  @default Showing _START_ to _END_ of _TOTAL_ entries
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.info
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "info": "Showing page _PAGE_ of _PAGES_"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
	    
	    
	            /**
	             * Display information string for when the table is empty. Typically the
	             * format of this string should match `info`.
	             *  @type string
	             *  @default Showing 0 to 0 of 0 entries
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.infoEmpty
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "infoEmpty": "No entries to show"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sInfoEmpty": "Showing 0 to 0 of 0 entries",
	    
	    
	            /**
	             * When a user filters the information in a table, this string is appended
	             * to the information (`info`) to give an idea of how strong the filtering
	             * is. The variable _MAX_ is dynamically updated.
	             *  @type string
	             *  @default (filtered from _MAX_ total entries)
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.infoFiltered
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "infoFiltered": " - filtering from _MAX_ records"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sInfoFiltered": "(filtered from _MAX_ total entries)",
	    
	    
	            /**
	             * If can be useful to append extra information to the info string at times,
	             * and this variable does exactly that. This information will be appended to
	             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
	             * being used) at all times.
	             *  @type string
	             *  @default <i>Empty string</i>
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.infoPostFix
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "infoPostFix": "All records shown are derived from real information."
	             *        }
	             *      } );
	             *    } );
	             */
	            "sInfoPostFix": "",
	    
	    
	            /**
	             * This decimal place operator is a little different from the other
	             * language options since DataTables doesn't output floating point
	             * numbers, so it won't ever use this for display of a number. Rather,
	             * what this parameter does is modify the sort methods of the table so
	             * that numbers which are in a format which has a character other than
	             * a period (`.`) as a decimal place will be sorted numerically.
	             *
	             * Note that numbers with different decimal places cannot be shown in
	             * the same table and still be sortable, the table must be consistent.
	             * However, multiple different tables on the page can use different
	             * decimal place characters.
	             *  @type string
	             *  @default 
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.decimal
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "decimal": ","
	             *          "thousands": "."
	             *        }
	             *      } );
	             *    } );
	             */
	            "sDecimal": "",
	    
	    
	            /**
	             * DataTables has a build in number formatter (`formatNumber`) which is
	             * used to format large numbers that are used in the table information.
	             * By default a comma is used, but this can be trivially changed to any
	             * character you wish with this parameter.
	             *  @type string
	             *  @default ,
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.thousands
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "thousands": "'"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sThousands": ",",
	    
	    
	            /**
	             * Detail the action that will be taken when the drop down menu for the
	             * pagination length option is changed. The '_MENU_' variable is replaced
	             * with a default select list of 10, 25, 50 and 100, and can be replaced
	             * with a custom select box if required.
	             *  @type string
	             *  @default Show _MENU_ entries
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.lengthMenu
	             *
	             *  @example
	             *    // Language change only
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "lengthMenu": "Display _MENU_ records"
	             *        }
	             *      } );
	             *    } );
	             *
	             *  @example
	             *    // Language and options change
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "lengthMenu": 'Display <select>'+
	             *            '<option value="10">10</option>'+
	             *            '<option value="20">20</option>'+
	             *            '<option value="30">30</option>'+
	             *            '<option value="40">40</option>'+
	             *            '<option value="50">50</option>'+
	             *            '<option value="-1">All</option>'+
	             *            '</select> records'
	             *        }
	             *      } );
	             *    } );
	             */
	            "sLengthMenu": "Show _MENU_ entries",
	    
	    
	            /**
	             * When using Ajax sourced data and during the first draw when DataTables is
	             * gathering the data, this message is shown in an empty row in the table to
	             * indicate to the end user the the data is being loaded. Note that this
	             * parameter is not used when loading data by server-side processing, just
	             * Ajax sourced data with client-side processing.
	             *  @type string
	             *  @default Loading...
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.loadingRecords
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "loadingRecords": "Please wait - loading..."
	             *        }
	             *      } );
	             *    } );
	             */
	            "sLoadingRecords": "Loading...",
	    
	    
	            /**
	             * Text which is displayed when the table is processing a user action
	             * (usually a sort command or similar).
	             *  @type string
	             *  @default Processing...
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.processing
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "processing": "DataTables is currently busy"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sProcessing": "Processing...",
	    
	    
	            /**
	             * Details the actions that will be taken when the user types into the
	             * filtering input text box. The variable "_INPUT_", if used in the string,
	             * is replaced with the HTML text box for the filtering input allowing
	             * control over where it appears in the string. If "_INPUT_" is not given
	             * then the input box is appended to the string automatically.
	             *  @type string
	             *  @default Search:
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.search
	             *
	             *  @example
	             *    // Input text box will be appended at the end automatically
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "search": "Filter records:"
	             *        }
	             *      } );
	             *    } );
	             *
	             *  @example
	             *    // Specify where the filter should appear
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "search": "Apply filter _INPUT_ to table"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sSearch": "Search:",
	    
	    
	            /**
	             * Assign a `placeholder` attribute to the search `input` element
	             *  @type string
	             *  @default 
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.searchPlaceholder
	             */
	            "sSearchPlaceholder": "",
	    
	    
	            /**
	             * All of the language information can be stored in a file on the
	             * server-side, which DataTables will look up if this parameter is passed.
	             * It must store the URL of the language file, which is in a JSON format,
	             * and the object has the same properties as the oLanguage object in the
	             * initialiser object (i.e. the above parameters). Please refer to one of
	             * the example language files to see how this works in action.
	             *  @type string
	             *  @default <i>Empty string - i.e. disabled</i>
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.url
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sUrl": "",
	    
	    
	            /**
	             * Text shown inside the table records when the is no information to be
	             * displayed after filtering. `emptyTable` is shown when there is simply no
	             * information in the table at all (regardless of filtering).
	             *  @type string
	             *  @default No matching records found
	             *
	             *  @dtopt Language
	             *  @name DataTable.defaults.language.zeroRecords
	             *
	             *  @example
	             *    $(document).ready( function() {
	             *      $('#example').dataTable( {
	             *        "language": {
	             *          "zeroRecords": "No records to display"
	             *        }
	             *      } );
	             *    } );
	             */
	            "sZeroRecords": "No matching records found"
	        },
	    
	    
	        /**
	         * This parameter allows you to have define the global filtering state at
	         * initialisation time. As an object the `search` parameter must be
	         * defined, but all other parameters are optional. When `regex` is true,
	         * the search string will be treated as a regular expression, when false
	         * (default) it will be treated as a straight string. When `smart`
	         * DataTables will use it's smart filtering methods (to word match at
	         * any point in the data), when false this will not be done.
	         *  @namespace
	         *  @extends DataTable.models.oSearch
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.search
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "search": {"search": "Initial search"}
	         *      } );
	         *    } )
	         */
	        "oSearch": $.extend( {}, DataTable.models.oSearch ),
	    
	    
	        /**
	         * __Deprecated__ The functionality provided by this parameter has now been
	         * superseded by that provided through `ajax`, which should be used instead.
	         *
	         * By default DataTables will look for the property `data` (or `aaData` for
	         * compatibility with DataTables 1.9-) when obtaining data from an Ajax
	         * source or for server-side processing - this parameter allows that
	         * property to be changed. You can use Javascript dotted object notation to
	         * get a data source for multiple levels of nesting.
	         *  @type string
	         *  @default data
	         *
	         *  @dtopt Options
	         *  @dtopt Server-side
	         *  @name DataTable.defaults.ajaxDataProp
	         *
	         *  @deprecated 1.10. Please use `ajax` for this functionality now.
	         */
	        "sAjaxDataProp": "data",
	    
	    
	        /**
	         * __Deprecated__ The functionality provided by this parameter has now been
	         * superseded by that provided through `ajax`, which should be used instead.
	         *
	         * You can instruct DataTables to load data from an external
	         * source using this parameter (use aData if you want to pass data in you
	         * already have). Simply provide a url a JSON object can be obtained from.
	         *  @type string
	         *  @default null
	         *
	         *  @dtopt Options
	         *  @dtopt Server-side
	         *  @name DataTable.defaults.ajaxSource
	         *
	         *  @deprecated 1.10. Please use `ajax` for this functionality now.
	         */
	        "sAjaxSource": null,
	    
	    
	        /**
	         * This initialisation variable allows you to specify exactly where in the
	         * DOM you want DataTables to inject the various controls it adds to the page
	         * (for example you might want the pagination controls at the top of the
	         * table). DIV elements (with or without a custom class) can also be added to
	         * aid styling. The follow syntax is used:
	         *   <ul>
	         *     <li>The following options are allowed:
	         *       <ul>
	         *         <li>'l' - Length changing</li>
	         *         <li>'f' - Filtering input</li>
	         *         <li>'t' - The table!</li>
	         *         <li>'i' - Information</li>
	         *         <li>'p' - Pagination</li>
	         *         <li>'r' - pRocessing</li>
	         *       </ul>
	         *     </li>
	         *     <li>The following constants are allowed:
	         *       <ul>
	         *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
	         *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
	         *       </ul>
	         *     </li>
	         *     <li>The following syntax is expected:
	         *       <ul>
	         *         <li>'&lt;' and '&gt;' - div elements</li>
	         *         <li>'&lt;"class" and '&gt;' - div with a class</li>
	         *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
	         *       </ul>
	         *     </li>
	         *     <li>Examples:
	         *       <ul>
	         *         <li>'&lt;"wrapper"flipt&gt;'</li>
	         *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
	         *       </ul>
	         *     </li>
	         *   </ul>
	         *  @type string
	         *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
	         *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.dom
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
	         *      } );
	         *    } );
	         */
	        "sDom": "lfrtip",
	    
	    
	        /**
	         * Search delay option. This will throttle full table searches that use the
	         * DataTables provided search input element (it does not effect calls to
	         * `dt-api search()`, providing a delay before the search is made.
	         *  @type integer
	         *  @default 0
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.searchDelay
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "searchDelay": 200
	         *      } );
	         *    } )
	         */
	        "searchDelay": null,
	    
	    
	        /**
	         * DataTables features four different built-in options for the buttons to
	         * display for pagination control:
	         *
	         * * `simple` - 'Previous' and 'Next' buttons only
	         * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
	         * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
	         * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
	         *   page numbers
	         *  
	         * Further methods can be added using {@link DataTable.ext.oPagination}.
	         *  @type string
	         *  @default simple_numbers
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.pagingType
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "pagingType": "full_numbers"
	         *      } );
	         *    } )
	         */
	        "sPaginationType": "simple_numbers",
	    
	    
	        /**
	         * Enable horizontal scrolling. When a table is too wide to fit into a
	         * certain layout, or you have a large number of columns in the table, you
	         * can enable x-scrolling to show the table in a viewport, which can be
	         * scrolled. This property can be `true` which will allow the table to
	         * scroll horizontally when needed, or any CSS unit, or a number (in which
	         * case it will be treated as a pixel measurement). Setting as simply `true`
	         * is recommended.
	         *  @type boolean|string
	         *  @default <i>blank string - i.e. disabled</i>
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.scrollX
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "scrollX": true,
	         *        "scrollCollapse": true
	         *      } );
	         *    } );
	         */
	        "sScrollX": "",
	    
	    
	        /**
	         * This property can be used to force a DataTable to use more width than it
	         * might otherwise do when x-scrolling is enabled. For example if you have a
	         * table which requires to be well spaced, this parameter is useful for
	         * "over-sizing" the table, and thus forcing scrolling. This property can by
	         * any CSS unit, or a number (in which case it will be treated as a pixel
	         * measurement).
	         *  @type string
	         *  @default <i>blank string - i.e. disabled</i>
	         *
	         *  @dtopt Options
	         *  @name DataTable.defaults.scrollXInner
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "scrollX": "100%",
	         *        "scrollXInner": "110%"
	         *      } );
	         *    } );
	         */
	        "sScrollXInner": "",
	    
	    
	        /**
	         * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
	         * to the given height, and enable scrolling for any data which overflows the
	         * current viewport. This can be used as an alternative to paging to display
	         * a lot of data in a small area (although paging and scrolling can both be
	         * enabled at the same time). This property can be any CSS unit, or a number
	         * (in which case it will be treated as a pixel measurement).
	         *  @type string
	         *  @default <i>blank string - i.e. disabled</i>
	         *
	         *  @dtopt Features
	         *  @name DataTable.defaults.scrollY
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "scrollY": "200px",
	         *        "paginate": false
	         *      } );
	         *    } );
	         */
	        "sScrollY": "",
	    
	    
	        /**
	         * __Deprecated__ The functionality provided by this parameter has now been
	         * superseded by that provided through `ajax`, which should be used instead.
	         *
	         * Set the HTTP method that is used to make the Ajax call for server-side
	         * processing or Ajax sourced data.
	         *  @type string
	         *  @default GET
	         *
	         *  @dtopt Options
	         *  @dtopt Server-side
	         *  @name DataTable.defaults.serverMethod
	         *
	         *  @deprecated 1.10. Please use `ajax` for this functionality now.
	         */
	        "sServerMethod": "GET",
	    
	    
	        /**
	         * DataTables makes use of renderers when displaying HTML elements for
	         * a table. These renderers can be added or modified by plug-ins to
	         * generate suitable mark-up for a site. For example the Bootstrap
	         * integration plug-in for DataTables uses a paging button renderer to
	         * display pagination buttons in the mark-up required by Bootstrap.
	         *
	         * For further information about the renderers available see
	         * DataTable.ext.renderer
	         *  @type string|object
	         *  @default null
	         *
	         *  @name DataTable.defaults.renderer
	         *
	         */
	        "renderer": null
	    };
	    
	    _fnHungarianMap( DataTable.defaults );
	    
	    
	    
	    /*
	     * Developer note - See note in model.defaults.js about the use of Hungarian
	     * notation and camel case.
	     */
	    
	    /**
	     * Column options that can be given to DataTables at initialisation time.
	     *  @namespace
	     */
	    DataTable.defaults.column = {
	        /**
	         * Define which column(s) an order will occur on for this column. This
	         * allows a column's ordering to take multiple columns into account when
	         * doing a sort or use the data from a different column. For example first
	         * name / last name columns make sense to do a multi-column sort over the
	         * two columns.
	         *  @type array|int
	         *  @default null <i>Takes the value of the column index automatically</i>
	         *
	         *  @name DataTable.defaults.column.orderData
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
	         *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
	         *          { "orderData": 2, "targets": [ 2 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "orderData": [ 0, 1 ] },
	         *          { "orderData": [ 1, 0 ] },
	         *          { "orderData": 2 },
	         *          null,
	         *          null
	         *        ]
	         *      } );
	         *    } );
	         */
	        "aDataSort": null,
	        "iDataSort": -1,
	    
	    
	        /**
	         * You can control the default ordering direction, and even alter the
	         * behaviour of the sort handler (i.e. only allow ascending ordering etc)
	         * using this parameter.
	         *  @type array
	         *  @default [ 'asc', 'desc' ]
	         *
	         *  @name DataTable.defaults.column.orderSequence
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
	         *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
	         *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          null,
	         *          { "orderSequence": [ "asc" ] },
	         *          { "orderSequence": [ "desc", "asc", "asc" ] },
	         *          { "orderSequence": [ "desc" ] },
	         *          null
	         *        ]
	         *      } );
	         *    } );
	         */
	        "asSorting": [ 'asc', 'desc' ],
	    
	    
	        /**
	         * Enable or disable filtering on the data in this column.
	         *  @type boolean
	         *  @default true
	         *
	         *  @name DataTable.defaults.column.searchable
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "searchable": false, "targets": [ 0 ] }
	         *        ] } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "searchable": false },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ] } );
	         *    } );
	         */
	        "bSearchable": true,
	    
	    
	        /**
	         * Enable or disable ordering on this column.
	         *  @type boolean
	         *  @default true
	         *
	         *  @name DataTable.defaults.column.orderable
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "orderable": false, "targets": [ 0 ] }
	         *        ] } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "orderable": false },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ] } );
	         *    } );
	         */
	        "bSortable": true,
	    
	    
	        /**
	         * Enable or disable the display of this column.
	         *  @type boolean
	         *  @default true
	         *
	         *  @name DataTable.defaults.column.visible
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "visible": false, "targets": [ 0 ] }
	         *        ] } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "visible": false },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ] } );
	         *    } );
	         */
	        "bVisible": true,
	    
	    
	        /**
	         * Developer definable function that is called whenever a cell is created (Ajax source,
	         * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	         * allowing you to modify the DOM element (add background colour for example) when the
	         * element is available.
	         *  @type function
	         *  @param {element} td The TD node that has been created
	         *  @param {*} cellData The Data for the cell
	         *  @param {array|object} rowData The data for the whole row
	         *  @param {int} row The row index for the aoData data store
	         *  @param {int} col The column index for aoColumns
	         *
	         *  @name DataTable.defaults.column.createdCell
	         *  @dtopt Columns
	         *
	         *  @example
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [3],
	         *          "createdCell": function (td, cellData, rowData, row, col) {
	         *            if ( cellData == "1.7" ) {
	         *              $(td).css('color', 'blue')
	         *            }
	         *          }
	         *        } ]
	         *      });
	         *    } );
	         */
	        "fnCreatedCell": null,
	    
	    
	        /**
	         * This parameter has been replaced by `data` in DataTables to ensure naming
	         * consistency. `dataProp` can still be used, as there is backwards
	         * compatibility in DataTables for this option, but it is strongly
	         * recommended that you use `data` in preference to `dataProp`.
	         *  @name DataTable.defaults.column.dataProp
	         */
	    
	    
	        /**
	         * This property can be used to read data from any data source property,
	         * including deeply nested objects / properties. `data` can be given in a
	         * number of different ways which effect its behaviour:
	         *
	         * * `integer` - treated as an array index for the data source. This is the
	         *   default that DataTables uses (incrementally increased for each column).
	         * * `string` - read an object property from the data source. There are
	         *   three 'special' options that can be used in the string to alter how
	         *   DataTables reads the data from the source object:
	         *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	         *      Javascript to read from nested objects, so to can the options
	         *      specified in `data`. For example: `browser.version` or
	         *      `browser.name`. If your object parameter name contains a period, use
	         *      `\\` to escape it - i.e. `first\\.name`.
	         *    * `[]` - Array notation. DataTables can automatically combine data
	         *      from and array source, joining the data with the characters provided
	         *      between the two brackets. For example: `name[, ]` would provide a
	         *      comma-space separated list from the source array. If no characters
	         *      are provided between the brackets, the original array source is
	         *      returned.
	         *    * `()` - Function notation. Adding `()` to the end of a parameter will
	         *      execute a function of the name given. For example: `browser()` for a
	         *      simple function on the data source, `browser.version()` for a
	         *      function in a nested property or even `browser().version` to get an
	         *      object property if the function called returns an object. Note that
	         *      function notation is recommended for use in `render` rather than
	         *      `data` as it is much simpler to use as a renderer.
	         * * `null` - use the original data source for the row rather than plucking
	         *   data directly from it. This action has effects on two other
	         *   initialisation options:
	         *    * `defaultContent` - When null is given as the `data` option and
	         *      `defaultContent` is specified for the column, the value defined by
	         *      `defaultContent` will be used for the cell.
	         *    * `render` - When null is used for the `data` option and the `render`
	         *      option is specified for the column, the whole data source for the
	         *      row is used for the renderer.
	         * * `function` - the function given will be executed whenever DataTables
	         *   needs to set or get the data for a cell in the column. The function
	         *   takes three parameters:
	         *    * Parameters:
	         *      * `{array|object}` The data source for the row
	         *      * `{string}` The type call data requested - this will be 'set' when
	         *        setting data or 'filter', 'display', 'type', 'sort' or undefined
	         *        when gathering data. Note that when `undefined` is given for the
	         *        type DataTables expects to get the raw data for the object back<
	         *      * `{*}` Data to set when the second parameter is 'set'.
	         *    * Return:
	         *      * The return value from the function is not required when 'set' is
	         *        the type of call, but otherwise the return is what will be used
	         *        for the data requested.
	         *
	         * Note that `data` is a getter and setter option. If you just require
	         * formatting of data for output, you will likely want to use `render` which
	         * is simply a getter and thus simpler to use.
	         *
	         * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
	         * name change reflects the flexibility of this property and is consistent
	         * with the naming of mRender. If 'mDataProp' is given, then it will still
	         * be used by DataTables, as it automatically maps the old name to the new
	         * if required.
	         *
	         *  @type string|int|function|null
	         *  @default null <i>Use automatically calculated column index</i>
	         *
	         *  @name DataTable.defaults.column.data
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Read table data from objects
	         *    // JSON structure for each row:
	         *    //   {
	         *    //      "engine": {value},
	         *    //      "browser": {value},
	         *    //      "platform": {value},
	         *    //      "version": {value},
	         *    //      "grade": {value}
	         *    //   }
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "ajaxSource": "sources/objects.txt",
	         *        "columns": [
	         *          { "data": "engine" },
	         *          { "data": "browser" },
	         *          { "data": "platform" },
	         *          { "data": "version" },
	         *          { "data": "grade" }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Read information from deeply nested objects
	         *    // JSON structure for each row:
	         *    //   {
	         *    //      "engine": {value},
	         *    //      "browser": {value},
	         *    //      "platform": {
	         *    //         "inner": {value}
	         *    //      },
	         *    //      "details": [
	         *    //         {value}, {value}
	         *    //      ]
	         *    //   }
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "ajaxSource": "sources/deep.txt",
	         *        "columns": [
	         *          { "data": "engine" },
	         *          { "data": "browser" },
	         *          { "data": "platform.inner" },
	         *          { "data": "platform.details.0" },
	         *          { "data": "platform.details.1" }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `data` as a function to provide different information for
	         *    // sorting, filtering and display. In this case, currency (price)
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "data": function ( source, type, val ) {
	         *            if (type === 'set') {
	         *              source.price = val;
	         *              // Store the computed dislay and filter values for efficiency
	         *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
	         *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
	         *              return;
	         *            }
	         *            else if (type === 'display') {
	         *              return source.price_display;
	         *            }
	         *            else if (type === 'filter') {
	         *              return source.price_filter;
	         *            }
	         *            // 'sort', 'type' and undefined all just use the integer
	         *            return source.price;
	         *          }
	         *        } ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using default content
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "data": null,
	         *          "defaultContent": "Click to edit"
	         *        } ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using array notation - outputting a list from an array
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "data": "name[, ]"
	         *        } ]
	         *      } );
	         *    } );
	         *
	         */
	        "mData": null,
	    
	    
	        /**
	         * This property is the rendering partner to `data` and it is suggested that
	         * when you want to manipulate data for display (including filtering,
	         * sorting etc) without altering the underlying data for the table, use this
	         * property. `render` can be considered to be the the read only companion to
	         * `data` which is read / write (then as such more complex). Like `data`
	         * this option can be given in a number of different ways to effect its
	         * behaviour:
	         *
	         * * `integer` - treated as an array index for the data source. This is the
	         *   default that DataTables uses (incrementally increased for each column).
	         * * `string` - read an object property from the data source. There are
	         *   three 'special' options that can be used in the string to alter how
	         *   DataTables reads the data from the source object:
	         *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	         *      Javascript to read from nested objects, so to can the options
	         *      specified in `data`. For example: `browser.version` or
	         *      `browser.name`. If your object parameter name contains a period, use
	         *      `\\` to escape it - i.e. `first\\.name`.
	         *    * `[]` - Array notation. DataTables can automatically combine data
	         *      from and array source, joining the data with the characters provided
	         *      between the two brackets. For example: `name[, ]` would provide a
	         *      comma-space separated list from the source array. If no characters
	         *      are provided between the brackets, the original array source is
	         *      returned.
	         *    * `()` - Function notation. Adding `()` to the end of a parameter will
	         *      execute a function of the name given. For example: `browser()` for a
	         *      simple function on the data source, `browser.version()` for a
	         *      function in a nested property or even `browser().version` to get an
	         *      object property if the function called returns an object.
	         * * `object` - use different data for the different data types requested by
	         *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
	         *   of the object is the data type the property refers to and the value can
	         *   defined using an integer, string or function using the same rules as
	         *   `render` normally does. Note that an `_` option _must_ be specified.
	         *   This is the default value to use if you haven't specified a value for
	         *   the data type requested by DataTables.
	         * * `function` - the function given will be executed whenever DataTables
	         *   needs to set or get the data for a cell in the column. The function
	         *   takes three parameters:
	         *    * Parameters:
	         *      * {array|object} The data source for the row (based on `data`)
	         *      * {string} The type call data requested - this will be 'filter',
	         *        'display', 'type' or 'sort'.
	         *      * {array|object} The full data source for the row (not based on
	         *        `data`)
	         *    * Return:
	         *      * The return value from the function is what will be used for the
	         *        data requested.
	         *
	         *  @type string|int|function|object|null
	         *  @default null Use the data source value.
	         *
	         *  @name DataTable.defaults.column.render
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Create a comma separated list from an array of objects
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "ajaxSource": "sources/deep.txt",
	         *        "columns": [
	         *          { "data": "engine" },
	         *          { "data": "browser" },
	         *          {
	         *            "data": "platform",
	         *            "render": "[, ].name"
	         *          }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Execute a function to obtain data
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "data": null, // Use the full data source object for the renderer's source
	         *          "render": "browserName()"
	         *        } ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // As an object, extracting different data for the different types
	         *    // This would be used with a data source such as:
	         *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
	         *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
	         *    // (which has both forms) is used for filtering for if a user inputs either format, while
	         *    // the formatted phone number is the one that is shown in the table.
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "data": null, // Use the full data source object for the renderer's source
	         *          "render": {
	         *            "_": "phone",
	         *            "filter": "phone_filter",
	         *            "display": "phone_display"
	         *          }
	         *        } ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Use as a function to create a link from the data source
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "data": "download_link",
	         *          "render": function ( data, type, full ) {
	         *            return '<a href="'+data+'">Download</a>';
	         *          }
	         *        } ]
	         *      } );
	         *    } );
	         */
	        "mRender": null,
	    
	    
	        /**
	         * Change the cell type created for the column - either TD cells or TH cells. This
	         * can be useful as TH cells have semantic meaning in the table body, allowing them
	         * to act as a header for a row (you may wish to add scope='row' to the TH elements).
	         *  @type string
	         *  @default td
	         *
	         *  @name DataTable.defaults.column.cellType
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Make the first column use TH cells
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [ {
	         *          "targets": [ 0 ],
	         *          "cellType": "th"
	         *        } ]
	         *      } );
	         *    } );
	         */
	        "sCellType": "td",
	    
	    
	        /**
	         * Class to give to each cell in this column.
	         *  @type string
	         *  @default <i>Empty string</i>
	         *
	         *  @name DataTable.defaults.column.class
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "class": "my_class", "targets": [ 0 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "class": "my_class" },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sClass": "",
	    
	        /**
	         * When DataTables calculates the column widths to assign to each column,
	         * it finds the longest string in each column and then constructs a
	         * temporary table and reads the widths from that. The problem with this
	         * is that "mmm" is much wider then "iiii", but the latter is a longer
	         * string - thus the calculation can go wrong (doing it properly and putting
	         * it into an DOM object and measuring that is horribly(!) slow). Thus as
	         * a "work around" we provide this option. It will append its value to the
	         * text that is found to be the longest string for the column - i.e. padding.
	         * Generally you shouldn't need this!
	         *  @type string
	         *  @default <i>Empty string<i>
	         *
	         *  @name DataTable.defaults.column.contentPadding
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          null,
	         *          null,
	         *          null,
	         *          {
	         *            "contentPadding": "mmm"
	         *          }
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sContentPadding": "",
	    
	    
	        /**
	         * Allows a default value to be given for a column's data, and will be used
	         * whenever a null data source is encountered (this can be because `data`
	         * is set to null, or because the data source itself is null).
	         *  @type string
	         *  @default null
	         *
	         *  @name DataTable.defaults.column.defaultContent
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          {
	         *            "data": null,
	         *            "defaultContent": "Edit",
	         *            "targets": [ -1 ]
	         *          }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          null,
	         *          null,
	         *          null,
	         *          {
	         *            "data": null,
	         *            "defaultContent": "Edit"
	         *          }
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sDefaultContent": null,
	    
	    
	        /**
	         * This parameter is only used in DataTables' server-side processing. It can
	         * be exceptionally useful to know what columns are being displayed on the
	         * client side, and to map these to database fields. When defined, the names
	         * also allow DataTables to reorder information from the server if it comes
	         * back in an unexpected order (i.e. if you switch your columns around on the
	         * client-side, your server-side code does not also need updating).
	         *  @type string
	         *  @default <i>Empty string</i>
	         *
	         *  @name DataTable.defaults.column.name
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "name": "engine", "targets": [ 0 ] },
	         *          { "name": "browser", "targets": [ 1 ] },
	         *          { "name": "platform", "targets": [ 2 ] },
	         *          { "name": "version", "targets": [ 3 ] },
	         *          { "name": "grade", "targets": [ 4 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "name": "engine" },
	         *          { "name": "browser" },
	         *          { "name": "platform" },
	         *          { "name": "version" },
	         *          { "name": "grade" }
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sName": "",
	    
	    
	        /**
	         * Defines a data source type for the ordering which can be used to read
	         * real-time information from the table (updating the internally cached
	         * version) prior to ordering. This allows ordering to occur on user
	         * editable elements such as form inputs.
	         *  @type string
	         *  @default std
	         *
	         *  @name DataTable.defaults.column.orderDataType
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
	         *          { "type": "numeric", "targets": [ 3 ] },
	         *          { "orderDataType": "dom-select", "targets": [ 4 ] },
	         *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          null,
	         *          null,
	         *          { "orderDataType": "dom-text" },
	         *          { "orderDataType": "dom-text", "type": "numeric" },
	         *          { "orderDataType": "dom-select" },
	         *          { "orderDataType": "dom-checkbox" }
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sSortDataType": "std",
	    
	    
	        /**
	         * The title of this column.
	         *  @type string
	         *  @default null <i>Derived from the 'TH' value for this column in the
	         *    original HTML table.</i>
	         *
	         *  @name DataTable.defaults.column.title
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "title": "My column title", "targets": [ 0 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "title": "My column title" },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sTitle": null,
	    
	    
	        /**
	         * The type allows you to specify how the data for this column will be
	         * ordered. Four types (string, numeric, date and html (which will strip
	         * HTML tags before ordering)) are currently available. Note that only date
	         * formats understood by Javascript's Date() object will be accepted as type
	         * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
	         * 'numeric', 'date' or 'html' (by default). Further types can be adding
	         * through plug-ins.
	         *  @type string
	         *  @default null <i>Auto-detected from raw data</i>
	         *
	         *  @name DataTable.defaults.column.type
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "type": "html", "targets": [ 0 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "type": "html" },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sType": null,
	    
	    
	        /**
	         * Defining the width of the column, this parameter may take any CSS value
	         * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
	         * been given a specific width through this interface ensuring that the table
	         * remains readable.
	         *  @type string
	         *  @default null <i>Automatic</i>
	         *
	         *  @name DataTable.defaults.column.width
	         *  @dtopt Columns
	         *
	         *  @example
	         *    // Using `columnDefs`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columnDefs": [
	         *          { "width": "20%", "targets": [ 0 ] }
	         *        ]
	         *      } );
	         *    } );
	         *
	         *  @example
	         *    // Using `columns`
	         *    $(document).ready( function() {
	         *      $('#example').dataTable( {
	         *        "columns": [
	         *          { "width": "20%" },
	         *          null,
	         *          null,
	         *          null,
	         *          null
	         *        ]
	         *      } );
	         *    } );
	         */
	        "sWidth": null
	    };
	    
	    _fnHungarianMap( DataTable.defaults.column );
	    
	    
	    
	    /**
	     * DataTables settings object - this holds all the information needed for a
	     * given table, including configuration, data and current application of the
	     * table options. DataTables does not have a single instance for each DataTable
	     * with the settings attached to that instance, but rather instances of the
	     * DataTable "class" are created on-the-fly as needed (typically by a
	     * $().dataTable() call) and the settings object is then applied to that
	     * instance.
	     *
	     * Note that this object is related to {@link DataTable.defaults} but this
	     * one is the internal data store for DataTables's cache of columns. It should
	     * NOT be manipulated outside of DataTables. Any configuration should be done
	     * through the initialisation options.
	     *  @namespace
	     *  @todo Really should attach the settings object to individual instances so we
	     *    don't need to create new instances on each $().dataTable() call (if the
	     *    table already exists). It would also save passing oSettings around and
	     *    into every single function. However, this is a very significant
	     *    architecture change for DataTables and will almost certainly break
	     *    backwards compatibility with older installations. This is something that
	     *    will be done in 2.0.
	     */
	    DataTable.models.oSettings = {
	        /**
	         * Primary features of DataTables and their enablement state.
	         *  @namespace
	         */
	        "oFeatures": {
	    
	            /**
	             * Flag to say if DataTables should automatically try to calculate the
	             * optimum table and columns widths (true) or not (false).
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bAutoWidth": null,
	    
	            /**
	             * Delay the creation of TR and TD elements until they are actually
	             * needed by a driven page draw. This can give a significant speed
	             * increase for Ajax source and Javascript source data, but makes no
	             * difference at all fro DOM and server-side processing tables.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bDeferRender": null,
	    
	            /**
	             * Enable filtering on the table or not. Note that if this is disabled
	             * then there is no filtering at all on the table, including fnFilter.
	             * To just remove the filtering input use sDom and remove the 'f' option.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bFilter": null,
	    
	            /**
	             * Table information element (the 'Showing x of y records' div) enable
	             * flag.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bInfo": null,
	    
	            /**
	             * Present a user control allowing the end user to change the page size
	             * when pagination is enabled.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bLengthChange": null,
	    
	            /**
	             * Pagination enabled or not. Note that if this is disabled then length
	             * changing must also be disabled.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bPaginate": null,
	    
	            /**
	             * Processing indicator enable flag whenever DataTables is enacting a
	             * user request - typically an Ajax request for server-side processing.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bProcessing": null,
	    
	            /**
	             * Server-side processing enabled flag - when enabled DataTables will
	             * get all data from the server for every draw - there is no filtering,
	             * sorting or paging done on the client-side.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bServerSide": null,
	    
	            /**
	             * Sorting enablement flag.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bSort": null,
	    
	            /**
	             * Multi-column sorting
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bSortMulti": null,
	    
	            /**
	             * Apply a class to the columns which are being sorted to provide a
	             * visual highlight or not. This can slow things down when enabled since
	             * there is a lot of DOM interaction.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bSortClasses": null,
	    
	            /**
	             * State saving enablement flag.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bStateSave": null
	        },
	    
	    
	        /**
	         * Scrolling settings for a table.
	         *  @namespace
	         */
	        "oScroll": {
	            /**
	             * When the table is shorter in height than sScrollY, collapse the
	             * table container down to the height of the table (when true).
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type boolean
	             */
	            "bCollapse": null,
	    
	            /**
	             * Width of the scrollbar for the web-browser's platform. Calculated
	             * during table initialisation.
	             *  @type int
	             *  @default 0
	             */
	            "iBarWidth": 0,
	    
	            /**
	             * Viewport width for horizontal scrolling. Horizontal scrolling is
	             * disabled if an empty string.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type string
	             */
	            "sX": null,
	    
	            /**
	             * Width to expand the table to when using x-scrolling. Typically you
	             * should not need to use this.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type string
	             *  @deprecated
	             */
	            "sXInner": null,
	    
	            /**
	             * Viewport height for vertical scrolling. Vertical scrolling is disabled
	             * if an empty string.
	             * Note that this parameter will be set by the initialisation routine. To
	             * set a default use {@link DataTable.defaults}.
	             *  @type string
	             */
	            "sY": null
	        },
	    
	        /**
	         * Language information for the table.
	         *  @namespace
	         *  @extends DataTable.defaults.oLanguage
	         */
	        "oLanguage": {
	            /**
	             * Information callback function. See
	             * {@link DataTable.defaults.fnInfoCallback}
	             *  @type function
	             *  @default null
	             */
	            "fnInfoCallback": null
	        },
	    
	        /**
	         * Browser support parameters
	         *  @namespace
	         */
	        "oBrowser": {
	            /**
	             * Indicate if the browser incorrectly calculates width:100% inside a
	             * scrolling element (IE6/7)
	             *  @type boolean
	             *  @default false
	             */
	            "bScrollOversize": false,
	    
	            /**
	             * Determine if the vertical scrollbar is on the right or left of the
	             * scrolling container - needed for rtl language layout, although not
	             * all browsers move the scrollbar (Safari).
	             *  @type boolean
	             *  @default false
	             */
	            "bScrollbarLeft": false
	        },
	    
	    
	        "ajax": null,
	    
	    
	        /**
	         * Array referencing the nodes which are used for the features. The
	         * parameters of this object match what is allowed by sDom - i.e.
	         *   <ul>
	         *     <li>'l' - Length changing</li>
	         *     <li>'f' - Filtering input</li>
	         *     <li>'t' - The table!</li>
	         *     <li>'i' - Information</li>
	         *     <li>'p' - Pagination</li>
	         *     <li>'r' - pRocessing</li>
	         *   </ul>
	         *  @type array
	         *  @default []
	         */
	        "aanFeatures": [],
	    
	        /**
	         * Store data information - see {@link DataTable.models.oRow} for detailed
	         * information.
	         *  @type array
	         *  @default []
	         */
	        "aoData": [],
	    
	        /**
	         * Array of indexes which are in the current display (after filtering etc)
	         *  @type array
	         *  @default []
	         */
	        "aiDisplay": [],
	    
	        /**
	         * Array of indexes for display - no filtering
	         *  @type array
	         *  @default []
	         */
	        "aiDisplayMaster": [],
	    
	        /**
	         * Store information about each column that is in use
	         *  @type array
	         *  @default []
	         */
	        "aoColumns": [],
	    
	        /**
	         * Store information about the table's header
	         *  @type array
	         *  @default []
	         */
	        "aoHeader": [],
	    
	        /**
	         * Store information about the table's footer
	         *  @type array
	         *  @default []
	         */
	        "aoFooter": [],
	    
	        /**
	         * Store the applied global search information in case we want to force a
	         * research or compare the old search to a new one.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @namespace
	         *  @extends DataTable.models.oSearch
	         */
	        "oPreviousSearch": {},
	    
	        /**
	         * Store the applied search for each column - see
	         * {@link DataTable.models.oSearch} for the format that is used for the
	         * filtering information for each column.
	         *  @type array
	         *  @default []
	         */
	        "aoPreSearchCols": [],
	    
	        /**
	         * Sorting that is applied to the table. Note that the inner arrays are
	         * used in the following manner:
	         * <ul>
	         *   <li>Index 0 - column number</li>
	         *   <li>Index 1 - current sorting direction</li>
	         * </ul>
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type array
	         *  @todo These inner arrays should really be objects
	         */
	        "aaSorting": null,
	    
	        /**
	         * Sorting that is always applied to the table (i.e. prefixed in front of
	         * aaSorting).
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type array
	         *  @default []
	         */
	        "aaSortingFixed": [],
	    
	        /**
	         * Classes to use for the striping of a table.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type array
	         *  @default []
	         */
	        "asStripeClasses": null,
	    
	        /**
	         * If restoring a table - we should restore its striping classes as well
	         *  @type array
	         *  @default []
	         */
	        "asDestroyStripes": [],
	    
	        /**
	         * If restoring a table - we should restore its width
	         *  @type int
	         *  @default 0
	         */
	        "sDestroyWidth": 0,
	    
	        /**
	         * Callback functions array for every time a row is inserted (i.e. on a draw).
	         *  @type array
	         *  @default []
	         */
	        "aoRowCallback": [],
	    
	        /**
	         * Callback functions for the header on each draw.
	         *  @type array
	         *  @default []
	         */
	        "aoHeaderCallback": [],
	    
	        /**
	         * Callback function for the footer on each draw.
	         *  @type array
	         *  @default []
	         */
	        "aoFooterCallback": [],
	    
	        /**
	         * Array of callback functions for draw callback functions
	         *  @type array
	         *  @default []
	         */
	        "aoDrawCallback": [],
	    
	        /**
	         * Array of callback functions for row created function
	         *  @type array
	         *  @default []
	         */
	        "aoRowCreatedCallback": [],
	    
	        /**
	         * Callback functions for just before the table is redrawn. A return of
	         * false will be used to cancel the draw.
	         *  @type array
	         *  @default []
	         */
	        "aoPreDrawCallback": [],
	    
	        /**
	         * Callback functions for when the table has been initialised.
	         *  @type array
	         *  @default []
	         */
	        "aoInitComplete": [],
	    
	    
	        /**
	         * Callbacks for modifying the settings to be stored for state saving, prior to
	         * saving state.
	         *  @type array
	         *  @default []
	         */
	        "aoStateSaveParams": [],
	    
	        /**
	         * Callbacks for modifying the settings that have been stored for state saving
	         * prior to using the stored values to restore the state.
	         *  @type array
	         *  @default []
	         */
	        "aoStateLoadParams": [],
	    
	        /**
	         * Callbacks for operating on the settings object once the saved state has been
	         * loaded
	         *  @type array
	         *  @default []
	         */
	        "aoStateLoaded": [],
	    
	        /**
	         * Cache the table ID for quick access
	         *  @type string
	         *  @default <i>Empty string</i>
	         */
	        "sTableId": "",
	    
	        /**
	         * The TABLE node for the main table
	         *  @type node
	         *  @default null
	         */
	        "nTable": null,
	    
	        /**
	         * Permanent ref to the thead element
	         *  @type node
	         *  @default null
	         */
	        "nTHead": null,
	    
	        /**
	         * Permanent ref to the tfoot element - if it exists
	         *  @type node
	         *  @default null
	         */
	        "nTFoot": null,
	    
	        /**
	         * Permanent ref to the tbody element
	         *  @type node
	         *  @default null
	         */
	        "nTBody": null,
	    
	        /**
	         * Cache the wrapper node (contains all DataTables controlled elements)
	         *  @type node
	         *  @default null
	         */
	        "nTableWrapper": null,
	    
	        /**
	         * Indicate if when using server-side processing the loading of data
	         * should be deferred until the second draw.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type boolean
	         *  @default false
	         */
	        "bDeferLoading": false,
	    
	        /**
	         * Indicate if all required information has been read in
	         *  @type boolean
	         *  @default false
	         */
	        "bInitialised": false,
	    
	        /**
	         * Information about open rows. Each object in the array has the parameters
	         * 'nTr' and 'nParent'
	         *  @type array
	         *  @default []
	         */
	        "aoOpenRows": [],
	    
	        /**
	         * Dictate the positioning of DataTables' control elements - see
	         * {@link DataTable.model.oInit.sDom}.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type string
	         *  @default null
	         */
	        "sDom": null,
	    
	        /**
	         * Search delay (in mS)
	         *  @type integer
	         *  @default null
	         */
	        "searchDelay": null,
	    
	        /**
	         * Which type of pagination should be used.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type string
	         *  @default two_button
	         */
	        "sPaginationType": "two_button",
	    
	        /**
	         * The state duration (for `stateSave`) in seconds.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type int
	         *  @default 0
	         */
	        "iStateDuration": 0,
	    
	        /**
	         * Array of callback functions for state saving. Each array element is an
	         * object with the following parameters:
	         *   <ul>
	         *     <li>function:fn - function to call. Takes two parameters, oSettings
	         *       and the JSON string to save that has been thus far created. Returns
	         *       a JSON string to be inserted into a json object
	         *       (i.e. '"param": [ 0, 1, 2]')</li>
	         *     <li>string:sName - name of callback</li>
	         *   </ul>
	         *  @type array
	         *  @default []
	         */
	        "aoStateSave": [],
	    
	        /**
	         * Array of callback functions for state loading. Each array element is an
	         * object with the following parameters:
	         *   <ul>
	         *     <li>function:fn - function to call. Takes two parameters, oSettings
	         *       and the object stored. May return false to cancel state loading</li>
	         *     <li>string:sName - name of callback</li>
	         *   </ul>
	         *  @type array
	         *  @default []
	         */
	        "aoStateLoad": [],
	    
	        /**
	         * State that was saved. Useful for back reference
	         *  @type object
	         *  @default null
	         */
	        "oSavedState": null,
	    
	        /**
	         * State that was loaded. Useful for back reference
	         *  @type object
	         *  @default null
	         */
	        "oLoadedState": null,
	    
	        /**
	         * Source url for AJAX data for the table.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type string
	         *  @default null
	         */
	        "sAjaxSource": null,
	    
	        /**
	         * Property from a given object from which to read the table data from. This
	         * can be an empty string (when not server-side processing), in which case
	         * it is  assumed an an array is given directly.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type string
	         */
	        "sAjaxDataProp": null,
	    
	        /**
	         * Note if draw should be blocked while getting data
	         *  @type boolean
	         *  @default true
	         */
	        "bAjaxDataGet": true,
	    
	        /**
	         * The last jQuery XHR object that was used for server-side data gathering.
	         * This can be used for working with the XHR information in one of the
	         * callbacks
	         *  @type object
	         *  @default null
	         */
	        "jqXHR": null,
	    
	        /**
	         * JSON returned from the server in the last Ajax request
	         *  @type object
	         *  @default undefined
	         */
	        "json": undefined,
	    
	        /**
	         * Data submitted as part of the last Ajax request
	         *  @type object
	         *  @default undefined
	         */
	        "oAjaxData": undefined,
	    
	        /**
	         * Function to get the server-side data.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type function
	         */
	        "fnServerData": null,
	    
	        /**
	         * Functions which are called prior to sending an Ajax request so extra
	         * parameters can easily be sent to the server
	         *  @type array
	         *  @default []
	         */
	        "aoServerParams": [],
	    
	        /**
	         * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
	         * required).
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type string
	         */
	        "sServerMethod": null,
	    
	        /**
	         * Format numbers for display.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type function
	         */
	        "fnFormatNumber": null,
	    
	        /**
	         * List of options that can be used for the user selectable length menu.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type array
	         *  @default []
	         */
	        "aLengthMenu": null,
	    
	        /**
	         * Counter for the draws that the table does. Also used as a tracker for
	         * server-side processing
	         *  @type int
	         *  @default 0
	         */
	        "iDraw": 0,
	    
	        /**
	         * Indicate if a redraw is being done - useful for Ajax
	         *  @type boolean
	         *  @default false
	         */
	        "bDrawing": false,
	    
	        /**
	         * Draw index (iDraw) of the last error when parsing the returned data
	         *  @type int
	         *  @default -1
	         */
	        "iDrawError": -1,
	    
	        /**
	         * Paging display length
	         *  @type int
	         *  @default 10
	         */
	        "_iDisplayLength": 10,
	    
	        /**
	         * Paging start point - aiDisplay index
	         *  @type int
	         *  @default 0
	         */
	        "_iDisplayStart": 0,
	    
	        /**
	         * Server-side processing - number of records in the result set
	         * (i.e. before filtering), Use fnRecordsTotal rather than
	         * this property to get the value of the number of records, regardless of
	         * the server-side processing setting.
	         *  @type int
	         *  @default 0
	         *  @private
	         */
	        "_iRecordsTotal": 0,
	    
	        /**
	         * Server-side processing - number of records in the current display set
	         * (i.e. after filtering). Use fnRecordsDisplay rather than
	         * this property to get the value of the number of records, regardless of
	         * the server-side processing setting.
	         *  @type boolean
	         *  @default 0
	         *  @private
	         */
	        "_iRecordsDisplay": 0,
	    
	        /**
	         * Flag to indicate if jQuery UI marking and classes should be used.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type boolean
	         */
	        "bJUI": null,
	    
	        /**
	         * The classes to use for the table
	         *  @type object
	         *  @default {}
	         */
	        "oClasses": {},
	    
	        /**
	         * Flag attached to the settings object so you can check in the draw
	         * callback if filtering has been done in the draw. Deprecated in favour of
	         * events.
	         *  @type boolean
	         *  @default false
	         *  @deprecated
	         */
	        "bFiltered": false,
	    
	        /**
	         * Flag attached to the settings object so you can check in the draw
	         * callback if sorting has been done in the draw. Deprecated in favour of
	         * events.
	         *  @type boolean
	         *  @default false
	         *  @deprecated
	         */
	        "bSorted": false,
	    
	        /**
	         * Indicate that if multiple rows are in the header and there is more than
	         * one unique cell per column, if the top one (true) or bottom one (false)
	         * should be used for sorting / title by DataTables.
	         * Note that this parameter will be set by the initialisation routine. To
	         * set a default use {@link DataTable.defaults}.
	         *  @type boolean
	         */
	        "bSortCellsTop": null,
	    
	        /**
	         * Initialisation object that is used for the table
	         *  @type object
	         *  @default null
	         */
	        "oInit": null,
	    
	        /**
	         * Destroy callback functions - for plug-ins to attach themselves to the
	         * destroy so they can clean up markup and events.
	         *  @type array
	         *  @default []
	         */
	        "aoDestroyCallback": [],
	    
	    
	        /**
	         * Get the number of records in the current record set, before filtering
	         *  @type function
	         */
	        "fnRecordsTotal": function ()
	        {
	            return _fnDataSource( this ) == 'ssp' ?
	                this._iRecordsTotal * 1 :
	                this.aiDisplayMaster.length;
	        },
	    
	        /**
	         * Get the number of records in the current record set, after filtering
	         *  @type function
	         */
	        "fnRecordsDisplay": function ()
	        {
	            return _fnDataSource( this ) == 'ssp' ?
	                this._iRecordsDisplay * 1 :
	                this.aiDisplay.length;
	        },
	    
	        /**
	         * Get the display end point - aiDisplay index
	         *  @type function
	         */
	        "fnDisplayEnd": function ()
	        {
	            var
	                len      = this._iDisplayLength,
	                start    = this._iDisplayStart,
	                calc     = start + len,
	                records  = this.aiDisplay.length,
	                features = this.oFeatures,
	                paginate = features.bPaginate;
	    
	            if ( features.bServerSide ) {
	                return paginate === false || len === -1 ?
	                    start + records :
	                    Math.min( start+len, this._iRecordsDisplay );
	            }
	            else {
	                return ! paginate || calc>records || len===-1 ?
	                    records :
	                    calc;
	            }
	        },
	    
	        /**
	         * The DataTables object for this table
	         *  @type object
	         *  @default null
	         */
	        "oInstance": null,
	    
	        /**
	         * Unique identifier for each instance of the DataTables object. If there
	         * is an ID on the table node, then it takes that value, otherwise an
	         * incrementing internal counter is used.
	         *  @type string
	         *  @default null
	         */
	        "sInstance": null,
	    
	        /**
	         * tabindex attribute value that is added to DataTables control elements, allowing
	         * keyboard navigation of the table and its controls.
	         */
	        "iTabIndex": 0,
	    
	        /**
	         * DIV container for the footer scrolling table if scrolling
	         */
	        "nScrollHead": null,
	    
	        /**
	         * DIV container for the footer scrolling table if scrolling
	         */
	        "nScrollFoot": null,
	    
	        /**
	         * Last applied sort
	         *  @type array
	         *  @default []
	         */
	        "aLastSort": [],
	    
	        /**
	         * Stored plug-in instances
	         *  @type object
	         *  @default {}
	         */
	        "oPlugins": {}
	    };

	    /**
	     * Extension object for DataTables that is used to provide all extension
	     * options.
	     *
	     * Note that the `DataTable.ext` object is available through
	     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	     *  @namespace
	     *  @extends DataTable.models.ext
	     */
	    
	    
	    /**
	     * DataTables extensions
	     * 
	     * This namespace acts as a collection area for plug-ins that can be used to
	     * extend DataTables capabilities. Indeed many of the build in methods
	     * use this method to provide their own capabilities (sorting methods for
	     * example).
	     *
	     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	     * reasons
	     *
	     *  @namespace
	     */
	    DataTable.ext = _ext = {
	        /**
	         * Buttons. For use with the Buttons extension for DataTables. This is
	         * defined here so other extensions can define buttons regardless of load
	         * order. It is _not_ used by DataTables core.
	         *
	         *  @type object
	         *  @default {}
	         */
	        buttons: {},
	    
	    
	        /**
	         * Element class names
	         *
	         *  @type object
	         *  @default {}
	         */
	        classes: {},
	    
	    
	        /**
	         * Error reporting.
	         * 
	         * How should DataTables report an error. Can take the value 'alert',
	         * 'throw', 'none' or a function.
	         *
	         *  @type string|function
	         *  @default alert
	         */
	        errMode: "alert",
	    
	    
	        /**
	         * Feature plug-ins.
	         * 
	         * This is an array of objects which describe the feature plug-ins that are
	         * available to DataTables. These feature plug-ins are then available for
	         * use through the `dom` initialisation option.
	         * 
	         * Each feature plug-in is described by an object which must have the
	         * following properties:
	         * 
	         * * `fnInit` - function that is used to initialise the plug-in,
	         * * `cFeature` - a character so the feature can be enabled by the `dom`
	         *   instillation option. This is case sensitive.
	         *
	         * The `fnInit` function has the following input parameters:
	         *
	         * 1. `{object}` DataTables settings object: see
	         *    {@link DataTable.models.oSettings}
	         *
	         * And the following return is expected:
	         * 
	         * * {node|null} The element which contains your feature. Note that the
	         *   return may also be void if your plug-in does not require to inject any
	         *   DOM elements into DataTables control (`dom`) - for example this might
	         *   be useful when developing a plug-in which allows table control via
	         *   keyboard entry
	         *
	         *  @type array
	         *
	         *  @example
	         *    $.fn.dataTable.ext.features.push( {
	         *      "fnInit": function( oSettings ) {
	         *        return new TableTools( { "oDTSettings": oSettings } );
	         *      },
	         *      "cFeature": "T"
	         *    } );
	         */
	        feature: [],
	    
	    
	        /**
	         * Row searching.
	         * 
	         * This method of searching is complimentary to the default type based
	         * searching, and a lot more comprehensive as it allows you complete control
	         * over the searching logic. Each element in this array is a function
	         * (parameters described below) that is called for every row in the table,
	         * and your logic decides if it should be included in the searching data set
	         * or not.
	         *
	         * Searching functions have the following input parameters:
	         *
	         * 1. `{object}` DataTables settings object: see
	         *    {@link DataTable.models.oSettings}
	         * 2. `{array|object}` Data for the row to be processed (same as the
	         *    original format that was passed in as the data source, or an array
	         *    from a DOM data source
	         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
	         *    can be useful to retrieve the `TR` element if you need DOM interaction.
	         *
	         * And the following return is expected:
	         *
	         * * {boolean} Include the row in the searched result set (true) or not
	         *   (false)
	         *
	         * Note that as with the main search ability in DataTables, technically this
	         * is "filtering", since it is subtractive. However, for consistency in
	         * naming we call it searching here.
	         *
	         *  @type array
	         *  @default []
	         *
	         *  @example
	         *    // The following example shows custom search being applied to the
	         *    // fourth column (i.e. the data[3] index) based on two input values
	         *    // from the end-user, matching the data in a certain range.
	         *    $.fn.dataTable.ext.search.push(
	         *      function( settings, data, dataIndex ) {
	         *        var min = document.getElementById('min').value * 1;
	         *        var max = document.getElementById('max').value * 1;
	         *        var version = data[3] == "-" ? 0 : data[3]*1;
	         *
	         *        if ( min == "" && max == "" ) {
	         *          return true;
	         *        }
	         *        else if ( min == "" && version < max ) {
	         *          return true;
	         *        }
	         *        else if ( min < version && "" == max ) {
	         *          return true;
	         *        }
	         *        else if ( min < version && version < max ) {
	         *          return true;
	         *        }
	         *        return false;
	         *      }
	         *    );
	         */
	        search: [],
	    
	    
	        /**
	         * Internal functions, exposed for used in plug-ins.
	         * 
	         * Please note that you should not need to use the internal methods for
	         * anything other than a plug-in (and even then, try to avoid if possible).
	         * The internal function may change between releases.
	         *
	         *  @type object
	         *  @default {}
	         */
	        internal: {},
	    
	    
	        /**
	         * Legacy configuration options. Enable and disable legacy options that
	         * are available in DataTables.
	         *
	         *  @type object
	         */
	        legacy: {
	            /**
	             * Enable / disable DataTables 1.9 compatible server-side processing
	             * requests
	             *
	             *  @type boolean
	             *  @default null
	             */
	            ajax: null
	        },
	    
	    
	        /**
	         * Pagination plug-in methods.
	         * 
	         * Each entry in this object is a function and defines which buttons should
	         * be shown by the pagination rendering method that is used for the table:
	         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
	         * buttons are displayed in the document, while the functions here tell it
	         * what buttons to display. This is done by returning an array of button
	         * descriptions (what each button will do).
	         *
	         * Pagination types (the four built in options and any additional plug-in
	         * options defined here) can be used through the `paginationType`
	         * initialisation parameter.
	         *
	         * The functions defined take two parameters:
	         *
	         * 1. `{int} page` The current page index
	         * 2. `{int} pages` The number of pages in the table
	         *
	         * Each function is expected to return an array where each element of the
	         * array can be one of:
	         *
	         * * `first` - Jump to first page when activated
	         * * `last` - Jump to last page when activated
	         * * `previous` - Show previous page when activated
	         * * `next` - Show next page when activated
	         * * `{int}` - Show page of the index given
	         * * `{array}` - A nested array containing the above elements to add a
	         *   containing 'DIV' element (might be useful for styling).
	         *
	         * Note that DataTables v1.9- used this object slightly differently whereby
	         * an object with two functions would be defined for each plug-in. That
	         * ability is still supported by DataTables 1.10+ to provide backwards
	         * compatibility, but this option of use is now decremented and no longer
	         * documented in DataTables 1.10+.
	         *
	         *  @type object
	         *  @default {}
	         *
	         *  @example
	         *    // Show previous, next and current page buttons only
	         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
	         *      return [ 'previous', page, 'next' ];
	         *    };
	         */
	        pager: {},
	    
	    
	        renderer: {
	            pageButton: {},
	            header: {}
	        },
	    
	    
	        /**
	         * Ordering plug-ins - custom data source
	         * 
	         * The extension options for ordering of data available here is complimentary
	         * to the default type based ordering that DataTables typically uses. It
	         * allows much greater control over the the data that is being used to
	         * order a column, but is necessarily therefore more complex.
	         * 
	         * This type of ordering is useful if you want to do ordering based on data
	         * live from the DOM (for example the contents of an 'input' element) rather
	         * than just the static string that DataTables knows of.
	         * 
	         * The way these plug-ins work is that you create an array of the values you
	         * wish to be ordering for the column in question and then return that
	         * array. The data in the array much be in the index order of the rows in
	         * the table (not the currently ordering order!). Which order data gathering
	         * function is run here depends on the `dt-init columns.orderDataType`
	         * parameter that is used for the column (if any).
	         *
	         * The functions defined take two parameters:
	         *
	         * 1. `{object}` DataTables settings object: see
	         *    {@link DataTable.models.oSettings}
	         * 2. `{int}` Target column index
	         *
	         * Each function is expected to return an array:
	         *
	         * * `{array}` Data for the column to be ordering upon
	         *
	         *  @type array
	         *
	         *  @example
	         *    // Ordering using `input` node values
	         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
	         *    {
	         *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
	         *        return $('input', td).val();
	         *      } );
	         *    }
	         */
	        order: {},
	    
	    
	        /**
	         * Type based plug-ins.
	         *
	         * Each column in DataTables has a type assigned to it, either by automatic
	         * detection or by direct assignment using the `type` option for the column.
	         * The type of a column will effect how it is ordering and search (plug-ins
	         * can also make use of the column type if required).
	         *
	         * @namespace
	         */
	        type: {
	            /**
	             * Type detection functions.
	             *
	             * The functions defined in this object are used to automatically detect
	             * a column's type, making initialisation of DataTables super easy, even
	             * when complex data is in the table.
	             *
	             * The functions defined take two parameters:
	             *
	             *  1. `{*}` Data from the column cell to be analysed
	             *  2. `{settings}` DataTables settings object. This can be used to
	             *     perform context specific type detection - for example detection
	             *     based on language settings such as using a comma for a decimal
	             *     place. Generally speaking the options from the settings will not
	             *     be required
	             *
	             * Each function is expected to return:
	             *
	             * * `{string|null}` Data type detected, or null if unknown (and thus
	             *   pass it on to the other type detection functions.
	             *
	             *  @type array
	             *
	             *  @example
	             *    // Currency type detection plug-in:
	             *    $.fn.dataTable.ext.type.detect.push(
	             *      function ( data, settings ) {
	             *        // Check the numeric part
	             *        if ( ! $.isNumeric( data.substring(1) ) ) {
	             *          return null;
	             *        }
	             *
	             *        // Check prefixed by currency
	             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
	             *          return 'currency';
	             *        }
	             *        return null;
	             *      }
	             *    );
	             */
	            detect: [],
	    
	    
	            /**
	             * Type based search formatting.
	             *
	             * The type based searching functions can be used to pre-format the
	             * data to be search on. For example, it can be used to strip HTML
	             * tags or to de-format telephone numbers for numeric only searching.
	             *
	             * Note that is a search is not defined for a column of a given type,
	             * no search formatting will be performed.
	             * 
	             * Pre-processing of searching data plug-ins - When you assign the sType
	             * for a column (or have it automatically detected for you by DataTables
	             * or a type detection plug-in), you will typically be using this for
	             * custom sorting, but it can also be used to provide custom searching
	             * by allowing you to pre-processing the data and returning the data in
	             * the format that should be searched upon. This is done by adding
	             * functions this object with a parameter name which matches the sType
	             * for that target column. This is the corollary of <i>afnSortData</i>
	             * for searching data.
	             *
	             * The functions defined take a single parameter:
	             *
	             *  1. `{*}` Data from the column cell to be prepared for searching
	             *
	             * Each function is expected to return:
	             *
	             * * `{string|null}` Formatted string that will be used for the searching.
	             *
	             *  @type object
	             *  @default {}
	             *
	             *  @example
	             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
	             *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
	             *    }
	             */
	            search: {},
	    
	    
	            /**
	             * Type based ordering.
	             *
	             * The column type tells DataTables what ordering to apply to the table
	             * when a column is sorted upon. The order for each type that is defined,
	             * is defined by the functions available in this object.
	             *
	             * Each ordering option can be described by three properties added to
	             * this object:
	             *
	             * * `{type}-pre` - Pre-formatting function
	             * * `{type}-asc` - Ascending order function
	             * * `{type}-desc` - Descending order function
	             *
	             * All three can be used together, only `{type}-pre` or only
	             * `{type}-asc` and `{type}-desc` together. It is generally recommended
	             * that only `{type}-pre` is used, as this provides the optimal
	             * implementation in terms of speed, although the others are provided
	             * for compatibility with existing Javascript sort functions.
	             *
	             * `{type}-pre`: Functions defined take a single parameter:
	             *
	             *  1. `{*}` Data from the column cell to be prepared for ordering
	             *
	             * And return:
	             *
	             * * `{*}` Data to be sorted upon
	             *
	             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
	             * functions, taking two parameters:
	             *
	             *  1. `{*}` Data to compare to the second parameter
	             *  2. `{*}` Data to compare to the first parameter
	             *
	             * And returning:
	             *
	             * * `{*}` Ordering match: <0 if first parameter should be sorted lower
	             *   than the second parameter, ===0 if the two parameters are equal and
	             *   >0 if the first parameter should be sorted height than the second
	             *   parameter.
	             * 
	             *  @type object
	             *  @default {}
	             *
	             *  @example
	             *    // Numeric ordering of formatted numbers with a pre-formatter
	             *    $.extend( $.fn.dataTable.ext.type.order, {
	             *      "string-pre": function(x) {
	             *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
	             *        return parseFloat( a );
	             *      }
	             *    } );
	             *
	             *  @example
	             *    // Case-sensitive string ordering, with no pre-formatting method
	             *    $.extend( $.fn.dataTable.ext.order, {
	             *      "string-case-asc": function(x,y) {
	             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	             *      },
	             *      "string-case-desc": function(x,y) {
	             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	             *      }
	             *    } );
	             */
	            order: {}
	        },
	    
	        /**
	         * Unique DataTables instance counter
	         *
	         * @type int
	         * @private
	         */
	        _unique: 0,
	    
	    
	        //
	        // Depreciated
	        // The following properties are retained for backwards compatiblity only.
	        // The should not be used in new projects and will be removed in a future
	        // version
	        //
	    
	        /**
	         * Version check function.
	         *  @type function
	         *  @depreciated Since 1.10
	         */
	        fnVersionCheck: DataTable.fnVersionCheck,
	    
	    
	        /**
	         * Index for what 'this' index API functions should use
	         *  @type int
	         *  @deprecated Since v1.10
	         */
	        iApiIndex: 0,
	    
	    
	        /**
	         * jQuery UI class container
	         *  @type object
	         *  @deprecated Since v1.10
	         */
	        oJUIClasses: {},
	    
	    
	        /**
	         * Software version
	         *  @type string
	         *  @deprecated Since v1.10
	         */
	        sVersion: DataTable.version
	    };
	    
	    
	    //
	    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
	    //
	    $.extend( _ext, {
	        afnFiltering: _ext.search,
	        aTypes:       _ext.type.detect,
	        ofnSearch:    _ext.type.search,
	        oSort:        _ext.type.order,
	        afnSortData:  _ext.order,
	        aoFeatures:   _ext.feature,
	        oApi:         _ext.internal,
	        oStdClasses:  _ext.classes,
	        oPagination:  _ext.pager
	    } );
	    
	    
	    $.extend( DataTable.ext.classes, {
	        "sTable": "dataTable",
	        "sNoFooter": "no-footer",
	    
	        /* Paging buttons */
	        "sPageButton": "paginate_button",
	        "sPageButtonActive": "current",
	        "sPageButtonDisabled": "disabled",
	    
	        /* Striping classes */
	        "sStripeOdd": "odd",
	        "sStripeEven": "even",
	    
	        /* Empty row */
	        "sRowEmpty": "dataTables_empty",
	    
	        /* Features */
	        "sWrapper": "dataTables_wrapper",
	        "sFilter": "dataTables_filter",
	        "sInfo": "dataTables_info",
	        "sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
	        "sLength": "dataTables_length",
	        "sProcessing": "dataTables_processing",
	    
	        /* Sorting */
	        "sSortAsc": "sorting_asc",
	        "sSortDesc": "sorting_desc",
	        "sSortable": "sorting", /* Sortable in both directions */
	        "sSortableAsc": "sorting_asc_disabled",
	        "sSortableDesc": "sorting_desc_disabled",
	        "sSortableNone": "sorting_disabled",
	        "sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
	    
	        /* Filtering */
	        "sFilterInput": "",
	    
	        /* Page length */
	        "sLengthSelect": "",
	    
	        /* Scrolling */
	        "sScrollWrapper": "dataTables_scroll",
	        "sScrollHead": "dataTables_scrollHead",
	        "sScrollHeadInner": "dataTables_scrollHeadInner",
	        "sScrollBody": "dataTables_scrollBody",
	        "sScrollFoot": "dataTables_scrollFoot",
	        "sScrollFootInner": "dataTables_scrollFootInner",
	    
	        /* Misc */
	        "sHeaderTH": "",
	        "sFooterTH": "",
	    
	        // Deprecated
	        "sSortJUIAsc": "",
	        "sSortJUIDesc": "",
	        "sSortJUI": "",
	        "sSortJUIAscAllowed": "",
	        "sSortJUIDescAllowed": "",
	        "sSortJUIWrapper": "",
	        "sSortIcon": "",
	        "sJUIHeader": "",
	        "sJUIFooter": ""
	    } );
	    
	    
	    (function() {
	    
	    // Reused strings for better compression. Closure compiler appears to have a
	    // weird edge case where it is trying to expand strings rather than use the
	    // variable version. This results in about 200 bytes being added, for very
	    // little preference benefit since it this run on script load only.
	    var _empty = '';
	    _empty = '';
	    
	    var _stateDefault = _empty + 'ui-state-default';
	    var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';
	    var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';
	    
	    $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {
	        /* Full numbers paging buttons */
	        "sPageButton":         "fg-button ui-button "+_stateDefault,
	        "sPageButtonActive":   "ui-state-disabled",
	        "sPageButtonDisabled": "ui-state-disabled",
	    
	        /* Features */
	        "sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+
	            "ui-buttonset-multi paging_", /* Note that the type is postfixed */
	    
	        /* Sorting */
	        "sSortAsc":            _stateDefault+" sorting_asc",
	        "sSortDesc":           _stateDefault+" sorting_desc",
	        "sSortable":           _stateDefault+" sorting",
	        "sSortableAsc":        _stateDefault+" sorting_asc_disabled",
	        "sSortableDesc":       _stateDefault+" sorting_desc_disabled",
	        "sSortableNone":       _stateDefault+" sorting_disabled",
	        "sSortJUIAsc":         _sortIcon+"triangle-1-n",
	        "sSortJUIDesc":        _sortIcon+"triangle-1-s",
	        "sSortJUI":            _sortIcon+"carat-2-n-s",
	        "sSortJUIAscAllowed":  _sortIcon+"carat-1-n",
	        "sSortJUIDescAllowed": _sortIcon+"carat-1-s",
	        "sSortJUIWrapper":     "DataTables_sort_wrapper",
	        "sSortIcon":           "DataTables_sort_icon",
	    
	        /* Scrolling */
	        "sScrollHead": "dataTables_scrollHead "+_stateDefault,
	        "sScrollFoot": "dataTables_scrollFoot "+_stateDefault,
	    
	        /* Misc */
	        "sHeaderTH":  _stateDefault,
	        "sFooterTH":  _stateDefault,
	        "sJUIHeader": _headerFooter+" ui-corner-tl ui-corner-tr",
	        "sJUIFooter": _headerFooter+" ui-corner-bl ui-corner-br"
	    } );
	    
	    }());
	    
	    
	    
	    var extPagination = DataTable.ext.pager;
	    
	    function _numbers ( page, pages ) {
	        var
	            numbers = [],
	            buttons = extPagination.numbers_length,
	            half = Math.floor( buttons / 2 ),
	            i = 1;
	    
	        if ( pages <= buttons ) {
	            numbers = _range( 0, pages );
	        }
	        else if ( page <= half ) {
	            numbers = _range( 0, buttons-2 );
	            numbers.push( 'ellipsis' );
	            numbers.push( pages-1 );
	        }
	        else if ( page >= pages - 1 - half ) {
	            numbers = _range( pages-(buttons-2), pages );
	            numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
	            numbers.splice( 0, 0, 0 );
	        }
	        else {
	            numbers = _range( page-half+2, page+half-1 );
	            numbers.push( 'ellipsis' );
	            numbers.push( pages-1 );
	            numbers.splice( 0, 0, 'ellipsis' );
	            numbers.splice( 0, 0, 0 );
	        }
	    
	        numbers.DT_el = 'span';
	        return numbers;
	    }
	    
	    
	    $.extend( extPagination, {
	        simple: function ( page, pages ) {
	            return [ 'previous', 'next' ];
	        },
	    
	        full: function ( page, pages ) {
	            return [  'first', 'previous', 'next', 'last' ];
	        },
	    
	        simple_numbers: function ( page, pages ) {
	            return [ 'previous', _numbers(page, pages), 'next' ];
	        },
	    
	        full_numbers: function ( page, pages ) {
	            return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
	        },
	    
	        // For testing and plug-ins to use
	        _numbers: _numbers,
	    
	        // Number of number buttons (including ellipsis) to show. _Must be odd!_
	        numbers_length: 7
	    } );
	    
	    
	    $.extend( true, DataTable.ext.renderer, {
	        pageButton: {
	            _: function ( settings, host, idx, buttons, page, pages ) {
	                var classes = settings.oClasses;
	                var lang = settings.oLanguage.oPaginate;
	                var btnDisplay, btnClass, counter=0;
	    
	                var attach = function( container, buttons ) {
	                    var i, ien, node, button;
	                    var clickHandler = function ( e ) {
	                        _fnPageChange( settings, e.data.action, true );
	                    };
	    
	                    for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
	                        button = buttons[i];
	    
	                        if ( $.isArray( button ) ) {
	                            var inner = $( '<'+(button.DT_el || 'div')+'/>' )
	                                .appendTo( container );
	                            attach( inner, button );
	                        }
	                        else {
	                            btnDisplay = '';
	                            btnClass = '';
	    
	                            switch ( button ) {
	                                case 'ellipsis':
	                                    container.append('<span class="ellipsis">&#x2026;</span>');
	                                    break;
	    
	                                case 'first':
	                                    btnDisplay = lang.sFirst;
	                                    btnClass = button + (page > 0 ?
	                                        '' : ' '+classes.sPageButtonDisabled);
	                                    break;
	    
	                                case 'previous':
	                                    btnDisplay = lang.sPrevious;
	                                    btnClass = button + (page > 0 ?
	                                        '' : ' '+classes.sPageButtonDisabled);
	                                    break;
	    
	                                case 'next':
	                                    btnDisplay = lang.sNext;
	                                    btnClass = button + (page < pages-1 ?
	                                        '' : ' '+classes.sPageButtonDisabled);
	                                    break;
	    
	                                case 'last':
	                                    btnDisplay = lang.sLast;
	                                    btnClass = button + (page < pages-1 ?
	                                        '' : ' '+classes.sPageButtonDisabled);
	                                    break;
	    
	                                default:
	                                    btnDisplay = button + 1;
	                                    btnClass = page === button ?
	                                        classes.sPageButtonActive : '';
	                                    break;
	                            }
	    
	                            if ( btnDisplay ) {
	                                node = $('<a>', {
	                                        'class': classes.sPageButton+' '+btnClass,
	                                        'aria-controls': settings.sTableId,
	                                        'data-dt-idx': counter,
	                                        'tabindex': settings.iTabIndex,
	                                        'id': idx === 0 && typeof button === 'string' ?
	                                            settings.sTableId +'_'+ button :
	                                            null
	                                    } )
	                                    .html( btnDisplay )
	                                    .appendTo( container );
	    
	                                _fnBindAction(
	                                    node, {action: button}, clickHandler
	                                );
	    
	                                counter++;
	                            }
	                        }
	                    }
	                };
	    
	                // IE9 throws an 'unknown error' if document.activeElement is used
	                // inside an iframe or frame. Try / catch the error. Not good for
	                // accessibility, but neither are frames.
	                var activeEl;
	    
	                try {
	                    // Because this approach is destroying and recreating the paging
	                    // elements, focus is lost on the select button which is bad for
	                    // accessibility. So we want to restore focus once the draw has
	                    // completed
	                    activeEl = $(document.activeElement).data('dt-idx');
	                }
	                catch (e) {}
	    
	                attach( $(host).empty(), buttons );
	    
	                if ( activeEl ) {
	                    $(host).find( '[data-dt-idx='+activeEl+']' ).focus();
	                }
	            }
	        }
	    } );
	    
	    
	    
	    // Built in type detection. See model.ext.aTypes for information about
	    // what is required from this methods.
	    $.extend( DataTable.ext.type.detect, [
	        // Plain numbers - first since V8 detects some plain numbers as dates
	        // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
	        function ( d, settings )
	        {
	            var decimal = settings.oLanguage.sDecimal;
	            return _isNumber( d, decimal ) ? 'num'+decimal : null;
	        },
	    
	        // Dates (only those recognised by the browser's Date.parse)
	        function ( d, settings )
	        {
	            // V8 will remove any unknown characters at the start and end of the
	            // expression, leading to false matches such as `$245.12` or `10%` being
	            // a valid date. See forum thread 18941 for detail.
	            if ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {
	                return null;
	            }
	            var parsed = Date.parse(d);
	            return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
	        },
	    
	        // Formatted numbers
	        function ( d, settings )
	        {
	            var decimal = settings.oLanguage.sDecimal;
	            return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
	        },
	    
	        // HTML numeric
	        function ( d, settings )
	        {
	            var decimal = settings.oLanguage.sDecimal;
	            return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
	        },
	    
	        // HTML numeric, formatted
	        function ( d, settings )
	        {
	            var decimal = settings.oLanguage.sDecimal;
	            return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
	        },
	    
	        // HTML (this is strict checking - there must be html)
	        function ( d, settings )
	        {
	            return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
	                'html' : null;
	        }
	    ] );
	    
	    
	    
	    // Filter formatting functions. See model.ext.ofnSearch for information about
	    // what is required from these methods.
	    // 
	    // Note that additional search methods are added for the html numbers and
	    // html formatted numbers by `_addNumericSort()` when we know what the decimal
	    // place is
	    
	    
	    $.extend( DataTable.ext.type.search, {
	        html: function ( data ) {
	            return _empty(data) ?
	                data :
	                typeof data === 'string' ?
	                    data
	                        .replace( _re_new_lines, " " )
	                        .replace( _re_html, "" ) :
	                    '';
	        },
	    
	        string: function ( data ) {
	            return _empty(data) ?
	                data :
	                typeof data === 'string' ?
	                    data.replace( _re_new_lines, " " ) :
	                    data;
	        }
	    } );
	    
	    
	    
	    var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
	        if ( d !== 0 && (!d || d === '-') ) {
	            return -Infinity;
	        }
	    
	        // If a decimal place other than `.` is used, it needs to be given to the
	        // function so we can detect it and replace with a `.` which is the only
	        // decimal place Javascript recognises - it is not locale aware.
	        if ( decimalPlace ) {
	            d = _numToDecimal( d, decimalPlace );
	        }
	    
	        if ( d.replace ) {
	            if ( re1 ) {
	                d = d.replace( re1, '' );
	            }
	    
	            if ( re2 ) {
	                d = d.replace( re2, '' );
	            }
	        }
	    
	        return d * 1;
	    };
	    
	    
	    // Add the numeric 'deformatting' functions for sorting and search. This is done
	    // in a function to provide an easy ability for the language options to add
	    // additional methods if a non-period decimal place is used.
	    function _addNumericSort ( decimalPlace ) {
	        $.each(
	            {
	                // Plain numbers
	                "num": function ( d ) {
	                    return __numericReplace( d, decimalPlace );
	                },
	    
	                // Formatted numbers
	                "num-fmt": function ( d ) {
	                    return __numericReplace( d, decimalPlace, _re_formatted_numeric );
	                },
	    
	                // HTML numeric
	                "html-num": function ( d ) {
	                    return __numericReplace( d, decimalPlace, _re_html );
	                },
	    
	                // HTML numeric, formatted
	                "html-num-fmt": function ( d ) {
	                    return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
	                }
	            },
	            function ( key, fn ) {
	                // Add the ordering method
	                _ext.type.order[ key+decimalPlace+'-pre' ] = fn;
	    
	                // For HTML types add a search formatter that will strip the HTML
	                if ( key.match(/^html\-/) ) {
	                    _ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
	                }
	            }
	        );
	    }
	    
	    
	    // Default sort methods
	    $.extend( _ext.type.order, {
	        // Dates
	        "date-pre": function ( d ) {
	            return Date.parse( d ) || 0;
	        },
	    
	        // html
	        "html-pre": function ( a ) {
	            return _empty(a) ?
	                '' :
	                a.replace ?
	                    a.replace( /<.*?>/g, "" ).toLowerCase() :
	                    a+'';
	        },
	    
	        // string
	        "string-pre": function ( a ) {
	            // This is a little complex, but faster than always calling toString,
	            // http://jsperf.com/tostring-v-check
	            return _empty(a) ?
	                '' :
	                typeof a === 'string' ?
	                    a.toLowerCase() :
	                    ! a.toString ?
	                        '' :
	                        a.toString();
	        },
	    
	        // string-asc and -desc are retained only for compatibility with the old
	        // sort methods
	        "string-asc": function ( x, y ) {
	            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	        },
	    
	        "string-desc": function ( x, y ) {
	            return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	        }
	    } );
	    
	    
	    // Numeric sorting types - order doesn't matter here
	    _addNumericSort( '' );
	    
	    
	    $.extend( true, DataTable.ext.renderer, {
	        header: {
	            _: function ( settings, cell, column, classes ) {
	                // No additional mark-up required
	                // Attach a sort listener to update on sort - note that using the
	                // `DT` namespace will allow the event to be removed automatically
	                // on destroy, while the `dt` namespaced event is the one we are
	                // listening for
	                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
	                    if ( settings !== ctx ) { // need to check this this is the host
	                        return;               // table, not a nested one
	                    }
	    
	                    var colIdx = column.idx;
	    
	                    cell
	                        .removeClass(
	                            column.sSortingClass +' '+
	                            classes.sSortAsc +' '+
	                            classes.sSortDesc
	                        )
	                        .addClass( columns[ colIdx ] == 'asc' ?
	                            classes.sSortAsc : columns[ colIdx ] == 'desc' ?
	                                classes.sSortDesc :
	                                column.sSortingClass
	                        );
	                } );
	            },
	    
	            jqueryui: function ( settings, cell, column, classes ) {
	                $('<div/>')
	                    .addClass( classes.sSortJUIWrapper )
	                    .append( cell.contents() )
	                    .append( $('<span/>')
	                        .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
	                    )
	                    .appendTo( cell );
	    
	                // Attach a sort listener to update on sort
	                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
	                    if ( settings !== ctx ) {
	                        return;
	                    }
	    
	                    var colIdx = column.idx;
	    
	                    cell
	                        .removeClass( classes.sSortAsc +" "+classes.sSortDesc )
	                        .addClass( columns[ colIdx ] == 'asc' ?
	                            classes.sSortAsc : columns[ colIdx ] == 'desc' ?
	                                classes.sSortDesc :
	                                column.sSortingClass
	                        );
	    
	                    cell
	                        .find( 'span.'+classes.sSortIcon )
	                        .removeClass(
	                            classes.sSortJUIAsc +" "+
	                            classes.sSortJUIDesc +" "+
	                            classes.sSortJUI +" "+
	                            classes.sSortJUIAscAllowed +" "+
	                            classes.sSortJUIDescAllowed
	                        )
	                        .addClass( columns[ colIdx ] == 'asc' ?
	                            classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
	                                classes.sSortJUIDesc :
	                                column.sSortingClassJUI
	                        );
	                } );
	            }
	        }
	    } );
	    
	    /*
	     * Public helper functions. These aren't used internally by DataTables, or
	     * called by any of the options passed into DataTables, but they can be used
	     * externally by developers working with DataTables. They are helper functions
	     * to make working with DataTables a little bit easier.
	     */
	    
	    /**
	     * Helpers for `columns.render`.
	     *
	     * The options defined here can be used with the `columns.render` initialisation
	     * option to provide a display renderer. The following functions are defined:
	     *
	     * * `number` - Will format numeric data (defined by `columns.data`) for
	     *   display, retaining the original unformatted data for sorting and filtering.
	     *   It takes 4 parameters:
	     *   * `string` - Thousands grouping separator
	     *   * `string` - Decimal point indicator
	     *   * `integer` - Number of decimal points to show
	     *   * `string` (optional) - Prefix.
	     *
	     * @example
	     *   // Column definition using the number renderer
	     *   {
	     *     data: "salary",
	     *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	     *   }
	     *
	     * @namespace
	     */
	    DataTable.render = {
	        number: function ( thousands, decimal, precision, prefix ) {
	            return {
	                display: function ( d ) {
	                    if ( typeof d !== 'number' && typeof d !== 'string' ) {
	                        return d;
	                    }
	    
	                    var negative = d < 0 ? '-' : '';
	                    d = Math.abs( parseFloat( d ) );
	    
	                    var intPart = parseInt( d, 10 );
	                    var floatPart = precision ?
	                        decimal+(d - intPart).toFixed( precision ).substring( 2 ):
	                        '';
	    
	                    return negative + (prefix||'') +
	                        intPart.toString().replace(
	                            /\B(?=(\d{3})+(?!\d))/g, thousands
	                        ) +
	                        floatPart;
	                }
	            };
	        }
	    };
	    
	    
	    /*
	     * This is really a good bit rubbish this method of exposing the internal methods
	     * publicly... - To be fixed in 2.0 using methods on the prototype
	     */
	    
	    
	    /**
	     * Create a wrapper function for exporting an internal functions to an external API.
	     *  @param {string} fn API function name
	     *  @returns {function} wrapped function
	     *  @memberof DataTable#internal
	     */
	    function _fnExternApiFunc (fn)
	    {
	        return function() {
	            var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
	                Array.prototype.slice.call(arguments)
	            );
	            return DataTable.ext.internal[fn].apply( this, args );
	        };
	    }
	    
	    
	    /**
	     * Reference to internal functions for use by plug-in developers. Note that
	     * these methods are references to internal functions and are considered to be
	     * private. If you use these methods, be aware that they are liable to change
	     * between versions.
	     *  @namespace
	     */
	    $.extend( DataTable.ext.internal, {
	        _fnExternApiFunc: _fnExternApiFunc,
	        _fnBuildAjax: _fnBuildAjax,
	        _fnAjaxUpdate: _fnAjaxUpdate,
	        _fnAjaxParameters: _fnAjaxParameters,
	        _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
	        _fnAjaxDataSrc: _fnAjaxDataSrc,
	        _fnAddColumn: _fnAddColumn,
	        _fnColumnOptions: _fnColumnOptions,
	        _fnAdjustColumnSizing: _fnAdjustColumnSizing,
	        _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
	        _fnColumnIndexToVisible: _fnColumnIndexToVisible,
	        _fnVisbleColumns: _fnVisbleColumns,
	        _fnGetColumns: _fnGetColumns,
	        _fnColumnTypes: _fnColumnTypes,
	        _fnApplyColumnDefs: _fnApplyColumnDefs,
	        _fnHungarianMap: _fnHungarianMap,
	        _fnCamelToHungarian: _fnCamelToHungarian,
	        _fnLanguageCompat: _fnLanguageCompat,
	        _fnBrowserDetect: _fnBrowserDetect,
	        _fnAddData: _fnAddData,
	        _fnAddTr: _fnAddTr,
	        _fnNodeToDataIndex: _fnNodeToDataIndex,
	        _fnNodeToColumnIndex: _fnNodeToColumnIndex,
	        _fnGetCellData: _fnGetCellData,
	        _fnSetCellData: _fnSetCellData,
	        _fnSplitObjNotation: _fnSplitObjNotation,
	        _fnGetObjectDataFn: _fnGetObjectDataFn,
	        _fnSetObjectDataFn: _fnSetObjectDataFn,
	        _fnGetDataMaster: _fnGetDataMaster,
	        _fnClearTable: _fnClearTable,
	        _fnDeleteIndex: _fnDeleteIndex,
	        _fnInvalidate: _fnInvalidate,
	        _fnGetRowElements: _fnGetRowElements,
	        _fnCreateTr: _fnCreateTr,
	        _fnBuildHead: _fnBuildHead,
	        _fnDrawHead: _fnDrawHead,
	        _fnDraw: _fnDraw,
	        _fnReDraw: _fnReDraw,
	        _fnAddOptionsHtml: _fnAddOptionsHtml,
	        _fnDetectHeader: _fnDetectHeader,
	        _fnGetUniqueThs: _fnGetUniqueThs,
	        _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
	        _fnFilterComplete: _fnFilterComplete,
	        _fnFilterCustom: _fnFilterCustom,
	        _fnFilterColumn: _fnFilterColumn,
	        _fnFilter: _fnFilter,
	        _fnFilterCreateSearch: _fnFilterCreateSearch,
	        _fnEscapeRegex: _fnEscapeRegex,
	        _fnFilterData: _fnFilterData,
	        _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
	        _fnUpdateInfo: _fnUpdateInfo,
	        _fnInfoMacros: _fnInfoMacros,
	        _fnInitialise: _fnInitialise,
	        _fnInitComplete: _fnInitComplete,
	        _fnLengthChange: _fnLengthChange,
	        _fnFeatureHtmlLength: _fnFeatureHtmlLength,
	        _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
	        _fnPageChange: _fnPageChange,
	        _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
	        _fnProcessingDisplay: _fnProcessingDisplay,
	        _fnFeatureHtmlTable: _fnFeatureHtmlTable,
	        _fnScrollDraw: _fnScrollDraw,
	        _fnApplyToChildren: _fnApplyToChildren,
	        _fnCalculateColumnWidths: _fnCalculateColumnWidths,
	        _fnThrottle: _fnThrottle,
	        _fnConvertToWidth: _fnConvertToWidth,
	        _fnScrollingWidthAdjust: _fnScrollingWidthAdjust,
	        _fnGetWidestNode: _fnGetWidestNode,
	        _fnGetMaxLenString: _fnGetMaxLenString,
	        _fnStringToCss: _fnStringToCss,
	        _fnScrollBarWidth: _fnScrollBarWidth,
	        _fnSortFlatten: _fnSortFlatten,
	        _fnSort: _fnSort,
	        _fnSortAria: _fnSortAria,
	        _fnSortListener: _fnSortListener,
	        _fnSortAttachListener: _fnSortAttachListener,
	        _fnSortingClasses: _fnSortingClasses,
	        _fnSortData: _fnSortData,
	        _fnSaveState: _fnSaveState,
	        _fnLoadState: _fnLoadState,
	        _fnSettingsFromNode: _fnSettingsFromNode,
	        _fnLog: _fnLog,
	        _fnMap: _fnMap,
	        _fnBindAction: _fnBindAction,
	        _fnCallbackReg: _fnCallbackReg,
	        _fnCallbackFire: _fnCallbackFire,
	        _fnLengthOverflow: _fnLengthOverflow,
	        _fnRenderer: _fnRenderer,
	        _fnDataSource: _fnDataSource,
	        _fnRowAttributes: _fnRowAttributes,
	        _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
	                                        // in 1.10, so this dead-end function is
	                                        // added to prevent errors
	    } );
	    

	    // jQuery access
	    $.fn.dataTable = DataTable;

	    // Legacy aliases
	    $.fn.dataTableSettings = DataTable.settings;
	    $.fn.dataTableExt = DataTable.ext;

	    // With a capital `D` we return a DataTables API instance rather than a
	    // jQuery object
	    $.fn.DataTable = function ( opts ) {
	        return $(this).dataTable( opts ).api();
	    };

	    // All properties that are available to $.fn.dataTable should also be
	    // available on $.fn.DataTable
	    $.each( DataTable, function ( prop, val ) {
	        $.fn.DataTable[ prop ] = val;
	    } );


	    // Information about events fired by DataTables - for documentation.
	    /**
	     * Draw event, fired whenever the table is redrawn on the page, at the same
	     * point as fnDrawCallback. This may be useful for binding events or
	     * performing calculations when the table is altered at all.
	     *  @name DataTable#draw.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     */

	    /**
	     * Search event, fired when the searching applied to the table (using the
	     * built-in global search, or column filters) is altered.
	     *  @name DataTable#search.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     */

	    /**
	     * Page change event, fired when the paging of the table is altered.
	     *  @name DataTable#page.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     */

	    /**
	     * Order event, fired when the ordering applied to the table is altered.
	     *  @name DataTable#order.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     */

	    /**
	     * DataTables initialisation complete event, fired when the table is fully
	     * drawn, including Ajax data loaded, if Ajax data is required.
	     *  @name DataTable#init.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} oSettings DataTables settings object
	     *  @param {object} json The JSON object request from the server - only
	     *    present if client-side Ajax sourced data is used</li></ol>
	     */

	    /**
	     * State save event, fired when the table has changed state a new state save
	     * is required. This event allows modification of the state saving object
	     * prior to actually doing the save, including addition or other state
	     * properties (for plug-ins) or modification of a DataTables core property.
	     *  @name DataTable#stateSaveParams.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} oSettings DataTables settings object
	     *  @param {object} json The state information to be saved
	     */

	    /**
	     * State load event, fired when the table is loading state from the stored
	     * data, but prior to the settings object being modified by the saved state
	     * - allowing modification of the saved state is required or loading of
	     * state for a plug-in.
	     *  @name DataTable#stateLoadParams.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} oSettings DataTables settings object
	     *  @param {object} json The saved state information
	     */

	    /**
	     * State loaded event, fired when state has been loaded from stored data and
	     * the settings object has been modified by the loaded data.
	     *  @name DataTable#stateLoaded.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} oSettings DataTables settings object
	     *  @param {object} json The saved state information
	     */

	    /**
	     * Processing event, fired when DataTables is doing some kind of processing
	     * (be it, order, searcg or anything else). It can be used to indicate to
	     * the end user that there is something happening, or that something has
	     * finished.
	     *  @name DataTable#processing.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} oSettings DataTables settings object
	     *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	     */

	    /**
	     * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	     * request to made to the server for new data. This event is called before
	     * DataTables processed the returned data, so it can also be used to pre-
	     * process the data returned from the server, if needed.
	     *
	     * Note that this trigger is called in `fnServerData`, if you override
	     * `fnServerData` and which to use this event, you need to trigger it in you
	     * success function.
	     *  @name DataTable#xhr.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     *  @param {object} json JSON returned from the server
	     *
	     *  @example
	     *     // Use a custom property returned from the server in another DOM element
	     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	     *       $('#status').html( json.status );
	     *     } );
	     *
	     *  @example
	     *     // Pre-process the data returned from the server
	     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	     *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	     *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	     *       }
	     *       // Note no return - manipulate the data directly in the JSON object.
	     *     } );
	     */

	    /**
	     * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	     * or passing the bDestroy:true parameter in the initialisation object. This
	     * can be used to remove bound events, added DOM nodes, etc.
	     *  @name DataTable#destroy.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     */

	    /**
	     * Page length change event, fired when number of records to show on each
	     * page (the length) is changed.
	     *  @name DataTable#length.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     *  @param {integer} len New length
	     */

	    /**
	     * Column sizing has changed.
	     *  @name DataTable#column-sizing.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     */

	    /**
	     * Column visibility has changed.
	     *  @name DataTable#column-visibility.dt
	     *  @event
	     *  @param {event} e jQuery event object
	     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	     *  @param {int} column Column index
	     *  @param {bool} vis `false` if column now hidden, or `true` if visible
	     */

	    return $.fn.dataTable;
	}));

	}(window, document));




	/*! DataTables Bootstrap 3 integration
	 * ©2011-2014 SpryMedia Ltd - datatables.net/license
	 */

	/**
	 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
	 * DataTables 1.10 or newer.
	 *
	 * This file sets the defaults and adds options to DataTables to style its
	 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
	 * for further information.
	 */
	(function(window, document, undefined){

	var factory = function( $, DataTable ) {
	"use strict";


	/* Set the defaults for DataTables initialisation */
	$.extend( true, DataTable.defaults, {
	    dom:
	        "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
	        "<'row'<'col-sm-12'tr>>" +
	        "<'row'<'col-sm-6'i><'col-sm-6'p>>",
	    renderer: 'bootstrap'
	} );


	/* Default class modification */
	$.extend( DataTable.ext.classes, {
	    sWrapper:      "dataTables_wrapper form-inline dt-bootstrap",
	    sFilterInput:  "form-control input-sm",
	    sLengthSelect: "form-control input-sm"
	} );


	/* Bootstrap paging button renderer */
	DataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {
	    var api     = new DataTable.Api( settings );
	    var classes = settings.oClasses;
	    var lang    = settings.oLanguage.oPaginate;
	    var btnDisplay, btnClass;

	    var attach = function( container, buttons ) {
	        var i, ien, node, button;
	        var clickHandler = function ( e ) {
	            e.preventDefault();
	            if ( !$(e.currentTarget).hasClass('disabled') ) {
	                api.page( e.data.action ).draw( false );
	            }
	        };

	        for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
	            button = buttons[i];

	            if ( $.isArray( button ) ) {
	                attach( container, button );
	            }
	            else {
	                btnDisplay = '';
	                btnClass = '';

	                switch ( button ) {
	                    case 'ellipsis':
	                        btnDisplay = '&hellip;';
	                        btnClass = 'disabled';
	                        break;

	                    case 'first':
	                        btnDisplay = lang.sFirst;
	                        btnClass = button + (page > 0 ?
	                            '' : ' disabled');
	                        break;

	                    case 'previous':
	                        btnDisplay = lang.sPrevious;
	                        btnClass = button + (page > 0 ?
	                            '' : ' disabled');
	                        break;

	                    case 'next':
	                        btnDisplay = lang.sNext;
	                        btnClass = button + (page < pages-1 ?
	                            '' : ' disabled');
	                        break;

	                    case 'last':
	                        btnDisplay = lang.sLast;
	                        btnClass = button + (page < pages-1 ?
	                            '' : ' disabled');
	                        break;

	                    default:
	                        btnDisplay = button + 1;
	                        btnClass = page === button ?
	                            'active' : '';
	                        break;
	                }

	                if ( btnDisplay ) {
	                    node = $('<li>', {
	                            'class': classes.sPageButton+' '+btnClass,
	                            'aria-controls': settings.sTableId,
	                            'tabindex': settings.iTabIndex,
	                            'id': idx === 0 && typeof button === 'string' ?
	                                settings.sTableId +'_'+ button :
	                                null
	                        } )
	                        .append( $('<a>', {
	                                'href': '#'
	                            } )
	                            .html( btnDisplay )
	                        )
	                        .appendTo( container );

	                    settings.oApi._fnBindAction(
	                        node, {action: button}, clickHandler
	                    );
	                }
	            }
	        }
	    };

	    attach(
	        $(host).empty().html('<ul class="pagination"/>').children('ul'),
	        buttons
	    );
	};


	/*
	 * TableTools Bootstrap compatibility
	 * Required TableTools 2.1+
	 */
	if ( DataTable.TableTools ) {
	    // Set the classes that TableTools uses to something suitable for Bootstrap
	    $.extend( true, DataTable.TableTools.classes, {
	        "container": "DTTT btn-group",
	        "buttons": {
	            "normal": "btn btn-default",
	            "disabled": "disabled"
	        },
	        "collection": {
	            "container": "DTTT_dropdown dropdown-menu",
	            "buttons": {
	                "normal": "",
	                "disabled": "disabled"
	            }
	        },
	        "print": {
	            "info": "DTTT_print_info"
	        },
	        "select": {
	            "row": "active"
	        }
	    } );

	    // Have the collection use a bootstrap compatible drop down
	    $.extend( true, DataTable.TableTools.DEFAULTS.oTags, {
	        "collection": {
	            "container": "ul",
	            "button": "li",
	            "liner": "a"
	        }
	    } );
	}

	}; // /factory


	// Define as an AMD module if possible
	if ( true ) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	else if ( typeof exports === 'object' ) {
	    // Node/CommonJS
	    factory( require('jQuery'), require('datatables') );
	}
	else if ( jQuery ) {
	    factory( jQuery, jQuery.fn.dataTable);
	}


	})(window, document);



/***/ }
/******/ ]);